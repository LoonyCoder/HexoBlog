{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/author.jpg","path":"images/author.jpg","modified":0,"renderable":0},{"_id":"source/images/20180127210359151.png","path":"images/20180127210359151.png","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/table.png","path":"images/table.png","modified":0,"renderable":0},{"_id":"source/images/mapperxml.png","path":"images/mapperxml.png","modified":0,"renderable":0},{"_id":"source/images/test.png","path":"images/test.png","modified":0,"renderable":0},{"_id":"source/images/vue2.png","path":"images/vue2.png","modified":0,"renderable":0},{"_id":"source/images/vue5.png","path":"images/vue5.png","modified":0,"renderable":0},{"_id":"source/images/vue6.png","path":"images/vue6.png","modified":0,"renderable":0},{"_id":"source/images/vue3.png","path":"images/vue3.png","modified":0,"renderable":0},{"_id":"source/images/vue4.png","path":"images/vue4.png","modified":0,"renderable":0},{"_id":"source/images/vue1.png","path":"images/vue1.png","modified":0,"renderable":0},{"_id":"source/images/String1.png","path":"images/String1.png","modified":0,"renderable":0},{"_id":"source/images/DomaticBind.png","path":"images/DomaticBind.png","modified":0,"renderable":0},{"_id":"source/images/stack.png","path":"images/stack.png","modified":0,"renderable":0},{"_id":"source/images/shiro2.png","path":"images/shiro2.png","modified":0,"renderable":0},{"_id":"source/images/shiro1.png","path":"images/shiro1.png","modified":0,"renderable":0},{"_id":"source/images/testResult.png","path":"images/testResult.png","modified":0,"renderable":0},{"_id":"source/images/vue12.png","path":"images/vue12.png","modified":0,"renderable":0},{"_id":"source/images/vue10.png","path":"images/vue10.png","modified":0,"renderable":0},{"_id":"source/images/vue13.png","path":"images/vue13.png","modified":0,"renderable":0},{"_id":"source/images/vue14.png","path":"images/vue14.png","modified":0,"renderable":0},{"_id":"source/images/vue8.png","path":"images/vue8.png","modified":0,"renderable":0},{"_id":"source/images/vue11.png","path":"images/vue11.png","modified":0,"renderable":0},{"_id":"source/images/vue7.png","path":"images/vue7.png","modified":0,"renderable":0},{"_id":"source/images/vue9.png","path":"images/vue9.png","modified":0,"renderable":0},{"_id":"source/images/vue18.png","path":"images/vue18.png","modified":0,"renderable":0},{"_id":"source/images/vue20.png","path":"images/vue20.png","modified":0,"renderable":0},{"_id":"source/images/vue15.png","path":"images/vue15.png","modified":0,"renderable":0},{"_id":"source/images/vue17.png","path":"images/vue17.png","modified":0,"renderable":0},{"_id":"source/images/vue16.png","path":"images/vue16.png","modified":0,"renderable":0},{"_id":"source/images/vue19.png","path":"images/vue19.png","modified":0,"renderable":0},{"_id":"source/images/execAfter.png","path":"images/execAfter.png","modified":0,"renderable":0},{"_id":"source/images/execBefore.png","path":"images/execBefore.png","modified":0,"renderable":0},{"_id":"source/images/execAfter1.png","path":"images/execAfter1.png","modified":0,"renderable":0},{"_id":"source/images/execResult2.png","path":"images/execResult2.png","modified":0,"renderable":0},{"_id":"source/images/execResult1.png","path":"images/execResult1.png","modified":0,"renderable":0},{"_id":"source/images/mybatis1.png","path":"images/mybatis1.png","modified":0,"renderable":0},{"_id":"source/images/mybatis2.png","path":"images/mybatis2.png","modified":0,"renderable":0},{"_id":"source/images/mybatis3.png","path":"images/mybatis3.png","modified":0,"renderable":0},{"_id":"source/images/mybatis4.png","path":"images/mybatis4.png","modified":0,"renderable":0},{"_id":"source/images/author.png","path":"images/author.png","modified":0,"renderable":0},{"_id":"source/images/nginx.jpg","path":"images/nginx.jpg","modified":0,"renderable":0},{"_id":"source/images/nginx4.png","path":"images/nginx4.png","modified":0,"renderable":0},{"_id":"source/images/nginx5.png","path":"images/nginx5.png","modified":0,"renderable":0},{"_id":"source/images/nginx6.png","path":"images/nginx6.png","modified":0,"renderable":0},{"_id":"source/images/nginx7.png","path":"images/nginx7.png","modified":0,"renderable":0},{"_id":"source/images/nginx3.png","path":"images/nginx3.png","modified":0,"renderable":0},{"_id":"source/images/nginx1.png","path":"images/nginx1.png","modified":0,"renderable":0},{"_id":"source/images/nginx2.png","path":"images/nginx2.png","modified":0,"renderable":0},{"_id":"source/images/docker1.jpg","path":"images/docker1.jpg","modified":1,"renderable":0},{"_id":"source/images/docker11.png","path":"images/docker11.png","modified":1,"renderable":0},{"_id":"source/images/docker10.png","path":"images/docker10.png","modified":1,"renderable":0},{"_id":"source/images/docker12.png","path":"images/docker12.png","modified":1,"renderable":0},{"_id":"source/images/docker3.png","path":"images/docker3.png","modified":1,"renderable":0},{"_id":"source/images/docker4.png","path":"images/docker4.png","modified":1,"renderable":0},{"_id":"source/images/docker6.png","path":"images/docker6.png","modified":1,"renderable":0},{"_id":"source/images/docker8.png","path":"images/docker8.png","modified":1,"renderable":0},{"_id":"source/images/docker9.png","path":"images/docker9.png","modified":1,"renderable":0},{"_id":"source/images/docker5.png","path":"images/docker5.png","modified":1,"renderable":0},{"_id":"source/images/docker2.png","path":"images/docker2.png","modified":1,"renderable":0},{"_id":"source/images/docker7.png","path":"images/docker7.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1577160919726},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1577160919726},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1577160919727},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1577160919727},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1577160919726},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1577160919732},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1577159630439},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1577160919727},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1577160919727},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1577160919727},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1577160919727},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1577160919727},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1577160919727},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1577160919728},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1577160919728},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1577160919728},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1577160919728},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1577160919728},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1577160919733},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1577160919728},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1577160919732},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1577160919732},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1577160919732},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1577160919732},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1577160919731},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1577160919731},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1577160919731},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1577160919731},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1577160919731},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1577160919731},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1577160919731},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1577160919731},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1577160919728},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1577160919729},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1577160919730},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1577160919730},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1577160919733},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1577160919750},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577160919751},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1577160919757},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577160919751},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577160919752},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577160919751},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577160919754},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577160919752},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577160919752},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577160919755},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1577160919737},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577160919757},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1577160919730},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1577160919730},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1577160919730},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1577160919730},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1577160919730},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1577160919730},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1577160919733},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1577160919733},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1577160919733},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1577160919734},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1577160919734},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1577160919735},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1577160919735},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1577160919735},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1577160919735},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1577160919735},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1577160919736},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1577160919737},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577160919739},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577160919740},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577160919753},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577160919753},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577160919746},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577160919753},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577160919753},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577160919754},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577160919754},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577160919745},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577160919744},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1577160919750},{"_id":"public/2019/12/24/hello-world/index.html","hash":"fe0685d8397c8a18cd272b034decff57bb257809","modified":1577163273637},{"_id":"public/index.html","hash":"1b692592fe21be3f61610bdb7183e1d757d83994","modified":1581599810607},{"_id":"public/archives/index.html","hash":"814f71f70b7592e71bb7d25972663d0abb6e368b","modified":1581599810607},{"_id":"public/archives/2019/index.html","hash":"660c06324a924891437327b422571bf4a24691f2","modified":1581599810607},{"_id":"public/archives/2019/12/index.html","hash":"f3f26ce1013378896ed6bb61c697611464c3e488","modified":1581599810607},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577163273637},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577163273637},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577163273637},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577163273637},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577163273637},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577163273637},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577163273637},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577163273637},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577163273637},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577163273637},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577163273637},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1577163273637},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577163273637},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577163273637},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577163273637},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577163273637},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577163273637},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577163273637},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1577163273637},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577163273637},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577163273637},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1577163273637},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577163273637},{"_id":"source/.DS_Store","hash":"c4ed4450451fe512038237237f4f44940c061f89","modified":1581582286750},{"_id":"source/_posts/.DS_Store","hash":"16df4670e1e834dc1a974908e7741f2fe16e51e6","modified":1581598404814},{"_id":"source/_posts/LoonyCoderBlog.md","hash":"1e6fb2c0e02d3749a6c586bd71a408dd79fec5af","modified":1577171599263},{"_id":"public/2019/12/24/LoonyCoderBlog/index.html","hash":"5ed753047678340ba9a98de7807ada96dee467c6","modified":1577174023888},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1577167056866},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1577167056866},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1577167056866},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1577167056866},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1577167056867},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1577167056867},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1577167056867},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1577167056867},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1577167056867},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1577167056867},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1577167056867},{"_id":"themes/next/_config.yml","hash":"010d2da51167dfa49a04c03d11b9561e3b9589f9","modified":1581579581967},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1577167056867},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1577167056868},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1577167056868},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1577167056884},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1577167056866},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1577167056866},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1577167056866},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1577167056866},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1577167056868},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1577167056868},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1577167056868},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1577167056868},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1577167056869},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1577167056869},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1577167056869},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1577167056869},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1577167056869},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1577167056869},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1577167056869},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1577167056869},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1577167056869},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f9f0ba24ffaa0028245de3da9525958d6715281c","modified":1577253520909},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1577167056869},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1577167056870},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1577167056870},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1577167056878},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1577167056878},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1577167056878},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1577167056878},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1577167056885},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1577167056878},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1577167056878},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1577167056879},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1577167056886},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1577167056940},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1577167056940},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1577167056940},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577167056905},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1577167056870},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1577167056870},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1577167056870},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1577167056870},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1577167056871},{"_id":"themes/next/layout/_macro/post.swig","hash":"b152ca6819b5ab126e39ba0d087638206cec8ec4","modified":1578128920555},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1577167056871},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1577167056871},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1577167056871},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2b1aedc521b7cc12bf7a76a6cacfef781f453e3d","modified":1578046000214},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1577167056871},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1577167056872},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1577167056872},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"98df9cd472f255a283e2c72002a4a4f4dc84eafc","modified":1581576098862},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1577167056872},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1577167056873},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1577167056873},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1577167056874},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1577167056876},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1577167056876},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1577167056876},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1577167056877},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1577167056877},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1577167056877},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1577167056877},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1577167056886},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1577167056886},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1577167056887},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1577167056887},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1577167056887},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1577167056887},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1577167056888},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1577167056888},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1577167056888},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1577167056905},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577167056905},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577167056905},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1577167056905},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577167056905},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577167056905},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577167056906},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577167056906},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577167056906},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577167056906},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577167056907},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577167056906},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577167056907},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577167056907},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1577167056908},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577167056908},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577167056908},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577167056908},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577167056909},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1576588786000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1576588786000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577167056899},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577167056900},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577167056900},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577167056904},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577167056905},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1577167056872},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1577167056872},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1577167056872},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1577167056872},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1577167056872},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1577167056872},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1577167056872},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1577167056873},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1577167056873},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1577167056873},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1576588786000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1576588786000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1577167056874},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1577167056874},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1577167056874},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"b04e4670b8744ba540b7b64fec0bcc3a88a67f24","modified":1581576185282},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1577167056874},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1577167056874},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1577167056875},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1577167056875},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1577167056875},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1577167056875},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1577167056875},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1577167056875},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1577167056875},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1577167056875},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1577167056875},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1577167056876},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1577167056876},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1577167056876},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1577167056876},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1577167056876},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1577167056876},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1577167056876},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1577167056877},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1577167056878},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1577167056878},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1577167056878},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"0f1cd21d5770e75518da48140a376e39e9ca6a97","modified":1578045222236},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1577167056900},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1577167056899},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1577167056900},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"0f45c255ae5408d29f1dcb61a52db8185133390f","modified":1581576682151},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1577167056904},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1577167056904},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1577167056904},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1577167056909},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1577167056909},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1577167056909},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1577167056909},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1577167056910},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1577167056910},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1577167056910},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1577167056910},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1577167056911},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1577167056912},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1577167056912},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1577167056917},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1577167056918},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1577167056918},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1577167056915},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1577167056918},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1577167056921},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1577167056921},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1577167056921},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1577167056922},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1577167056922},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1577167056922},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577167056922},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1577167056922},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1577167056921},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1577167056931},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1577167056931},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1577167056931},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1577167056932},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1577167056932},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1577167056932},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1577167056932},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1577167056933},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1577167056933},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1577167056932},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1577167056933},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1577167056933},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1577167056933},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1577167056933},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1577167056933},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1577167056933},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1577167056934},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1577167056934},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1577167056934},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1577167056934},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1577167056934},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1577167056934},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1577167056934},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1577167056934},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1577167056935},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1577167056935},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1577167056935},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1577167056938},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577167056939},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1577167056938},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1577167056939},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577167056939},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1577167056931},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1577167056877},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1577167056877},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1577167056889},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1577167056889},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1577167056889},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1577167056889},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1577167056889},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1577167056892},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1577167056896},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1577167056898},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1577167056899},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1577167056899},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1577167056899},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1577167056899},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1577167056899},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1577167056899},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1577167056900},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1577167056900},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1577167056900},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1577167056900},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1577167056900},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3cf08d36232790e0470c9411c93eb1a1b1bd47ac","modified":1577174013887},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1577167056902},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1577167056902},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1577167056902},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1577167056902},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1577167056902},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1577167056902},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1577167056902},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1577167056911},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1577167056914},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1577167056913},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1577167056914},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577167056918},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577167056918},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577167056918},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577167056919},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577167056919},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577167056918},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1577167056920},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1577167056920},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1577167056920},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1577167056921},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1577167056921},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577167056922},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577167056923},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577167056923},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1577167056937},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1577167056938},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1577167056914},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577167056931},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1577167056939},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1577167056889},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1577167056890},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1577167056890},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1577167056890},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1577167056890},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1577167056890},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1577167056891},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1577167056891},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1577167056891},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1577167056891},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1577167056891},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1577167056892},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1577167056892},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1577167056892},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1577167056892},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1577167056892},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1577167056893},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1577167056893},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1577167056893},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1577167056893},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1577167056893},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1577167056893},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1577167056894},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1577167056894},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1577167056894},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1577167056894},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1577167056894},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1577167056894},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1577167056894},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1577167056895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1577167056896},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1577167056896},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1577167056896},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1577167056896},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1577167056896},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1577167056896},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1577167056897},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1577167056897},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1577167056896},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1577167056897},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1577167056897},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1577167056897},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1577167056897},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1577167056898},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1577167056898},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1577167056898},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1577167056898},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1577167056898},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1577167056898},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1577167056898},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1577167056898},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1577167056901},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1577167056902},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1577167056912},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1577167056912},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1577167056913},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1577167056913},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1577167056913},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1577167056919},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577167056919},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577167056919},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577167056919},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1577167056919},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1577167056919},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1577167056925},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1577167056929},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577167056930},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577167056926},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1577167056917},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1577167056937},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1577167056928},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577167173083},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577167173083},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1577167173083},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577167173083},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577167173083},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577167173083},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577167173083},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577167173083},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577167173083},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577167173083},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577167173083},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1577167173083},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577167173083},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577167173083},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577167173083},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577167173083},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577167173083},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577167173083},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1577167173083},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577167173083},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577167173083},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577167173083},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577167173083},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577167173083},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577167173083},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577167173083},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577167173083},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1577167173083},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1577167173083},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1577167173083},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1577167173083},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577167173083},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1577167173083},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577167173083},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577167173083},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1577167173083},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1577167173083},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1577167173083},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1577167173083},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1577167173083},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1577167173083},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1577167173083},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1577167173083},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1577167173083},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1577167173083},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1577167173083},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1577167173083},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1577167173083},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1577167173083},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1577167173083},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1577167173083},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1577167173083},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1577167173083},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1577167173083},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1577167173083},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1577167173083},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1577167173083},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1577167173083},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577167173083},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1577167173083},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1577167173083},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1577167173083},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1577167173083},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1577167173083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1577167173083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577167173083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577167173083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1577167173083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1577167173083},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1577167173083},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1577167173083},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1577167173083},{"_id":"public/css/main.css","hash":"19b5e6767722577f889817bb048290cc989afe79","modified":1577167173083},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1577167173083},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1577167173083},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1577167173083},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1577167173083},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1577167173083},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1577167173083},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577167173083},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1577167173083},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1577167173083},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1577167173083},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1577167173083},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1577167173083},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1577167173083},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1577167173083},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577167173083},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577167173083},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1577167173083},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1577167173083},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1577167173083},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1577167173083},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1577167173083},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577167173083},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1577167173083},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1577167173083},{"_id":"themes/next/.DS_Store","hash":"b7a93e5611c08730dac24fade174540958a9f6b8","modified":1581578250108},{"_id":"source/_posts/index.md","hash":"60369bd241e1e4d7538ae59b7f2bb3393b01c221","modified":1577175558143},{"_id":"themes/next/layout/.DS_Store","hash":"e3bfccf18081b9012fcc260f4e84735de2bed7ce","modified":1581576649168},{"_id":"themes/next/source/.DS_Store","hash":"ab3c2e7949b01cfa5bcca6daea440fc4016e3353","modified":1581578102861},{"_id":"public/2019/12/24/index/index.html","hash":"030e229432d4489fb3148489767b0f4c29f651da","modified":1577241719248},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"137b2b33df29f70c89991676eaa273572ab43828","modified":1578043972986},{"_id":"themes/next/source/css/.DS_Store","hash":"39d63c562f5530101d1c86cec448002f3df1732f","modified":1581578244985},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"69cb863623e9e0a400e75e37175cd1b0877e4fea","modified":1577174282939},{"_id":"themes/next/source/css/_schemes/Muse/.DS_Store","hash":"d16a403c0d7ebc16e6589ed78ab6d7498c11a43a","modified":1577173807827},{"_id":"themes/next/source/css/_schemes/Mist/.DS_Store","hash":"94694524b02635304624ed506d64ebd71164a579","modified":1577174270266},{"_id":"source/_posts/blog.md","hash":"5c3da39ac9ec83c68f1fd5fc97d489d990c29267","modified":1577244811687},{"_id":"public/2019/12/24/blog/index.html","hash":"ed81b862596a9cf18eb9a7217d9d634e2dad7df0","modified":1577245069818},{"_id":"source/_posts/about/index.md","hash":"60369bd241e1e4d7538ae59b7f2bb3393b01c221","modified":1577175558143},{"_id":"public/2019/12/24/about/index/index.html","hash":"32afe66b9fbd3d50dc08d03b0bf8396d3e771ae5","modified":1577240791418},{"_id":"source/_posts/index/.DS_Store","hash":"881857a47ee12476811d89432479c1c00026259b","modified":1577240778444},{"_id":"source/_posts/about/.DS_Store","hash":"a906525de297e8b40766c156e6b9aa874c5ffa79","modified":1577240720589},{"_id":"source/_posts/index/blog.md","hash":"1e6fb2c0e02d3749a6c586bd71a408dd79fec5af","modified":1577171599263},{"_id":"public/2019/12/24/index/blog/index.html","hash":"ae813f568fa15d241af673259655e92ac1f80abf","modified":1577240791418},{"_id":"source/about/.DS_Store","hash":"a906525de297e8b40766c156e6b9aa874c5ffa79","modified":1577240720589},{"_id":"source/about/index.md","hash":"62004f50b75976b16efaa0927ed3c89c2cd9dd0e","modified":1577244549327},{"_id":"source/index/blog.md","hash":"1e6fb2c0e02d3749a6c586bd71a408dd79fec5af","modified":1577171599263},{"_id":"source/index/.DS_Store","hash":"881857a47ee12476811d89432479c1c00026259b","modified":1577240778444},{"_id":"public/about/index.html","hash":"ddcd48f1d6287ab3a684e062fd58ee271ca185e1","modified":1581599810607},{"_id":"public/index/blog.html","hash":"e0b6b86369ef918de7646677b79c581472587e4e","modified":1577241719248},{"_id":"source/_posts/blog2_index.md","hash":"9d106aff94c2d00bec0ef9950fa2af3e0741b4d3","modified":1577708611886},{"_id":"source/_posts/blog_index.md","hash":"54b0172c2f9f3082b5a964763f19c793db7158a8","modified":1577708430769},{"_id":"public/2019/12/24/blog2_index/index.html","hash":"1f387df7d54add3b6fd00e120c88a663f051f91a","modified":1577708365996},{"_id":"public/2019/12/24/blog_index/index.html","hash":"63518d0c447fd5867e1c9a298b10aebd951412d9","modified":1577708544285},{"_id":"source/categories/blog_index.md","hash":"32a651c3bfd5a3de19ed2eaf79dcc97501e8fbfc","modified":1577246083571},{"_id":"source/categories/index.md","hash":"e9e615282832f88d8f4750494baa0cb0e8b3e023","modified":1577254032125},{"_id":"source/tags/index.md","hash":"10386ed21a0554d390c73e5425d86f146fe2bd24","modified":1577254440531},{"_id":"source/tags/blog_index.md","hash":"32a651c3bfd5a3de19ed2eaf79dcc97501e8fbfc","modified":1577246083571},{"_id":"source/tags/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1577249074694},{"_id":"public/categories/index.html","hash":"b00ab5c221bede6dce642bcca2410beb6d8bc5e1","modified":1581599810607},{"_id":"public/tags/index.html","hash":"d1b538553324263a55c85dfda09da2557a20c2a4","modified":1581599810607},{"_id":"public/categories/blog_index.html","hash":"a056fa3f12b722544d4709394a472d4347b11917","modified":1577249095275},{"_id":"public/tags/blog_index.html","hash":"fa3e16b1b2b1e62349ae8a62d355cea981b052d7","modified":1577249095275},{"_id":"source/categories/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1577249180368},{"_id":"public/2019/12/25/blog2_index/index.html","hash":"c7964eb2cfdf2301490ee0b895aa916d32e59c3d","modified":1577708634354},{"_id":"public/categories/web前端/index.html","hash":"768ec1fce19d3b7f29c8a1e0b6deef7b9f6758cc","modified":1577708544285},{"_id":"public/tags/web/index.html","hash":"59382b7e3b8024fd075f0d40d6f9797ccc1d2880","modified":1577708544285},{"_id":"public/tags/hexo/index.html","hash":"10359e7e25fdd5bfca532b64cb44c6dd7215b1d0","modified":1577708544285},{"_id":"public/tags/github/index.html","hash":"671dd3a4c4f1a78d06255c22704193294417527a","modified":1577708544285},{"_id":"source/images/author.jpg","hash":"bf13ddca01c2e6aec062848c81aa256f3a45c8b9","modified":1577255793277},{"_id":"public/images/author.jpg","hash":"bf13ddca01c2e6aec062848c81aa256f3a45c8b9","modified":1577256016811},{"_id":"source/_posts/JavaBasic.md","hash":"f4dc36d6c4182994f6611c6ede208ad3c9e70b5e","modified":1578128942196},{"_id":"source/images/20180127210359151.png","hash":"b328ce766e5d959221b06df896ae2d2559e961ac","modified":1577705348278},{"_id":"public/categories/Java/index.html","hash":"6b105c2b31240ba1d161da333a9acdc80c3364ee","modified":1581599810607},{"_id":"public/tags/Java/index.html","hash":"7de9e340bac671f1dc6c613e5de8ea8a8c9bedd7","modified":1581599810607},{"_id":"public/tags/Java基础/index.html","hash":"7135a96986143a9a02d694bd4840fe8a975c9c8e","modified":1581599810607},{"_id":"public/2019/12/24/JavaBasic/index.html","hash":"42ee62862d01d5f919dec985218139126b9c76d6","modified":1577708365996},{"_id":"public/images/20180127210359151.png","hash":"b328ce766e5d959221b06df896ae2d2559e961ac","modified":1577708123240},{"_id":"public/2019/12/30/JavaBasic/index.html","hash":"b47d528b358968ded923935e4703cb11ff88ee92","modified":1578302681339},{"_id":"source/_posts/MybatisDemo.md","hash":"e6298ebbeb94aae8b9998257dbd40eed430b96e7","modified":1581434142281},{"_id":"source/images/2.png","hash":"813b2e528a9395cdd427da48a5ce2a0d3b830a6c","modified":1578041694100},{"_id":"source/images/3.png","hash":"2aa599677842864f1c5d006393a7cd8bb44ea174","modified":1578041708744},{"_id":"source/images/1.png","hash":"dbaa036550e513533d58e64467adb126c6875146","modified":1578041671922},{"_id":"source/images/test.png","hash":"2b4606ba3e36b0bb37dd46cdaf830fb48d43c217","modified":1578043236266},{"_id":"source/images/mapperxml.png","hash":"9db12bf3362ac599f886a4979465ab915f8b6c9f","modified":1578042997488},{"_id":"source/images/table.png","hash":"0a08748bb13db763c5977ea378124155c0d1cbd2","modified":1581433608572},{"_id":"public/categories/Java/数据库/index.html","hash":"1bcd1eb80f2d91fbf0b3ebdc54516fe2b5d9475b","modified":1578646612232},{"_id":"public/archives/2019/01/index.html","hash":"67314309aa737b5cb8e99bfd720ddf2fe8e21f14","modified":1581487497219},{"_id":"public/tags/Java框架/index.html","hash":"4cf5e20ca0d97c0ddf458dd3e26d980083f4f460","modified":1578646612232},{"_id":"public/2019/01/03/MybatisDemo/index.html","hash":"76d6da589a0dbbef61d4af5a680d18fbed98fb02","modified":1578043544355},{"_id":"public/images/2.png","hash":"813b2e528a9395cdd427da48a5ce2a0d3b830a6c","modified":1578043544355},{"_id":"public/images/test.png","hash":"2b4606ba3e36b0bb37dd46cdaf830fb48d43c217","modified":1578043544355},{"_id":"public/images/mapperxml.png","hash":"9db12bf3362ac599f886a4979465ab915f8b6c9f","modified":1578043544355},{"_id":"public/images/3.png","hash":"2aa599677842864f1c5d006393a7cd8bb44ea174","modified":1578043544355},{"_id":"public/images/1.png","hash":"dbaa036550e513533d58e64467adb126c6875146","modified":1578043544355},{"_id":"public/images/table.png","hash":"0a08748bb13db763c5977ea378124155c0d1cbd2","modified":1581434175858},{"_id":"public/archives/2020/01/index.html","hash":"1c6a2177e9ed96c6559636147a17b0c40b43542a","modified":1581599810607},{"_id":"public/archives/2020/index.html","hash":"5993774ec345a0487392fdc90a74feafd3918436","modified":1581599810607},{"_id":"public/2020/01/03/MybatisDemo/index.html","hash":"a52f349498b81f5fe11d9a00a0e35d91d66a687b","modified":1578648180090},{"_id":"themes/next/scripts/.DS_Store","hash":"c23e8992957e272a90ddbb470965ec82706443ce","modified":1578128439635},{"_id":"source/_posts/Vue.md","hash":"4ad58e87405952e98044994fb1323e14c7fc0b83","modified":1581443755928},{"_id":"source/images/vue2.png","hash":"243d7ccf2b2a0162218d269f2ae5c9a0ba7a0229","modified":1578278602307},{"_id":"source/images/vue5.png","hash":"c83cb6f0dac95e114a5b2707452ace8ea4ff034e","modified":1578278922750},{"_id":"source/images/vue6.png","hash":"7f16bda0e86a7497ad8cf8b151061f4a0e83bbac","modified":1578279674830},{"_id":"source/images/vue3.png","hash":"0891de9363a546dd806f5e5fe837d3082a27565b","modified":1578278655753},{"_id":"source/images/vue4.png","hash":"1f7e4ea318bc779b25bf441aef2d7f257f4363cb","modified":1578278769965},{"_id":"source/images/vue1.png","hash":"3f8b94381119e0e93753bae326c2eb500f2333a0","modified":1578278367933},{"_id":"public/2020/01/06/Vue/index.html","hash":"2e4321bd11ffbaea70e95a010aa6609ecb6e5e1b","modified":1581435690061},{"_id":"public/tags/前端框架/index.html","hash":"7c401b25120405ad8396900e517d2a0bece30bf9","modified":1581599810607},{"_id":"public/categories/Web前端/index.html","hash":"4fbf96d7271c768a4b03b417f14935934c32a287","modified":1581599810607},{"_id":"public/images/vue2.png","hash":"243d7ccf2b2a0162218d269f2ae5c9a0ba7a0229","modified":1578281381124},{"_id":"public/images/vue5.png","hash":"c83cb6f0dac95e114a5b2707452ace8ea4ff034e","modified":1578281381124},{"_id":"public/images/vue6.png","hash":"7f16bda0e86a7497ad8cf8b151061f4a0e83bbac","modified":1578281381124},{"_id":"public/images/vue3.png","hash":"0891de9363a546dd806f5e5fe837d3082a27565b","modified":1578281381124},{"_id":"public/images/vue4.png","hash":"1f7e4ea318bc779b25bf441aef2d7f257f4363cb","modified":1578281381124},{"_id":"public/images/vue1.png","hash":"3f8b94381119e0e93753bae326c2eb500f2333a0","modified":1578281381124},{"_id":"source/_posts/JavaBasic2.md","hash":"14cc1bdbab55f39f807c6b4b82b91ae45f2a0af7","modified":1581504864309},{"_id":"source/images/String1.png","hash":"afc6a1eaabbf745686d9da1572fd7bbb842dcb70","modified":1578303346593},{"_id":"source/images/DomaticBind.png","hash":"cd7fbcd97376eafbb224edcadb690799f45c645c","modified":1578304386792},{"_id":"source/images/stack.png","hash":"44730d0212fada434d90c74a9d91a9e8f882962b","modified":1578303662507},{"_id":"source/_posts/JavaBasic1.md","hash":"f709d68896d58d83794b725006024fa200e40b40","modified":1581504857354},{"_id":"public/2019/12/30/JavaBasic2/index.html","hash":"85330ece2c7bd225e38bbc44b6c823b65182b404","modified":1581435690061},{"_id":"public/2019/12/30/JavaBasic1/index.html","hash":"9542f17606256f4979131622e275d9071e12b96a","modified":1581435690061},{"_id":"public/images/String1.png","hash":"afc6a1eaabbf745686d9da1572fd7bbb842dcb70","modified":1578304725057},{"_id":"public/images/DomaticBind.png","hash":"cd7fbcd97376eafbb224edcadb690799f45c645c","modified":1578304725057},{"_id":"public/images/stack.png","hash":"44730d0212fada434d90c74a9d91a9e8f882962b","modified":1578304725057},{"_id":"source/_posts/Shiro.md","hash":"8f2f1b3bf1ad0cf9826319eaf9fa653ff094b2fe","modified":1581504941340},{"_id":"source/images/shiro2.png","hash":"4f6181f77ddcb81619083bf96f57e85d80b39977","modified":1578646168070},{"_id":"source/images/WechatIMG11.jpeg","hash":"12b419a93c81473f9dcdbb23fdd68603d3e88656","modified":1578558608032},{"_id":"source/images/shiro1.png","hash":"5dcb3a6002f3005145da796cd6926a14f0358187","modified":1578646110972},{"_id":"source/images/1578470657291.jpg","hash":"333c926024e652c8a218b23c6035d85d48b1687d","modified":1578470681205},{"_id":"public/categories/Java框架/index.html","hash":"8c5a4106cb435f6aeb03e85de21194efc9ff797d","modified":1581599810607},{"_id":"public/tags/框架/index.html","hash":"8b83733d05092e4784de41a6cf5deec948599fc5","modified":1581599810607},{"_id":"public/tags/权限框架/index.html","hash":"e6cbf698aa69e4615b3b279d12672732f3fc1442","modified":1581599810607},{"_id":"public/2020/01/10/Shiro/index.html","hash":"8ef2daf9a9afd3a93ae37f55cdff5675112b13b0","modified":1581435690061},{"_id":"public/images/shiro1.png","hash":"5dcb3a6002f3005145da796cd6926a14f0358187","modified":1578646612232},{"_id":"public/images/shiro2.png","hash":"4f6181f77ddcb81619083bf96f57e85d80b39977","modified":1578646612232},{"_id":"public/images/WechatIMG11.jpeg","hash":"12b419a93c81473f9dcdbb23fdd68603d3e88656","modified":1578646612232},{"_id":"public/images/1578470657291.jpg","hash":"333c926024e652c8a218b23c6035d85d48b1687d","modified":1578646612232},{"_id":"public/tags/Java框架-数据库/index.html","hash":"bd1f84c3a1d867a18e5ffcb7f494944ddb8f8e40","modified":1581599810607},{"_id":"source/images/testResult.png","hash":"051a44fb9aa93e5eb79b32057dc404dd47d6b1c0","modified":1581434083929},{"_id":"public/categories/Mybatis/index.html","hash":"0fa60d5f395dba4b99481cf57697630f719fe288","modified":1581599810607},{"_id":"public/archives/2018/index.html","hash":"d08f69e32be18af8394e233ca43cdc7e745ee05f","modified":1581435690061},{"_id":"public/archives/2018/10/index.html","hash":"05ddba086c04465e700c71e746e92a0a1aca5c99","modified":1581435690061},{"_id":"public/2018/10/14/MybatisDemo/index.html","hash":"ee0e8338b7627610e08ecf63d5fed7b48cc8e7b7","modified":1581434175858},{"_id":"public/images/testResult.png","hash":"051a44fb9aa93e5eb79b32057dc404dd47d6b1c0","modified":1581434175858},{"_id":"source/_posts/Mybatis-1.md","hash":"7badc5338470f58fa6e626d94a8d0cd57d6f0eb6","modified":1581504957415},{"_id":"public/2018/10/14/Mybatis-1/index.html","hash":"8e25aed61cc498b681d1317523f03dc1837cfb01","modified":1581435690061},{"_id":"public/archives/2019/03/index.html","hash":"ec5aba8361d67ca13cb49a165c0a86fb84d32769","modified":1581487497219},{"_id":"public/archives/2019/05/index.html","hash":"7926e46e1b7b8d079c673e819973075c6a66f5fb","modified":1581487497219},{"_id":"public/2019/05/11/Shiro/index.html","hash":"e0122bbc0809ee930f736b71484b28532a46bcc0","modified":1581487497219},{"_id":"public/2019/03/01/Vue/index.html","hash":"22680c5e5fa394381d13a7be59820be06961e2de","modified":1581443778783},{"_id":"public/2019/01/21/Mybatis-1/index.html","hash":"8a62a5311057dbabdd2d6e38ac596504b72e4030","modified":1581487497219},{"_id":"public/2019/01/14/JavaBasic2/index.html","hash":"1879496b52e2e9f259e137c93869265b7b29fb4d","modified":1581487497219},{"_id":"public/2019/01/10/JavaBasic1/index.html","hash":"a0888f451c57f704490299c93f5cca0c48fde578","modified":1581487497219},{"_id":"source/_posts/Vue1.md","hash":"d2fa62d8031579e5f42bc42df6b8115abc29462c","modified":1581504877422},{"_id":"source/_posts/Vue2.md","hash":"688d82b754f310ba32be37b15a386641ffcab5fc","modified":1581504885757},{"_id":"source/images/vue12.png","hash":"c8e384250b702b349e88c87607d2f37863b93d88","modified":1581445663420},{"_id":"source/images/vue10.png","hash":"959a24b034047afbb9e3bedfaa61bb834cb3e293","modified":1581445616834},{"_id":"source/images/vue13.png","hash":"ae29ca656a3450f70ae96f806df23efa9a7b7ad7","modified":1581445712424},{"_id":"source/images/vue14.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1581445747924},{"_id":"source/images/vue8.png","hash":"a5dd7b68dd393143acedbfab8198a731b16490c5","modified":1581445514204},{"_id":"source/images/vue11.png","hash":"a02aac351c4547ec35ce456b4aa5268039ec0847","modified":1581445657708},{"_id":"source/images/vue7.png","hash":"7c8e016f4d64ab9982bd0fbe6876c9930ff69fe4","modified":1581445506029},{"_id":"source/images/vue9.png","hash":"10e13fa4ec6044c65691a4368fb88eaa018cf8f0","modified":1581445610061},{"_id":"public/2019/03/01/Vue1/index.html","hash":"4cd545eb9e75b4fede534798f8f0646dda89b649","modified":1581487497219},{"_id":"public/2019/03/01/Vue2/index.html","hash":"12f46689d14ea61762a7552b759df33017a2ee9d","modified":1581485987660},{"_id":"public/images/vue10.png","hash":"959a24b034047afbb9e3bedfaa61bb834cb3e293","modified":1581446624472},{"_id":"public/images/vue12.png","hash":"c8e384250b702b349e88c87607d2f37863b93d88","modified":1581446624472},{"_id":"public/images/vue13.png","hash":"ae29ca656a3450f70ae96f806df23efa9a7b7ad7","modified":1581446624472},{"_id":"public/images/vue8.png","hash":"a5dd7b68dd393143acedbfab8198a731b16490c5","modified":1581446624472},{"_id":"public/images/vue7.png","hash":"7c8e016f4d64ab9982bd0fbe6876c9930ff69fe4","modified":1581446624472},{"_id":"public/images/vue14.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1581446624472},{"_id":"public/images/vue11.png","hash":"a02aac351c4547ec35ce456b4aa5268039ec0847","modified":1581446624472},{"_id":"public/images/vue9.png","hash":"10e13fa4ec6044c65691a4368fb88eaa018cf8f0","modified":1581446624472},{"_id":"source/_posts/Vue3.md","hash":"f1985a5099bdef9415351092bc97a40436268c29","modified":1581504891896},{"_id":"public/2019/03/02/Vue3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581485987660},{"_id":"source/_posts/Vue4.md","hash":"3a19b4696277fd369b6b764cc50fd5142b060e24","modified":1581504897995},{"_id":"public/2019/03/04/Vue4/index.html","hash":"7e5bd3ca68a7cd66948ab65731a5f10c47f5e98e","modified":1581487497219},{"_id":"public/2019/03/02/Vue2/index.html","hash":"e46619a1ad1e56fa89cfca8276e0c2ef61b07acc","modified":1581487497219},{"_id":"source/images/vue18.png","hash":"a3230a1e0c1d945d96f132356b66b042342dce47","modified":1581487273706},{"_id":"source/images/vue20.png","hash":"794fc3e74e23a5b18bd3c19a9347d2f699798a05","modified":1581487433952},{"_id":"source/images/vue15.png","hash":"79ff3d090e6b1bb59a49dcf486655fb8ac69e704","modified":1581486670116},{"_id":"source/images/vue17.png","hash":"9d0b9d78d7a427499e03f847034942c5e2e53ead","modified":1581487119308},{"_id":"source/images/vue16.png","hash":"440b1133fee7a0d9d426531a5c1ce04688bf79bd","modified":1581487107038},{"_id":"source/images/vue19.png","hash":"29fb226b32c2c6556725a708caadec480ad5e796","modified":1581487426786},{"_id":"public/2019/03/03/Vue3/index.html","hash":"38f257be784d869a84b442b1d5a4be28cf6b5037","modified":1581487714100},{"_id":"public/images/vue20.png","hash":"794fc3e74e23a5b18bd3c19a9347d2f699798a05","modified":1581487497219},{"_id":"public/images/vue18.png","hash":"a3230a1e0c1d945d96f132356b66b042342dce47","modified":1581487497219},{"_id":"public/images/vue15.png","hash":"79ff3d090e6b1bb59a49dcf486655fb8ac69e704","modified":1581487497219},{"_id":"public/images/vue16.png","hash":"440b1133fee7a0d9d426531a5c1ce04688bf79bd","modified":1581487497219},{"_id":"public/images/vue19.png","hash":"29fb226b32c2c6556725a708caadec480ad5e796","modified":1581487497219},{"_id":"public/images/vue17.png","hash":"9d0b9d78d7a427499e03f847034942c5e2e53ead","modified":1581487497219},{"_id":"source/_posts/Mybatis-2.md","hash":"097028c6bd15f609f0ffbee6269ea61648073636","modified":1581510252135},{"_id":"source/images/execAfter.png","hash":"3278e77d428c21a8d1756a484e27ff2b9f3a69ac","modified":1581509836269},{"_id":"source/images/execBefore.png","hash":"8bcd5183e9d05152ef6cb9ae8b145f0213297d76","modified":1581509784635},{"_id":"source/images/execAfter1.png","hash":"143420e95e363e944b40b011738903624f37d15c","modified":1581510250389},{"_id":"source/images/execResult2.png","hash":"cd74a1f0dba76be0c09caf36f957411c73f72e05","modified":1581509355875},{"_id":"source/images/execResult1.png","hash":"152abfa8b8106a1f96b5ac5e1ed504f09172ed19","modified":1581508509836},{"_id":"public/archives/2019/11/index.html","hash":"3a39b373f75131d7e0f20ebda885f3df62adf055","modified":1581599810607},{"_id":"public/2020/01/03/Mybatis-1/index.html","hash":"6db641c891a97a91b8c4802272c07fccb8937983","modified":1581599810607},{"_id":"public/2020/01/06/Mybatis-2/index.html","hash":"6f4a42e8366c746b03958390007060ab13cb7978","modified":1581599810607},{"_id":"public/2019/12/12/Vue4/index.html","hash":"872fb2fb2d5c8d41702f909103dadfc1476909f4","modified":1581599810607},{"_id":"public/2019/12/12/Vue3/index.html","hash":"16da7c1e14dc16c2eebb6e09c650842d745758a4","modified":1581599810607},{"_id":"public/2019/12/10/Vue2/index.html","hash":"56549a34be378aebf365f03bf5c4251a3eb16a49","modified":1581599810607},{"_id":"public/2019/11/30/Vue1/index.html","hash":"fcb67e2c531d2153efe530effb13609f2a37312a","modified":1581599810607},{"_id":"public/2019/11/19/Shiro/index.html","hash":"1c390a9b653c362a3f5687f5968e4e5dd5ba12fe","modified":1581599810607},{"_id":"public/2019/11/14/JavaBasic1/index.html","hash":"4e13aa34b5071b8ab8058cfe2dfa024efd745a32","modified":1581599810607},{"_id":"public/2019/11/16/JavaBasic2/index.html","hash":"40a08d793345ed9e3e6b7b871764b6c42a071f16","modified":1581599810607},{"_id":"public/images/execAfter.png","hash":"3278e77d428c21a8d1756a484e27ff2b9f3a69ac","modified":1581510277165},{"_id":"public/images/execResult2.png","hash":"cd74a1f0dba76be0c09caf36f957411c73f72e05","modified":1581510277165},{"_id":"public/images/execAfter1.png","hash":"143420e95e363e944b40b011738903624f37d15c","modified":1581510277165},{"_id":"public/images/execBefore.png","hash":"8bcd5183e9d05152ef6cb9ae8b145f0213297d76","modified":1581510277165},{"_id":"public/images/execResult1.png","hash":"152abfa8b8106a1f96b5ac5e1ed504f09172ed19","modified":1581510277165},{"_id":"source/_posts/Mybatis-3.md","hash":"a72aaa61e620e3aa0570bc062ea239942707621f","modified":1581534814854},{"_id":"source/images/mybatis1.png","hash":"9a838351c61a62fe8132028bdfd29f6b275ab109","modified":1581530502928},{"_id":"public/2020/01/07/Mybatis-3/index.html","hash":"db5cbf80241a717571dbf0ace2837b3083770db0","modified":1581599810607},{"_id":"public/images/mybatis1.png","hash":"9a838351c61a62fe8132028bdfd29f6b275ab109","modified":1581530521971},{"_id":"source/images/mybatis2.png","hash":"04e416309a5093ee57bac52260b01796d2762f12","modified":1581531864281},{"_id":"public/images/mybatis2.png","hash":"04e416309a5093ee57bac52260b01796d2762f12","modified":1581531880851},{"_id":"source/images/mybatis3.png","hash":"e7f90ca5a3f2ffe5592d98e481ccb4fdb2234562","modified":1581534069883},{"_id":"source/images/mybatis4.png","hash":"24f9f9b58a7944de49211c1791486a4cdde52078","modified":1581534802028},{"_id":"public/images/mybatis3.png","hash":"e7f90ca5a3f2ffe5592d98e481ccb4fdb2234562","modified":1581534829856},{"_id":"public/images/mybatis4.png","hash":"24f9f9b58a7944de49211c1791486a4cdde52078","modified":1581534829856},{"_id":"source/_posts/Mybatis-3的副本.md","hash":"a72aaa61e620e3aa0570bc062ea239942707621f","modified":1581534814854},{"_id":"public/archives/page/2/index.html","hash":"3bd026358063b5b0d6cda465cd5caf20265f599a","modified":1581599810607},{"_id":"public/page/2/index.html","hash":"0f515283a4386bc3aa2e60156a62a71539741cc7","modified":1581599810607},{"_id":"public/2020/01/07/Mybatis-3的副本/index.html","hash":"030c72f0a970c642dbffadabac37151f9260769f","modified":1581575162586},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"d421666a745411c4c143cd6c528bdef8177ba7f8","modified":1581576649165},{"_id":"source/images/.DS_Store","hash":"d7a6e0bf4f7d28c4b09563bb65e33d3a41488559","modified":1581578499484},{"_id":"source/images/author.png","hash":"f21db080ce6a437b2e60d179015889f6e0831b05","modified":1581443959012},{"_id":"public/search.xml","hash":"09b19176e0550ede26d31a2689b0af952a02d9a1","modified":1581599810607},{"_id":"public/images/author.png","hash":"f21db080ce6a437b2e60d179015889f6e0831b05","modified":1581579600587},{"_id":"source/_posts/nginx.md","hash":"200830c4e32c6c7d9e53f75d400027e8f95b2399","modified":1581590200046},{"_id":"source/images/nginx.jpg","hash":"12ca2e6ca8e2be48c2060f61206229779ffbfcd1","modified":1581582372109},{"_id":"source/images/nginx4.png","hash":"3af3072995184f63d0a75324c02527c3e6544538","modified":1581583067456},{"_id":"source/images/nginx5.png","hash":"43a76b61becc6afdd23acb3d88177e3a03366be7","modified":1581583589558},{"_id":"source/images/nginx6.png","hash":"491b705deb7b8dcb8adb048e5a42f1c4da4b31dc","modified":1581583638130},{"_id":"source/images/nginx7.png","hash":"c17dc449825991fa932065f3b5673b7bf45d947f","modified":1581583796488},{"_id":"source/images/nginx3.png","hash":"e43356b41a6bc6349ecb16fa9ad72e7b9b366adc","modified":1581582955669},{"_id":"source/images/nginx1.png","hash":"080a8c25ed0010ce129754e6dd87459ffdeedfba","modified":1581582827546},{"_id":"source/images/nginx2.png","hash":"41ac22d5b004275b0c494fc82c73d472b689f935","modified":1581582851298},{"_id":"public/2020/01/09/nginx/index.html","hash":"3360a05da2ec97ca0302a15df674867d823a9225","modified":1581599810607},{"_id":"public/categories/Nginx/index.html","hash":"60eb6d06aa3e68e464e4c43d9616d8e216d74dfe","modified":1581599810607},{"_id":"public/tags/HTTP服务器/index.html","hash":"4708e84b0a4f9927051e194a2af76de035b9286d","modified":1581599810607},{"_id":"public/images/nginx5.png","hash":"43a76b61becc6afdd23acb3d88177e3a03366be7","modified":1581584212089},{"_id":"public/images/nginx6.png","hash":"491b705deb7b8dcb8adb048e5a42f1c4da4b31dc","modified":1581584212089},{"_id":"public/images/nginx.jpg","hash":"12ca2e6ca8e2be48c2060f61206229779ffbfcd1","modified":1581584212089},{"_id":"public/images/nginx4.png","hash":"3af3072995184f63d0a75324c02527c3e6544538","modified":1581584212089},{"_id":"public/images/nginx7.png","hash":"c17dc449825991fa932065f3b5673b7bf45d947f","modified":1581584212089},{"_id":"public/images/nginx1.png","hash":"080a8c25ed0010ce129754e6dd87459ffdeedfba","modified":1581584212089},{"_id":"public/images/nginx3.png","hash":"e43356b41a6bc6349ecb16fa9ad72e7b9b366adc","modified":1581584212089},{"_id":"public/images/nginx2.png","hash":"41ac22d5b004275b0c494fc82c73d472b689f935","modified":1581584212089},{"_id":"source/_posts/docker.md","hash":"768d67844fe1068184f11a695b3a009f742a4f9e","modified":1581599794479},{"_id":"source/images/docker1.jpg","hash":"628a21017237112a5f7feee574f72dea656b3841","modified":1581598100933},{"_id":"source/images/docker11.png","hash":"4cea5b5e07be39bcee4789978319fb85788bffc4","modified":1581599634777},{"_id":"source/images/docker10.png","hash":"befdb1c56f60e3b2ffa67b71b630d27ee04f41e4","modified":1581599577083},{"_id":"source/images/docker12.png","hash":"417444a09b3a2e3cafbcc98f64ccb060958553c3","modified":1581599685124},{"_id":"source/images/docker3.png","hash":"158912be97e1f2d0f9595c1f6aa145813b587514","modified":1581598360072},{"_id":"source/images/docker4.png","hash":"449d813a8b5178812522d40b4a5650a54380ca18","modified":1581598431432},{"_id":"source/images/docker6.png","hash":"99ce88799bbf1cd4e015c0247fdc55a032a349e6","modified":1581598705015},{"_id":"source/images/docker8.png","hash":"56f2b058f83002486d4b578da9b7d818805e34c0","modified":1581599134641},{"_id":"source/images/docker9.png","hash":"4bd8bc4b09fc496e469d47ed6aefd4f79ea4c4cd","modified":1581599477205},{"_id":"source/images/docker5.png","hash":"29d91a9acd947ef4fbec7bdcce1c7519843f9841","modified":1581598670318},{"_id":"source/images/docker2.png","hash":"dd3fc1cf3a2b234253cc58fe9ac5cf122552ea34","modified":1581598284331},{"_id":"source/images/docker7.png","hash":"a5925cf319047cf8e365b20e87adfb720fc83541","modified":1581598779300},{"_id":"public/2020/01/11/docker/index.html","hash":"c0d85727a0e0f44b111a2ba9520beafadc344613","modified":1581599810607},{"_id":"public/categories/Docker/index.html","hash":"301ace5cca9c3acc2ecd44c9a35c3ea09c051a8d","modified":1581599810607},{"_id":"public/tags/DevOps-服务器/index.html","hash":"830c0eef390e0fd7044c4733cb48d5f7b9247ada","modified":1581599810607},{"_id":"public/images/docker1.jpg","hash":"628a21017237112a5f7feee574f72dea656b3841","modified":1581599810607},{"_id":"public/images/docker11.png","hash":"4cea5b5e07be39bcee4789978319fb85788bffc4","modified":1581599810607},{"_id":"public/images/docker3.png","hash":"158912be97e1f2d0f9595c1f6aa145813b587514","modified":1581599810607},{"_id":"public/images/docker4.png","hash":"449d813a8b5178812522d40b4a5650a54380ca18","modified":1581599810607},{"_id":"public/images/docker9.png","hash":"4bd8bc4b09fc496e469d47ed6aefd4f79ea4c4cd","modified":1581599810607},{"_id":"public/images/docker6.png","hash":"99ce88799bbf1cd4e015c0247fdc55a032a349e6","modified":1581599810607},{"_id":"public/images/docker8.png","hash":"56f2b058f83002486d4b578da9b7d818805e34c0","modified":1581599810607},{"_id":"public/images/docker10.png","hash":"befdb1c56f60e3b2ffa67b71b630d27ee04f41e4","modified":1581599810607},{"_id":"public/images/docker12.png","hash":"417444a09b3a2e3cafbcc98f64ccb060958553c3","modified":1581599810607},{"_id":"public/images/docker2.png","hash":"dd3fc1cf3a2b234253cc58fe9ac5cf122552ea34","modified":1581599810607},{"_id":"public/images/docker5.png","hash":"29d91a9acd947ef4fbec7bdcce1c7519843f9841","modified":1581599810607},{"_id":"public/images/docker7.png","hash":"a5925cf319047cf8e365b20e87adfb720fc83541","modified":1581599810607}],"Category":[{"name":"web前端","_id":"ck4kwcxvg0001yt6k246pfyf4"},{"name":"Java","_id":"ck4seojjv0001h7s67lt40541"},{"name":"数据库","parent":"ck4seojjv0001h7s67lt40541","_id":"ck4xxfhf90002fs6kd64f4nma"},{"name":"Web前端","_id":"ck51vzg8z0001f96k47kf92dq"},{"name":"Java框架","_id":"ck57xfmeb0001d36kf2xdg6sh"},{"name":"Mybatis","_id":"ck6i12sa90000iws60f4bhmz8"},{"name":"Nginx","_id":"ck6kiel0p0001eys69rx74l14"},{"name":"Docker","_id":"ck6krowwc0001k5s65d5lar0s"}],"Data":[],"Page":[{"title":"序","date":"2019-12-24T06:40:40.000Z","tags":null,"_content":"\n<p style=\"text-align: center\">\n[喜欢数学和敲代码]\n</p>\n<p style=\"text-align: center\">\n[对新技术十分狂热]\n</p>\n<p style=\"text-align: center\">\n[有严重的代码洁癖]\n</p>\n<p style=\"text-align: center\">\n[2018年毕业的菜鸡]\n</p>\n<p style=\"text-align: center\">\n[初级Java开发工程师]\n</p>\n<p style=\"text-align: center\">\n[qq：212704353]\n</p>\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 序\ndate: 2019-12-24 14:40:40\ntags: \n---\n\n<p style=\"text-align: center\">\n[喜欢数学和敲代码]\n</p>\n<p style=\"text-align: center\">\n[对新技术十分狂热]\n</p>\n<p style=\"text-align: center\">\n[有严重的代码洁癖]\n</p>\n<p style=\"text-align: center\">\n[2018年毕业的菜鸡]\n</p>\n<p style=\"text-align: center\">\n[初级Java开发工程师]\n</p>\n<p style=\"text-align: center\">\n[qq：212704353]\n</p>\n\n\n\n\n","updated":"2019-12-25T03:29:09.327Z","path":"about/index.html","_id":"ck4kom6ao00006r6k1yzn2wgg","comments":1,"layout":"page","content":"<p style=\"text-align: center\">\n[喜欢数学和敲代码]\n</p>\n<p style=\"text-align: center\">\n[对新技术十分狂热]\n</p>\n<p style=\"text-align: center\">\n[有严重的代码洁癖]\n</p>\n<p style=\"text-align: center\">\n[2018年毕业的菜鸡]\n</p>\n<p style=\"text-align: center\">\n[初级Java开发工程师]\n</p>\n<p style=\"text-align: center\">\n[qq：212704353]\n</p>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p style=\"text-align: center\">\n[喜欢数学和敲代码]\n</p>\n<p style=\"text-align: center\">\n[对新技术十分狂热]\n</p>\n<p style=\"text-align: center\">\n[有严重的代码洁癖]\n</p>\n<p style=\"text-align: center\">\n[2018年毕业的菜鸡]\n</p>\n<p style=\"text-align: center\">\n[初级Java开发工程师]\n</p>\n<p style=\"text-align: center\">\n[qq：212704353]\n</p>\n\n\n\n\n"},{"title":"分类","date":"2019-12-25T06:05:28.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-12-25 14:05:28\ntype: \"categories\"\n---\n","updated":"2019-12-25T06:07:12.125Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck4kwcxv70000yt6kfhss6vnq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-12-25T06:13:27.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-12-25 14:13:27\ntype: \"tags\"\n---\n","updated":"2019-12-25T06:14:00.531Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck4kwl2zd0000356kgcuf5wqj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java基础（二）","date":"2019-11-15T16:00:00.000Z","_content":"\n###对象与类\n\n#### 对象的创建\n\n比如Student s = new Student()实例化一个对象，其实经历了如下几个过程：\n将Student.class加载到内存中\n在栈内存中给s开辟内存空间。\n在堆内存给Student类申请一个内存空间。\n给成员变量进行默认初始化，0 null false…\n自定义给成员变量初始化赋值\n初始化完毕，把堆内存地址赋值给栈内存的s变量\n\n#### Main方法剖析\n\n```bash\npublic static void main(String[] args) { ... }\n```\n\n- public: 公共的，访问权限最大，因为main方法是被JVM调用的。\n- static：静态的，不需要创建对象，通过类名就能调用，方便JVM调用。\n- void: 无返回值，因为main方法是被JVM调用的，所以给JVM返回数据没有意义。\n- main: 常见的方法入口，很多语言的入口方法都是main方法。\n- String[] args: 字符串数组，是作为命令行参数调用的。\n\n##### static关键字\n\n**static关键字特点：（可以修饰成员变量，也可修饰成员方法）**\n\n- 随着类的加载而加载\n- 优先于对象存在\n- 被类中的所有对象共享\n- 可直接通过类名调用\n\n**拓展**\n\n静态方法中没有this关键字，因为this代表当前方法对象，但static优于对象存在，所以在对象还未创建完毕static修饰的方法就被调用，此时this代表的对象还未创建。\n\n#### String\n\nString底层定义为public final class String，说明String是常量，一旦被创建就不能修改。可以查看如Integer LongString这些类的源码：\n```bash\npublic final class Integer {}\npublic final class Long {}\npublic final class String {}\n\n```\n\n这些**基本类型**，在初始化值、赋值时都是先从**常量池**中取数据，如果常量池中没有该数据，就new对象初始化为新数据。\n比如常见的一个面试题：\n```bash\nString s = \"ab\";\ns = \"abc\";\nString ss = \"ab\";\nss = new String(\"ab\");\n```\n\n这个s和ss各自创建了几个对象？答案：s创建两个对象；ss创建一个对象。因为s的常量池中有值ab，而重新赋值s = \"abc\"这个abc在s的常量池中不存在，所以new String()创建了一个新对象。ss同理分析。可以通过如下方式验证：\n```bash\nString ss = \"ab\";\nSystem.out.println(ss.hashCode());\nss = \"abc\";\nSystem.out.println(ss.hashCode());\n```\n[stack](/images/String1.png)\n\n##### StringBuffer\nString是不可变的字符串，StringBuffer是线程安全的可变字符串，用StringBuffer做字符串的拼接可以避免资源的浪费，因为String每次拼接新的字符串都是创建一个新的String对象。\n\n**String转换为StringBuffer**\n```bash\n//方式一\nString s = \"hello\";\nStringBuffer sb = new StringBuffer(s);\n//方式二\nStringBuffer sb = new StringBuffer();\nsb.append(s);\n```\n\n**StringBuffer转换成String**\n```bash\n//方式一\nStringBuffer sb = new StringBuffer(\"hello\");\nString s = new String(sb);\n//方式二\nString s = sb.toString();\n```\n\n##### 面试题\n\n> String, StringBuffer, StringBuilder 的区别？\n- String的内容不可变，StringBuffer和StringBuilder的内容都可变。\n- StringBuffer是线程同步的，数据安全，效率低；String和StringBuilder是线程不同步的，数据不安全，效率高。\n\n> StringBuffer和数组的区别？\n- 二者都是一个容器，装其他数据\n- 但StringBuffer最终是一个字符串数据；而数组可以存放多种数据，但必须是用一种数据类型。\n\n> String和StringBuffer作为参数传递\n- String可理解为特殊的引用类型，和基本类型一样，参数传递不会改变原数据内容。\n- StringBuffer作为引用类型，基本的赋值不会改变原数据内容，但是调用StringBuffer的方法去改变形式参数就会影响原数据内容。\n\n```bash\npublic class StringBufferDemo {\n    public static void main(String[] args) {\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        System.out.println(s1 + \"---\" + s2);// hello---world\n        change(s1, s2);\n        System.out.println(s1 + \"---\" + s2);// hello---world\n\n        StringBuffer sb1 = new StringBuffer(\"hello\");\n        StringBuffer sb2 = new StringBuffer(\"world\");\n        System.out.println(sb1 + \"---\" + sb2);// hello---world\n        change(sb1, sb2);\n        System.out.println(sb1 + \"---\" + sb2);// hello---worldworld\n\n    }\n\n    public static void change(StringBuffer sb1, StringBuffer sb2) {\n        sb1 = sb2;\n        sb2.append(sb1);\n    }\n\n    public static void change(String s1, String s2) {\n        s1 = s2;\n        s2 = s1 + s2;\n    }\n}\n```\n\n#### 参数传递\n\nJava中的参数传递：\n- 基本类型：形式参数的改变对实际参数没有影响。\n- 引用类型：形式参数的改变直接影响实际参数。\n\n例如：\n```bash\npublic class Demo01_Object {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        change(a, b);\n        System.out.println(\"main: a:\" + a + \", b:\" + b); //10, 20\n        int[] arr = {1, 2, 3};\n        change(arr);\n        System.out.println(\"main: \" + arr[0]); //2\n    }\n\n    private static void change(int a, int b) {\n        a = b;\n        b = a + b;\n        System.out.println(\"change: a:\" + a + \", b:\" + b); //20, 40\n    }\n\n    private static void change(int[] arr) {\n        arr[0] = arr[1];\n        System.out.println(\"change\" + arr[0]); //2\n    }\n}\n```\n\n**引入概念**：\n在Java中**一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。所有的Java对象都储存在堆内存中**。例如：Date t = new Date()其中的t就是一个对象变量，new Date()是在堆内存中开辟了一个空间，而t指向new Date()的堆内存地址。\n因此，在上述代码中a b都是基本类型，而int[]是一个引用类型，那**基本类型形式参数改变对实际参数没有影响；对象类型形式参数改变直接影响实际参数。**\n\n[stack](/images/stack.png)\n\n##### 总结\n**Java程序语言总是采用按值调用**，也就是说，方法得到的是所有参数值的一个拷贝，特别的，方法不能修改传递给他的任何变量的内容。\n- 一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。\n- 一个方法可以改变一个对象的引用状态\n- 一个方法不能让对象参数引用一个新对象\n\n比如：下列是无意义的：\n```bash\npublic static void swap(Employee x, Employee y) {\n    Employee temp = x;\n    x = y;\n    y = temp;\n}\n```\n\n当调用swap(e1, e2)时并不会改变e1和e2的对象引用，swap方法的参数x,y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。\n\n- **基本类型**（包括Integer String Long）传递的参数是参数**值**的拷贝\n\n特别是对于Integer Long String这些类型数据，在初始化、赋值的时候都是从常量池中取数据，比如IntgerCache LongCache，如果常量池中没有就重新new对象，例如：\n```bash\npublic static void main(String[] args) {\n    String s = \"123\";\n    System.out.println(\"main: \" + s.hashCode()); //48690\n    change(s);\n    change2(s);\n}\nprivate static void change(String s) {\n    s = \"123\";\n    System.out.println(\"change: \" + s.hashCode()); //48690\n}\nprivate static change2(String s) {\n    s = \"456\";\n    System.out.println(\"change2: \" + s.hashCode()); //51669\n}\n```\n\n- **引用类型**传递的参数是原对象在**堆内存的地址**的拷贝\n\n对象类型参数的传递，实际上传递这个对象堆内存地址的拷贝，所以形式参数和原参数操作的都是同一个堆内存地址，即形式参数的改变会直接影响原参数。\n\n#### 成员变量和局部变量\n成员变量和局部变量的区别：\n* 在类中的位置不同：\n   - 成员变量：在类中方法外\n   - 局部变量：在方法定义中或方法声明上\n* 在内存中的位置不同：\n   - 成员变量：在堆内存\n   - 局部变量：在栈内存\n* 声明周期不同：\n   - 成员变量：随着对象的创建而存在，随着对象的消失而消失。\n   - 局部变量：随着方法的调用而存在，随着方法调用完毕而消失\n* 初始化值不同：\n   - 成员变量：有默认初始化值\n   - 局部变量：没有默认初始化值，必须定义、赋值后才能使用\n\n#### 构造方法\n在Java中，当需要调用构造方法时，**若该类没有定义构造方法，系统会自动提供一个无参构造方法；如果该类定义了构造方法（带参构造），系统将不再提供无参构造，必须手动定义**。举例：\n```bash\npublic class Demo2_Construct {\n    public static void main(String[] args) {\n        Demo2Student student = new Demo2Student();\n        student.show();\n        // Demo2School school = new Demo2School(); //error\n    }\n}\n\nclass Demo2Student {\n    public void show() {\n        System.out.println(\"this student show\");\n    }\n}\n\nclass Demo2School {\n    private int size = 1000;\n    public Demo2School(int size) {\n        this.size = size;\n    }\n}\n```\n\n##### final\nfinal可以修改类、方法、变量。\n\n**特点**：\n- final可以修饰类，该类不能被继承。\n- final可以修饰方法，该方法不能被重写。\n- final可以修饰变量，该变量不能被重新赋值。\n\n**面试题**：final修饰局部变量的问题\n- 基本类型：被final修饰的基本类型的值不能被改变\n- 引用类型：引用类型的地址值不能被改变，但是该对象的堆内存地址是可以改变的。\n\n**初始化时机**\n被final修饰的变量必须在构造方法完毕前被初始化，比如\n```bash\npublic class Demo {\n    final int WIDTH = 12;\n    //final int HEIGHT; //error\n    final int AREA;\n    {\n        AREA = 120;\n    }\n}\n```\n\n#### 继承\n1、Java支持单继承不支持多继承，但Java支持多层继承\n2、子类只能继承父类非私有成员（成员变量、成员方法）\n3、子类不能继承父类的构造方法，但可以通过super关键字访问父类的构造方法。\n\n##### 子类和父类的关系\n**子类中的所有构造方法都默认访问父类的无参构造方法**。因为子类继承父类，并可能使用父类中的数据，所以子类初始化前一定要完成父类的初始化。所以子类每一个构造方法第一行默认都是super()。\n```bash\npublic class Demo04_Extends {\n    public static void main(String[] args) {\n        Demo04Son son = new Demo04Son();\n        son.show();\n    }\n}\n\nclass Demo04Son extends Demo04Parent{\n    private int num = 10;\n    public Demo04Son() {\n        super();\n    }\n\n    public void show() {\n        int num = 100;\n        System.out.println(num);\n        System.out.println(this.num);\n        System.out.println(super.num);\n    }\n}\n\nclass Demo04Parent {\n    public int num = 1;\n\n    public Demo04Parent() {\n        System.out.println(\"这是父类的无参构造函数\");\n    }\n}\n```\n\n##### this-super\nthis和super关键字的区别和使用场景？\n区别：\n- this: 代表当前类的对象引用\n- super: 代表父类的空间标识（可以理解为父类的引用，通过他访问父类的成员）\n场景：\n- this.成员变量/方法\n- super.成员变量/方法\n- this(…) super(…)\n\n##### 加载顺序\n```bash\npublic class Demo04_Extends2 {\n    public static void main(String[] args) {\n        Demo04Zi zi = new Demo04Zi();\n    }\n}\nclass Demo04Fu {\n    static {\n        System.out.println(\"Fu 静态代码块\");\n    }\n    {\n        System.out.println(\"Fu 构造代码块\");\n    }\n    public Demo04Fu() {\n        System.out.println(\"Fu 构造方法\");\n    }\n}\nclass Demo04Zi extends Demo04Fu{\n    static {\n        System.out.println(\"Zi 静态代码块\");\n    }\n    {\n        System.out.println(\"Zi 构造代码块\");\n    }\n    public Demo04Zi() {\n        System.out.println(\"Zi 构造方法\");\n    }\n}\n```\n\n结果：\n```bash\nFu 静态代码块\nZi 静态代码块\nFu 构造代码块\nFu 构造方法\nZi 构造代码块\nZi 构造方法\n```\n\n##### 动态绑定\n**调用对象方法的执行过程：**\n[DomaticBind](/images/DomaticBind.png)\n1.编译器首先查看对象的声明类型和方法名。如调用change(a)方法，由于存在多个change()方法，JVM会先列举该类以及其超类中访问属性为public且名为change的方法。\n2.接下来，JVM将查看调用方法时提供的参数类型，并且JVM会预先为每个类创建一个方法表**（method table）**，JVM会直接从这个方法表中寻找名为change的方法中存在一个与提供的参数类型匹配的方法，这个过程称为**重载解析**。\n3.如果是private、static、final方法或者构造器，那么JVM就能准确的知道调用哪个方法，我们将这种调用方式称为**静态绑定**。与此对应，调用的方法依赖于隐式参数的实际类型，并且在运行时实现**动态绑定**。\n4.当程序运行，并且采用动态绑定调用方法时，JVM就一定调用于此最适合的一个方法，否则从超类中继续寻找。\n\n##### 强制类型转换\n将一个类型强制转换为另外一个类型的过程称为类型转换。数值类型直接(int) double这样转换；对象引用的转换也类似，实现将某个类的对象引用转换为另一个类的对象引用。\n- **向上转型**：将一个子类的引用赋值给一个超类变量。\n- **向下转型**：将一个超类的引用赋值给一个子类变量，且必须进行类型转换。\n\n**注意**\n\n- 只能在继承层次内进行类型转换。\n- 在将超类转换成子类之前，应该使用instanceof进行检查。\n\n##### 内部类\n\n一个类存在于另一个类中方法外，这个类就称为内部类；一个类存在于另一个类方法内，这个类称为局部内部类。\n- 内部类可以直接访问外部类的成员，包括私有\n- 外部类可以访问内部类的成员，必须创建对象\n- 直接访问内部类的成员：Outer.Inner in = new Outer().new Inner()\n\n**局部内部类**\n局部内部类可以直接访问外部类的成员，在局部位置可以创建内部类对象，通过对象调用内部类成员。\n\n> 局部内部类访问局部变量注意事项?\n​局部内部类访问局部变量必须用final修饰。因为**局部内部类的声明周期比局部变量长**，局部变量随着方法的调用而存在，随着调用完毕而消失；但局部内部类不一定消失，他调用一个消失的变量就会报错。\n\n```bash\npublic class InnerClass {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        outer.show();\n    }\n}\n\nclass Outer {\n    public void show() {\n        int num2 = 10;\n        class Inner {\n            private void show() {\n                System.out.println(num2);\n            }\n        }\n        Inner inner = new Inner();\n        inner.show();\n    }\n}\n```\n此时调用不会报错，但并没有加final修饰。这个类编译后会生成InnerClass.class和Outer.class两个文件，我们来看下Outer.class:\n```bash\nclass Outer {\n    Outer() {}\n    public void show() {\n        final int num2 = 10;\n        class Inner {\n            Inner() {}\n            private void show() {\n                System.out.println(num2);\n            }\n        }\n        Inner inner = new Inner();\n        inner.show();\n    }\n}\n```\n其中的num2被自动加上了final修饰（这是因为JDK1.8的原因），所以如果你再添上num2 = 1000就会报错。\n\n> 解决办法\n上面说过了应该将num2用final修饰。其原因就是Inner类的生命周期要比num2的声明周期长，当show()方法调用完毕后num2就已经消失了，但此时Inner类在堆内存中仍然存在，他调用一个不存在的变量就会报错。而用final修饰，这个变量成为常量，在初始化内部类的时候，final num2就在内部类中生成了一份拷贝，这个拷贝和这个内部类的声明周期相同，所以不会报错。","source":"_posts/JavaBasic2.md","raw":"---\ntitle: Java基础（二）\ncategories:\n    - Java\ndate: 2019-11-16\ntags:\n\t- Java\n\t- Java基础\n\n---\n\n###对象与类\n\n#### 对象的创建\n\n比如Student s = new Student()实例化一个对象，其实经历了如下几个过程：\n将Student.class加载到内存中\n在栈内存中给s开辟内存空间。\n在堆内存给Student类申请一个内存空间。\n给成员变量进行默认初始化，0 null false…\n自定义给成员变量初始化赋值\n初始化完毕，把堆内存地址赋值给栈内存的s变量\n\n#### Main方法剖析\n\n```bash\npublic static void main(String[] args) { ... }\n```\n\n- public: 公共的，访问权限最大，因为main方法是被JVM调用的。\n- static：静态的，不需要创建对象，通过类名就能调用，方便JVM调用。\n- void: 无返回值，因为main方法是被JVM调用的，所以给JVM返回数据没有意义。\n- main: 常见的方法入口，很多语言的入口方法都是main方法。\n- String[] args: 字符串数组，是作为命令行参数调用的。\n\n##### static关键字\n\n**static关键字特点：（可以修饰成员变量，也可修饰成员方法）**\n\n- 随着类的加载而加载\n- 优先于对象存在\n- 被类中的所有对象共享\n- 可直接通过类名调用\n\n**拓展**\n\n静态方法中没有this关键字，因为this代表当前方法对象，但static优于对象存在，所以在对象还未创建完毕static修饰的方法就被调用，此时this代表的对象还未创建。\n\n#### String\n\nString底层定义为public final class String，说明String是常量，一旦被创建就不能修改。可以查看如Integer LongString这些类的源码：\n```bash\npublic final class Integer {}\npublic final class Long {}\npublic final class String {}\n\n```\n\n这些**基本类型**，在初始化值、赋值时都是先从**常量池**中取数据，如果常量池中没有该数据，就new对象初始化为新数据。\n比如常见的一个面试题：\n```bash\nString s = \"ab\";\ns = \"abc\";\nString ss = \"ab\";\nss = new String(\"ab\");\n```\n\n这个s和ss各自创建了几个对象？答案：s创建两个对象；ss创建一个对象。因为s的常量池中有值ab，而重新赋值s = \"abc\"这个abc在s的常量池中不存在，所以new String()创建了一个新对象。ss同理分析。可以通过如下方式验证：\n```bash\nString ss = \"ab\";\nSystem.out.println(ss.hashCode());\nss = \"abc\";\nSystem.out.println(ss.hashCode());\n```\n[stack](/images/String1.png)\n\n##### StringBuffer\nString是不可变的字符串，StringBuffer是线程安全的可变字符串，用StringBuffer做字符串的拼接可以避免资源的浪费，因为String每次拼接新的字符串都是创建一个新的String对象。\n\n**String转换为StringBuffer**\n```bash\n//方式一\nString s = \"hello\";\nStringBuffer sb = new StringBuffer(s);\n//方式二\nStringBuffer sb = new StringBuffer();\nsb.append(s);\n```\n\n**StringBuffer转换成String**\n```bash\n//方式一\nStringBuffer sb = new StringBuffer(\"hello\");\nString s = new String(sb);\n//方式二\nString s = sb.toString();\n```\n\n##### 面试题\n\n> String, StringBuffer, StringBuilder 的区别？\n- String的内容不可变，StringBuffer和StringBuilder的内容都可变。\n- StringBuffer是线程同步的，数据安全，效率低；String和StringBuilder是线程不同步的，数据不安全，效率高。\n\n> StringBuffer和数组的区别？\n- 二者都是一个容器，装其他数据\n- 但StringBuffer最终是一个字符串数据；而数组可以存放多种数据，但必须是用一种数据类型。\n\n> String和StringBuffer作为参数传递\n- String可理解为特殊的引用类型，和基本类型一样，参数传递不会改变原数据内容。\n- StringBuffer作为引用类型，基本的赋值不会改变原数据内容，但是调用StringBuffer的方法去改变形式参数就会影响原数据内容。\n\n```bash\npublic class StringBufferDemo {\n    public static void main(String[] args) {\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        System.out.println(s1 + \"---\" + s2);// hello---world\n        change(s1, s2);\n        System.out.println(s1 + \"---\" + s2);// hello---world\n\n        StringBuffer sb1 = new StringBuffer(\"hello\");\n        StringBuffer sb2 = new StringBuffer(\"world\");\n        System.out.println(sb1 + \"---\" + sb2);// hello---world\n        change(sb1, sb2);\n        System.out.println(sb1 + \"---\" + sb2);// hello---worldworld\n\n    }\n\n    public static void change(StringBuffer sb1, StringBuffer sb2) {\n        sb1 = sb2;\n        sb2.append(sb1);\n    }\n\n    public static void change(String s1, String s2) {\n        s1 = s2;\n        s2 = s1 + s2;\n    }\n}\n```\n\n#### 参数传递\n\nJava中的参数传递：\n- 基本类型：形式参数的改变对实际参数没有影响。\n- 引用类型：形式参数的改变直接影响实际参数。\n\n例如：\n```bash\npublic class Demo01_Object {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        change(a, b);\n        System.out.println(\"main: a:\" + a + \", b:\" + b); //10, 20\n        int[] arr = {1, 2, 3};\n        change(arr);\n        System.out.println(\"main: \" + arr[0]); //2\n    }\n\n    private static void change(int a, int b) {\n        a = b;\n        b = a + b;\n        System.out.println(\"change: a:\" + a + \", b:\" + b); //20, 40\n    }\n\n    private static void change(int[] arr) {\n        arr[0] = arr[1];\n        System.out.println(\"change\" + arr[0]); //2\n    }\n}\n```\n\n**引入概念**：\n在Java中**一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。所有的Java对象都储存在堆内存中**。例如：Date t = new Date()其中的t就是一个对象变量，new Date()是在堆内存中开辟了一个空间，而t指向new Date()的堆内存地址。\n因此，在上述代码中a b都是基本类型，而int[]是一个引用类型，那**基本类型形式参数改变对实际参数没有影响；对象类型形式参数改变直接影响实际参数。**\n\n[stack](/images/stack.png)\n\n##### 总结\n**Java程序语言总是采用按值调用**，也就是说，方法得到的是所有参数值的一个拷贝，特别的，方法不能修改传递给他的任何变量的内容。\n- 一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。\n- 一个方法可以改变一个对象的引用状态\n- 一个方法不能让对象参数引用一个新对象\n\n比如：下列是无意义的：\n```bash\npublic static void swap(Employee x, Employee y) {\n    Employee temp = x;\n    x = y;\n    y = temp;\n}\n```\n\n当调用swap(e1, e2)时并不会改变e1和e2的对象引用，swap方法的参数x,y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。\n\n- **基本类型**（包括Integer String Long）传递的参数是参数**值**的拷贝\n\n特别是对于Integer Long String这些类型数据，在初始化、赋值的时候都是从常量池中取数据，比如IntgerCache LongCache，如果常量池中没有就重新new对象，例如：\n```bash\npublic static void main(String[] args) {\n    String s = \"123\";\n    System.out.println(\"main: \" + s.hashCode()); //48690\n    change(s);\n    change2(s);\n}\nprivate static void change(String s) {\n    s = \"123\";\n    System.out.println(\"change: \" + s.hashCode()); //48690\n}\nprivate static change2(String s) {\n    s = \"456\";\n    System.out.println(\"change2: \" + s.hashCode()); //51669\n}\n```\n\n- **引用类型**传递的参数是原对象在**堆内存的地址**的拷贝\n\n对象类型参数的传递，实际上传递这个对象堆内存地址的拷贝，所以形式参数和原参数操作的都是同一个堆内存地址，即形式参数的改变会直接影响原参数。\n\n#### 成员变量和局部变量\n成员变量和局部变量的区别：\n* 在类中的位置不同：\n   - 成员变量：在类中方法外\n   - 局部变量：在方法定义中或方法声明上\n* 在内存中的位置不同：\n   - 成员变量：在堆内存\n   - 局部变量：在栈内存\n* 声明周期不同：\n   - 成员变量：随着对象的创建而存在，随着对象的消失而消失。\n   - 局部变量：随着方法的调用而存在，随着方法调用完毕而消失\n* 初始化值不同：\n   - 成员变量：有默认初始化值\n   - 局部变量：没有默认初始化值，必须定义、赋值后才能使用\n\n#### 构造方法\n在Java中，当需要调用构造方法时，**若该类没有定义构造方法，系统会自动提供一个无参构造方法；如果该类定义了构造方法（带参构造），系统将不再提供无参构造，必须手动定义**。举例：\n```bash\npublic class Demo2_Construct {\n    public static void main(String[] args) {\n        Demo2Student student = new Demo2Student();\n        student.show();\n        // Demo2School school = new Demo2School(); //error\n    }\n}\n\nclass Demo2Student {\n    public void show() {\n        System.out.println(\"this student show\");\n    }\n}\n\nclass Demo2School {\n    private int size = 1000;\n    public Demo2School(int size) {\n        this.size = size;\n    }\n}\n```\n\n##### final\nfinal可以修改类、方法、变量。\n\n**特点**：\n- final可以修饰类，该类不能被继承。\n- final可以修饰方法，该方法不能被重写。\n- final可以修饰变量，该变量不能被重新赋值。\n\n**面试题**：final修饰局部变量的问题\n- 基本类型：被final修饰的基本类型的值不能被改变\n- 引用类型：引用类型的地址值不能被改变，但是该对象的堆内存地址是可以改变的。\n\n**初始化时机**\n被final修饰的变量必须在构造方法完毕前被初始化，比如\n```bash\npublic class Demo {\n    final int WIDTH = 12;\n    //final int HEIGHT; //error\n    final int AREA;\n    {\n        AREA = 120;\n    }\n}\n```\n\n#### 继承\n1、Java支持单继承不支持多继承，但Java支持多层继承\n2、子类只能继承父类非私有成员（成员变量、成员方法）\n3、子类不能继承父类的构造方法，但可以通过super关键字访问父类的构造方法。\n\n##### 子类和父类的关系\n**子类中的所有构造方法都默认访问父类的无参构造方法**。因为子类继承父类，并可能使用父类中的数据，所以子类初始化前一定要完成父类的初始化。所以子类每一个构造方法第一行默认都是super()。\n```bash\npublic class Demo04_Extends {\n    public static void main(String[] args) {\n        Demo04Son son = new Demo04Son();\n        son.show();\n    }\n}\n\nclass Demo04Son extends Demo04Parent{\n    private int num = 10;\n    public Demo04Son() {\n        super();\n    }\n\n    public void show() {\n        int num = 100;\n        System.out.println(num);\n        System.out.println(this.num);\n        System.out.println(super.num);\n    }\n}\n\nclass Demo04Parent {\n    public int num = 1;\n\n    public Demo04Parent() {\n        System.out.println(\"这是父类的无参构造函数\");\n    }\n}\n```\n\n##### this-super\nthis和super关键字的区别和使用场景？\n区别：\n- this: 代表当前类的对象引用\n- super: 代表父类的空间标识（可以理解为父类的引用，通过他访问父类的成员）\n场景：\n- this.成员变量/方法\n- super.成员变量/方法\n- this(…) super(…)\n\n##### 加载顺序\n```bash\npublic class Demo04_Extends2 {\n    public static void main(String[] args) {\n        Demo04Zi zi = new Demo04Zi();\n    }\n}\nclass Demo04Fu {\n    static {\n        System.out.println(\"Fu 静态代码块\");\n    }\n    {\n        System.out.println(\"Fu 构造代码块\");\n    }\n    public Demo04Fu() {\n        System.out.println(\"Fu 构造方法\");\n    }\n}\nclass Demo04Zi extends Demo04Fu{\n    static {\n        System.out.println(\"Zi 静态代码块\");\n    }\n    {\n        System.out.println(\"Zi 构造代码块\");\n    }\n    public Demo04Zi() {\n        System.out.println(\"Zi 构造方法\");\n    }\n}\n```\n\n结果：\n```bash\nFu 静态代码块\nZi 静态代码块\nFu 构造代码块\nFu 构造方法\nZi 构造代码块\nZi 构造方法\n```\n\n##### 动态绑定\n**调用对象方法的执行过程：**\n[DomaticBind](/images/DomaticBind.png)\n1.编译器首先查看对象的声明类型和方法名。如调用change(a)方法，由于存在多个change()方法，JVM会先列举该类以及其超类中访问属性为public且名为change的方法。\n2.接下来，JVM将查看调用方法时提供的参数类型，并且JVM会预先为每个类创建一个方法表**（method table）**，JVM会直接从这个方法表中寻找名为change的方法中存在一个与提供的参数类型匹配的方法，这个过程称为**重载解析**。\n3.如果是private、static、final方法或者构造器，那么JVM就能准确的知道调用哪个方法，我们将这种调用方式称为**静态绑定**。与此对应，调用的方法依赖于隐式参数的实际类型，并且在运行时实现**动态绑定**。\n4.当程序运行，并且采用动态绑定调用方法时，JVM就一定调用于此最适合的一个方法，否则从超类中继续寻找。\n\n##### 强制类型转换\n将一个类型强制转换为另外一个类型的过程称为类型转换。数值类型直接(int) double这样转换；对象引用的转换也类似，实现将某个类的对象引用转换为另一个类的对象引用。\n- **向上转型**：将一个子类的引用赋值给一个超类变量。\n- **向下转型**：将一个超类的引用赋值给一个子类变量，且必须进行类型转换。\n\n**注意**\n\n- 只能在继承层次内进行类型转换。\n- 在将超类转换成子类之前，应该使用instanceof进行检查。\n\n##### 内部类\n\n一个类存在于另一个类中方法外，这个类就称为内部类；一个类存在于另一个类方法内，这个类称为局部内部类。\n- 内部类可以直接访问外部类的成员，包括私有\n- 外部类可以访问内部类的成员，必须创建对象\n- 直接访问内部类的成员：Outer.Inner in = new Outer().new Inner()\n\n**局部内部类**\n局部内部类可以直接访问外部类的成员，在局部位置可以创建内部类对象，通过对象调用内部类成员。\n\n> 局部内部类访问局部变量注意事项?\n​局部内部类访问局部变量必须用final修饰。因为**局部内部类的声明周期比局部变量长**，局部变量随着方法的调用而存在，随着调用完毕而消失；但局部内部类不一定消失，他调用一个消失的变量就会报错。\n\n```bash\npublic class InnerClass {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        outer.show();\n    }\n}\n\nclass Outer {\n    public void show() {\n        int num2 = 10;\n        class Inner {\n            private void show() {\n                System.out.println(num2);\n            }\n        }\n        Inner inner = new Inner();\n        inner.show();\n    }\n}\n```\n此时调用不会报错，但并没有加final修饰。这个类编译后会生成InnerClass.class和Outer.class两个文件，我们来看下Outer.class:\n```bash\nclass Outer {\n    Outer() {}\n    public void show() {\n        final int num2 = 10;\n        class Inner {\n            Inner() {}\n            private void show() {\n                System.out.println(num2);\n            }\n        }\n        Inner inner = new Inner();\n        inner.show();\n    }\n}\n```\n其中的num2被自动加上了final修饰（这是因为JDK1.8的原因），所以如果你再添上num2 = 1000就会报错。\n\n> 解决办法\n上面说过了应该将num2用final修饰。其原因就是Inner类的生命周期要比num2的声明周期长，当show()方法调用完毕后num2就已经消失了，但此时Inner类在堆内存中仍然存在，他调用一个不存在的变量就会报错。而用final修饰，这个变量成为常量，在初始化内部类的时候，final num2就在内部类中生成了一份拷贝，这个拷贝和这个内部类的声明周期相同，所以不会报错。","slug":"JavaBasic2","published":1,"updated":"2020-02-12T10:54:24.309Z","_id":"ck529vsji0000be6kcklmdvfk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>###对象与类</p>\n<h4 id=\"对象的创建\"><a href=\"#对象的创建\" class=\"headerlink\" title=\"对象的创建\"></a>对象的创建</h4><p>比如Student s = new Student()实例化一个对象，其实经历了如下几个过程：<br>将Student.class加载到内存中<br>在栈内存中给s开辟内存空间。<br>在堆内存给Student类申请一个内存空间。<br>给成员变量进行默认初始化，0 null false…<br>自定义给成员变量初始化赋值<br>初始化完毕，把堆内存地址赋值给栈内存的s变量</p>\n<h4 id=\"Main方法剖析\"><a href=\"#Main方法剖析\" class=\"headerlink\" title=\"Main方法剖析\"></a>Main方法剖析</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>public: 公共的，访问权限最大，因为main方法是被JVM调用的。</li>\n<li>static：静态的，不需要创建对象，通过类名就能调用，方便JVM调用。</li>\n<li>void: 无返回值，因为main方法是被JVM调用的，所以给JVM返回数据没有意义。</li>\n<li>main: 常见的方法入口，很多语言的入口方法都是main方法。</li>\n<li>String[] args: 字符串数组，是作为命令行参数调用的。</li>\n</ul>\n<h5 id=\"static关键字\"><a href=\"#static关键字\" class=\"headerlink\" title=\"static关键字\"></a>static关键字</h5><p><strong>static关键字特点：（可以修饰成员变量，也可修饰成员方法）</strong></p>\n<ul>\n<li>随着类的加载而加载</li>\n<li>优先于对象存在</li>\n<li>被类中的所有对象共享</li>\n<li>可直接通过类名调用</li>\n</ul>\n<p><strong>拓展</strong></p>\n<p>静态方法中没有this关键字，因为this代表当前方法对象，但static优于对象存在，所以在对象还未创建完毕static修饰的方法就被调用，此时this代表的对象还未创建。</p>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p>String底层定义为public final class String，说明String是常量，一旦被创建就不能修改。可以查看如Integer LongString这些类的源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Integer &#123;&#125;</span><br><span class=\"line\">public final class Long &#123;&#125;</span><br><span class=\"line\">public final class String &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些<strong>基本类型</strong>，在初始化值、赋值时都是先从<strong>常量池</strong>中取数据，如果常量池中没有该数据，就new对象初始化为新数据。<br>比如常见的一个面试题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">s = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">String ss = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">ss = new String(<span class=\"string\">\"ab\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个s和ss各自创建了几个对象？答案：s创建两个对象；ss创建一个对象。因为s的常量池中有值ab，而重新赋值s = “abc”这个abc在s的常量池中不存在，所以new String()创建了一个新对象。ss同理分析。可以通过如下方式验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String ss = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">System.out.println(ss.hashCode());</span><br><span class=\"line\">ss = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">System.out.println(ss.hashCode());</span><br></pre></td></tr></table></figure>\n<p><a href=\"/images/String1.png\">stack</a></p>\n<h5 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a>StringBuffer</h5><p>String是不可变的字符串，StringBuffer是线程安全的可变字符串，用StringBuffer做字符串的拼接可以避免资源的浪费，因为String每次拼接新的字符串都是创建一个新的String对象。</p>\n<p><strong>String转换为StringBuffer</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方式一</span><br><span class=\"line\">String s = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">StringBuffer sb = new StringBuffer(s);</span><br><span class=\"line\">//方式二</span><br><span class=\"line\">StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">sb.append(s);</span><br></pre></td></tr></table></figure>\n\n<p><strong>StringBuffer转换成String</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方式一</span><br><span class=\"line\">StringBuffer sb = new StringBuffer(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">String s = new String(sb);</span><br><span class=\"line\">//方式二</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h5><blockquote>\n<p>String, StringBuffer, StringBuilder 的区别？</p>\n</blockquote>\n<ul>\n<li>String的内容不可变，StringBuffer和StringBuilder的内容都可变。</li>\n<li>StringBuffer是线程同步的，数据安全，效率低；String和StringBuilder是线程不同步的，数据不安全，效率高。</li>\n</ul>\n<blockquote>\n<p>StringBuffer和数组的区别？</p>\n</blockquote>\n<ul>\n<li>二者都是一个容器，装其他数据</li>\n<li>但StringBuffer最终是一个字符串数据；而数组可以存放多种数据，但必须是用一种数据类型。</li>\n</ul>\n<blockquote>\n<p>String和StringBuffer作为参数传递</p>\n</blockquote>\n<ul>\n<li>String可理解为特殊的引用类型，和基本类型一样，参数传递不会改变原数据内容。</li>\n<li>StringBuffer作为引用类型，基本的赋值不会改变原数据内容，但是调用StringBuffer的方法去改变形式参数就会影响原数据内容。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StringBufferDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String s1 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">        String s2 = <span class=\"string\">\"world\"</span>;</span><br><span class=\"line\">        System.out.println(s1 + <span class=\"string\">\"---\"</span> + s2);// hello---world</span><br><span class=\"line\">        change(s1, s2);</span><br><span class=\"line\">        System.out.println(s1 + <span class=\"string\">\"---\"</span> + s2);// hello---world</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer sb1 = new StringBuffer(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        StringBuffer sb2 = new StringBuffer(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">        System.out.println(sb1 + <span class=\"string\">\"---\"</span> + sb2);// hello---world</span><br><span class=\"line\">        change(sb1, sb2);</span><br><span class=\"line\">        System.out.println(sb1 + <span class=\"string\">\"---\"</span> + sb2);// hello---worldworld</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void change(StringBuffer sb1, StringBuffer sb2) &#123;</span><br><span class=\"line\">        sb1 = sb2;</span><br><span class=\"line\">        sb2.append(sb1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void change(String s1, String s2) &#123;</span><br><span class=\"line\">        s1 = s2;</span><br><span class=\"line\">        s2 = s1 + s2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h4><p>Java中的参数传递：</p>\n<ul>\n<li>基本类型：形式参数的改变对实际参数没有影响。</li>\n<li>引用类型：形式参数的改变直接影响实际参数。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo01_Object &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int a = 10;</span><br><span class=\"line\">        int b = 20;</span><br><span class=\"line\">        change(a, b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main: a:\"</span> + a + <span class=\"string\">\", b:\"</span> + b); //10, 20</span><br><span class=\"line\">        int[] arr = &#123;1, 2, 3&#125;;</span><br><span class=\"line\">        change(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main: \"</span> + arr[0]); //2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void change(int a, int b) &#123;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = a + b;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"change: a:\"</span> + a + <span class=\"string\">\", b:\"</span> + b); //20, 40</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void change(int[] arr) &#123;</span><br><span class=\"line\">        arr[0] = arr[1];</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"change\"</span> + arr[0]); //2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>引入概念</strong>：<br>在Java中<strong>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。所有的Java对象都储存在堆内存中</strong>。例如：Date t = new Date()其中的t就是一个对象变量，new Date()是在堆内存中开辟了一个空间，而t指向new Date()的堆内存地址。<br>因此，在上述代码中a b都是基本类型，而int[]是一个引用类型，那<strong>基本类型形式参数改变对实际参数没有影响；对象类型形式参数改变直接影响实际参数。</strong></p>\n<p><a href=\"/images/stack.png\">stack</a></p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p><strong>Java程序语言总是采用按值调用</strong>，也就是说，方法得到的是所有参数值的一个拷贝，特别的，方法不能修改传递给他的任何变量的内容。</p>\n<ul>\n<li>一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。</li>\n<li>一个方法可以改变一个对象的引用状态</li>\n<li>一个方法不能让对象参数引用一个新对象</li>\n</ul>\n<p>比如：下列是无意义的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void swap(Employee x, Employee y) &#123;</span><br><span class=\"line\">    Employee temp = x;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">    y = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当调用swap(e1, e2)时并不会改变e1和e2的对象引用，swap方法的参数x,y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。</p>\n<ul>\n<li><strong>基本类型</strong>（包括Integer String Long）传递的参数是参数<strong>值</strong>的拷贝</li>\n</ul>\n<p>特别是对于Integer Long String这些类型数据，在初始化、赋值的时候都是从常量池中取数据，比如IntgerCache LongCache，如果常量池中没有就重新new对象，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    String s = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"main: \"</span> + s.hashCode()); //48690</span><br><span class=\"line\">    change(s);</span><br><span class=\"line\">    change2(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private static void change(String s) &#123;</span><br><span class=\"line\">    s = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"change: \"</span> + s.hashCode()); //48690</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private static change2(String s) &#123;</span><br><span class=\"line\">    s = <span class=\"string\">\"456\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"change2: \"</span> + s.hashCode()); //51669</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>引用类型</strong>传递的参数是原对象在<strong>堆内存的地址</strong>的拷贝</li>\n</ul>\n<p>对象类型参数的传递，实际上传递这个对象堆内存地址的拷贝，所以形式参数和原参数操作的都是同一个堆内存地址，即形式参数的改变会直接影响原参数。</p>\n<h4 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h4><p>成员变量和局部变量的区别：</p>\n<ul>\n<li>在类中的位置不同：<ul>\n<li>成员变量：在类中方法外</li>\n<li>局部变量：在方法定义中或方法声明上</li>\n</ul>\n</li>\n<li>在内存中的位置不同：<ul>\n<li>成员变量：在堆内存</li>\n<li>局部变量：在栈内存</li>\n</ul>\n</li>\n<li>声明周期不同：<ul>\n<li>成员变量：随着对象的创建而存在，随着对象的消失而消失。</li>\n<li>局部变量：随着方法的调用而存在，随着方法调用完毕而消失</li>\n</ul>\n</li>\n<li>初始化值不同：<ul>\n<li>成员变量：有默认初始化值</li>\n<li>局部变量：没有默认初始化值，必须定义、赋值后才能使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>在Java中，当需要调用构造方法时，<strong>若该类没有定义构造方法，系统会自动提供一个无参构造方法；如果该类定义了构造方法（带参构造），系统将不再提供无参构造，必须手动定义</strong>。举例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo2_Construct &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo2Student student = new Demo2Student();</span><br><span class=\"line\">        student.show();</span><br><span class=\"line\">        // Demo2School school = new Demo2School(); //error</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo2Student &#123;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this student show\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo2School &#123;</span><br><span class=\"line\">    private int size = 1000;</span><br><span class=\"line\">    public Demo2School(int size) &#123;</span><br><span class=\"line\">        this.size = size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h5><p>final可以修改类、方法、变量。</p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>final可以修饰类，该类不能被继承。</li>\n<li>final可以修饰方法，该方法不能被重写。</li>\n<li>final可以修饰变量，该变量不能被重新赋值。</li>\n</ul>\n<p><strong>面试题</strong>：final修饰局部变量的问题</p>\n<ul>\n<li>基本类型：被final修饰的基本类型的值不能被改变</li>\n<li>引用类型：引用类型的地址值不能被改变，但是该对象的堆内存地址是可以改变的。</li>\n</ul>\n<p><strong>初始化时机</strong><br>被final修饰的变量必须在构造方法完毕前被初始化，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">    final int WIDTH = 12;</span><br><span class=\"line\">    //final int HEIGHT; //error</span><br><span class=\"line\">    final int AREA;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AREA = 120;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>1、Java支持单继承不支持多继承，但Java支持多层继承<br>2、子类只能继承父类非私有成员（成员变量、成员方法）<br>3、子类不能继承父类的构造方法，但可以通过super关键字访问父类的构造方法。</p>\n<h5 id=\"子类和父类的关系\"><a href=\"#子类和父类的关系\" class=\"headerlink\" title=\"子类和父类的关系\"></a>子类和父类的关系</h5><p><strong>子类中的所有构造方法都默认访问父类的无参构造方法</strong>。因为子类继承父类，并可能使用父类中的数据，所以子类初始化前一定要完成父类的初始化。所以子类每一个构造方法第一行默认都是super()。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo04_Extends &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo04Son son = new Demo04Son();</span><br><span class=\"line\">        son.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo04Son extends Demo04Parent&#123;</span><br><span class=\"line\">    private int num = 10;</span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Son</span></span>() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        int num = 100;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">        System.out.println(this.num);</span><br><span class=\"line\">        System.out.println(super.num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo04Parent &#123;</span><br><span class=\"line\">    public int num = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Parent</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是父类的无参构造函数\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"this-super\"><a href=\"#this-super\" class=\"headerlink\" title=\"this-super\"></a>this-super</h5><p>this和super关键字的区别和使用场景？<br>区别：</p>\n<ul>\n<li>this: 代表当前类的对象引用</li>\n<li>super: 代表父类的空间标识（可以理解为父类的引用，通过他访问父类的成员）<br>场景：</li>\n<li>this.成员变量/方法</li>\n<li>super.成员变量/方法</li>\n<li>this(…) super(…)</li>\n</ul>\n<h5 id=\"加载顺序\"><a href=\"#加载顺序\" class=\"headerlink\" title=\"加载顺序\"></a>加载顺序</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo04_Extends2 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo04Zi zi = new Demo04Zi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Demo04Fu &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fu 静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fu 构造代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Fu</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fu 构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Demo04Zi extends Demo04Fu&#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Zi 静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Zi 构造代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Zi</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Zi 构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fu 静态代码块</span><br><span class=\"line\">Zi 静态代码块</span><br><span class=\"line\">Fu 构造代码块</span><br><span class=\"line\">Fu 构造方法</span><br><span class=\"line\">Zi 构造代码块</span><br><span class=\"line\">Zi 构造方法</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h5><p><strong>调用对象方法的执行过程：</strong><br><a href=\"/images/DomaticBind.png\">DomaticBind</a><br>1.编译器首先查看对象的声明类型和方法名。如调用change(a)方法，由于存在多个change()方法，JVM会先列举该类以及其超类中访问属性为public且名为change的方法。<br>2.接下来，JVM将查看调用方法时提供的参数类型，并且JVM会预先为每个类创建一个方法表<strong>（method table）</strong>，JVM会直接从这个方法表中寻找名为change的方法中存在一个与提供的参数类型匹配的方法，这个过程称为<strong>重载解析</strong>。<br>3.如果是private、static、final方法或者构造器，那么JVM就能准确的知道调用哪个方法，我们将这种调用方式称为<strong>静态绑定</strong>。与此对应，调用的方法依赖于隐式参数的实际类型，并且在运行时实现<strong>动态绑定</strong>。<br>4.当程序运行，并且采用动态绑定调用方法时，JVM就一定调用于此最适合的一个方法，否则从超类中继续寻找。</p>\n<h5 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h5><p>将一个类型强制转换为另外一个类型的过程称为类型转换。数值类型直接(int) double这样转换；对象引用的转换也类似，实现将某个类的对象引用转换为另一个类的对象引用。</p>\n<ul>\n<li><strong>向上转型</strong>：将一个子类的引用赋值给一个超类变量。</li>\n<li><strong>向下转型</strong>：将一个超类的引用赋值给一个子类变量，且必须进行类型转换。</li>\n</ul>\n<p><strong>注意</strong></p>\n<ul>\n<li>只能在继承层次内进行类型转换。</li>\n<li>在将超类转换成子类之前，应该使用instanceof进行检查。</li>\n</ul>\n<h5 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h5><p>一个类存在于另一个类中方法外，这个类就称为内部类；一个类存在于另一个类方法内，这个类称为局部内部类。</p>\n<ul>\n<li>内部类可以直接访问外部类的成员，包括私有</li>\n<li>外部类可以访问内部类的成员，必须创建对象</li>\n<li>直接访问内部类的成员：Outer.Inner in = new Outer().new Inner()</li>\n</ul>\n<p><strong>局部内部类</strong><br>局部内部类可以直接访问外部类的成员，在局部位置可以创建内部类对象，通过对象调用内部类成员。</p>\n<blockquote>\n<p>局部内部类访问局部变量注意事项?<br>​局部内部类访问局部变量必须用final修饰。因为<strong>局部内部类的声明周期比局部变量长</strong>，局部变量随着方法的调用而存在，随着调用完毕而消失；但局部内部类不一定消失，他调用一个消失的变量就会报错。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InnerClass &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Outer outer = new Outer();</span><br><span class=\"line\">        outer.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        int num2 = 10;</span><br><span class=\"line\">        class Inner &#123;</span><br><span class=\"line\">            private void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">                System.out.println(num2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Inner inner = new Inner();</span><br><span class=\"line\">        inner.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时调用不会报错，但并没有加final修饰。这个类编译后会生成InnerClass.class和Outer.class两个文件，我们来看下Outer.class:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">Outer</span></span>() &#123;&#125;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        final int num2 = 10;</span><br><span class=\"line\">        class Inner &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">Inner</span></span>() &#123;&#125;</span><br><span class=\"line\">            private void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">                System.out.println(num2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Inner inner = new Inner();</span><br><span class=\"line\">        inner.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的num2被自动加上了final修饰（这是因为JDK1.8的原因），所以如果你再添上num2 = 1000就会报错。</p>\n<blockquote>\n<p>解决办法<br>上面说过了应该将num2用final修饰。其原因就是Inner类的生命周期要比num2的声明周期长，当show()方法调用完毕后num2就已经消失了，但此时Inner类在堆内存中仍然存在，他调用一个不存在的变量就会报错。而用final修饰，这个变量成为常量，在初始化内部类的时候，final num2就在内部类中生成了一份拷贝，这个拷贝和这个内部类的声明周期相同，所以不会报错。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>###对象与类</p>\n<h4 id=\"对象的创建\"><a href=\"#对象的创建\" class=\"headerlink\" title=\"对象的创建\"></a>对象的创建</h4><p>比如Student s = new Student()实例化一个对象，其实经历了如下几个过程：<br>将Student.class加载到内存中<br>在栈内存中给s开辟内存空间。<br>在堆内存给Student类申请一个内存空间。<br>给成员变量进行默认初始化，0 null false…<br>自定义给成员变量初始化赋值<br>初始化完毕，把堆内存地址赋值给栈内存的s变量</p>\n<h4 id=\"Main方法剖析\"><a href=\"#Main方法剖析\" class=\"headerlink\" title=\"Main方法剖析\"></a>Main方法剖析</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>public: 公共的，访问权限最大，因为main方法是被JVM调用的。</li>\n<li>static：静态的，不需要创建对象，通过类名就能调用，方便JVM调用。</li>\n<li>void: 无返回值，因为main方法是被JVM调用的，所以给JVM返回数据没有意义。</li>\n<li>main: 常见的方法入口，很多语言的入口方法都是main方法。</li>\n<li>String[] args: 字符串数组，是作为命令行参数调用的。</li>\n</ul>\n<h5 id=\"static关键字\"><a href=\"#static关键字\" class=\"headerlink\" title=\"static关键字\"></a>static关键字</h5><p><strong>static关键字特点：（可以修饰成员变量，也可修饰成员方法）</strong></p>\n<ul>\n<li>随着类的加载而加载</li>\n<li>优先于对象存在</li>\n<li>被类中的所有对象共享</li>\n<li>可直接通过类名调用</li>\n</ul>\n<p><strong>拓展</strong></p>\n<p>静态方法中没有this关键字，因为this代表当前方法对象，但static优于对象存在，所以在对象还未创建完毕static修饰的方法就被调用，此时this代表的对象还未创建。</p>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p>String底层定义为public final class String，说明String是常量，一旦被创建就不能修改。可以查看如Integer LongString这些类的源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Integer &#123;&#125;</span><br><span class=\"line\">public final class Long &#123;&#125;</span><br><span class=\"line\">public final class String &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些<strong>基本类型</strong>，在初始化值、赋值时都是先从<strong>常量池</strong>中取数据，如果常量池中没有该数据，就new对象初始化为新数据。<br>比如常见的一个面试题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">s = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">String ss = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">ss = new String(<span class=\"string\">\"ab\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个s和ss各自创建了几个对象？答案：s创建两个对象；ss创建一个对象。因为s的常量池中有值ab，而重新赋值s = “abc”这个abc在s的常量池中不存在，所以new String()创建了一个新对象。ss同理分析。可以通过如下方式验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String ss = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">System.out.println(ss.hashCode());</span><br><span class=\"line\">ss = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">System.out.println(ss.hashCode());</span><br></pre></td></tr></table></figure>\n<p><a href=\"/images/String1.png\">stack</a></p>\n<h5 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a>StringBuffer</h5><p>String是不可变的字符串，StringBuffer是线程安全的可变字符串，用StringBuffer做字符串的拼接可以避免资源的浪费，因为String每次拼接新的字符串都是创建一个新的String对象。</p>\n<p><strong>String转换为StringBuffer</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方式一</span><br><span class=\"line\">String s = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">StringBuffer sb = new StringBuffer(s);</span><br><span class=\"line\">//方式二</span><br><span class=\"line\">StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">sb.append(s);</span><br></pre></td></tr></table></figure>\n\n<p><strong>StringBuffer转换成String</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方式一</span><br><span class=\"line\">StringBuffer sb = new StringBuffer(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">String s = new String(sb);</span><br><span class=\"line\">//方式二</span><br><span class=\"line\">String s = sb.toString();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h5><blockquote>\n<p>String, StringBuffer, StringBuilder 的区别？</p>\n</blockquote>\n<ul>\n<li>String的内容不可变，StringBuffer和StringBuilder的内容都可变。</li>\n<li>StringBuffer是线程同步的，数据安全，效率低；String和StringBuilder是线程不同步的，数据不安全，效率高。</li>\n</ul>\n<blockquote>\n<p>StringBuffer和数组的区别？</p>\n</blockquote>\n<ul>\n<li>二者都是一个容器，装其他数据</li>\n<li>但StringBuffer最终是一个字符串数据；而数组可以存放多种数据，但必须是用一种数据类型。</li>\n</ul>\n<blockquote>\n<p>String和StringBuffer作为参数传递</p>\n</blockquote>\n<ul>\n<li>String可理解为特殊的引用类型，和基本类型一样，参数传递不会改变原数据内容。</li>\n<li>StringBuffer作为引用类型，基本的赋值不会改变原数据内容，但是调用StringBuffer的方法去改变形式参数就会影响原数据内容。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StringBufferDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String s1 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">        String s2 = <span class=\"string\">\"world\"</span>;</span><br><span class=\"line\">        System.out.println(s1 + <span class=\"string\">\"---\"</span> + s2);// hello---world</span><br><span class=\"line\">        change(s1, s2);</span><br><span class=\"line\">        System.out.println(s1 + <span class=\"string\">\"---\"</span> + s2);// hello---world</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer sb1 = new StringBuffer(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        StringBuffer sb2 = new StringBuffer(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">        System.out.println(sb1 + <span class=\"string\">\"---\"</span> + sb2);// hello---world</span><br><span class=\"line\">        change(sb1, sb2);</span><br><span class=\"line\">        System.out.println(sb1 + <span class=\"string\">\"---\"</span> + sb2);// hello---worldworld</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void change(StringBuffer sb1, StringBuffer sb2) &#123;</span><br><span class=\"line\">        sb1 = sb2;</span><br><span class=\"line\">        sb2.append(sb1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void change(String s1, String s2) &#123;</span><br><span class=\"line\">        s1 = s2;</span><br><span class=\"line\">        s2 = s1 + s2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h4><p>Java中的参数传递：</p>\n<ul>\n<li>基本类型：形式参数的改变对实际参数没有影响。</li>\n<li>引用类型：形式参数的改变直接影响实际参数。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo01_Object &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int a = 10;</span><br><span class=\"line\">        int b = 20;</span><br><span class=\"line\">        change(a, b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main: a:\"</span> + a + <span class=\"string\">\", b:\"</span> + b); //10, 20</span><br><span class=\"line\">        int[] arr = &#123;1, 2, 3&#125;;</span><br><span class=\"line\">        change(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main: \"</span> + arr[0]); //2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void change(int a, int b) &#123;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = a + b;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"change: a:\"</span> + a + <span class=\"string\">\", b:\"</span> + b); //20, 40</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void change(int[] arr) &#123;</span><br><span class=\"line\">        arr[0] = arr[1];</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"change\"</span> + arr[0]); //2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>引入概念</strong>：<br>在Java中<strong>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。所有的Java对象都储存在堆内存中</strong>。例如：Date t = new Date()其中的t就是一个对象变量，new Date()是在堆内存中开辟了一个空间，而t指向new Date()的堆内存地址。<br>因此，在上述代码中a b都是基本类型，而int[]是一个引用类型，那<strong>基本类型形式参数改变对实际参数没有影响；对象类型形式参数改变直接影响实际参数。</strong></p>\n<p><a href=\"/images/stack.png\">stack</a></p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p><strong>Java程序语言总是采用按值调用</strong>，也就是说，方法得到的是所有参数值的一个拷贝，特别的，方法不能修改传递给他的任何变量的内容。</p>\n<ul>\n<li>一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。</li>\n<li>一个方法可以改变一个对象的引用状态</li>\n<li>一个方法不能让对象参数引用一个新对象</li>\n</ul>\n<p>比如：下列是无意义的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void swap(Employee x, Employee y) &#123;</span><br><span class=\"line\">    Employee temp = x;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">    y = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当调用swap(e1, e2)时并不会改变e1和e2的对象引用，swap方法的参数x,y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。</p>\n<ul>\n<li><strong>基本类型</strong>（包括Integer String Long）传递的参数是参数<strong>值</strong>的拷贝</li>\n</ul>\n<p>特别是对于Integer Long String这些类型数据，在初始化、赋值的时候都是从常量池中取数据，比如IntgerCache LongCache，如果常量池中没有就重新new对象，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    String s = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"main: \"</span> + s.hashCode()); //48690</span><br><span class=\"line\">    change(s);</span><br><span class=\"line\">    change2(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private static void change(String s) &#123;</span><br><span class=\"line\">    s = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"change: \"</span> + s.hashCode()); //48690</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private static change2(String s) &#123;</span><br><span class=\"line\">    s = <span class=\"string\">\"456\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"change2: \"</span> + s.hashCode()); //51669</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>引用类型</strong>传递的参数是原对象在<strong>堆内存的地址</strong>的拷贝</li>\n</ul>\n<p>对象类型参数的传递，实际上传递这个对象堆内存地址的拷贝，所以形式参数和原参数操作的都是同一个堆内存地址，即形式参数的改变会直接影响原参数。</p>\n<h4 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h4><p>成员变量和局部变量的区别：</p>\n<ul>\n<li>在类中的位置不同：<ul>\n<li>成员变量：在类中方法外</li>\n<li>局部变量：在方法定义中或方法声明上</li>\n</ul>\n</li>\n<li>在内存中的位置不同：<ul>\n<li>成员变量：在堆内存</li>\n<li>局部变量：在栈内存</li>\n</ul>\n</li>\n<li>声明周期不同：<ul>\n<li>成员变量：随着对象的创建而存在，随着对象的消失而消失。</li>\n<li>局部变量：随着方法的调用而存在，随着方法调用完毕而消失</li>\n</ul>\n</li>\n<li>初始化值不同：<ul>\n<li>成员变量：有默认初始化值</li>\n<li>局部变量：没有默认初始化值，必须定义、赋值后才能使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>在Java中，当需要调用构造方法时，<strong>若该类没有定义构造方法，系统会自动提供一个无参构造方法；如果该类定义了构造方法（带参构造），系统将不再提供无参构造，必须手动定义</strong>。举例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo2_Construct &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo2Student student = new Demo2Student();</span><br><span class=\"line\">        student.show();</span><br><span class=\"line\">        // Demo2School school = new Demo2School(); //error</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo2Student &#123;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this student show\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo2School &#123;</span><br><span class=\"line\">    private int size = 1000;</span><br><span class=\"line\">    public Demo2School(int size) &#123;</span><br><span class=\"line\">        this.size = size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h5><p>final可以修改类、方法、变量。</p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>final可以修饰类，该类不能被继承。</li>\n<li>final可以修饰方法，该方法不能被重写。</li>\n<li>final可以修饰变量，该变量不能被重新赋值。</li>\n</ul>\n<p><strong>面试题</strong>：final修饰局部变量的问题</p>\n<ul>\n<li>基本类型：被final修饰的基本类型的值不能被改变</li>\n<li>引用类型：引用类型的地址值不能被改变，但是该对象的堆内存地址是可以改变的。</li>\n</ul>\n<p><strong>初始化时机</strong><br>被final修饰的变量必须在构造方法完毕前被初始化，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">    final int WIDTH = 12;</span><br><span class=\"line\">    //final int HEIGHT; //error</span><br><span class=\"line\">    final int AREA;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AREA = 120;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>1、Java支持单继承不支持多继承，但Java支持多层继承<br>2、子类只能继承父类非私有成员（成员变量、成员方法）<br>3、子类不能继承父类的构造方法，但可以通过super关键字访问父类的构造方法。</p>\n<h5 id=\"子类和父类的关系\"><a href=\"#子类和父类的关系\" class=\"headerlink\" title=\"子类和父类的关系\"></a>子类和父类的关系</h5><p><strong>子类中的所有构造方法都默认访问父类的无参构造方法</strong>。因为子类继承父类，并可能使用父类中的数据，所以子类初始化前一定要完成父类的初始化。所以子类每一个构造方法第一行默认都是super()。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo04_Extends &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo04Son son = new Demo04Son();</span><br><span class=\"line\">        son.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo04Son extends Demo04Parent&#123;</span><br><span class=\"line\">    private int num = 10;</span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Son</span></span>() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        int num = 100;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">        System.out.println(this.num);</span><br><span class=\"line\">        System.out.println(super.num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Demo04Parent &#123;</span><br><span class=\"line\">    public int num = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Parent</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是父类的无参构造函数\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"this-super\"><a href=\"#this-super\" class=\"headerlink\" title=\"this-super\"></a>this-super</h5><p>this和super关键字的区别和使用场景？<br>区别：</p>\n<ul>\n<li>this: 代表当前类的对象引用</li>\n<li>super: 代表父类的空间标识（可以理解为父类的引用，通过他访问父类的成员）<br>场景：</li>\n<li>this.成员变量/方法</li>\n<li>super.成员变量/方法</li>\n<li>this(…) super(…)</li>\n</ul>\n<h5 id=\"加载顺序\"><a href=\"#加载顺序\" class=\"headerlink\" title=\"加载顺序\"></a>加载顺序</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo04_Extends2 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo04Zi zi = new Demo04Zi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Demo04Fu &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fu 静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fu 构造代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Fu</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Fu 构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Demo04Zi extends Demo04Fu&#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Zi 静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Zi 构造代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Demo04Zi</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Zi 构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fu 静态代码块</span><br><span class=\"line\">Zi 静态代码块</span><br><span class=\"line\">Fu 构造代码块</span><br><span class=\"line\">Fu 构造方法</span><br><span class=\"line\">Zi 构造代码块</span><br><span class=\"line\">Zi 构造方法</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h5><p><strong>调用对象方法的执行过程：</strong><br><a href=\"/images/DomaticBind.png\">DomaticBind</a><br>1.编译器首先查看对象的声明类型和方法名。如调用change(a)方法，由于存在多个change()方法，JVM会先列举该类以及其超类中访问属性为public且名为change的方法。<br>2.接下来，JVM将查看调用方法时提供的参数类型，并且JVM会预先为每个类创建一个方法表<strong>（method table）</strong>，JVM会直接从这个方法表中寻找名为change的方法中存在一个与提供的参数类型匹配的方法，这个过程称为<strong>重载解析</strong>。<br>3.如果是private、static、final方法或者构造器，那么JVM就能准确的知道调用哪个方法，我们将这种调用方式称为<strong>静态绑定</strong>。与此对应，调用的方法依赖于隐式参数的实际类型，并且在运行时实现<strong>动态绑定</strong>。<br>4.当程序运行，并且采用动态绑定调用方法时，JVM就一定调用于此最适合的一个方法，否则从超类中继续寻找。</p>\n<h5 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h5><p>将一个类型强制转换为另外一个类型的过程称为类型转换。数值类型直接(int) double这样转换；对象引用的转换也类似，实现将某个类的对象引用转换为另一个类的对象引用。</p>\n<ul>\n<li><strong>向上转型</strong>：将一个子类的引用赋值给一个超类变量。</li>\n<li><strong>向下转型</strong>：将一个超类的引用赋值给一个子类变量，且必须进行类型转换。</li>\n</ul>\n<p><strong>注意</strong></p>\n<ul>\n<li>只能在继承层次内进行类型转换。</li>\n<li>在将超类转换成子类之前，应该使用instanceof进行检查。</li>\n</ul>\n<h5 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h5><p>一个类存在于另一个类中方法外，这个类就称为内部类；一个类存在于另一个类方法内，这个类称为局部内部类。</p>\n<ul>\n<li>内部类可以直接访问外部类的成员，包括私有</li>\n<li>外部类可以访问内部类的成员，必须创建对象</li>\n<li>直接访问内部类的成员：Outer.Inner in = new Outer().new Inner()</li>\n</ul>\n<p><strong>局部内部类</strong><br>局部内部类可以直接访问外部类的成员，在局部位置可以创建内部类对象，通过对象调用内部类成员。</p>\n<blockquote>\n<p>局部内部类访问局部变量注意事项?<br>​局部内部类访问局部变量必须用final修饰。因为<strong>局部内部类的声明周期比局部变量长</strong>，局部变量随着方法的调用而存在，随着调用完毕而消失；但局部内部类不一定消失，他调用一个消失的变量就会报错。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InnerClass &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Outer outer = new Outer();</span><br><span class=\"line\">        outer.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        int num2 = 10;</span><br><span class=\"line\">        class Inner &#123;</span><br><span class=\"line\">            private void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">                System.out.println(num2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Inner inner = new Inner();</span><br><span class=\"line\">        inner.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时调用不会报错，但并没有加final修饰。这个类编译后会生成InnerClass.class和Outer.class两个文件，我们来看下Outer.class:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">Outer</span></span>() &#123;&#125;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">        final int num2 = 10;</span><br><span class=\"line\">        class Inner &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">Inner</span></span>() &#123;&#125;</span><br><span class=\"line\">            private void <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</span><br><span class=\"line\">                System.out.println(num2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Inner inner = new Inner();</span><br><span class=\"line\">        inner.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的num2被自动加上了final修饰（这是因为JDK1.8的原因），所以如果你再添上num2 = 1000就会报错。</p>\n<blockquote>\n<p>解决办法<br>上面说过了应该将num2用final修饰。其原因就是Inner类的生命周期要比num2的声明周期长，当show()方法调用完毕后num2就已经消失了，但此时Inner类在堆内存中仍然存在，他调用一个不存在的变量就会报错。而用final修饰，这个变量成为常量，在初始化内部类的时候，final num2就在内部类中生成了一份拷贝，这个拷贝和这个内部类的声明周期相同，所以不会报错。</p>\n</blockquote>\n"},{"title":"Java基础（一）","date":"2019-11-13T16:00:00.000Z","_content":"\n记录一些Java基础的知识点，为了自己查阅资料的时候方便一些。\n\n---\n### Java基础\n\n#### JDK和JRE的区别？\n\n1、jre即Java Runtime Environment，Java运行环境。包括Java虚拟机和Java类库\n2、jdk是Java开发工具包，例如：tools.jar\n\n---\n\n#### == 和 equals的区别\n\n1、==是一个比较运算符，对于基本类型，比较的是具体的数值(int、double..)；对于引用类型，比较的是对象的内存地址\n2、equals是超类Object就具有的方法，因此所有的引用类型都具有这个方法，只用用来比较引用数据类型。equals方法默认比较的对象内存地址，如果重写该方法，一般比较的是对象的属性值。\nObject类equals方法源码：\n```bash\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\nnew对象是在堆内存中开辟一份空间，所以其引用变量就是指向了堆内存的地址，举个栗子：\n```bash\npublic class EqualsTest {\n\n    public static void main(String[] args) {\n        User a = new User();\n        User b = new User();\n        System.out.println(a == b); //false\n        System.out.println(a.equals(b)); //true\n    }\n}\n\nclass User {\n    private int age;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof User)) return false;\n        User user = (User) o;\n        return age == user.age;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(age);\n    }\n}\n```\n---\n\n#### 两个对象的hashCode()相同，则equals()一定为true？\n**如果两个对象相等(equals()为true)，那么他们的hashCode()一定相同**\n**如果两个对象的hashCode()相同，他们的equals()方法不一定相同**\n\nJVM虚拟机通过hashCode()方法为Object对象分配一个int类型数值，以此来提高Java中集合对象(Map、HashMap…)中对象存储的效率。当集合中需要添加新元素，首先通过hashCode()获取该对象对应的地址位置，如果该位置上没有值就直接储存到该位置，如果有值就再调用equals()与新元素的值比较，相同就不再储存否则就散列到其他位置，大大减少了调用equals()方法比较的次数。\n\n```bash\npublic class EqualsTest {\n\n    public static void main(String[] args) {\n        User a = new User();\n        User b = new User();\n        System.out.println(a == b); //false\n        System.out.println(a.equals(b)); //false\n        System.out.println(a.hashCode() == b.hashCode()); //false\n    }\n}\n\nclass User {\n    private int age;\n}\n```\n---\n\n#### final的作用\n可修饰类、类属性、类方法。\n1、被final修饰的类不能被继承\n2、final修饰的类属性可以是基本类型也可以是引用类型，如果是基本类型就不能再被赋值；如果是引用类型，就不能再指向其他引用地址，但对象本身是可以改变的。\n```bash\npublic class FinalTest {\n\n    private static final User USER = new User();\n\n    public static void main(String[] args) {\n        User u2 = new User();\n//        user = u2; // ERROR\n        USER.age = 23;\n    }\n}\n\nclass User {\n    int age = 12;\n}\n```\n3、类中所有private方法都是隐式的定义为final，为private方法添加final就毫无意义。\n\n---\n\n#### String属于基本数据类型吗？\n\n**不，String属于特殊的引用类型**\n\nJava中基本数据类型有：int、short、long、char、boolean、float、double、byte\n\n1、String是特殊的引用类型并且是final的，JVM使用字符串常量池储存字符串数据。创建新的字符串，JVM首先会去字符串常量池中寻找有没有该字符串，如果没有就添加到该常量池，如果有就返回该字符串在常量池中的引用。\n2、String s = \"a\"; s += \"b\";，这段代码执行前后，字符串常量池中将出现a和ab两个字符串常量，而原本s变量的引用指向了常量池中ab。\n3、String s = new String(\"ab\")，这段代码一共创建了几个对象？一个或两个。如果字符串常量池中有了ab这个字符串(比如在此之前已经使用了String str = \"ab\")，那么新的s对象引用其实仅仅是指向了字符串常量中的ab，并没有创建新的字符串对象。但是，每次调用new都会在堆内存开辟空间，创建一个String对象，这是肯定的。\n\n栗子：\n```bash\npublic class StringTest {\n\n    public static void main(String[] args) {\n        String a = \"abc\";\n        String b = \"abc\";\n        String c = new String(\"abc\");\n        System.out.println(a == b); //true\n        System.out.println(a.equals(b)); //true\n        System.out.println(a.equals(c)); //true\n    }\n}\n```\n\n**String和StringBuffer和StringBuilder的区别**\n1、String是不可变字符串，StringBuffer和StringBuilder是可变字符串。如果经常改变字符串的原始数据，最好使用StringBuffer代替。\n2、String默认重写了equals方法和hashCode()方法；而StringBuffer没有重写equals方法，使用new StringBuffer(\"\")会直接在堆内存中开辟空间储存对象。因此将StringBuffer对象储存仅Java集合中可能会出现问题。\n3、StringBuffer是线程安全的，效率低；StringBuilder是线程不安全的，效率高。\n\n---\n\n#### static关键字？是否可覆盖？\n\nstatic关键字表明一个成员变量或者是成员方法可以在没有所属的类实例变量的情况下被访问。被static标记的方法不能被覆盖，因为方法的覆盖是基于运行时动态绑定的，而static方法在编译时就已经和该类绑定了，也就是static标记的变量、方法都是随着类的加载而加载的，所以可以通过不创建对象实例就能访问该变量、方法；而不创建对象实例就访问非static变量、方法是不行的，因为此变量、方法还没有被创建。\n\nstatic标记的方法只能访问static变量或方法\n非static标记的方法可以访问static或非static标记的变量或方法\n\n---\n\n#### 自动拆、装箱\n\n因为Java自身面向对象OOP的特性，而一切基本数据类型都不具有面向对象的特性，所以Java为基本的数据类型提供了对应的引用类型。\n具体表现在程序在编译期间自动将基本数据类型转换为引用类型(装箱)、将引用数据类型转换为基本数据类型(拆箱)\n\n基本数据类型|引用数据类型\n:--:|:--:\nint|Integer\nbyte|Byte\nshort|Short\nlong|Long\nfloat|Float\ndouble|Double\nchar|Char\nboolean|Boolean\n\n栗子：\n```bash\npublic static void main(String[] args) {\n    Integer i1 = 100;\n    Integer i2 = 100;\n    Integer i3 = 200;\n    Integer i4 = 200;\n    System.out.println(i1 == i2);\n    System.out.println(i3 == i4);\n}\n```\n\n结果：\n```bash\ntrue\nfalse\n```\n\nJava中实现基本数据类型和引用类型之间的拆装箱一般都是用过valueOf()方法实现的。例如我们看下Integer类的valueOf()方法源码：\n```bash\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n可以看到：当声明一个新的整数型变量，编译时通过Integer类的valueOf()进行拆装箱计算，这个方法会首先比较这个整数值是否在IntegerCache的范围内，如果在就返回IntegerCache类中的数值；如果不在就直接new Integer。那么我们看下IntegerCache类源码：\n\n```bash\nprivate static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n    static final Integer cache[];\n\n    static {\n        // high value may be configured by property\n        int h = 127;\n        String integerCacheHighPropValue =\n            sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n        if (integerCacheHighPropValue != null) {\n            try {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                // Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            } catch( NumberFormatException nfe) {\n                // If the property cannot be parsed into an int, ignore it.\n            }\n        }\n        high = h;\n\n        cache = new Integer[(high - low) + 1];\n        int j = low;\n        for(int k = 0; k < cache.length; k++)\n            cache[k] = new Integer(j++);\n\n        // range [-128, 127] must be interned (JLS7 5.1.7)\n        assert IntegerCache.high >= 127;\n    }\n\n    private IntegerCache() {}\n}\n```\n所以，当声明一个新的整型变量时（int、Integer），如果这个变量值的大小在[-128, 127]之间，就直接返回IntegerCache中储存的常量值，否则就直接new一个新的Integer来保存这个常量值。所以上面才会出现false的结果。\n同理：其他的数据类型例如：long、short等都具有对应的LongCache、ShortCache等类。\n\n---\n\n#### Overriding和Overloaded\n方法的重写Overriding和方法的重载Overloaded都是Java多态性的一种表现。\nOverriding: 子类中定义了和父类中名称、参数列表相同的方法\nOverloaded: 方法名相同，参数列表不同\n\n---\n\n#### Java支持多继承吗？\n不支持。Java中每个类都只能继承一个类，可以实现多个接口。但是可以通过多层继承实现。\n类定义属性和方法，描述某一类事物的抽象。而接口定义了行为，并不限于任何具体意向。\n从逻辑上说，单继承更加明确指出一个子类就应该是其父类代表的事物中某个更具体的类别。而接口则不同，接口定义了一些公共行为。因此类对接口的implements称为实现而不能称为继承。\n\n---\n\n#### 接口和抽象类的区别？\n\n+ 接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。\n+ 接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法 ( 包含具体实现 )\n+ 类实现接口就必须实现接口中定义的所有方法；但继承一个抽象类，可以不实现抽象类中的抽象方法 ( 但前提是这个类也是抽象的 )\n+ 抽象类可以是不提供接口方法实现的情况下实现接口\n+ 接口中声明的变量默认都是final的；但抽象类可以包含非final的变量\n+ 接口中的成员方法默认都是public的；但抽象类中的成员函数可以是private、protected、public\n+ 接口是绝对抽象的，不可以被实例化；\n\n---\n\n#### 引用传递和值传递\n\n**Java中采用值传递的方式**\n栗子：\n```bash\npublic class TransferTest {\n\n\n    public static void main(String[] args) {\n        int a = 1;\n        Integer b = 2;\n        swap(a, b);\n        System.out.println(a);\n        System.out.println(b);\n\n        int[] arr = {1, 2};\n        swap(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    private static void swap(int[] arr) {\n        arr[0] = 10;\n    }\n\n    private static void swap(int a, Integer b) {\n        a = 10;\n        b = 20;\n    }\n}\n```\n\n方法传递时传递的参数其实仅值原参数的一个拷贝，对于基本类型传递的就是具体的值的拷贝，对于引用类型传递的是对象地址。\n所以上面的例子中，基本数据类型a,b经过swap方法并没有改变原始值，而引用类型arr数组经过swap方法就改变了原始值（因为直接对对象堆内存地址数据操作）。\n\n---\n\n#### IO流\n\n![IO流](http://cdn.tycoding.cn/20180127210359151.png)\n\n**1、Java中有几种类型的流？**\n字符流和字节流。字节流继承InputStream和OutputStream；字符流继承自InputStreamReader和OutputStreamWriter。\n\n**2、谈谈Java IO中的方法阻塞**\nJava中的阻塞式方法是指在程序调用该方法时，必须等待输入数据可用或检测到输入结果时结束或抛出异常，否则程序会一直停留在该语句上，不会执行下面的语句。比如read()和readLine()方法。\n\n**3、字符流和字节流的区别？**\n数据的输入和输出在计算机中最终都是通过字节的形式传递的，对应通过InputStream和OutputStream实现，他们都是针对字节操作的。\n而有时候通常需要读取一些完全是字符的文本数据，通常使用基于字节流的包装类字符流完成操作，他们通过InputStreamReader和OutputStreamWriter实现。\n字符流是字节流的包装，即使有时候读取的是字符流，但也可能需要转换为字节写入。\n\n**4、NIO**\n传统的IO是阻塞式的，会一直监听一个ServerSocket，在调用read()等方法时，会一直等到数据到来或缓冲区已满时才返回；调用accept()时也会一直阻塞到有客户端连接时才继续执行；每个客户端连接成功后，服务端都会踢动一个县城去处理该客户端的请求；在多线程处理多个连接时，每个线程都拥有自己的栈空间并且占用了一些CPU时间，每个线程遇到外部未准备好时，都会发生阻塞。阻塞的结果就是会打来大量的进程上下文切换。\n而对于NIO，它是非阻塞式，核心类：\n+ Buffer： 为所有的原始类型提供Buffer缓冲支持\n+ Charset： 字符集编码解码解决方案\n+ Channel： 一个新的原始IO抽象，用于读取Buffer类型，通道可以认为是一种链接，可以是到特定设备、程序或是网络链接。\n\n---\n\n#### 说说List、Set、Map三者的区别\n\n+ List: List接口储存一组不唯一 (可以有多个元素引用引用相同的对象)，有序的对象，可插入多条null元素\n+ Set: 不允许重复的集合，不允许有多个元素引用相同的对象，只允许有一个null元素\n+ Map: 使用键值对储存，Map会维护与Key有关联的值，两个Key可以引用相同的对象，但Key不能重复。\n\n---\n\n#### Array和ArrayList有什么区别？\n\n+ Array可以包含基本类型和对象类型；ArrayList只能包含对象类型\n+ Array大小是固定的；ArrayList大小是动态变化的\n+ ArrayList提供了诸如addAll()、removeAll()、iterator()方法等\n+ 对于基本数据类型，集合使用自动装箱来减少代码量；但当处理固定大小的基本类型数据时，这种方式相对较慢。\n\n---\n\n#### ArrayList和LinkedList的区别？\n\n1、**是否保证线程安全**： ArrayList和LinkedList都是不同步的，也就是不保证线程安全\n2、**底层数据结构**： ArrayList底层使用的是Object数组；LinkedList底层使用的是 双向链表 结构\n3、**插入和删除是否受元素位置影响？** ArrayList采用数组储存，所以插入和删除元素都受元素位置的影响；LinkedList 采用链表储存，所以插入、删除元素都不受元素位置影响。\n4、**是否支持快速随机访问？** LinkedList因为使用链表储存，无法通过元素索引快速访问；而ArrayList因为底层采用Object数组储存，可以通过索引快速随机访问。\n5、**内存空间占用**： ArrayList的空间浪费主要体现在在List列表的结尾都会预留一定的空间容量，而LinkedList的空间花费体现在他的每一个元素都需要消耗比ArrayList更多的空间（因为要储存直接后继和直接前驱以及数据）。\n\n---\n\n**什么是迭代器**\n*Iterator*接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法*iterator()*。迭代器在迭代的过程中可以删除底层集合的元素。\n\n**Iterator和ListIterator的区别？**\n+ Iterator可以用来遍历Set和List集合，但是ListIterator只能遍历List\n+ Iterator对集合只能向前遍历（next()）；而*ListIterator可以向前遍历（next()），也可以向后遍历（previous()）\n+ ListIterator实现了Iterator接口\n\n**RandomAccess接口**\n```bash\n//ArrayList\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{}\n\n//RandomAccess\npublic interface RandomAccess {\n}\n\n//LinkedList\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n{}\n```\n\n源码中ArrayList类实现了RandomAccess接口，LinkedList类中却没有实现这个接口，但是RandomAccess接口中却什么也没有定义。可以看RandomAccess接口上的注释：\n```bash\n/**\n * Marker interface used by <tt>List</tt> implementations to indicate that\n * they support fast (generally constant time) random access.  The primary\n * purpose of this interface is to allow generic algorithms to alter their\n * behavior to provide good performance when applied to either random or\n * sequential access lists.\n */\n```\n大概就是说这个接口仅是一个标识Marker，实现了这个接口的List将支持快速随机访问（random access）。接下来，我们查看Collections类中的binarySearch方法：\n```bash\npublic static <T>\nint binarySearch(List<? extends Comparable<? super T>> list, T key) {\n    if (list instanceof RandomAccess || list.size()<BINARYSEARCH_THRESHOLD)\n        return Collections.indexedBinarySearch(list, key);\n    else\n        return Collections.iteratorBinarySearch(list, key);\n}\n\nprivate static <T>\nint indexedBinarySearch(List<? extends Comparable<? super T>> list, T key) {\n    int low = 0;\n    int high = list.size()-1;\n\n    while (low <= high) {\n        int mid = (low + high) >>> 1;\n        Comparable<? super T> midVal = list.get(mid);\n        int cmp = midVal.compareTo(key);\n\n        if (cmp < 0)\n            low = mid + 1;\n        else if (cmp > 0)\n            high = mid - 1;\n        else\n            return mid; // key found\n    }\n    return -(low + 1);  // key not found\n}\n\nprivate static <T>\nint iteratorBinarySearch(List<? extends Comparable<? super T>> list, T key)\n{\n    int low = 0;\n    int high = list.size()-1;\n    ListIterator<? extends Comparable<? super T>> i = list.listIterator();\n\n    while (low <= high) {\n        int mid = (low + high) >>> 1;\n        Comparable<? super T> midVal = get(i, mid);\n        int cmp = midVal.compareTo(key);\n\n        if (cmp < 0)\n            low = mid + 1;\n        else if (cmp > 0)\n            high = mid - 1;\n        else\n            return mid; // key found\n    }\n    return -(low + 1);  // key not found\n}\n```\n\nbinarySearch()方法是从List中查找指定元素，其中首先判断传入的List时候实现了RandomAccess接口，如果实现了就调用indexedBinarySearch()方法，否则就调用iteratorBinarySearch()方法。再看这两个方法的源码：\n如果传入的List实现了RandomAccess接口，采用普通for循环遍历\n若传入的List未实现RandomAccess接口，采用iterator遍历\n\n**链表**\n\n**链表（Linked List）**由一串节点组成，每个节点包含任意的实例数据和一或两个用来指向上一个/下一个节点位置的指针\n>单向链表\n单向链表包含每个节点Node包含两个部分：第一部分data储存当前节点数据、第二部分next存储下一节点的地址。\n+ 单向链表只可向一个方向遍历，查找一个节点需要从第一个节点开始向下依次寻找\n![单向链表](http://cdn.tycoding.cn/1120165-20171207161602113-1451349858.png)\n\n+ 单向链表插入节点从链表头部插入，将新插入节点的next指向原头部节点位置即可\n![单向链表](http://cdn.tycoding.cn/1120165-20171207162758425-142549066.png)\n\n+ 删除节点，只需要将该节点上一个节点的next指向该节点下一个节点即可\n![单向链表](http://cdn.tycoding.cn/1120165-20171207162815925-341262498.png)\n\n>双向链表\n**双向链表** 包含两个指针，prev指向前一个节点，next指向后一个节点。\n![双向链表](http://cdn.tycoding.cn/双向链表.png)\n\n>双向循环链表\n**双向循环链表** 最后一个节点的*next*指向*head*，而*head*的*prev*指向最后一个节点，形成一个环。\n![双向循环链表](http://cdn.tycoding.cn/双向循环链表.png)\n\n---\n\n#### ArrayList和Vector和LinkedList的区别？\n+ **ArrayList**: 底层数据结构是数组，查询快，增删慢。线程不安全，效率高\n+ **Vector**: 底层数据结构是数组，查询快，增删慢。线程安全，效率低\n+ **LinkedList**: 底层数据结构是链表，查询慢，增删快。线程不安全，效率高\n\n---\n\n#### 谈谈ArrayList的扩容机制\nJava中基本数组都是定长的，一旦被实例化后就不能改变其长度，意味着创建数组时必须确定数组的容量大小。而很多情况下，数组的长度不是确定的，需要动态增减，ArrayList的出现就解决了这一问题。\nArrayList的扩容机制表现在add()方法上，先看add()方法的源码：\n```bash\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\n//获取最小容量\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\n//判断是否需要扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n```\n\n当向ArrayList对象中添加新元素时，首先会调用ensureCapacityInternal(size)方法，size为最小扩容量；ensureCapacityInternal()方法会首先调用calculateCapacity来确定需要的最小容量；最后调用ensureExplicitCapacity()方法判断时候需要扩容。最后判断所需最小容量如果大于当前数组的空间大小，则需要扩容，调用grow()方法扩容：\n```bash\nprivate void grow(int minCapacity) {\n    // 获取ArrayList中elementDaata数组的长度\n    int oldCapacity = elementData.length;\n    // 扩容至原来的1.5倍\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    // 判断新的数组容量够不够\n    // 够了就直接使用这个长度创建新数组\n    if (newCapacity - minCapacity < 0)\n        // 不够就将数组的长度设置为需要的长度\n        newCapacity = minCapacity;\n    // 检查此时的最大值是否溢出\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // 调用Arrays.copyOf()将elementData数组数据拷贝到新数组\n    // 并将elementData指向新数组newCapacity的内存地址\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n**总结**： ArrayList扩容的本质就是计算所需扩容size得到新的数组，将原数组中的数据复制到新数组中，最后将原数组指向新数组在堆内存的引用地址即可。\n\n---\n\n#### HashMap和HashTable的区别？\n1、HashMap和HashTable都实现了Map接口，主要区别在线程安全性、同步、速度\n2、线程是否安全： HashMap非同步线程不安全，HashTable同步线程安全。HashTable内部的方法都经过synchronized修饰。\n3、效率: HashMap线程不安全效率高，HashTable线程安全效率低。\n3、对null key和null value的支持： HashMap中，null可以作为key，这样的key只有一个，但可以有多个key对应的值为null；在HashTable中的key不能为null\n5、底层数据结构： JDK1.8后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阀值时（默认是8），将链表转换为红黑树，以减少搜索时间。HashTable没有这样的机制。\n\n---\n\n#### HashMap和HashSet区别?\n**HashSet底层采用HashMap实现**\nHashMap|HashSet\n:--|:--\n实现了Map接口|实现了Set接口\n储存键值堆|仅储存对象\n调用put()向Map中添加元素|调用add()向Set中添加元素\nHashMap使用Key计算HashCode|HashSet使用成员对象来计算hashCode值，对于两个对象来说，hashCode可能相同，所以用equals判断对象的相等性\n\n---\n\n#### HashSet如何检查重复？\n在前面讲hashCode和equals时就提到了，HashSet集合同样适用。向HashSet中存入一个元素，HashSet首先会根据对象的hashCode值判断当期集合中此hashCode对应的位置有没有值，如果没有就直接添加，如果有就再调用equals方法比较两个对象是否相同，相同就不再储存（保证了Set集合不重复的特性），否则就散列到其他位置储存。\n\n---\n\n#### HashMap底层实现？\nMap在Java中的实现由很多，HashMap便是其中之一，随着JDK版本的更新，HashMap的实现也在不断更新：\n+ <=JDK1.7: Table数组 + Entry链表\n+ >=JDK1.8: Table数组 + Entry链表/红黑树\n\n#### Hash\n\n**Hash（哈希、散列）**，就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。\nHash函数的一种实现：\n直接取余法： f(x) = x mod max\n位运算法： f(x) = x & max\nHashMap采用 位运算法，相比直接取余，位运算直接对内存中的二进制数据操作，不需要再转阿欢为十进制，因此处理速度很快：\n```bash\n7 & 33 = 1\n    \n    000111\n  & 100001\n  --------\n    000001 = 1\n\n```\n\n---\n\n#### Hash冲突\n假设将100个数据通过Hash散列后存储到10个不同的容器中，必定会出现多个元素分布到同一个容器中。具体到HashMap集合中，若将多个K-V数据存入put，HashMap根据元素key计算到对应的hashCode值，如果计算得到多个不同的key对应的hashCode值相同（即要储存到同一位置），此时这种现象就称为 Hash冲突。\nHashMap默认采用了 链地址法 解决Hash冲突问题，即通过类似单链表的方式将 冲突的元素 串起来，搜索时遍历这个链表即可。注意： 如果冲突的Hash越来越多，这个链就会越来越长。\n\n---\n\n#### 实现原理\n![hash冲突与实现原理](http://cdn.tycoding.cn/8db4a3bdfb238da1a1c4431d2b6e075c_hd.png)\n这里我们需要了解两个名词：\nTable: 哈希桶数组（哈希表），存放Node元素，底层是一个Node[] table\nNode: 节点元素，Node是HashMap的一个内部类，实现了Map.Entry接口，本质是一个映射（K-V）\nHashMap内部的一些关键属性需要了解：\nDEFAULT_INITIAL_CAPACITY: Tabale数组的初始化长度，默认是1 << 4，2^4 = 16\nMAXIMUM_CAPACITY: Table数组最高长度，默认为1 << 30，2^30 = 1073741824\nDEFAULT_LOAD_FACTOR: 负载因子，当总元素数 > 数组长度 * 负载因子时，Table数组将扩容，默认是0.75\nTREEIFY_THRESHOLD: 树化阀值，当单个Table内Node数量超过该值，则将链表转换为红黑树，默认是8\nUNTREEIFY_THRESHOLD: 链化阀值，当扩容期间单个Table的Entry数量小于该值，则将红黑数转换为链表，默认为6\nMIN_TREEIFY_CAPACITY: 最小树化阀值，当Table中所有元素超过该值，才会进行树化\nsize: 当前HashMap实际存在的键值对数量\nthreshold: HashMap所能容纳的最大数据量的Node（键值对）个数。Node[] table初始化长度length是16，loadFactor负载因子默认是0.75，threshold = length * loadFactor\nloadFactor: 负载因子，默认是0.17\nmodCount: 记录HashMap内部结构发生变化的次数\nHashMap内部存在一个NodeTable数组，这个数组的初始化长度是DEFAULT_INITIAL_CAPACITY，他是一个单向链表：\n```bash\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash; //key的Hash值\n    final K key; //key\n    V value; //value\n    Node<K,V> next; //下一个节点\n}\n```\n\n参考单链表的结构，Table中每个Node节点包含两个部分，Node元素作为节点的header，next指向下一个节点。**这种链式结构的存在正是为了解决Hash冲突**\n\n栗子：\n```bash\nmap.put(\"loonycoder\", \"18\");\n```\nHashMap将根据\"loonycoder\"这个Key得到其hashCode值，然后经过Hash算法定位到其在HashMap储存的位置，如果两个不同的key定位到了同一个位置，此时就发生了Hash冲突。\n在JDK1.7之前，解决Hash冲突的方式是将冲突的Node节点放在一个链表中。在JDK1.8中，当Table中链长超过TREEIFY_THRESHOLD阀值后，会将链表转换为红黑树的实现TreeNode:\n```bash\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n    TreeNode<K,V> parent;  // red-black tree links\n    TreeNode<K,V> left;\n    TreeNode<K,V> right;\n    TreeNode<K,V> prev;    // needed to unlink next upon deletion\n    boolean red;\n}\n```\n当发生**Hash冲突**时，根据HashMap默认采用的 **链地址法**，即将冲突的Hash串成一个链式结构储存到HashMap对应的位置。但是 随着Hash冲突越来越多，这个**链将越来越长**，这就将导致遍历碰撞key时的消耗不断增加，也就直接导致了性能的不足。在JDK1.8后，HashMap对单个Table中的Node超出某个阀值后，将开始树化操作（链表转换为红黑树），这对搜索的性能将会有很大的提升。\n![地址链法](http://cdn.tycoding.cn/JDK1.8之后的HashMap底层数据结构.jpg)\n\n**总结**\n到此，我们总结一下HashMap的实现原理：\n+ HashMap根据key的hashCode值存储元素。put新元素会遍历链表，根据新元素的key计算hashCode得到散列位置，如果该位置有值再调用equals判断value是否相同，相同就散列到其他位置储存。\n+ HashMap在put新元素时如果遇到key对应的hashCode相同，可能会产生Hash冲突问题。HashMap的做法是采用链式结构（链表）储存存在Hash冲突的元素，查询时再遍历这个链接结构元素集合即可。\n+ 如果发生Hash冲突的元素很多，这个 **链** 将很长，影响到遍历key消耗性能的增加，于是判断当Table中Node节点大于默认值8时，将链表转换为红黑树（TreeNode）存储元素。\n\n---\n\n#### Collection和Collections的区别？\n+ Collection是集合类的上级接口，继承他的接口主要有Set和List\n+ Collections仅是针对集合类封装的一个工具类，在java.util包下\n\n---\n\n#### Comparable和Comparator的区别？\n\n+ Comparable接口来自java.lang包，提供compareTo(Object obj) 方法排序\n+ Comparator接口来自java.util包，提供compare(Object obj1, Object obj2)方法排序\n当需要对一个集合采用一种方式排序，使用Comparable接口；如果需要对一个集合采用两种排序方式就使用Comparator接口。\n\n#### Java集合框架总结\n\n##### Collection\n![Collection](http://cdn.tycoding.cn/QQ20190623-181246.png)\n\n**List**\n\nArrayList: Object数组，线程不安全，查询快，增删慢，效率高\nVector: Object数组，线程安全，查询快，增删慢，效率低\nLinkedList: 双向链表，线程不安全，查询慢，增删快，效率高\n\n**Set**\n\nHashSet: 无序、唯一，基于HashMap实现，底层采用HashMap存储元素\nLinkedHashSet: LinkedHashSet继承自HashSet，并且其内部通过LinkedHashMap实现\nTreeSet 有序、唯一，红黑树\n\n##### Map\n![Map](http://cdn.tycoding.cn/QQ20190623-181259.png)\n\n+ HashMap: JDK1.8之前HashMap由数组和链表组成，数组时HashMap的主体，链表是为了解决Hash冲突问题。JDK1.8之后当Table中Node数量大于8时，就将链表转换为红黑树，以减少搜索时间提高效率。\n+ LinkedHashMap: LinkedHashMap继承自HashMap，所有他的底层仍然由数组和链表/红黑树实现。另外，LinkedHashMap在上面的结构基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。\n+ HashTable: 数组+链表组成。数组时HashTable的主体，链表是为了解决Hash冲突问题\nTreeMap: 红黑树\n\n---\n\n### Java并发\n\n#### 线程和进程的区别？\n+ 进程是程序的一次执行过程，是系统运行程序的基本单位\n+ 线程与进程类似，但线程是一个比进程更小的执行单位。一个进程执行过程中可以产生多个线程，\n在Java中，启用一个main方法就是启动了一个JVM进程，而main函数所在的线程就是这个进程中的一个线程，也称为主线程。\n\n---\n\n#### 从JVM角度分析进程和线程的关系？\n根据JVM的内存划分，对于线程而言：多个线程共享进程的堆、方法区资源，但每个线程又有自己的程序计数器、虚拟机栈、本地方法栈。\n\n也就是说，在一个JVM进程中，可以存在多个线程，每个线程都共享了这个JVM进程的方法区、堆；并且每个线程又都具有自己的虚拟机栈、本地方法栈、程序计数器等。\n\n##### 为什么方法区和堆是线程共享区？\n+ **方法区（Method Area）** 存储已被虚拟机加载的类信息、常量、静态变量等数据。方法区中又包含 运行时常量池 ，这部分区域储存Class文件信息和编译期生成的各种字面量和符号引用。\n+ **堆（Heap）** 堆内存储存了对象实例（比如new关键字创建的实例对象），它是JVM中内存区最大的一块区域。\n所以，一个进程的启动可能包含了多个线程，而这个进程中的静态变量等都是随着类加载而加载的，他应该不属于某个线程独有，所以将其存储于方法区中。对象实例都储存在Java堆内存中，作为Java最大的一块内存区域，肯定不能是某个线程独占的。\n\n##### 为什么虚拟机栈和本地方法栈是线程独占区？\n+ **虚拟机栈**： 每个Java方法执行的同时都会创建一个栈帧储存局部变量表、操作数栈、方法出口等。从方法的执行到结束，对应将栈帧压入Java虚拟机栈和从虚拟机栈中弹出的过程。\n+ **本地方法栈**： 本地方法栈类似Java虚拟机栈，只不过Java虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的native方法服务。\n\n##### 程序计数器是什么？\n\n**程序计数器（Program Counter Register）**：当前线程执行的字节码的行号指示器。每个线程都有独立的程序计数器。此内存区域是Java虚拟机中唯一一个没有任何OutOfMemoryError情况的区域。\n\n---\n\n#### 说说并行和并发的区别？\n+ **并行**： 同一时间段，多个任务都在执行（单位时间内不一定同时执行）\n+ **并发**： 单位时间内，多个任务同时执行。\n\n---\n\n#### 使用多线程可能带来什么问题？\n并发编程的目的就是提高程序的执行效率，但并发编程可能造成：内存泄漏、上下文切换、死锁等问题\n\n---\n\n#### 说说线程的生命周期和状态？\n状态名称|状态说明\n:--|:--\nnew|初始状态，线程被创建，但还没有调用start()方法\nrunnable|运行状态，Java线程将操作系统中就绪和运行两种状态统称为“运行中”\nblocked|阻塞状态，表示线程阻塞于锁\nwaiting|等待状态，线程需要等待当前线程或其他线程执行完成\ntime_waiting|超时等待状态，他可以实现在指定时间后自动返回\nterminated|终止状态，表示当前线程已经执行完毕\n\n对应，程序会因为不同代码的执行产生不同的状态，如下图：\n![线程图](http://cdn.tycoding.cn/Java+线程状态变迁.png)\n如上，线程创建后将进入NEW（初始）状态，调用start()开始运行，当线程执行wait()方法后，线程将进入WAITING（等待）状态，可以通过wait(long)或join(long)等方法终止等待状态；当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到BLOCKED（阻塞）状态。\n\n---\n\n#### 什么是上下文切换？\n简单来说，并发编程中实际线程的数量都可能大于CPU核心的个数，而COU一个核心在任意时刻只能被一个线程使用，CPU为了保证并发的线程都有被执行，采用**随机分配时间片并轮转**的方式；而一个线程的时间片用户将保存并进入就绪状态直到下次分配时间片再执行，这个 **任务从保存到再加载的过程就是一次上下文切换**。\n\n---\n\n#### 什么是死锁？如何避免?\n举例：线程A持有资源2，线程B持有资源1，在线程A、B都没有释放自己所持有资源的情况下（锁未释放），他们都想同时获取对方的资源，因为资源1、2都被锁定，两个线程都会进入相互等待的情况，这种情况称为死锁。\n![死锁](http://cdn.tycoding.cn/2019-4死锁1.png)\n栗子：\n```bash\npublic class DeadLockDemo {\n    private static Object resource1 = new Object();//资源 1\n    private static Object resource2 = new Object();//资源 2\n\n    public static void main(String[] args) {\n        new Thread(() -> {\n            synchronized (resource1) {\n                System.out.println(Thread.currentThread() + \"get resource1\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource2\");\n                synchronized (resource2) {\n                    System.out.println(Thread.currentThread() + \"get resource2\");\n                }\n            }\n        }, \"线程 1\").start();\n\n        new Thread(() -> {\n            synchronized (resource2) {\n                System.out.println(Thread.currentThread() + \"get resource2\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource1\");\n                synchronized (resource1) {\n                    System.out.println(Thread.currentThread() + \"get resource1\");\n                }\n            }\n        }, \"线程 2\").start();\n    }\n}\n```\n\nOutput：\n\n```bash\nThread[线程 1,5,main]get resource1\nThread[线程 2,5,main]get resource2\nThread[线程 1,5,main]waiting get resource2\nThread[线程 2,5,main]waiting get resource1\n```\n线程1以resource1作为同步监视器，即可以轻松获取resource1同时也锁定了resource1，此时调用sleep让线程1等待1秒钟；此时线程2开始执行，他以resource2作为同步监视器同时也锁定了resource2，此时调用sleep让线程2等待1秒钟；而此时线程1等待1秒已经结束了，当他想要获取resource2时发现resource2已经被线程2锁定了，同理线程2结束等待后想要获取resource1时发现resource1已经被线程1锁定了。那么两者都无法同时获取对方的线程，便进入死锁状态。\n因此产生死锁需要具备以下四个条件：\n\n1、互斥条件：该资源任意一个时刻只能由一个线程占用\n2、请求和保持条件：一个线程因请求资源而阻塞时，对已获取的资源保持不放\n3、不剥夺条件：线程已获取的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才使用资源\n4、循环等待条件：若干进程之前形成一种头尾相接的循环等待资源关系。\n\n避免死锁就要破坏这四个条件中任意一个：\n1、破坏互斥条件：这个条件我们无法破坏，因为我们用锁的目的就是想让他们互斥\n2、破坏请求与保持条件：一次性申请所有资源\n3、破坏循环等待条件：按照一定顺序申请资源，避免资源的循环使用\n\n解决方案: 修改线程2\n```bash\nnew Thread(() -> {\n    synchronized (resource1) {\n        System.out.println(Thread.currentThread() + \"get resource1\");\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread() + \"waiting get resource2\");\n        synchronized (resource2) {\n            System.out.println(Thread.currentThread() + \"get resource2\");\n        }\n    }\n}, \"线程 2\").start();\n```\n\nOutput：\n```bash\nThread[线程 1,5,main]get resource1\nThread[线程 1,5,main]waiting get resource2\nThread[线程 1,5,main]get resource2\nThread[线程 2,5,main]get resource1\nThread[线程 2,5,main]waiting get resource2\nThread[线程 2,5,main]get resource2\n\nProcess finished with exit code 0\n```\n\n---\n\n#### 说说sleep()方法和wait()方法的区别？\n两者最主要的区别在于：**sleep 方法没有释放锁，而 wait 方法释放了锁**\n+ 两者都可以暂停线程的执行\n+ wait()通常用于线程间交互/通信，sleep()通常用户暂停执行\n+ wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。\n\n---\n\n#### 调用start()方法会执行run()方法，为什么不能直接调用run()方法？\nnew一个Thread，线程进入了新建状态；调用start()方法，会启用一个线程并使线程进入就绪状态，当分配到时间片后就可以开始执行。start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这才是真正的多线程工作。而直接执行run()方法，会吧run()方法当做一个main线程下的一个普通方法去执行，并不会在某个线程中执行他。\n**总结：调用start方法可以启动线程并使线程进入就绪状态，而run()方法只是Thread的一个普通方法调用，还是在main主线程里执行，并不会在一个新线程中执行**\n\n---\n\n#### synchronized关键字\nsynchronized关键字解决多个线程之间访问资源的同步性，synchronized关键字可以保证它修饰的方法或代码块在任意时刻只能有一个线程执行。\nsynchronized关键字最主要的三种使用方式：\n+ **修饰实例方法**： 给当前对象加锁，进入同步代码块前要获取当前对象实例的锁\n```bash\n// 此处的`synchronized`就相当于`synchronized(this)`，锁定的是当前对象\npublic synchronized void add() {}\n```\n+ **修饰静态方法**： 给当前类加锁（因为静态方法没有this），会作用于当前类的所有对象实例，因为静态成员不属于任何一个实例对象，是一个类成员。\n```bash\n// 此处的`synchronized`就相当于`synzhronized(T.class)`，(T的当前类)\npublic synchronized static void add() {}\n```\n\n+ **修饰代码块**：指定加锁对象，对给定对象加锁，进入同步代码块之前要获取给定对象的锁\n\n---\n","source":"_posts/JavaBasic1.md","raw":"---\ntitle: Java基础（一）\ncategories:\n    - Java\ndate: 2019-11-14\ntags:\n\t- Java\n\t- Java基础\n\n---\n\n记录一些Java基础的知识点，为了自己查阅资料的时候方便一些。\n\n---\n### Java基础\n\n#### JDK和JRE的区别？\n\n1、jre即Java Runtime Environment，Java运行环境。包括Java虚拟机和Java类库\n2、jdk是Java开发工具包，例如：tools.jar\n\n---\n\n#### == 和 equals的区别\n\n1、==是一个比较运算符，对于基本类型，比较的是具体的数值(int、double..)；对于引用类型，比较的是对象的内存地址\n2、equals是超类Object就具有的方法，因此所有的引用类型都具有这个方法，只用用来比较引用数据类型。equals方法默认比较的对象内存地址，如果重写该方法，一般比较的是对象的属性值。\nObject类equals方法源码：\n```bash\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\nnew对象是在堆内存中开辟一份空间，所以其引用变量就是指向了堆内存的地址，举个栗子：\n```bash\npublic class EqualsTest {\n\n    public static void main(String[] args) {\n        User a = new User();\n        User b = new User();\n        System.out.println(a == b); //false\n        System.out.println(a.equals(b)); //true\n    }\n}\n\nclass User {\n    private int age;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof User)) return false;\n        User user = (User) o;\n        return age == user.age;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(age);\n    }\n}\n```\n---\n\n#### 两个对象的hashCode()相同，则equals()一定为true？\n**如果两个对象相等(equals()为true)，那么他们的hashCode()一定相同**\n**如果两个对象的hashCode()相同，他们的equals()方法不一定相同**\n\nJVM虚拟机通过hashCode()方法为Object对象分配一个int类型数值，以此来提高Java中集合对象(Map、HashMap…)中对象存储的效率。当集合中需要添加新元素，首先通过hashCode()获取该对象对应的地址位置，如果该位置上没有值就直接储存到该位置，如果有值就再调用equals()与新元素的值比较，相同就不再储存否则就散列到其他位置，大大减少了调用equals()方法比较的次数。\n\n```bash\npublic class EqualsTest {\n\n    public static void main(String[] args) {\n        User a = new User();\n        User b = new User();\n        System.out.println(a == b); //false\n        System.out.println(a.equals(b)); //false\n        System.out.println(a.hashCode() == b.hashCode()); //false\n    }\n}\n\nclass User {\n    private int age;\n}\n```\n---\n\n#### final的作用\n可修饰类、类属性、类方法。\n1、被final修饰的类不能被继承\n2、final修饰的类属性可以是基本类型也可以是引用类型，如果是基本类型就不能再被赋值；如果是引用类型，就不能再指向其他引用地址，但对象本身是可以改变的。\n```bash\npublic class FinalTest {\n\n    private static final User USER = new User();\n\n    public static void main(String[] args) {\n        User u2 = new User();\n//        user = u2; // ERROR\n        USER.age = 23;\n    }\n}\n\nclass User {\n    int age = 12;\n}\n```\n3、类中所有private方法都是隐式的定义为final，为private方法添加final就毫无意义。\n\n---\n\n#### String属于基本数据类型吗？\n\n**不，String属于特殊的引用类型**\n\nJava中基本数据类型有：int、short、long、char、boolean、float、double、byte\n\n1、String是特殊的引用类型并且是final的，JVM使用字符串常量池储存字符串数据。创建新的字符串，JVM首先会去字符串常量池中寻找有没有该字符串，如果没有就添加到该常量池，如果有就返回该字符串在常量池中的引用。\n2、String s = \"a\"; s += \"b\";，这段代码执行前后，字符串常量池中将出现a和ab两个字符串常量，而原本s变量的引用指向了常量池中ab。\n3、String s = new String(\"ab\")，这段代码一共创建了几个对象？一个或两个。如果字符串常量池中有了ab这个字符串(比如在此之前已经使用了String str = \"ab\")，那么新的s对象引用其实仅仅是指向了字符串常量中的ab，并没有创建新的字符串对象。但是，每次调用new都会在堆内存开辟空间，创建一个String对象，这是肯定的。\n\n栗子：\n```bash\npublic class StringTest {\n\n    public static void main(String[] args) {\n        String a = \"abc\";\n        String b = \"abc\";\n        String c = new String(\"abc\");\n        System.out.println(a == b); //true\n        System.out.println(a.equals(b)); //true\n        System.out.println(a.equals(c)); //true\n    }\n}\n```\n\n**String和StringBuffer和StringBuilder的区别**\n1、String是不可变字符串，StringBuffer和StringBuilder是可变字符串。如果经常改变字符串的原始数据，最好使用StringBuffer代替。\n2、String默认重写了equals方法和hashCode()方法；而StringBuffer没有重写equals方法，使用new StringBuffer(\"\")会直接在堆内存中开辟空间储存对象。因此将StringBuffer对象储存仅Java集合中可能会出现问题。\n3、StringBuffer是线程安全的，效率低；StringBuilder是线程不安全的，效率高。\n\n---\n\n#### static关键字？是否可覆盖？\n\nstatic关键字表明一个成员变量或者是成员方法可以在没有所属的类实例变量的情况下被访问。被static标记的方法不能被覆盖，因为方法的覆盖是基于运行时动态绑定的，而static方法在编译时就已经和该类绑定了，也就是static标记的变量、方法都是随着类的加载而加载的，所以可以通过不创建对象实例就能访问该变量、方法；而不创建对象实例就访问非static变量、方法是不行的，因为此变量、方法还没有被创建。\n\nstatic标记的方法只能访问static变量或方法\n非static标记的方法可以访问static或非static标记的变量或方法\n\n---\n\n#### 自动拆、装箱\n\n因为Java自身面向对象OOP的特性，而一切基本数据类型都不具有面向对象的特性，所以Java为基本的数据类型提供了对应的引用类型。\n具体表现在程序在编译期间自动将基本数据类型转换为引用类型(装箱)、将引用数据类型转换为基本数据类型(拆箱)\n\n基本数据类型|引用数据类型\n:--:|:--:\nint|Integer\nbyte|Byte\nshort|Short\nlong|Long\nfloat|Float\ndouble|Double\nchar|Char\nboolean|Boolean\n\n栗子：\n```bash\npublic static void main(String[] args) {\n    Integer i1 = 100;\n    Integer i2 = 100;\n    Integer i3 = 200;\n    Integer i4 = 200;\n    System.out.println(i1 == i2);\n    System.out.println(i3 == i4);\n}\n```\n\n结果：\n```bash\ntrue\nfalse\n```\n\nJava中实现基本数据类型和引用类型之间的拆装箱一般都是用过valueOf()方法实现的。例如我们看下Integer类的valueOf()方法源码：\n```bash\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n可以看到：当声明一个新的整数型变量，编译时通过Integer类的valueOf()进行拆装箱计算，这个方法会首先比较这个整数值是否在IntegerCache的范围内，如果在就返回IntegerCache类中的数值；如果不在就直接new Integer。那么我们看下IntegerCache类源码：\n\n```bash\nprivate static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n    static final Integer cache[];\n\n    static {\n        // high value may be configured by property\n        int h = 127;\n        String integerCacheHighPropValue =\n            sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n        if (integerCacheHighPropValue != null) {\n            try {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                // Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            } catch( NumberFormatException nfe) {\n                // If the property cannot be parsed into an int, ignore it.\n            }\n        }\n        high = h;\n\n        cache = new Integer[(high - low) + 1];\n        int j = low;\n        for(int k = 0; k < cache.length; k++)\n            cache[k] = new Integer(j++);\n\n        // range [-128, 127] must be interned (JLS7 5.1.7)\n        assert IntegerCache.high >= 127;\n    }\n\n    private IntegerCache() {}\n}\n```\n所以，当声明一个新的整型变量时（int、Integer），如果这个变量值的大小在[-128, 127]之间，就直接返回IntegerCache中储存的常量值，否则就直接new一个新的Integer来保存这个常量值。所以上面才会出现false的结果。\n同理：其他的数据类型例如：long、short等都具有对应的LongCache、ShortCache等类。\n\n---\n\n#### Overriding和Overloaded\n方法的重写Overriding和方法的重载Overloaded都是Java多态性的一种表现。\nOverriding: 子类中定义了和父类中名称、参数列表相同的方法\nOverloaded: 方法名相同，参数列表不同\n\n---\n\n#### Java支持多继承吗？\n不支持。Java中每个类都只能继承一个类，可以实现多个接口。但是可以通过多层继承实现。\n类定义属性和方法，描述某一类事物的抽象。而接口定义了行为，并不限于任何具体意向。\n从逻辑上说，单继承更加明确指出一个子类就应该是其父类代表的事物中某个更具体的类别。而接口则不同，接口定义了一些公共行为。因此类对接口的implements称为实现而不能称为继承。\n\n---\n\n#### 接口和抽象类的区别？\n\n+ 接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。\n+ 接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法 ( 包含具体实现 )\n+ 类实现接口就必须实现接口中定义的所有方法；但继承一个抽象类，可以不实现抽象类中的抽象方法 ( 但前提是这个类也是抽象的 )\n+ 抽象类可以是不提供接口方法实现的情况下实现接口\n+ 接口中声明的变量默认都是final的；但抽象类可以包含非final的变量\n+ 接口中的成员方法默认都是public的；但抽象类中的成员函数可以是private、protected、public\n+ 接口是绝对抽象的，不可以被实例化；\n\n---\n\n#### 引用传递和值传递\n\n**Java中采用值传递的方式**\n栗子：\n```bash\npublic class TransferTest {\n\n\n    public static void main(String[] args) {\n        int a = 1;\n        Integer b = 2;\n        swap(a, b);\n        System.out.println(a);\n        System.out.println(b);\n\n        int[] arr = {1, 2};\n        swap(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    private static void swap(int[] arr) {\n        arr[0] = 10;\n    }\n\n    private static void swap(int a, Integer b) {\n        a = 10;\n        b = 20;\n    }\n}\n```\n\n方法传递时传递的参数其实仅值原参数的一个拷贝，对于基本类型传递的就是具体的值的拷贝，对于引用类型传递的是对象地址。\n所以上面的例子中，基本数据类型a,b经过swap方法并没有改变原始值，而引用类型arr数组经过swap方法就改变了原始值（因为直接对对象堆内存地址数据操作）。\n\n---\n\n#### IO流\n\n![IO流](http://cdn.tycoding.cn/20180127210359151.png)\n\n**1、Java中有几种类型的流？**\n字符流和字节流。字节流继承InputStream和OutputStream；字符流继承自InputStreamReader和OutputStreamWriter。\n\n**2、谈谈Java IO中的方法阻塞**\nJava中的阻塞式方法是指在程序调用该方法时，必须等待输入数据可用或检测到输入结果时结束或抛出异常，否则程序会一直停留在该语句上，不会执行下面的语句。比如read()和readLine()方法。\n\n**3、字符流和字节流的区别？**\n数据的输入和输出在计算机中最终都是通过字节的形式传递的，对应通过InputStream和OutputStream实现，他们都是针对字节操作的。\n而有时候通常需要读取一些完全是字符的文本数据，通常使用基于字节流的包装类字符流完成操作，他们通过InputStreamReader和OutputStreamWriter实现。\n字符流是字节流的包装，即使有时候读取的是字符流，但也可能需要转换为字节写入。\n\n**4、NIO**\n传统的IO是阻塞式的，会一直监听一个ServerSocket，在调用read()等方法时，会一直等到数据到来或缓冲区已满时才返回；调用accept()时也会一直阻塞到有客户端连接时才继续执行；每个客户端连接成功后，服务端都会踢动一个县城去处理该客户端的请求；在多线程处理多个连接时，每个线程都拥有自己的栈空间并且占用了一些CPU时间，每个线程遇到外部未准备好时，都会发生阻塞。阻塞的结果就是会打来大量的进程上下文切换。\n而对于NIO，它是非阻塞式，核心类：\n+ Buffer： 为所有的原始类型提供Buffer缓冲支持\n+ Charset： 字符集编码解码解决方案\n+ Channel： 一个新的原始IO抽象，用于读取Buffer类型，通道可以认为是一种链接，可以是到特定设备、程序或是网络链接。\n\n---\n\n#### 说说List、Set、Map三者的区别\n\n+ List: List接口储存一组不唯一 (可以有多个元素引用引用相同的对象)，有序的对象，可插入多条null元素\n+ Set: 不允许重复的集合，不允许有多个元素引用相同的对象，只允许有一个null元素\n+ Map: 使用键值对储存，Map会维护与Key有关联的值，两个Key可以引用相同的对象，但Key不能重复。\n\n---\n\n#### Array和ArrayList有什么区别？\n\n+ Array可以包含基本类型和对象类型；ArrayList只能包含对象类型\n+ Array大小是固定的；ArrayList大小是动态变化的\n+ ArrayList提供了诸如addAll()、removeAll()、iterator()方法等\n+ 对于基本数据类型，集合使用自动装箱来减少代码量；但当处理固定大小的基本类型数据时，这种方式相对较慢。\n\n---\n\n#### ArrayList和LinkedList的区别？\n\n1、**是否保证线程安全**： ArrayList和LinkedList都是不同步的，也就是不保证线程安全\n2、**底层数据结构**： ArrayList底层使用的是Object数组；LinkedList底层使用的是 双向链表 结构\n3、**插入和删除是否受元素位置影响？** ArrayList采用数组储存，所以插入和删除元素都受元素位置的影响；LinkedList 采用链表储存，所以插入、删除元素都不受元素位置影响。\n4、**是否支持快速随机访问？** LinkedList因为使用链表储存，无法通过元素索引快速访问；而ArrayList因为底层采用Object数组储存，可以通过索引快速随机访问。\n5、**内存空间占用**： ArrayList的空间浪费主要体现在在List列表的结尾都会预留一定的空间容量，而LinkedList的空间花费体现在他的每一个元素都需要消耗比ArrayList更多的空间（因为要储存直接后继和直接前驱以及数据）。\n\n---\n\n**什么是迭代器**\n*Iterator*接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法*iterator()*。迭代器在迭代的过程中可以删除底层集合的元素。\n\n**Iterator和ListIterator的区别？**\n+ Iterator可以用来遍历Set和List集合，但是ListIterator只能遍历List\n+ Iterator对集合只能向前遍历（next()）；而*ListIterator可以向前遍历（next()），也可以向后遍历（previous()）\n+ ListIterator实现了Iterator接口\n\n**RandomAccess接口**\n```bash\n//ArrayList\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{}\n\n//RandomAccess\npublic interface RandomAccess {\n}\n\n//LinkedList\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n{}\n```\n\n源码中ArrayList类实现了RandomAccess接口，LinkedList类中却没有实现这个接口，但是RandomAccess接口中却什么也没有定义。可以看RandomAccess接口上的注释：\n```bash\n/**\n * Marker interface used by <tt>List</tt> implementations to indicate that\n * they support fast (generally constant time) random access.  The primary\n * purpose of this interface is to allow generic algorithms to alter their\n * behavior to provide good performance when applied to either random or\n * sequential access lists.\n */\n```\n大概就是说这个接口仅是一个标识Marker，实现了这个接口的List将支持快速随机访问（random access）。接下来，我们查看Collections类中的binarySearch方法：\n```bash\npublic static <T>\nint binarySearch(List<? extends Comparable<? super T>> list, T key) {\n    if (list instanceof RandomAccess || list.size()<BINARYSEARCH_THRESHOLD)\n        return Collections.indexedBinarySearch(list, key);\n    else\n        return Collections.iteratorBinarySearch(list, key);\n}\n\nprivate static <T>\nint indexedBinarySearch(List<? extends Comparable<? super T>> list, T key) {\n    int low = 0;\n    int high = list.size()-1;\n\n    while (low <= high) {\n        int mid = (low + high) >>> 1;\n        Comparable<? super T> midVal = list.get(mid);\n        int cmp = midVal.compareTo(key);\n\n        if (cmp < 0)\n            low = mid + 1;\n        else if (cmp > 0)\n            high = mid - 1;\n        else\n            return mid; // key found\n    }\n    return -(low + 1);  // key not found\n}\n\nprivate static <T>\nint iteratorBinarySearch(List<? extends Comparable<? super T>> list, T key)\n{\n    int low = 0;\n    int high = list.size()-1;\n    ListIterator<? extends Comparable<? super T>> i = list.listIterator();\n\n    while (low <= high) {\n        int mid = (low + high) >>> 1;\n        Comparable<? super T> midVal = get(i, mid);\n        int cmp = midVal.compareTo(key);\n\n        if (cmp < 0)\n            low = mid + 1;\n        else if (cmp > 0)\n            high = mid - 1;\n        else\n            return mid; // key found\n    }\n    return -(low + 1);  // key not found\n}\n```\n\nbinarySearch()方法是从List中查找指定元素，其中首先判断传入的List时候实现了RandomAccess接口，如果实现了就调用indexedBinarySearch()方法，否则就调用iteratorBinarySearch()方法。再看这两个方法的源码：\n如果传入的List实现了RandomAccess接口，采用普通for循环遍历\n若传入的List未实现RandomAccess接口，采用iterator遍历\n\n**链表**\n\n**链表（Linked List）**由一串节点组成，每个节点包含任意的实例数据和一或两个用来指向上一个/下一个节点位置的指针\n>单向链表\n单向链表包含每个节点Node包含两个部分：第一部分data储存当前节点数据、第二部分next存储下一节点的地址。\n+ 单向链表只可向一个方向遍历，查找一个节点需要从第一个节点开始向下依次寻找\n![单向链表](http://cdn.tycoding.cn/1120165-20171207161602113-1451349858.png)\n\n+ 单向链表插入节点从链表头部插入，将新插入节点的next指向原头部节点位置即可\n![单向链表](http://cdn.tycoding.cn/1120165-20171207162758425-142549066.png)\n\n+ 删除节点，只需要将该节点上一个节点的next指向该节点下一个节点即可\n![单向链表](http://cdn.tycoding.cn/1120165-20171207162815925-341262498.png)\n\n>双向链表\n**双向链表** 包含两个指针，prev指向前一个节点，next指向后一个节点。\n![双向链表](http://cdn.tycoding.cn/双向链表.png)\n\n>双向循环链表\n**双向循环链表** 最后一个节点的*next*指向*head*，而*head*的*prev*指向最后一个节点，形成一个环。\n![双向循环链表](http://cdn.tycoding.cn/双向循环链表.png)\n\n---\n\n#### ArrayList和Vector和LinkedList的区别？\n+ **ArrayList**: 底层数据结构是数组，查询快，增删慢。线程不安全，效率高\n+ **Vector**: 底层数据结构是数组，查询快，增删慢。线程安全，效率低\n+ **LinkedList**: 底层数据结构是链表，查询慢，增删快。线程不安全，效率高\n\n---\n\n#### 谈谈ArrayList的扩容机制\nJava中基本数组都是定长的，一旦被实例化后就不能改变其长度，意味着创建数组时必须确定数组的容量大小。而很多情况下，数组的长度不是确定的，需要动态增减，ArrayList的出现就解决了这一问题。\nArrayList的扩容机制表现在add()方法上，先看add()方法的源码：\n```bash\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\n//获取最小容量\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\n//判断是否需要扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n```\n\n当向ArrayList对象中添加新元素时，首先会调用ensureCapacityInternal(size)方法，size为最小扩容量；ensureCapacityInternal()方法会首先调用calculateCapacity来确定需要的最小容量；最后调用ensureExplicitCapacity()方法判断时候需要扩容。最后判断所需最小容量如果大于当前数组的空间大小，则需要扩容，调用grow()方法扩容：\n```bash\nprivate void grow(int minCapacity) {\n    // 获取ArrayList中elementDaata数组的长度\n    int oldCapacity = elementData.length;\n    // 扩容至原来的1.5倍\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    // 判断新的数组容量够不够\n    // 够了就直接使用这个长度创建新数组\n    if (newCapacity - minCapacity < 0)\n        // 不够就将数组的长度设置为需要的长度\n        newCapacity = minCapacity;\n    // 检查此时的最大值是否溢出\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // 调用Arrays.copyOf()将elementData数组数据拷贝到新数组\n    // 并将elementData指向新数组newCapacity的内存地址\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n**总结**： ArrayList扩容的本质就是计算所需扩容size得到新的数组，将原数组中的数据复制到新数组中，最后将原数组指向新数组在堆内存的引用地址即可。\n\n---\n\n#### HashMap和HashTable的区别？\n1、HashMap和HashTable都实现了Map接口，主要区别在线程安全性、同步、速度\n2、线程是否安全： HashMap非同步线程不安全，HashTable同步线程安全。HashTable内部的方法都经过synchronized修饰。\n3、效率: HashMap线程不安全效率高，HashTable线程安全效率低。\n3、对null key和null value的支持： HashMap中，null可以作为key，这样的key只有一个，但可以有多个key对应的值为null；在HashTable中的key不能为null\n5、底层数据结构： JDK1.8后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阀值时（默认是8），将链表转换为红黑树，以减少搜索时间。HashTable没有这样的机制。\n\n---\n\n#### HashMap和HashSet区别?\n**HashSet底层采用HashMap实现**\nHashMap|HashSet\n:--|:--\n实现了Map接口|实现了Set接口\n储存键值堆|仅储存对象\n调用put()向Map中添加元素|调用add()向Set中添加元素\nHashMap使用Key计算HashCode|HashSet使用成员对象来计算hashCode值，对于两个对象来说，hashCode可能相同，所以用equals判断对象的相等性\n\n---\n\n#### HashSet如何检查重复？\n在前面讲hashCode和equals时就提到了，HashSet集合同样适用。向HashSet中存入一个元素，HashSet首先会根据对象的hashCode值判断当期集合中此hashCode对应的位置有没有值，如果没有就直接添加，如果有就再调用equals方法比较两个对象是否相同，相同就不再储存（保证了Set集合不重复的特性），否则就散列到其他位置储存。\n\n---\n\n#### HashMap底层实现？\nMap在Java中的实现由很多，HashMap便是其中之一，随着JDK版本的更新，HashMap的实现也在不断更新：\n+ <=JDK1.7: Table数组 + Entry链表\n+ >=JDK1.8: Table数组 + Entry链表/红黑树\n\n#### Hash\n\n**Hash（哈希、散列）**，就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。\nHash函数的一种实现：\n直接取余法： f(x) = x mod max\n位运算法： f(x) = x & max\nHashMap采用 位运算法，相比直接取余，位运算直接对内存中的二进制数据操作，不需要再转阿欢为十进制，因此处理速度很快：\n```bash\n7 & 33 = 1\n    \n    000111\n  & 100001\n  --------\n    000001 = 1\n\n```\n\n---\n\n#### Hash冲突\n假设将100个数据通过Hash散列后存储到10个不同的容器中，必定会出现多个元素分布到同一个容器中。具体到HashMap集合中，若将多个K-V数据存入put，HashMap根据元素key计算到对应的hashCode值，如果计算得到多个不同的key对应的hashCode值相同（即要储存到同一位置），此时这种现象就称为 Hash冲突。\nHashMap默认采用了 链地址法 解决Hash冲突问题，即通过类似单链表的方式将 冲突的元素 串起来，搜索时遍历这个链表即可。注意： 如果冲突的Hash越来越多，这个链就会越来越长。\n\n---\n\n#### 实现原理\n![hash冲突与实现原理](http://cdn.tycoding.cn/8db4a3bdfb238da1a1c4431d2b6e075c_hd.png)\n这里我们需要了解两个名词：\nTable: 哈希桶数组（哈希表），存放Node元素，底层是一个Node[] table\nNode: 节点元素，Node是HashMap的一个内部类，实现了Map.Entry接口，本质是一个映射（K-V）\nHashMap内部的一些关键属性需要了解：\nDEFAULT_INITIAL_CAPACITY: Tabale数组的初始化长度，默认是1 << 4，2^4 = 16\nMAXIMUM_CAPACITY: Table数组最高长度，默认为1 << 30，2^30 = 1073741824\nDEFAULT_LOAD_FACTOR: 负载因子，当总元素数 > 数组长度 * 负载因子时，Table数组将扩容，默认是0.75\nTREEIFY_THRESHOLD: 树化阀值，当单个Table内Node数量超过该值，则将链表转换为红黑树，默认是8\nUNTREEIFY_THRESHOLD: 链化阀值，当扩容期间单个Table的Entry数量小于该值，则将红黑数转换为链表，默认为6\nMIN_TREEIFY_CAPACITY: 最小树化阀值，当Table中所有元素超过该值，才会进行树化\nsize: 当前HashMap实际存在的键值对数量\nthreshold: HashMap所能容纳的最大数据量的Node（键值对）个数。Node[] table初始化长度length是16，loadFactor负载因子默认是0.75，threshold = length * loadFactor\nloadFactor: 负载因子，默认是0.17\nmodCount: 记录HashMap内部结构发生变化的次数\nHashMap内部存在一个NodeTable数组，这个数组的初始化长度是DEFAULT_INITIAL_CAPACITY，他是一个单向链表：\n```bash\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash; //key的Hash值\n    final K key; //key\n    V value; //value\n    Node<K,V> next; //下一个节点\n}\n```\n\n参考单链表的结构，Table中每个Node节点包含两个部分，Node元素作为节点的header，next指向下一个节点。**这种链式结构的存在正是为了解决Hash冲突**\n\n栗子：\n```bash\nmap.put(\"loonycoder\", \"18\");\n```\nHashMap将根据\"loonycoder\"这个Key得到其hashCode值，然后经过Hash算法定位到其在HashMap储存的位置，如果两个不同的key定位到了同一个位置，此时就发生了Hash冲突。\n在JDK1.7之前，解决Hash冲突的方式是将冲突的Node节点放在一个链表中。在JDK1.8中，当Table中链长超过TREEIFY_THRESHOLD阀值后，会将链表转换为红黑树的实现TreeNode:\n```bash\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n    TreeNode<K,V> parent;  // red-black tree links\n    TreeNode<K,V> left;\n    TreeNode<K,V> right;\n    TreeNode<K,V> prev;    // needed to unlink next upon deletion\n    boolean red;\n}\n```\n当发生**Hash冲突**时，根据HashMap默认采用的 **链地址法**，即将冲突的Hash串成一个链式结构储存到HashMap对应的位置。但是 随着Hash冲突越来越多，这个**链将越来越长**，这就将导致遍历碰撞key时的消耗不断增加，也就直接导致了性能的不足。在JDK1.8后，HashMap对单个Table中的Node超出某个阀值后，将开始树化操作（链表转换为红黑树），这对搜索的性能将会有很大的提升。\n![地址链法](http://cdn.tycoding.cn/JDK1.8之后的HashMap底层数据结构.jpg)\n\n**总结**\n到此，我们总结一下HashMap的实现原理：\n+ HashMap根据key的hashCode值存储元素。put新元素会遍历链表，根据新元素的key计算hashCode得到散列位置，如果该位置有值再调用equals判断value是否相同，相同就散列到其他位置储存。\n+ HashMap在put新元素时如果遇到key对应的hashCode相同，可能会产生Hash冲突问题。HashMap的做法是采用链式结构（链表）储存存在Hash冲突的元素，查询时再遍历这个链接结构元素集合即可。\n+ 如果发生Hash冲突的元素很多，这个 **链** 将很长，影响到遍历key消耗性能的增加，于是判断当Table中Node节点大于默认值8时，将链表转换为红黑树（TreeNode）存储元素。\n\n---\n\n#### Collection和Collections的区别？\n+ Collection是集合类的上级接口，继承他的接口主要有Set和List\n+ Collections仅是针对集合类封装的一个工具类，在java.util包下\n\n---\n\n#### Comparable和Comparator的区别？\n\n+ Comparable接口来自java.lang包，提供compareTo(Object obj) 方法排序\n+ Comparator接口来自java.util包，提供compare(Object obj1, Object obj2)方法排序\n当需要对一个集合采用一种方式排序，使用Comparable接口；如果需要对一个集合采用两种排序方式就使用Comparator接口。\n\n#### Java集合框架总结\n\n##### Collection\n![Collection](http://cdn.tycoding.cn/QQ20190623-181246.png)\n\n**List**\n\nArrayList: Object数组，线程不安全，查询快，增删慢，效率高\nVector: Object数组，线程安全，查询快，增删慢，效率低\nLinkedList: 双向链表，线程不安全，查询慢，增删快，效率高\n\n**Set**\n\nHashSet: 无序、唯一，基于HashMap实现，底层采用HashMap存储元素\nLinkedHashSet: LinkedHashSet继承自HashSet，并且其内部通过LinkedHashMap实现\nTreeSet 有序、唯一，红黑树\n\n##### Map\n![Map](http://cdn.tycoding.cn/QQ20190623-181259.png)\n\n+ HashMap: JDK1.8之前HashMap由数组和链表组成，数组时HashMap的主体，链表是为了解决Hash冲突问题。JDK1.8之后当Table中Node数量大于8时，就将链表转换为红黑树，以减少搜索时间提高效率。\n+ LinkedHashMap: LinkedHashMap继承自HashMap，所有他的底层仍然由数组和链表/红黑树实现。另外，LinkedHashMap在上面的结构基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。\n+ HashTable: 数组+链表组成。数组时HashTable的主体，链表是为了解决Hash冲突问题\nTreeMap: 红黑树\n\n---\n\n### Java并发\n\n#### 线程和进程的区别？\n+ 进程是程序的一次执行过程，是系统运行程序的基本单位\n+ 线程与进程类似，但线程是一个比进程更小的执行单位。一个进程执行过程中可以产生多个线程，\n在Java中，启用一个main方法就是启动了一个JVM进程，而main函数所在的线程就是这个进程中的一个线程，也称为主线程。\n\n---\n\n#### 从JVM角度分析进程和线程的关系？\n根据JVM的内存划分，对于线程而言：多个线程共享进程的堆、方法区资源，但每个线程又有自己的程序计数器、虚拟机栈、本地方法栈。\n\n也就是说，在一个JVM进程中，可以存在多个线程，每个线程都共享了这个JVM进程的方法区、堆；并且每个线程又都具有自己的虚拟机栈、本地方法栈、程序计数器等。\n\n##### 为什么方法区和堆是线程共享区？\n+ **方法区（Method Area）** 存储已被虚拟机加载的类信息、常量、静态变量等数据。方法区中又包含 运行时常量池 ，这部分区域储存Class文件信息和编译期生成的各种字面量和符号引用。\n+ **堆（Heap）** 堆内存储存了对象实例（比如new关键字创建的实例对象），它是JVM中内存区最大的一块区域。\n所以，一个进程的启动可能包含了多个线程，而这个进程中的静态变量等都是随着类加载而加载的，他应该不属于某个线程独有，所以将其存储于方法区中。对象实例都储存在Java堆内存中，作为Java最大的一块内存区域，肯定不能是某个线程独占的。\n\n##### 为什么虚拟机栈和本地方法栈是线程独占区？\n+ **虚拟机栈**： 每个Java方法执行的同时都会创建一个栈帧储存局部变量表、操作数栈、方法出口等。从方法的执行到结束，对应将栈帧压入Java虚拟机栈和从虚拟机栈中弹出的过程。\n+ **本地方法栈**： 本地方法栈类似Java虚拟机栈，只不过Java虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的native方法服务。\n\n##### 程序计数器是什么？\n\n**程序计数器（Program Counter Register）**：当前线程执行的字节码的行号指示器。每个线程都有独立的程序计数器。此内存区域是Java虚拟机中唯一一个没有任何OutOfMemoryError情况的区域。\n\n---\n\n#### 说说并行和并发的区别？\n+ **并行**： 同一时间段，多个任务都在执行（单位时间内不一定同时执行）\n+ **并发**： 单位时间内，多个任务同时执行。\n\n---\n\n#### 使用多线程可能带来什么问题？\n并发编程的目的就是提高程序的执行效率，但并发编程可能造成：内存泄漏、上下文切换、死锁等问题\n\n---\n\n#### 说说线程的生命周期和状态？\n状态名称|状态说明\n:--|:--\nnew|初始状态，线程被创建，但还没有调用start()方法\nrunnable|运行状态，Java线程将操作系统中就绪和运行两种状态统称为“运行中”\nblocked|阻塞状态，表示线程阻塞于锁\nwaiting|等待状态，线程需要等待当前线程或其他线程执行完成\ntime_waiting|超时等待状态，他可以实现在指定时间后自动返回\nterminated|终止状态，表示当前线程已经执行完毕\n\n对应，程序会因为不同代码的执行产生不同的状态，如下图：\n![线程图](http://cdn.tycoding.cn/Java+线程状态变迁.png)\n如上，线程创建后将进入NEW（初始）状态，调用start()开始运行，当线程执行wait()方法后，线程将进入WAITING（等待）状态，可以通过wait(long)或join(long)等方法终止等待状态；当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到BLOCKED（阻塞）状态。\n\n---\n\n#### 什么是上下文切换？\n简单来说，并发编程中实际线程的数量都可能大于CPU核心的个数，而COU一个核心在任意时刻只能被一个线程使用，CPU为了保证并发的线程都有被执行，采用**随机分配时间片并轮转**的方式；而一个线程的时间片用户将保存并进入就绪状态直到下次分配时间片再执行，这个 **任务从保存到再加载的过程就是一次上下文切换**。\n\n---\n\n#### 什么是死锁？如何避免?\n举例：线程A持有资源2，线程B持有资源1，在线程A、B都没有释放自己所持有资源的情况下（锁未释放），他们都想同时获取对方的资源，因为资源1、2都被锁定，两个线程都会进入相互等待的情况，这种情况称为死锁。\n![死锁](http://cdn.tycoding.cn/2019-4死锁1.png)\n栗子：\n```bash\npublic class DeadLockDemo {\n    private static Object resource1 = new Object();//资源 1\n    private static Object resource2 = new Object();//资源 2\n\n    public static void main(String[] args) {\n        new Thread(() -> {\n            synchronized (resource1) {\n                System.out.println(Thread.currentThread() + \"get resource1\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource2\");\n                synchronized (resource2) {\n                    System.out.println(Thread.currentThread() + \"get resource2\");\n                }\n            }\n        }, \"线程 1\").start();\n\n        new Thread(() -> {\n            synchronized (resource2) {\n                System.out.println(Thread.currentThread() + \"get resource2\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource1\");\n                synchronized (resource1) {\n                    System.out.println(Thread.currentThread() + \"get resource1\");\n                }\n            }\n        }, \"线程 2\").start();\n    }\n}\n```\n\nOutput：\n\n```bash\nThread[线程 1,5,main]get resource1\nThread[线程 2,5,main]get resource2\nThread[线程 1,5,main]waiting get resource2\nThread[线程 2,5,main]waiting get resource1\n```\n线程1以resource1作为同步监视器，即可以轻松获取resource1同时也锁定了resource1，此时调用sleep让线程1等待1秒钟；此时线程2开始执行，他以resource2作为同步监视器同时也锁定了resource2，此时调用sleep让线程2等待1秒钟；而此时线程1等待1秒已经结束了，当他想要获取resource2时发现resource2已经被线程2锁定了，同理线程2结束等待后想要获取resource1时发现resource1已经被线程1锁定了。那么两者都无法同时获取对方的线程，便进入死锁状态。\n因此产生死锁需要具备以下四个条件：\n\n1、互斥条件：该资源任意一个时刻只能由一个线程占用\n2、请求和保持条件：一个线程因请求资源而阻塞时，对已获取的资源保持不放\n3、不剥夺条件：线程已获取的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才使用资源\n4、循环等待条件：若干进程之前形成一种头尾相接的循环等待资源关系。\n\n避免死锁就要破坏这四个条件中任意一个：\n1、破坏互斥条件：这个条件我们无法破坏，因为我们用锁的目的就是想让他们互斥\n2、破坏请求与保持条件：一次性申请所有资源\n3、破坏循环等待条件：按照一定顺序申请资源，避免资源的循环使用\n\n解决方案: 修改线程2\n```bash\nnew Thread(() -> {\n    synchronized (resource1) {\n        System.out.println(Thread.currentThread() + \"get resource1\");\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread() + \"waiting get resource2\");\n        synchronized (resource2) {\n            System.out.println(Thread.currentThread() + \"get resource2\");\n        }\n    }\n}, \"线程 2\").start();\n```\n\nOutput：\n```bash\nThread[线程 1,5,main]get resource1\nThread[线程 1,5,main]waiting get resource2\nThread[线程 1,5,main]get resource2\nThread[线程 2,5,main]get resource1\nThread[线程 2,5,main]waiting get resource2\nThread[线程 2,5,main]get resource2\n\nProcess finished with exit code 0\n```\n\n---\n\n#### 说说sleep()方法和wait()方法的区别？\n两者最主要的区别在于：**sleep 方法没有释放锁，而 wait 方法释放了锁**\n+ 两者都可以暂停线程的执行\n+ wait()通常用于线程间交互/通信，sleep()通常用户暂停执行\n+ wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。\n\n---\n\n#### 调用start()方法会执行run()方法，为什么不能直接调用run()方法？\nnew一个Thread，线程进入了新建状态；调用start()方法，会启用一个线程并使线程进入就绪状态，当分配到时间片后就可以开始执行。start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这才是真正的多线程工作。而直接执行run()方法，会吧run()方法当做一个main线程下的一个普通方法去执行，并不会在某个线程中执行他。\n**总结：调用start方法可以启动线程并使线程进入就绪状态，而run()方法只是Thread的一个普通方法调用，还是在main主线程里执行，并不会在一个新线程中执行**\n\n---\n\n#### synchronized关键字\nsynchronized关键字解决多个线程之间访问资源的同步性，synchronized关键字可以保证它修饰的方法或代码块在任意时刻只能有一个线程执行。\nsynchronized关键字最主要的三种使用方式：\n+ **修饰实例方法**： 给当前对象加锁，进入同步代码块前要获取当前对象实例的锁\n```bash\n// 此处的`synchronized`就相当于`synchronized(this)`，锁定的是当前对象\npublic synchronized void add() {}\n```\n+ **修饰静态方法**： 给当前类加锁（因为静态方法没有this），会作用于当前类的所有对象实例，因为静态成员不属于任何一个实例对象，是一个类成员。\n```bash\n// 此处的`synchronized`就相当于`synzhronized(T.class)`，(T的当前类)\npublic synchronized static void add() {}\n```\n\n+ **修饰代码块**：指定加锁对象，对给定对象加锁，进入同步代码块之前要获取给定对象的锁\n\n---\n","slug":"JavaBasic1","published":1,"updated":"2020-02-12T10:54:17.354Z","_id":"ck529vslf0004be6k1b8954cs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>记录一些Java基础的知识点，为了自己查阅资料的时候方便一些。</p>\n<hr>\n<h3 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h3><h4 id=\"JDK和JRE的区别？\"><a href=\"#JDK和JRE的区别？\" class=\"headerlink\" title=\"JDK和JRE的区别？\"></a>JDK和JRE的区别？</h4><p>1、jre即Java Runtime Environment，Java运行环境。包括Java虚拟机和Java类库<br>2、jdk是Java开发工具包，例如：tools.jar</p>\n<hr>\n<h4 id=\"和-equals的区别\"><a href=\"#和-equals的区别\" class=\"headerlink\" title=\"== 和 equals的区别\"></a>== 和 equals的区别</h4><p>1、==是一个比较运算符，对于基本类型，比较的是具体的数值(int、double..)；对于引用类型，比较的是对象的内存地址<br>2、equals是超类Object就具有的方法，因此所有的引用类型都具有这个方法，只用用来比较引用数据类型。equals方法默认比较的对象内存地址，如果重写该方法，一般比较的是对象的属性值。<br>Object类equals方法源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (this == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>new对象是在堆内存中开辟一份空间，所以其引用变量就是指向了堆内存的地址，举个栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EqualsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User a = new User();</span><br><span class=\"line\">        User b = new User();</span><br><span class=\"line\">        System.out.println(a == b); //<span class=\"literal\">false</span></span><br><span class=\"line\">        System.out.println(a.equals(b)); //<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object o) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (this == o) <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o instanceof User)) <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        User user = (User) o;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> age == user.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">hashCode</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> Objects.hash(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"两个对象的hashCode-相同，则equals-一定为true？\"><a href=\"#两个对象的hashCode-相同，则equals-一定为true？\" class=\"headerlink\" title=\"两个对象的hashCode()相同，则equals()一定为true？\"></a>两个对象的hashCode()相同，则equals()一定为true？</h4><p><strong>如果两个对象相等(equals()为true)，那么他们的hashCode()一定相同</strong><br><strong>如果两个对象的hashCode()相同，他们的equals()方法不一定相同</strong></p>\n<p>JVM虚拟机通过hashCode()方法为Object对象分配一个int类型数值，以此来提高Java中集合对象(Map、HashMap…)中对象存储的效率。当集合中需要添加新元素，首先通过hashCode()获取该对象对应的地址位置，如果该位置上没有值就直接储存到该位置，如果有值就再调用equals()与新元素的值比较，相同就不再储存否则就散列到其他位置，大大减少了调用equals()方法比较的次数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EqualsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User a = new User();</span><br><span class=\"line\">        User b = new User();</span><br><span class=\"line\">        System.out.println(a == b); //<span class=\"literal\">false</span></span><br><span class=\"line\">        System.out.println(a.equals(b)); //<span class=\"literal\">false</span></span><br><span class=\"line\">        System.out.println(a.hashCode() == b.hashCode()); //<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"final的作用\"><a href=\"#final的作用\" class=\"headerlink\" title=\"final的作用\"></a>final的作用</h4><p>可修饰类、类属性、类方法。<br>1、被final修饰的类不能被继承<br>2、final修饰的类属性可以是基本类型也可以是引用类型，如果是基本类型就不能再被赋值；如果是引用类型，就不能再指向其他引用地址，但对象本身是可以改变的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FinalTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final User USER = new User();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User u2 = new User();</span><br><span class=\"line\">//        user = u2; // ERROR</span><br><span class=\"line\">        USER.age = 23;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    int age = 12;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、类中所有private方法都是隐式的定义为final，为private方法添加final就毫无意义。</p>\n<hr>\n<h4 id=\"String属于基本数据类型吗？\"><a href=\"#String属于基本数据类型吗？\" class=\"headerlink\" title=\"String属于基本数据类型吗？\"></a>String属于基本数据类型吗？</h4><p><strong>不，String属于特殊的引用类型</strong></p>\n<p>Java中基本数据类型有：int、short、long、char、boolean、float、double、byte</p>\n<p>1、String是特殊的引用类型并且是final的，JVM使用字符串常量池储存字符串数据。创建新的字符串，JVM首先会去字符串常量池中寻找有没有该字符串，如果没有就添加到该常量池，如果有就返回该字符串在常量池中的引用。<br>2、String s = “a”; s += “b”;，这段代码执行前后，字符串常量池中将出现a和ab两个字符串常量，而原本s变量的引用指向了常量池中ab。<br>3、String s = new String(“ab”)，这段代码一共创建了几个对象？一个或两个。如果字符串常量池中有了ab这个字符串(比如在此之前已经使用了String str = “ab”)，那么新的s对象引用其实仅仅是指向了字符串常量中的ab，并没有创建新的字符串对象。但是，每次调用new都会在堆内存开辟空间，创建一个String对象，这是肯定的。</p>\n<p>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StringTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String a = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String b = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String c = new String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">        System.out.println(a == b); //<span class=\"literal\">true</span></span><br><span class=\"line\">        System.out.println(a.equals(b)); //<span class=\"literal\">true</span></span><br><span class=\"line\">        System.out.println(a.equals(c)); //<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>String和StringBuffer和StringBuilder的区别</strong><br>1、String是不可变字符串，StringBuffer和StringBuilder是可变字符串。如果经常改变字符串的原始数据，最好使用StringBuffer代替。<br>2、String默认重写了equals方法和hashCode()方法；而StringBuffer没有重写equals方法，使用new StringBuffer(“”)会直接在堆内存中开辟空间储存对象。因此将StringBuffer对象储存仅Java集合中可能会出现问题。<br>3、StringBuffer是线程安全的，效率低；StringBuilder是线程不安全的，效率高。</p>\n<hr>\n<h4 id=\"static关键字？是否可覆盖？\"><a href=\"#static关键字？是否可覆盖？\" class=\"headerlink\" title=\"static关键字？是否可覆盖？\"></a>static关键字？是否可覆盖？</h4><p>static关键字表明一个成员变量或者是成员方法可以在没有所属的类实例变量的情况下被访问。被static标记的方法不能被覆盖，因为方法的覆盖是基于运行时动态绑定的，而static方法在编译时就已经和该类绑定了，也就是static标记的变量、方法都是随着类的加载而加载的，所以可以通过不创建对象实例就能访问该变量、方法；而不创建对象实例就访问非static变量、方法是不行的，因为此变量、方法还没有被创建。</p>\n<p>static标记的方法只能访问static变量或方法<br>非static标记的方法可以访问static或非static标记的变量或方法</p>\n<hr>\n<h4 id=\"自动拆、装箱\"><a href=\"#自动拆、装箱\" class=\"headerlink\" title=\"自动拆、装箱\"></a>自动拆、装箱</h4><p>因为Java自身面向对象OOP的特性，而一切基本数据类型都不具有面向对象的特性，所以Java为基本的数据类型提供了对应的引用类型。<br>具体表现在程序在编译期间自动将基本数据类型转换为引用类型(装箱)、将引用数据类型转换为基本数据类型(拆箱)</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">基本数据类型</th>\n<th align=\"center\">引用数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">int</td>\n<td align=\"center\">Integer</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">Byte</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">Short</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">Long</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">Float</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">Double</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">Char</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">Boolean</td>\n</tr>\n</tbody></table>\n<p>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Integer i1 = 100;</span><br><span class=\"line\">    Integer i2 = 100;</span><br><span class=\"line\">    Integer i3 = 200;</span><br><span class=\"line\">    Integer i4 = 200;</span><br><span class=\"line\">    System.out.println(i1 == i2);</span><br><span class=\"line\">    System.out.println(i3 == i4);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>Java中实现基本数据类型和引用类型之间的拆装箱一般都是用过valueOf()方法实现的。例如我们看下Integer类的valueOf()方法源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Integer valueOf(int i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"built_in\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到：当声明一个新的整数型变量，编译时通过Integer类的valueOf()进行拆装箱计算，这个方法会首先比较这个整数值是否在IntegerCache的范围内，如果在就返回IntegerCache类中的数值；如果不在就直接new Integer。那么我们看下IntegerCache类源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static class IntegerCache &#123;</span><br><span class=\"line\">    static final int low = -128;</span><br><span class=\"line\">    static final int high;</span><br><span class=\"line\">    static final Integer cache[];</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        // high value may be configured by property</span><br><span class=\"line\">        int h = 127;</span><br><span class=\"line\">        String integerCacheHighPropValue =</span><br><span class=\"line\">            sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (integerCacheHighPropValue != null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                int i = parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                i = Math.max(i, 127);</span><br><span class=\"line\">                // Maximum array size is Integer.MAX_VALUE</span><br><span class=\"line\">                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</span><br><span class=\"line\">            &#125; catch( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                // If the property cannot be parsed into an int, ignore it.</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        high = h;</span><br><span class=\"line\"></span><br><span class=\"line\">        cache = new Integer[(high - low) + 1];</span><br><span class=\"line\">        int j = low;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int k = 0; k &lt; cache.length; k++)</span><br><span class=\"line\">            cache[k] = new Integer(j++);</span><br><span class=\"line\"></span><br><span class=\"line\">        // range [-128, 127] must be interned (JLS7 5.1.7)</span><br><span class=\"line\">        assert IntegerCache.high &gt;= 127;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"function\"><span class=\"title\">IntegerCache</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，当声明一个新的整型变量时（int、Integer），如果这个变量值的大小在[-128, 127]之间，就直接返回IntegerCache中储存的常量值，否则就直接new一个新的Integer来保存这个常量值。所以上面才会出现false的结果。<br>同理：其他的数据类型例如：long、short等都具有对应的LongCache、ShortCache等类。</p>\n<hr>\n<h4 id=\"Overriding和Overloaded\"><a href=\"#Overriding和Overloaded\" class=\"headerlink\" title=\"Overriding和Overloaded\"></a>Overriding和Overloaded</h4><p>方法的重写Overriding和方法的重载Overloaded都是Java多态性的一种表现。<br>Overriding: 子类中定义了和父类中名称、参数列表相同的方法<br>Overloaded: 方法名相同，参数列表不同</p>\n<hr>\n<h4 id=\"Java支持多继承吗？\"><a href=\"#Java支持多继承吗？\" class=\"headerlink\" title=\"Java支持多继承吗？\"></a>Java支持多继承吗？</h4><p>不支持。Java中每个类都只能继承一个类，可以实现多个接口。但是可以通过多层继承实现。<br>类定义属性和方法，描述某一类事物的抽象。而接口定义了行为，并不限于任何具体意向。<br>从逻辑上说，单继承更加明确指出一个子类就应该是其父类代表的事物中某个更具体的类别。而接口则不同，接口定义了一些公共行为。因此类对接口的implements称为实现而不能称为继承。</p>\n<hr>\n<h4 id=\"接口和抽象类的区别？\"><a href=\"#接口和抽象类的区别？\" class=\"headerlink\" title=\"接口和抽象类的区别？\"></a>接口和抽象类的区别？</h4><ul>\n<li>接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</li>\n<li>接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法 ( 包含具体实现 )</li>\n<li>类实现接口就必须实现接口中定义的所有方法；但继承一个抽象类，可以不实现抽象类中的抽象方法 ( 但前提是这个类也是抽象的 )</li>\n<li>抽象类可以是不提供接口方法实现的情况下实现接口</li>\n<li>接口中声明的变量默认都是final的；但抽象类可以包含非final的变量</li>\n<li>接口中的成员方法默认都是public的；但抽象类中的成员函数可以是private、protected、public</li>\n<li>接口是绝对抽象的，不可以被实例化；</li>\n</ul>\n<hr>\n<h4 id=\"引用传递和值传递\"><a href=\"#引用传递和值传递\" class=\"headerlink\" title=\"引用传递和值传递\"></a>引用传递和值传递</h4><p><strong>Java中采用值传递的方式</strong><br>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TransferTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int a = 1;</span><br><span class=\"line\">        Integer b = 2;</span><br><span class=\"line\">        swap(a, b);</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] arr = &#123;1, 2&#125;;</span><br><span class=\"line\">        swap(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void swap(int[] arr) &#123;</span><br><span class=\"line\">        arr[0] = 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void swap(int a, Integer b) &#123;</span><br><span class=\"line\">        a = 10;</span><br><span class=\"line\">        b = 20;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法传递时传递的参数其实仅值原参数的一个拷贝，对于基本类型传递的就是具体的值的拷贝，对于引用类型传递的是对象地址。<br>所以上面的例子中，基本数据类型a,b经过swap方法并没有改变原始值，而引用类型arr数组经过swap方法就改变了原始值（因为直接对对象堆内存地址数据操作）。</p>\n<hr>\n<h4 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h4><p><img src=\"http://cdn.tycoding.cn/20180127210359151.png\" alt=\"IO流\"></p>\n<p><strong>1、Java中有几种类型的流？</strong><br>字符流和字节流。字节流继承InputStream和OutputStream；字符流继承自InputStreamReader和OutputStreamWriter。</p>\n<p><strong>2、谈谈Java IO中的方法阻塞</strong><br>Java中的阻塞式方法是指在程序调用该方法时，必须等待输入数据可用或检测到输入结果时结束或抛出异常，否则程序会一直停留在该语句上，不会执行下面的语句。比如read()和readLine()方法。</p>\n<p><strong>3、字符流和字节流的区别？</strong><br>数据的输入和输出在计算机中最终都是通过字节的形式传递的，对应通过InputStream和OutputStream实现，他们都是针对字节操作的。<br>而有时候通常需要读取一些完全是字符的文本数据，通常使用基于字节流的包装类字符流完成操作，他们通过InputStreamReader和OutputStreamWriter实现。<br>字符流是字节流的包装，即使有时候读取的是字符流，但也可能需要转换为字节写入。</p>\n<p><strong>4、NIO</strong><br>传统的IO是阻塞式的，会一直监听一个ServerSocket，在调用read()等方法时，会一直等到数据到来或缓冲区已满时才返回；调用accept()时也会一直阻塞到有客户端连接时才继续执行；每个客户端连接成功后，服务端都会踢动一个县城去处理该客户端的请求；在多线程处理多个连接时，每个线程都拥有自己的栈空间并且占用了一些CPU时间，每个线程遇到外部未准备好时，都会发生阻塞。阻塞的结果就是会打来大量的进程上下文切换。<br>而对于NIO，它是非阻塞式，核心类：</p>\n<ul>\n<li>Buffer： 为所有的原始类型提供Buffer缓冲支持</li>\n<li>Charset： 字符集编码解码解决方案</li>\n<li>Channel： 一个新的原始IO抽象，用于读取Buffer类型，通道可以认为是一种链接，可以是到特定设备、程序或是网络链接。</li>\n</ul>\n<hr>\n<h4 id=\"说说List、Set、Map三者的区别\"><a href=\"#说说List、Set、Map三者的区别\" class=\"headerlink\" title=\"说说List、Set、Map三者的区别\"></a>说说List、Set、Map三者的区别</h4><ul>\n<li>List: List接口储存一组不唯一 (可以有多个元素引用引用相同的对象)，有序的对象，可插入多条null元素</li>\n<li>Set: 不允许重复的集合，不允许有多个元素引用相同的对象，只允许有一个null元素</li>\n<li>Map: 使用键值对储存，Map会维护与Key有关联的值，两个Key可以引用相同的对象，但Key不能重复。</li>\n</ul>\n<hr>\n<h4 id=\"Array和ArrayList有什么区别？\"><a href=\"#Array和ArrayList有什么区别？\" class=\"headerlink\" title=\"Array和ArrayList有什么区别？\"></a>Array和ArrayList有什么区别？</h4><ul>\n<li>Array可以包含基本类型和对象类型；ArrayList只能包含对象类型</li>\n<li>Array大小是固定的；ArrayList大小是动态变化的</li>\n<li>ArrayList提供了诸如addAll()、removeAll()、iterator()方法等</li>\n<li>对于基本数据类型，集合使用自动装箱来减少代码量；但当处理固定大小的基本类型数据时，这种方式相对较慢。</li>\n</ul>\n<hr>\n<h4 id=\"ArrayList和LinkedList的区别？\"><a href=\"#ArrayList和LinkedList的区别？\" class=\"headerlink\" title=\"ArrayList和LinkedList的区别？\"></a>ArrayList和LinkedList的区别？</h4><p>1、<strong>是否保证线程安全</strong>： ArrayList和LinkedList都是不同步的，也就是不保证线程安全<br>2、<strong>底层数据结构</strong>： ArrayList底层使用的是Object数组；LinkedList底层使用的是 双向链表 结构<br>3、<strong>插入和删除是否受元素位置影响？</strong> ArrayList采用数组储存，所以插入和删除元素都受元素位置的影响；LinkedList 采用链表储存，所以插入、删除元素都不受元素位置影响。<br>4、<strong>是否支持快速随机访问？</strong> LinkedList因为使用链表储存，无法通过元素索引快速访问；而ArrayList因为底层采用Object数组储存，可以通过索引快速随机访问。<br>5、<strong>内存空间占用</strong>： ArrayList的空间浪费主要体现在在List列表的结尾都会预留一定的空间容量，而LinkedList的空间花费体现在他的每一个元素都需要消耗比ArrayList更多的空间（因为要储存直接后继和直接前驱以及数据）。</p>\n<hr>\n<p><strong>什么是迭代器</strong><br><em>Iterator</em>接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法<em>iterator()</em>。迭代器在迭代的过程中可以删除底层集合的元素。</p>\n<p><strong>Iterator和ListIterator的区别？</strong></p>\n<ul>\n<li>Iterator可以用来遍历Set和List集合，但是ListIterator只能遍历List</li>\n<li>Iterator对集合只能向前遍历（next()）；而*ListIterator可以向前遍历（next()），也可以向后遍历（previous()）</li>\n<li>ListIterator实现了Iterator接口</li>\n</ul>\n<p><strong>RandomAccess接口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ArrayList</span><br><span class=\"line\">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class=\"line\">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//RandomAccess</span><br><span class=\"line\">public interface RandomAccess &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//LinkedList</span><br><span class=\"line\">public class LinkedList&lt;E&gt;</span><br><span class=\"line\">    extends AbstractSequentialList&lt;E&gt;</span><br><span class=\"line\">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>源码中ArrayList类实现了RandomAccess接口，LinkedList类中却没有实现这个接口，但是RandomAccess接口中却什么也没有定义。可以看RandomAccess接口上的注释：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Marker interface used by &lt;tt&gt;List&lt;/tt&gt; implementations to indicate that</span><br><span class=\"line\"> * they support fast (generally constant time) random access.  The primary</span><br><span class=\"line\"> * purpose of this interface is to allow generic algorithms to alter their</span><br><span class=\"line\"> * behavior to provide good performance when applied to either random or</span><br><span class=\"line\"> * sequential access lists.</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<p>大概就是说这个接口仅是一个标识Marker，实现了这个接口的List将支持快速随机访问（random access）。接下来，我们查看Collections类中的binarySearch方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt;</span><br><span class=\"line\">int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list instanceof RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)</span><br><span class=\"line\">        <span class=\"built_in\">return</span> Collections.indexedBinarySearch(list, key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> Collections.iteratorBinarySearch(list, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static &lt;T&gt;</span><br><span class=\"line\">int indexedBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) &#123;</span><br><span class=\"line\">    int low = 0;</span><br><span class=\"line\">    int high = list.size()-1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        int mid = (low + high) &gt;&gt;&gt; 1;</span><br><span class=\"line\">        Comparable&lt;? super T&gt; midVal = list.get(mid);</span><br><span class=\"line\">        int cmp = midVal.compareTo(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; 0)</span><br><span class=\"line\">            low = mid + 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; 0)</span><br><span class=\"line\">            high = mid - 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> mid; // key found</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> -(low + 1);  // key not found</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static &lt;T&gt;</span><br><span class=\"line\">int iteratorBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int low = 0;</span><br><span class=\"line\">    int high = list.size()-1;</span><br><span class=\"line\">    ListIterator&lt;? extends Comparable&lt;? super T&gt;&gt; i = list.listIterator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        int mid = (low + high) &gt;&gt;&gt; 1;</span><br><span class=\"line\">        Comparable&lt;? super T&gt; midVal = get(i, mid);</span><br><span class=\"line\">        int cmp = midVal.compareTo(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; 0)</span><br><span class=\"line\">            low = mid + 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; 0)</span><br><span class=\"line\">            high = mid - 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> mid; // key found</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> -(low + 1);  // key not found</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>binarySearch()方法是从List中查找指定元素，其中首先判断传入的List时候实现了RandomAccess接口，如果实现了就调用indexedBinarySearch()方法，否则就调用iteratorBinarySearch()方法。再看这两个方法的源码：<br>如果传入的List实现了RandomAccess接口，采用普通for循环遍历<br>若传入的List未实现RandomAccess接口，采用iterator遍历</p>\n<p><strong>链表</strong></p>\n<p><strong>链表（Linked List）</strong>由一串节点组成，每个节点包含任意的实例数据和一或两个用来指向上一个/下一个节点位置的指针</p>\n<blockquote>\n<p>单向链表<br>单向链表包含每个节点Node包含两个部分：第一部分data储存当前节点数据、第二部分next存储下一节点的地址。</p>\n</blockquote>\n<ul>\n<li><p>单向链表只可向一个方向遍历，查找一个节点需要从第一个节点开始向下依次寻找<br><img src=\"http://cdn.tycoding.cn/1120165-20171207161602113-1451349858.png\" alt=\"单向链表\"></p>\n</li>\n<li><p>单向链表插入节点从链表头部插入，将新插入节点的next指向原头部节点位置即可<br><img src=\"http://cdn.tycoding.cn/1120165-20171207162758425-142549066.png\" alt=\"单向链表\"></p>\n</li>\n<li><p>删除节点，只需要将该节点上一个节点的next指向该节点下一个节点即可<br><img src=\"http://cdn.tycoding.cn/1120165-20171207162815925-341262498.png\" alt=\"单向链表\"></p>\n</li>\n</ul>\n<blockquote>\n<p>双向链表<br><strong>双向链表</strong> 包含两个指针，prev指向前一个节点，next指向后一个节点。<br><img src=\"http://cdn.tycoding.cn/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png\" alt=\"双向链表\"></p>\n</blockquote>\n<blockquote>\n<p>双向循环链表<br><strong>双向循环链表</strong> 最后一个节点的<em>next</em>指向<em>head</em>，而<em>head</em>的<em>prev</em>指向最后一个节点，形成一个环。<br><img src=\"http://cdn.tycoding.cn/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"双向循环链表\"></p>\n</blockquote>\n<hr>\n<h4 id=\"ArrayList和Vector和LinkedList的区别？\"><a href=\"#ArrayList和Vector和LinkedList的区别？\" class=\"headerlink\" title=\"ArrayList和Vector和LinkedList的区别？\"></a>ArrayList和Vector和LinkedList的区别？</h4><ul>\n<li><strong>ArrayList</strong>: 底层数据结构是数组，查询快，增删慢。线程不安全，效率高</li>\n<li><strong>Vector</strong>: 底层数据结构是数组，查询快，增删慢。线程安全，效率低</li>\n<li><strong>LinkedList</strong>: 底层数据结构是链表，查询慢，增删快。线程不安全，效率高</li>\n</ul>\n<hr>\n<h4 id=\"谈谈ArrayList的扩容机制\"><a href=\"#谈谈ArrayList的扩容机制\" class=\"headerlink\" title=\"谈谈ArrayList的扩容机制\"></a>谈谈ArrayList的扩容机制</h4><p>Java中基本数组都是定长的，一旦被实例化后就不能改变其长度，意味着创建数组时必须确定数组的容量大小。而很多情况下，数组的长度不是确定的，需要动态增减，ArrayList的出现就解决了这一问题。<br>ArrayList的扩容机制表现在add()方法上，先看add()方法的源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取最小容量</span><br><span class=\"line\">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//判断是否需要扩容</span><br><span class=\"line\">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    // overflow-conscious code</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; 0)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当向ArrayList对象中添加新元素时，首先会调用ensureCapacityInternal(size)方法，size为最小扩容量；ensureCapacityInternal()方法会首先调用calculateCapacity来确定需要的最小容量；最后调用ensureExplicitCapacity()方法判断时候需要扩容。最后判断所需最小容量如果大于当前数组的空间大小，则需要扩容，调用grow()方法扩容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void grow(int minCapacity) &#123;</span><br><span class=\"line\">    // 获取ArrayList中elementDaata数组的长度</span><br><span class=\"line\">    int oldCapacity = elementData.length;</span><br><span class=\"line\">    // 扩容至原来的1.5倍</span><br><span class=\"line\">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class=\"line\">    // 判断新的数组容量够不够</span><br><span class=\"line\">    // 够了就直接使用这个长度创建新数组</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; 0)</span><br><span class=\"line\">        // 不够就将数组的长度设置为需要的长度</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    // 检查此时的最大值是否溢出</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    // 调用Arrays.copyOf()将elementData数组数据拷贝到新数组</span><br><span class=\"line\">    // 并将elementData指向新数组newCapacity的内存地址</span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>： ArrayList扩容的本质就是计算所需扩容size得到新的数组，将原数组中的数据复制到新数组中，最后将原数组指向新数组在堆内存的引用地址即可。</p>\n<hr>\n<h4 id=\"HashMap和HashTable的区别？\"><a href=\"#HashMap和HashTable的区别？\" class=\"headerlink\" title=\"HashMap和HashTable的区别？\"></a>HashMap和HashTable的区别？</h4><p>1、HashMap和HashTable都实现了Map接口，主要区别在线程安全性、同步、速度<br>2、线程是否安全： HashMap非同步线程不安全，HashTable同步线程安全。HashTable内部的方法都经过synchronized修饰。<br>3、效率: HashMap线程不安全效率高，HashTable线程安全效率低。<br>3、对null key和null value的支持： HashMap中，null可以作为key，这样的key只有一个，但可以有多个key对应的值为null；在HashTable中的key不能为null<br>5、底层数据结构： JDK1.8后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阀值时（默认是8），将链表转换为红黑树，以减少搜索时间。HashTable没有这样的机制。</p>\n<hr>\n<h4 id=\"HashMap和HashSet区别\"><a href=\"#HashMap和HashSet区别\" class=\"headerlink\" title=\"HashMap和HashSet区别?\"></a>HashMap和HashSet区别?</h4><p><strong>HashSet底层采用HashMap实现</strong><br>HashMap|HashSet<br>:–|:–<br>实现了Map接口|实现了Set接口<br>储存键值堆|仅储存对象<br>调用put()向Map中添加元素|调用add()向Set中添加元素<br>HashMap使用Key计算HashCode|HashSet使用成员对象来计算hashCode值，对于两个对象来说，hashCode可能相同，所以用equals判断对象的相等性</p>\n<hr>\n<h4 id=\"HashSet如何检查重复？\"><a href=\"#HashSet如何检查重复？\" class=\"headerlink\" title=\"HashSet如何检查重复？\"></a>HashSet如何检查重复？</h4><p>在前面讲hashCode和equals时就提到了，HashSet集合同样适用。向HashSet中存入一个元素，HashSet首先会根据对象的hashCode值判断当期集合中此hashCode对应的位置有没有值，如果没有就直接添加，如果有就再调用equals方法比较两个对象是否相同，相同就不再储存（保证了Set集合不重复的特性），否则就散列到其他位置储存。</p>\n<hr>\n<h4 id=\"HashMap底层实现？\"><a href=\"#HashMap底层实现？\" class=\"headerlink\" title=\"HashMap底层实现？\"></a>HashMap底层实现？</h4><p>Map在Java中的实现由很多，HashMap便是其中之一，随着JDK版本的更新，HashMap的实现也在不断更新：</p>\n<ul>\n<li>&lt;=JDK1.7: Table数组 + Entry链表</li>\n<li><blockquote>\n<p>=JDK1.8: Table数组 + Entry链表/红黑树</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h4><p><strong>Hash（哈希、散列）</strong>，就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。<br>Hash函数的一种实现：<br>直接取余法： f(x) = x mod max<br>位运算法： f(x) = x &amp; max<br>HashMap采用 位运算法，相比直接取余，位运算直接对内存中的二进制数据操作，不需要再转阿欢为十进制，因此处理速度很快：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 &amp; 33 = 1</span><br><span class=\"line\">    </span><br><span class=\"line\">    000111</span><br><span class=\"line\">  &amp; 100001</span><br><span class=\"line\">  --------</span><br><span class=\"line\">    000001 = 1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Hash冲突\"><a href=\"#Hash冲突\" class=\"headerlink\" title=\"Hash冲突\"></a>Hash冲突</h4><p>假设将100个数据通过Hash散列后存储到10个不同的容器中，必定会出现多个元素分布到同一个容器中。具体到HashMap集合中，若将多个K-V数据存入put，HashMap根据元素key计算到对应的hashCode值，如果计算得到多个不同的key对应的hashCode值相同（即要储存到同一位置），此时这种现象就称为 Hash冲突。<br>HashMap默认采用了 链地址法 解决Hash冲突问题，即通过类似单链表的方式将 冲突的元素 串起来，搜索时遍历这个链表即可。注意： 如果冲突的Hash越来越多，这个链就会越来越长。</p>\n<hr>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p><img src=\"http://cdn.tycoding.cn/8db4a3bdfb238da1a1c4431d2b6e075c_hd.png\" alt=\"hash冲突与实现原理\"><br>这里我们需要了解两个名词：<br>Table: 哈希桶数组（哈希表），存放Node元素，底层是一个Node[] table<br>Node: 节点元素，Node是HashMap的一个内部类，实现了Map.Entry接口，本质是一个映射（K-V）<br>HashMap内部的一些关键属性需要了解：<br>DEFAULT_INITIAL_CAPACITY: Tabale数组的初始化长度，默认是1 &lt;&lt; 4，2^4 = 16<br>MAXIMUM_CAPACITY: Table数组最高长度，默认为1 &lt;&lt; 30，2^30 = 1073741824<br>DEFAULT_LOAD_FACTOR: 负载因子，当总元素数 &gt; 数组长度 * 负载因子时，Table数组将扩容，默认是0.75<br>TREEIFY_THRESHOLD: 树化阀值，当单个Table内Node数量超过该值，则将链表转换为红黑树，默认是8<br>UNTREEIFY_THRESHOLD: 链化阀值，当扩容期间单个Table的Entry数量小于该值，则将红黑数转换为链表，默认为6<br>MIN_TREEIFY_CAPACITY: 最小树化阀值，当Table中所有元素超过该值，才会进行树化<br>size: 当前HashMap实际存在的键值对数量<br>threshold: HashMap所能容纳的最大数据量的Node（键值对）个数。Node[] table初始化长度length是16，loadFactor负载因子默认是0.75，threshold = length * loadFactor<br>loadFactor: 负载因子，默认是0.17<br>modCount: 记录HashMap内部结构发生变化的次数<br>HashMap内部存在一个NodeTable数组，这个数组的初始化长度是DEFAULT_INITIAL_CAPACITY，他是一个单向链表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    final int <span class=\"built_in\">hash</span>; //key的Hash值</span><br><span class=\"line\">    final K key; //key</span><br><span class=\"line\">    V value; //value</span><br><span class=\"line\">    Node&lt;K,V&gt; next; //下一个节点</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考单链表的结构，Table中每个Node节点包含两个部分，Node元素作为节点的header，next指向下一个节点。<strong>这种链式结构的存在正是为了解决Hash冲突</strong></p>\n<p>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.put(<span class=\"string\">\"loonycoder\"</span>, <span class=\"string\">\"18\"</span>);</span><br></pre></td></tr></table></figure>\n<p>HashMap将根据”loonycoder”这个Key得到其hashCode值，然后经过Hash算法定位到其在HashMap储存的位置，如果两个不同的key定位到了同一个位置，此时就发生了Hash冲突。<br>在JDK1.7之前，解决Hash冲突的方式是将冲突的Node节点放在一个链表中。在JDK1.8中，当Table中链长超过TREEIFY_THRESHOLD阀值后，会将链表转换为红黑树的实现TreeNode:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; left;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; right;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class=\"line\">    boolean red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当发生<strong>Hash冲突</strong>时，根据HashMap默认采用的 <strong>链地址法</strong>，即将冲突的Hash串成一个链式结构储存到HashMap对应的位置。但是 随着Hash冲突越来越多，这个<strong>链将越来越长</strong>，这就将导致遍历碰撞key时的消耗不断增加，也就直接导致了性能的不足。在JDK1.8后，HashMap对单个Table中的Node超出某个阀值后，将开始树化操作（链表转换为红黑树），这对搜索的性能将会有很大的提升。<br><img src=\"http://cdn.tycoding.cn/JDK1.8%E4%B9%8B%E5%90%8E%E7%9A%84HashMap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg\" alt=\"地址链法\"></p>\n<p><strong>总结</strong><br>到此，我们总结一下HashMap的实现原理：</p>\n<ul>\n<li>HashMap根据key的hashCode值存储元素。put新元素会遍历链表，根据新元素的key计算hashCode得到散列位置，如果该位置有值再调用equals判断value是否相同，相同就散列到其他位置储存。</li>\n<li>HashMap在put新元素时如果遇到key对应的hashCode相同，可能会产生Hash冲突问题。HashMap的做法是采用链式结构（链表）储存存在Hash冲突的元素，查询时再遍历这个链接结构元素集合即可。</li>\n<li>如果发生Hash冲突的元素很多，这个 <strong>链</strong> 将很长，影响到遍历key消耗性能的增加，于是判断当Table中Node节点大于默认值8时，将链表转换为红黑树（TreeNode）存储元素。</li>\n</ul>\n<hr>\n<h4 id=\"Collection和Collections的区别？\"><a href=\"#Collection和Collections的区别？\" class=\"headerlink\" title=\"Collection和Collections的区别？\"></a>Collection和Collections的区别？</h4><ul>\n<li>Collection是集合类的上级接口，继承他的接口主要有Set和List</li>\n<li>Collections仅是针对集合类封装的一个工具类，在java.util包下</li>\n</ul>\n<hr>\n<h4 id=\"Comparable和Comparator的区别？\"><a href=\"#Comparable和Comparator的区别？\" class=\"headerlink\" title=\"Comparable和Comparator的区别？\"></a>Comparable和Comparator的区别？</h4><ul>\n<li>Comparable接口来自java.lang包，提供compareTo(Object obj) 方法排序</li>\n<li>Comparator接口来自java.util包，提供compare(Object obj1, Object obj2)方法排序<br>当需要对一个集合采用一种方式排序，使用Comparable接口；如果需要对一个集合采用两种排序方式就使用Comparator接口。</li>\n</ul>\n<h4 id=\"Java集合框架总结\"><a href=\"#Java集合框架总结\" class=\"headerlink\" title=\"Java集合框架总结\"></a>Java集合框架总结</h4><h5 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h5><p><img src=\"http://cdn.tycoding.cn/QQ20190623-181246.png\" alt=\"Collection\"></p>\n<p><strong>List</strong></p>\n<p>ArrayList: Object数组，线程不安全，查询快，增删慢，效率高<br>Vector: Object数组，线程安全，查询快，增删慢，效率低<br>LinkedList: 双向链表，线程不安全，查询慢，增删快，效率高</p>\n<p><strong>Set</strong></p>\n<p>HashSet: 无序、唯一，基于HashMap实现，底层采用HashMap存储元素<br>LinkedHashSet: LinkedHashSet继承自HashSet，并且其内部通过LinkedHashMap实现<br>TreeSet 有序、唯一，红黑树</p>\n<h5 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h5><p><img src=\"http://cdn.tycoding.cn/QQ20190623-181259.png\" alt=\"Map\"></p>\n<ul>\n<li>HashMap: JDK1.8之前HashMap由数组和链表组成，数组时HashMap的主体，链表是为了解决Hash冲突问题。JDK1.8之后当Table中Node数量大于8时，就将链表转换为红黑树，以减少搜索时间提高效率。</li>\n<li>LinkedHashMap: LinkedHashMap继承自HashMap，所有他的底层仍然由数组和链表/红黑树实现。另外，LinkedHashMap在上面的结构基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。</li>\n<li>HashTable: 数组+链表组成。数组时HashTable的主体，链表是为了解决Hash冲突问题<br>TreeMap: 红黑树</li>\n</ul>\n<hr>\n<h3 id=\"Java并发\"><a href=\"#Java并发\" class=\"headerlink\" title=\"Java并发\"></a>Java并发</h3><h4 id=\"线程和进程的区别？\"><a href=\"#线程和进程的区别？\" class=\"headerlink\" title=\"线程和进程的区别？\"></a>线程和进程的区别？</h4><ul>\n<li>进程是程序的一次执行过程，是系统运行程序的基本单位</li>\n<li>线程与进程类似，但线程是一个比进程更小的执行单位。一个进程执行过程中可以产生多个线程，<br>在Java中，启用一个main方法就是启动了一个JVM进程，而main函数所在的线程就是这个进程中的一个线程，也称为主线程。</li>\n</ul>\n<hr>\n<h4 id=\"从JVM角度分析进程和线程的关系？\"><a href=\"#从JVM角度分析进程和线程的关系？\" class=\"headerlink\" title=\"从JVM角度分析进程和线程的关系？\"></a>从JVM角度分析进程和线程的关系？</h4><p>根据JVM的内存划分，对于线程而言：多个线程共享进程的堆、方法区资源，但每个线程又有自己的程序计数器、虚拟机栈、本地方法栈。</p>\n<p>也就是说，在一个JVM进程中，可以存在多个线程，每个线程都共享了这个JVM进程的方法区、堆；并且每个线程又都具有自己的虚拟机栈、本地方法栈、程序计数器等。</p>\n<h5 id=\"为什么方法区和堆是线程共享区？\"><a href=\"#为什么方法区和堆是线程共享区？\" class=\"headerlink\" title=\"为什么方法区和堆是线程共享区？\"></a>为什么方法区和堆是线程共享区？</h5><ul>\n<li><strong>方法区（Method Area）</strong> 存储已被虚拟机加载的类信息、常量、静态变量等数据。方法区中又包含 运行时常量池 ，这部分区域储存Class文件信息和编译期生成的各种字面量和符号引用。</li>\n<li><strong>堆（Heap）</strong> 堆内存储存了对象实例（比如new关键字创建的实例对象），它是JVM中内存区最大的一块区域。<br>所以，一个进程的启动可能包含了多个线程，而这个进程中的静态变量等都是随着类加载而加载的，他应该不属于某个线程独有，所以将其存储于方法区中。对象实例都储存在Java堆内存中，作为Java最大的一块内存区域，肯定不能是某个线程独占的。</li>\n</ul>\n<h5 id=\"为什么虚拟机栈和本地方法栈是线程独占区？\"><a href=\"#为什么虚拟机栈和本地方法栈是线程独占区？\" class=\"headerlink\" title=\"为什么虚拟机栈和本地方法栈是线程独占区？\"></a>为什么虚拟机栈和本地方法栈是线程独占区？</h5><ul>\n<li><strong>虚拟机栈</strong>： 每个Java方法执行的同时都会创建一个栈帧储存局部变量表、操作数栈、方法出口等。从方法的执行到结束，对应将栈帧压入Java虚拟机栈和从虚拟机栈中弹出的过程。</li>\n<li><strong>本地方法栈</strong>： 本地方法栈类似Java虚拟机栈，只不过Java虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的native方法服务。</li>\n</ul>\n<h5 id=\"程序计数器是什么？\"><a href=\"#程序计数器是什么？\" class=\"headerlink\" title=\"程序计数器是什么？\"></a>程序计数器是什么？</h5><p><strong>程序计数器（Program Counter Register）</strong>：当前线程执行的字节码的行号指示器。每个线程都有独立的程序计数器。此内存区域是Java虚拟机中唯一一个没有任何OutOfMemoryError情况的区域。</p>\n<hr>\n<h4 id=\"说说并行和并发的区别？\"><a href=\"#说说并行和并发的区别？\" class=\"headerlink\" title=\"说说并行和并发的区别？\"></a>说说并行和并发的区别？</h4><ul>\n<li><strong>并行</strong>： 同一时间段，多个任务都在执行（单位时间内不一定同时执行）</li>\n<li><strong>并发</strong>： 单位时间内，多个任务同时执行。</li>\n</ul>\n<hr>\n<h4 id=\"使用多线程可能带来什么问题？\"><a href=\"#使用多线程可能带来什么问题？\" class=\"headerlink\" title=\"使用多线程可能带来什么问题？\"></a>使用多线程可能带来什么问题？</h4><p>并发编程的目的就是提高程序的执行效率，但并发编程可能造成：内存泄漏、上下文切换、死锁等问题</p>\n<hr>\n<h4 id=\"说说线程的生命周期和状态？\"><a href=\"#说说线程的生命周期和状态？\" class=\"headerlink\" title=\"说说线程的生命周期和状态？\"></a>说说线程的生命周期和状态？</h4><table>\n<thead>\n<tr>\n<th align=\"left\">状态名称</th>\n<th align=\"left\">状态说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">new</td>\n<td align=\"left\">初始状态，线程被创建，但还没有调用start()方法</td>\n</tr>\n<tr>\n<td align=\"left\">runnable</td>\n<td align=\"left\">运行状态，Java线程将操作系统中就绪和运行两种状态统称为“运行中”</td>\n</tr>\n<tr>\n<td align=\"left\">blocked</td>\n<td align=\"left\">阻塞状态，表示线程阻塞于锁</td>\n</tr>\n<tr>\n<td align=\"left\">waiting</td>\n<td align=\"left\">等待状态，线程需要等待当前线程或其他线程执行完成</td>\n</tr>\n<tr>\n<td align=\"left\">time_waiting</td>\n<td align=\"left\">超时等待状态，他可以实现在指定时间后自动返回</td>\n</tr>\n<tr>\n<td align=\"left\">terminated</td>\n<td align=\"left\">终止状态，表示当前线程已经执行完毕</td>\n</tr>\n</tbody></table>\n<p>对应，程序会因为不同代码的执行产生不同的状态，如下图：<br><img src=\"http://cdn.tycoding.cn/Java+%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png\" alt=\"线程图\"><br>如上，线程创建后将进入NEW（初始）状态，调用start()开始运行，当线程执行wait()方法后，线程将进入WAITING（等待）状态，可以通过wait(long)或join(long)等方法终止等待状态；当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到BLOCKED（阻塞）状态。</p>\n<hr>\n<h4 id=\"什么是上下文切换？\"><a href=\"#什么是上下文切换？\" class=\"headerlink\" title=\"什么是上下文切换？\"></a>什么是上下文切换？</h4><p>简单来说，并发编程中实际线程的数量都可能大于CPU核心的个数，而COU一个核心在任意时刻只能被一个线程使用，CPU为了保证并发的线程都有被执行，采用<strong>随机分配时间片并轮转</strong>的方式；而一个线程的时间片用户将保存并进入就绪状态直到下次分配时间片再执行，这个 <strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p>\n<hr>\n<h4 id=\"什么是死锁？如何避免\"><a href=\"#什么是死锁？如何避免\" class=\"headerlink\" title=\"什么是死锁？如何避免?\"></a>什么是死锁？如何避免?</h4><p>举例：线程A持有资源2，线程B持有资源1，在线程A、B都没有释放自己所持有资源的情况下（锁未释放），他们都想同时获取对方的资源，因为资源1、2都被锁定，两个线程都会进入相互等待的情况，这种情况称为死锁。<br><img src=\"http://cdn.tycoding.cn/2019-4%E6%AD%BB%E9%94%811.png\" alt=\"死锁\"><br>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DeadLockDemo &#123;</span><br><span class=\"line\">    private static Object resource1 = new Object();//资源 1</span><br><span class=\"line\">    private static Object resource2 = new Object();//资源 2</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            synchronized (resource1) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource1\"</span>);</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"waiting get resource2\"</span>);</span><br><span class=\"line\">                synchronized (resource2) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource2\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"线程 1\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            synchronized (resource2) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource2\"</span>);</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"waiting get resource1\"</span>);</span><br><span class=\"line\">                synchronized (resource1) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource1\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"线程 2\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Output：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread[线程 1,5,main]get resource1</span><br><span class=\"line\">Thread[线程 2,5,main]get resource2</span><br><span class=\"line\">Thread[线程 1,5,main]waiting get resource2</span><br><span class=\"line\">Thread[线程 2,5,main]waiting get resource1</span><br></pre></td></tr></table></figure>\n<p>线程1以resource1作为同步监视器，即可以轻松获取resource1同时也锁定了resource1，此时调用sleep让线程1等待1秒钟；此时线程2开始执行，他以resource2作为同步监视器同时也锁定了resource2，此时调用sleep让线程2等待1秒钟；而此时线程1等待1秒已经结束了，当他想要获取resource2时发现resource2已经被线程2锁定了，同理线程2结束等待后想要获取resource1时发现resource1已经被线程1锁定了。那么两者都无法同时获取对方的线程，便进入死锁状态。<br>因此产生死锁需要具备以下四个条件：</p>\n<p>1、互斥条件：该资源任意一个时刻只能由一个线程占用<br>2、请求和保持条件：一个线程因请求资源而阻塞时，对已获取的资源保持不放<br>3、不剥夺条件：线程已获取的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才使用资源<br>4、循环等待条件：若干进程之前形成一种头尾相接的循环等待资源关系。</p>\n<p>避免死锁就要破坏这四个条件中任意一个：<br>1、破坏互斥条件：这个条件我们无法破坏，因为我们用锁的目的就是想让他们互斥<br>2、破坏请求与保持条件：一次性申请所有资源<br>3、破坏循环等待条件：按照一定顺序申请资源，避免资源的循环使用</p>\n<p>解决方案: 修改线程2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Thread(() -&gt; &#123;</span><br><span class=\"line\">    synchronized (resource1) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource1\"</span>);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(1000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread() + <span class=\"string\">\"waiting get resource2\"</span>);</span><br><span class=\"line\">        synchronized (resource2) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"string\">\"线程 2\"</span>).start();</span><br></pre></td></tr></table></figure>\n\n<p>Output：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread[线程 1,5,main]get resource1</span><br><span class=\"line\">Thread[线程 1,5,main]waiting get resource2</span><br><span class=\"line\">Thread[线程 1,5,main]get resource2</span><br><span class=\"line\">Thread[线程 2,5,main]get resource1</span><br><span class=\"line\">Thread[线程 2,5,main]waiting get resource2</span><br><span class=\"line\">Thread[线程 2,5,main]get resource2</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with <span class=\"built_in\">exit</span> code 0</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"说说sleep-方法和wait-方法的区别？\"><a href=\"#说说sleep-方法和wait-方法的区别？\" class=\"headerlink\" title=\"说说sleep()方法和wait()方法的区别？\"></a>说说sleep()方法和wait()方法的区别？</h4><p>两者最主要的区别在于：<strong>sleep 方法没有释放锁，而 wait 方法释放了锁</strong></p>\n<ul>\n<li>两者都可以暂停线程的执行</li>\n<li>wait()通常用于线程间交互/通信，sleep()通常用户暂停执行</li>\n<li>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。</li>\n</ul>\n<hr>\n<h4 id=\"调用start-方法会执行run-方法，为什么不能直接调用run-方法？\"><a href=\"#调用start-方法会执行run-方法，为什么不能直接调用run-方法？\" class=\"headerlink\" title=\"调用start()方法会执行run()方法，为什么不能直接调用run()方法？\"></a>调用start()方法会执行run()方法，为什么不能直接调用run()方法？</h4><p>new一个Thread，线程进入了新建状态；调用start()方法，会启用一个线程并使线程进入就绪状态，当分配到时间片后就可以开始执行。start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这才是真正的多线程工作。而直接执行run()方法，会吧run()方法当做一个main线程下的一个普通方法去执行，并不会在某个线程中执行他。<br><strong>总结：调用start方法可以启动线程并使线程进入就绪状态，而run()方法只是Thread的一个普通方法调用，还是在main主线程里执行，并不会在一个新线程中执行</strong></p>\n<hr>\n<h4 id=\"synchronized关键字\"><a href=\"#synchronized关键字\" class=\"headerlink\" title=\"synchronized关键字\"></a>synchronized关键字</h4><p>synchronized关键字解决多个线程之间访问资源的同步性，synchronized关键字可以保证它修饰的方法或代码块在任意时刻只能有一个线程执行。<br>synchronized关键字最主要的三种使用方式：</p>\n<ul>\n<li><p><strong>修饰实例方法</strong>： 给当前对象加锁，进入同步代码块前要获取当前对象实例的锁</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此处的`synchronized`就相当于`synchronized(this)`，锁定的是当前对象</span><br><span class=\"line\">public synchronized void <span class=\"function\"><span class=\"title\">add</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>修饰静态方法</strong>： 给当前类加锁（因为静态方法没有this），会作用于当前类的所有对象实例，因为静态成员不属于任何一个实例对象，是一个类成员。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此处的`synchronized`就相当于`synzhronized(T.class)`，(T的当前类)</span><br><span class=\"line\">public synchronized static void <span class=\"function\"><span class=\"title\">add</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>修饰代码块</strong>：指定加锁对象，对给定对象加锁，进入同步代码块之前要获取给定对象的锁</p>\n</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>记录一些Java基础的知识点，为了自己查阅资料的时候方便一些。</p>\n<hr>\n<h3 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h3><h4 id=\"JDK和JRE的区别？\"><a href=\"#JDK和JRE的区别？\" class=\"headerlink\" title=\"JDK和JRE的区别？\"></a>JDK和JRE的区别？</h4><p>1、jre即Java Runtime Environment，Java运行环境。包括Java虚拟机和Java类库<br>2、jdk是Java开发工具包，例如：tools.jar</p>\n<hr>\n<h4 id=\"和-equals的区别\"><a href=\"#和-equals的区别\" class=\"headerlink\" title=\"== 和 equals的区别\"></a>== 和 equals的区别</h4><p>1、==是一个比较运算符，对于基本类型，比较的是具体的数值(int、double..)；对于引用类型，比较的是对象的内存地址<br>2、equals是超类Object就具有的方法，因此所有的引用类型都具有这个方法，只用用来比较引用数据类型。equals方法默认比较的对象内存地址，如果重写该方法，一般比较的是对象的属性值。<br>Object类equals方法源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (this == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>new对象是在堆内存中开辟一份空间，所以其引用变量就是指向了堆内存的地址，举个栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EqualsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User a = new User();</span><br><span class=\"line\">        User b = new User();</span><br><span class=\"line\">        System.out.println(a == b); //<span class=\"literal\">false</span></span><br><span class=\"line\">        System.out.println(a.equals(b)); //<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object o) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (this == o) <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o instanceof User)) <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        User user = (User) o;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> age == user.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">hashCode</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> Objects.hash(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"两个对象的hashCode-相同，则equals-一定为true？\"><a href=\"#两个对象的hashCode-相同，则equals-一定为true？\" class=\"headerlink\" title=\"两个对象的hashCode()相同，则equals()一定为true？\"></a>两个对象的hashCode()相同，则equals()一定为true？</h4><p><strong>如果两个对象相等(equals()为true)，那么他们的hashCode()一定相同</strong><br><strong>如果两个对象的hashCode()相同，他们的equals()方法不一定相同</strong></p>\n<p>JVM虚拟机通过hashCode()方法为Object对象分配一个int类型数值，以此来提高Java中集合对象(Map、HashMap…)中对象存储的效率。当集合中需要添加新元素，首先通过hashCode()获取该对象对应的地址位置，如果该位置上没有值就直接储存到该位置，如果有值就再调用equals()与新元素的值比较，相同就不再储存否则就散列到其他位置，大大减少了调用equals()方法比较的次数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EqualsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User a = new User();</span><br><span class=\"line\">        User b = new User();</span><br><span class=\"line\">        System.out.println(a == b); //<span class=\"literal\">false</span></span><br><span class=\"line\">        System.out.println(a.equals(b)); //<span class=\"literal\">false</span></span><br><span class=\"line\">        System.out.println(a.hashCode() == b.hashCode()); //<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"final的作用\"><a href=\"#final的作用\" class=\"headerlink\" title=\"final的作用\"></a>final的作用</h4><p>可修饰类、类属性、类方法。<br>1、被final修饰的类不能被继承<br>2、final修饰的类属性可以是基本类型也可以是引用类型，如果是基本类型就不能再被赋值；如果是引用类型，就不能再指向其他引用地址，但对象本身是可以改变的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FinalTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final User USER = new User();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User u2 = new User();</span><br><span class=\"line\">//        user = u2; // ERROR</span><br><span class=\"line\">        USER.age = 23;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    int age = 12;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、类中所有private方法都是隐式的定义为final，为private方法添加final就毫无意义。</p>\n<hr>\n<h4 id=\"String属于基本数据类型吗？\"><a href=\"#String属于基本数据类型吗？\" class=\"headerlink\" title=\"String属于基本数据类型吗？\"></a>String属于基本数据类型吗？</h4><p><strong>不，String属于特殊的引用类型</strong></p>\n<p>Java中基本数据类型有：int、short、long、char、boolean、float、double、byte</p>\n<p>1、String是特殊的引用类型并且是final的，JVM使用字符串常量池储存字符串数据。创建新的字符串，JVM首先会去字符串常量池中寻找有没有该字符串，如果没有就添加到该常量池，如果有就返回该字符串在常量池中的引用。<br>2、String s = “a”; s += “b”;，这段代码执行前后，字符串常量池中将出现a和ab两个字符串常量，而原本s变量的引用指向了常量池中ab。<br>3、String s = new String(“ab”)，这段代码一共创建了几个对象？一个或两个。如果字符串常量池中有了ab这个字符串(比如在此之前已经使用了String str = “ab”)，那么新的s对象引用其实仅仅是指向了字符串常量中的ab，并没有创建新的字符串对象。但是，每次调用new都会在堆内存开辟空间，创建一个String对象，这是肯定的。</p>\n<p>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StringTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String a = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String b = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String c = new String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">        System.out.println(a == b); //<span class=\"literal\">true</span></span><br><span class=\"line\">        System.out.println(a.equals(b)); //<span class=\"literal\">true</span></span><br><span class=\"line\">        System.out.println(a.equals(c)); //<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>String和StringBuffer和StringBuilder的区别</strong><br>1、String是不可变字符串，StringBuffer和StringBuilder是可变字符串。如果经常改变字符串的原始数据，最好使用StringBuffer代替。<br>2、String默认重写了equals方法和hashCode()方法；而StringBuffer没有重写equals方法，使用new StringBuffer(“”)会直接在堆内存中开辟空间储存对象。因此将StringBuffer对象储存仅Java集合中可能会出现问题。<br>3、StringBuffer是线程安全的，效率低；StringBuilder是线程不安全的，效率高。</p>\n<hr>\n<h4 id=\"static关键字？是否可覆盖？\"><a href=\"#static关键字？是否可覆盖？\" class=\"headerlink\" title=\"static关键字？是否可覆盖？\"></a>static关键字？是否可覆盖？</h4><p>static关键字表明一个成员变量或者是成员方法可以在没有所属的类实例变量的情况下被访问。被static标记的方法不能被覆盖，因为方法的覆盖是基于运行时动态绑定的，而static方法在编译时就已经和该类绑定了，也就是static标记的变量、方法都是随着类的加载而加载的，所以可以通过不创建对象实例就能访问该变量、方法；而不创建对象实例就访问非static变量、方法是不行的，因为此变量、方法还没有被创建。</p>\n<p>static标记的方法只能访问static变量或方法<br>非static标记的方法可以访问static或非static标记的变量或方法</p>\n<hr>\n<h4 id=\"自动拆、装箱\"><a href=\"#自动拆、装箱\" class=\"headerlink\" title=\"自动拆、装箱\"></a>自动拆、装箱</h4><p>因为Java自身面向对象OOP的特性，而一切基本数据类型都不具有面向对象的特性，所以Java为基本的数据类型提供了对应的引用类型。<br>具体表现在程序在编译期间自动将基本数据类型转换为引用类型(装箱)、将引用数据类型转换为基本数据类型(拆箱)</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">基本数据类型</th>\n<th align=\"center\">引用数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">int</td>\n<td align=\"center\">Integer</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">Byte</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">Short</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">Long</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">Float</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">Double</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">Char</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">Boolean</td>\n</tr>\n</tbody></table>\n<p>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Integer i1 = 100;</span><br><span class=\"line\">    Integer i2 = 100;</span><br><span class=\"line\">    Integer i3 = 200;</span><br><span class=\"line\">    Integer i4 = 200;</span><br><span class=\"line\">    System.out.println(i1 == i2);</span><br><span class=\"line\">    System.out.println(i3 == i4);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>Java中实现基本数据类型和引用类型之间的拆装箱一般都是用过valueOf()方法实现的。例如我们看下Integer类的valueOf()方法源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Integer valueOf(int i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"built_in\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到：当声明一个新的整数型变量，编译时通过Integer类的valueOf()进行拆装箱计算，这个方法会首先比较这个整数值是否在IntegerCache的范围内，如果在就返回IntegerCache类中的数值；如果不在就直接new Integer。那么我们看下IntegerCache类源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static class IntegerCache &#123;</span><br><span class=\"line\">    static final int low = -128;</span><br><span class=\"line\">    static final int high;</span><br><span class=\"line\">    static final Integer cache[];</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        // high value may be configured by property</span><br><span class=\"line\">        int h = 127;</span><br><span class=\"line\">        String integerCacheHighPropValue =</span><br><span class=\"line\">            sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (integerCacheHighPropValue != null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                int i = parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                i = Math.max(i, 127);</span><br><span class=\"line\">                // Maximum array size is Integer.MAX_VALUE</span><br><span class=\"line\">                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</span><br><span class=\"line\">            &#125; catch( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                // If the property cannot be parsed into an int, ignore it.</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        high = h;</span><br><span class=\"line\"></span><br><span class=\"line\">        cache = new Integer[(high - low) + 1];</span><br><span class=\"line\">        int j = low;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int k = 0; k &lt; cache.length; k++)</span><br><span class=\"line\">            cache[k] = new Integer(j++);</span><br><span class=\"line\"></span><br><span class=\"line\">        // range [-128, 127] must be interned (JLS7 5.1.7)</span><br><span class=\"line\">        assert IntegerCache.high &gt;= 127;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"function\"><span class=\"title\">IntegerCache</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，当声明一个新的整型变量时（int、Integer），如果这个变量值的大小在[-128, 127]之间，就直接返回IntegerCache中储存的常量值，否则就直接new一个新的Integer来保存这个常量值。所以上面才会出现false的结果。<br>同理：其他的数据类型例如：long、short等都具有对应的LongCache、ShortCache等类。</p>\n<hr>\n<h4 id=\"Overriding和Overloaded\"><a href=\"#Overriding和Overloaded\" class=\"headerlink\" title=\"Overriding和Overloaded\"></a>Overriding和Overloaded</h4><p>方法的重写Overriding和方法的重载Overloaded都是Java多态性的一种表现。<br>Overriding: 子类中定义了和父类中名称、参数列表相同的方法<br>Overloaded: 方法名相同，参数列表不同</p>\n<hr>\n<h4 id=\"Java支持多继承吗？\"><a href=\"#Java支持多继承吗？\" class=\"headerlink\" title=\"Java支持多继承吗？\"></a>Java支持多继承吗？</h4><p>不支持。Java中每个类都只能继承一个类，可以实现多个接口。但是可以通过多层继承实现。<br>类定义属性和方法，描述某一类事物的抽象。而接口定义了行为，并不限于任何具体意向。<br>从逻辑上说，单继承更加明确指出一个子类就应该是其父类代表的事物中某个更具体的类别。而接口则不同，接口定义了一些公共行为。因此类对接口的implements称为实现而不能称为继承。</p>\n<hr>\n<h4 id=\"接口和抽象类的区别？\"><a href=\"#接口和抽象类的区别？\" class=\"headerlink\" title=\"接口和抽象类的区别？\"></a>接口和抽象类的区别？</h4><ul>\n<li>接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</li>\n<li>接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法 ( 包含具体实现 )</li>\n<li>类实现接口就必须实现接口中定义的所有方法；但继承一个抽象类，可以不实现抽象类中的抽象方法 ( 但前提是这个类也是抽象的 )</li>\n<li>抽象类可以是不提供接口方法实现的情况下实现接口</li>\n<li>接口中声明的变量默认都是final的；但抽象类可以包含非final的变量</li>\n<li>接口中的成员方法默认都是public的；但抽象类中的成员函数可以是private、protected、public</li>\n<li>接口是绝对抽象的，不可以被实例化；</li>\n</ul>\n<hr>\n<h4 id=\"引用传递和值传递\"><a href=\"#引用传递和值传递\" class=\"headerlink\" title=\"引用传递和值传递\"></a>引用传递和值传递</h4><p><strong>Java中采用值传递的方式</strong><br>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TransferTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int a = 1;</span><br><span class=\"line\">        Integer b = 2;</span><br><span class=\"line\">        swap(a, b);</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] arr = &#123;1, 2&#125;;</span><br><span class=\"line\">        swap(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void swap(int[] arr) &#123;</span><br><span class=\"line\">        arr[0] = 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void swap(int a, Integer b) &#123;</span><br><span class=\"line\">        a = 10;</span><br><span class=\"line\">        b = 20;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法传递时传递的参数其实仅值原参数的一个拷贝，对于基本类型传递的就是具体的值的拷贝，对于引用类型传递的是对象地址。<br>所以上面的例子中，基本数据类型a,b经过swap方法并没有改变原始值，而引用类型arr数组经过swap方法就改变了原始值（因为直接对对象堆内存地址数据操作）。</p>\n<hr>\n<h4 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h4><p><img src=\"http://cdn.tycoding.cn/20180127210359151.png\" alt=\"IO流\"></p>\n<p><strong>1、Java中有几种类型的流？</strong><br>字符流和字节流。字节流继承InputStream和OutputStream；字符流继承自InputStreamReader和OutputStreamWriter。</p>\n<p><strong>2、谈谈Java IO中的方法阻塞</strong><br>Java中的阻塞式方法是指在程序调用该方法时，必须等待输入数据可用或检测到输入结果时结束或抛出异常，否则程序会一直停留在该语句上，不会执行下面的语句。比如read()和readLine()方法。</p>\n<p><strong>3、字符流和字节流的区别？</strong><br>数据的输入和输出在计算机中最终都是通过字节的形式传递的，对应通过InputStream和OutputStream实现，他们都是针对字节操作的。<br>而有时候通常需要读取一些完全是字符的文本数据，通常使用基于字节流的包装类字符流完成操作，他们通过InputStreamReader和OutputStreamWriter实现。<br>字符流是字节流的包装，即使有时候读取的是字符流，但也可能需要转换为字节写入。</p>\n<p><strong>4、NIO</strong><br>传统的IO是阻塞式的，会一直监听一个ServerSocket，在调用read()等方法时，会一直等到数据到来或缓冲区已满时才返回；调用accept()时也会一直阻塞到有客户端连接时才继续执行；每个客户端连接成功后，服务端都会踢动一个县城去处理该客户端的请求；在多线程处理多个连接时，每个线程都拥有自己的栈空间并且占用了一些CPU时间，每个线程遇到外部未准备好时，都会发生阻塞。阻塞的结果就是会打来大量的进程上下文切换。<br>而对于NIO，它是非阻塞式，核心类：</p>\n<ul>\n<li>Buffer： 为所有的原始类型提供Buffer缓冲支持</li>\n<li>Charset： 字符集编码解码解决方案</li>\n<li>Channel： 一个新的原始IO抽象，用于读取Buffer类型，通道可以认为是一种链接，可以是到特定设备、程序或是网络链接。</li>\n</ul>\n<hr>\n<h4 id=\"说说List、Set、Map三者的区别\"><a href=\"#说说List、Set、Map三者的区别\" class=\"headerlink\" title=\"说说List、Set、Map三者的区别\"></a>说说List、Set、Map三者的区别</h4><ul>\n<li>List: List接口储存一组不唯一 (可以有多个元素引用引用相同的对象)，有序的对象，可插入多条null元素</li>\n<li>Set: 不允许重复的集合，不允许有多个元素引用相同的对象，只允许有一个null元素</li>\n<li>Map: 使用键值对储存，Map会维护与Key有关联的值，两个Key可以引用相同的对象，但Key不能重复。</li>\n</ul>\n<hr>\n<h4 id=\"Array和ArrayList有什么区别？\"><a href=\"#Array和ArrayList有什么区别？\" class=\"headerlink\" title=\"Array和ArrayList有什么区别？\"></a>Array和ArrayList有什么区别？</h4><ul>\n<li>Array可以包含基本类型和对象类型；ArrayList只能包含对象类型</li>\n<li>Array大小是固定的；ArrayList大小是动态变化的</li>\n<li>ArrayList提供了诸如addAll()、removeAll()、iterator()方法等</li>\n<li>对于基本数据类型，集合使用自动装箱来减少代码量；但当处理固定大小的基本类型数据时，这种方式相对较慢。</li>\n</ul>\n<hr>\n<h4 id=\"ArrayList和LinkedList的区别？\"><a href=\"#ArrayList和LinkedList的区别？\" class=\"headerlink\" title=\"ArrayList和LinkedList的区别？\"></a>ArrayList和LinkedList的区别？</h4><p>1、<strong>是否保证线程安全</strong>： ArrayList和LinkedList都是不同步的，也就是不保证线程安全<br>2、<strong>底层数据结构</strong>： ArrayList底层使用的是Object数组；LinkedList底层使用的是 双向链表 结构<br>3、<strong>插入和删除是否受元素位置影响？</strong> ArrayList采用数组储存，所以插入和删除元素都受元素位置的影响；LinkedList 采用链表储存，所以插入、删除元素都不受元素位置影响。<br>4、<strong>是否支持快速随机访问？</strong> LinkedList因为使用链表储存，无法通过元素索引快速访问；而ArrayList因为底层采用Object数组储存，可以通过索引快速随机访问。<br>5、<strong>内存空间占用</strong>： ArrayList的空间浪费主要体现在在List列表的结尾都会预留一定的空间容量，而LinkedList的空间花费体现在他的每一个元素都需要消耗比ArrayList更多的空间（因为要储存直接后继和直接前驱以及数据）。</p>\n<hr>\n<p><strong>什么是迭代器</strong><br><em>Iterator</em>接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法<em>iterator()</em>。迭代器在迭代的过程中可以删除底层集合的元素。</p>\n<p><strong>Iterator和ListIterator的区别？</strong></p>\n<ul>\n<li>Iterator可以用来遍历Set和List集合，但是ListIterator只能遍历List</li>\n<li>Iterator对集合只能向前遍历（next()）；而*ListIterator可以向前遍历（next()），也可以向后遍历（previous()）</li>\n<li>ListIterator实现了Iterator接口</li>\n</ul>\n<p><strong>RandomAccess接口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ArrayList</span><br><span class=\"line\">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class=\"line\">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//RandomAccess</span><br><span class=\"line\">public interface RandomAccess &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//LinkedList</span><br><span class=\"line\">public class LinkedList&lt;E&gt;</span><br><span class=\"line\">    extends AbstractSequentialList&lt;E&gt;</span><br><span class=\"line\">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>源码中ArrayList类实现了RandomAccess接口，LinkedList类中却没有实现这个接口，但是RandomAccess接口中却什么也没有定义。可以看RandomAccess接口上的注释：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Marker interface used by &lt;tt&gt;List&lt;/tt&gt; implementations to indicate that</span><br><span class=\"line\"> * they support fast (generally constant time) random access.  The primary</span><br><span class=\"line\"> * purpose of this interface is to allow generic algorithms to alter their</span><br><span class=\"line\"> * behavior to provide good performance when applied to either random or</span><br><span class=\"line\"> * sequential access lists.</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<p>大概就是说这个接口仅是一个标识Marker，实现了这个接口的List将支持快速随机访问（random access）。接下来，我们查看Collections类中的binarySearch方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt;</span><br><span class=\"line\">int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list instanceof RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)</span><br><span class=\"line\">        <span class=\"built_in\">return</span> Collections.indexedBinarySearch(list, key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> Collections.iteratorBinarySearch(list, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static &lt;T&gt;</span><br><span class=\"line\">int indexedBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) &#123;</span><br><span class=\"line\">    int low = 0;</span><br><span class=\"line\">    int high = list.size()-1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        int mid = (low + high) &gt;&gt;&gt; 1;</span><br><span class=\"line\">        Comparable&lt;? super T&gt; midVal = list.get(mid);</span><br><span class=\"line\">        int cmp = midVal.compareTo(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; 0)</span><br><span class=\"line\">            low = mid + 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; 0)</span><br><span class=\"line\">            high = mid - 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> mid; // key found</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> -(low + 1);  // key not found</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static &lt;T&gt;</span><br><span class=\"line\">int iteratorBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int low = 0;</span><br><span class=\"line\">    int high = list.size()-1;</span><br><span class=\"line\">    ListIterator&lt;? extends Comparable&lt;? super T&gt;&gt; i = list.listIterator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        int mid = (low + high) &gt;&gt;&gt; 1;</span><br><span class=\"line\">        Comparable&lt;? super T&gt; midVal = get(i, mid);</span><br><span class=\"line\">        int cmp = midVal.compareTo(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; 0)</span><br><span class=\"line\">            low = mid + 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; 0)</span><br><span class=\"line\">            high = mid - 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> mid; // key found</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> -(low + 1);  // key not found</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>binarySearch()方法是从List中查找指定元素，其中首先判断传入的List时候实现了RandomAccess接口，如果实现了就调用indexedBinarySearch()方法，否则就调用iteratorBinarySearch()方法。再看这两个方法的源码：<br>如果传入的List实现了RandomAccess接口，采用普通for循环遍历<br>若传入的List未实现RandomAccess接口，采用iterator遍历</p>\n<p><strong>链表</strong></p>\n<p><strong>链表（Linked List）</strong>由一串节点组成，每个节点包含任意的实例数据和一或两个用来指向上一个/下一个节点位置的指针</p>\n<blockquote>\n<p>单向链表<br>单向链表包含每个节点Node包含两个部分：第一部分data储存当前节点数据、第二部分next存储下一节点的地址。</p>\n</blockquote>\n<ul>\n<li><p>单向链表只可向一个方向遍历，查找一个节点需要从第一个节点开始向下依次寻找<br><img src=\"http://cdn.tycoding.cn/1120165-20171207161602113-1451349858.png\" alt=\"单向链表\"></p>\n</li>\n<li><p>单向链表插入节点从链表头部插入，将新插入节点的next指向原头部节点位置即可<br><img src=\"http://cdn.tycoding.cn/1120165-20171207162758425-142549066.png\" alt=\"单向链表\"></p>\n</li>\n<li><p>删除节点，只需要将该节点上一个节点的next指向该节点下一个节点即可<br><img src=\"http://cdn.tycoding.cn/1120165-20171207162815925-341262498.png\" alt=\"单向链表\"></p>\n</li>\n</ul>\n<blockquote>\n<p>双向链表<br><strong>双向链表</strong> 包含两个指针，prev指向前一个节点，next指向后一个节点。<br><img src=\"http://cdn.tycoding.cn/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png\" alt=\"双向链表\"></p>\n</blockquote>\n<blockquote>\n<p>双向循环链表<br><strong>双向循环链表</strong> 最后一个节点的<em>next</em>指向<em>head</em>，而<em>head</em>的<em>prev</em>指向最后一个节点，形成一个环。<br><img src=\"http://cdn.tycoding.cn/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"双向循环链表\"></p>\n</blockquote>\n<hr>\n<h4 id=\"ArrayList和Vector和LinkedList的区别？\"><a href=\"#ArrayList和Vector和LinkedList的区别？\" class=\"headerlink\" title=\"ArrayList和Vector和LinkedList的区别？\"></a>ArrayList和Vector和LinkedList的区别？</h4><ul>\n<li><strong>ArrayList</strong>: 底层数据结构是数组，查询快，增删慢。线程不安全，效率高</li>\n<li><strong>Vector</strong>: 底层数据结构是数组，查询快，增删慢。线程安全，效率低</li>\n<li><strong>LinkedList</strong>: 底层数据结构是链表，查询慢，增删快。线程不安全，效率高</li>\n</ul>\n<hr>\n<h4 id=\"谈谈ArrayList的扩容机制\"><a href=\"#谈谈ArrayList的扩容机制\" class=\"headerlink\" title=\"谈谈ArrayList的扩容机制\"></a>谈谈ArrayList的扩容机制</h4><p>Java中基本数组都是定长的，一旦被实例化后就不能改变其长度，意味着创建数组时必须确定数组的容量大小。而很多情况下，数组的长度不是确定的，需要动态增减，ArrayList的出现就解决了这一问题。<br>ArrayList的扩容机制表现在add()方法上，先看add()方法的源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取最小容量</span><br><span class=\"line\">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//判断是否需要扩容</span><br><span class=\"line\">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    // overflow-conscious code</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; 0)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当向ArrayList对象中添加新元素时，首先会调用ensureCapacityInternal(size)方法，size为最小扩容量；ensureCapacityInternal()方法会首先调用calculateCapacity来确定需要的最小容量；最后调用ensureExplicitCapacity()方法判断时候需要扩容。最后判断所需最小容量如果大于当前数组的空间大小，则需要扩容，调用grow()方法扩容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void grow(int minCapacity) &#123;</span><br><span class=\"line\">    // 获取ArrayList中elementDaata数组的长度</span><br><span class=\"line\">    int oldCapacity = elementData.length;</span><br><span class=\"line\">    // 扩容至原来的1.5倍</span><br><span class=\"line\">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class=\"line\">    // 判断新的数组容量够不够</span><br><span class=\"line\">    // 够了就直接使用这个长度创建新数组</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; 0)</span><br><span class=\"line\">        // 不够就将数组的长度设置为需要的长度</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    // 检查此时的最大值是否溢出</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    // 调用Arrays.copyOf()将elementData数组数据拷贝到新数组</span><br><span class=\"line\">    // 并将elementData指向新数组newCapacity的内存地址</span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>： ArrayList扩容的本质就是计算所需扩容size得到新的数组，将原数组中的数据复制到新数组中，最后将原数组指向新数组在堆内存的引用地址即可。</p>\n<hr>\n<h4 id=\"HashMap和HashTable的区别？\"><a href=\"#HashMap和HashTable的区别？\" class=\"headerlink\" title=\"HashMap和HashTable的区别？\"></a>HashMap和HashTable的区别？</h4><p>1、HashMap和HashTable都实现了Map接口，主要区别在线程安全性、同步、速度<br>2、线程是否安全： HashMap非同步线程不安全，HashTable同步线程安全。HashTable内部的方法都经过synchronized修饰。<br>3、效率: HashMap线程不安全效率高，HashTable线程安全效率低。<br>3、对null key和null value的支持： HashMap中，null可以作为key，这样的key只有一个，但可以有多个key对应的值为null；在HashTable中的key不能为null<br>5、底层数据结构： JDK1.8后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阀值时（默认是8），将链表转换为红黑树，以减少搜索时间。HashTable没有这样的机制。</p>\n<hr>\n<h4 id=\"HashMap和HashSet区别\"><a href=\"#HashMap和HashSet区别\" class=\"headerlink\" title=\"HashMap和HashSet区别?\"></a>HashMap和HashSet区别?</h4><p><strong>HashSet底层采用HashMap实现</strong><br>HashMap|HashSet<br>:–|:–<br>实现了Map接口|实现了Set接口<br>储存键值堆|仅储存对象<br>调用put()向Map中添加元素|调用add()向Set中添加元素<br>HashMap使用Key计算HashCode|HashSet使用成员对象来计算hashCode值，对于两个对象来说，hashCode可能相同，所以用equals判断对象的相等性</p>\n<hr>\n<h4 id=\"HashSet如何检查重复？\"><a href=\"#HashSet如何检查重复？\" class=\"headerlink\" title=\"HashSet如何检查重复？\"></a>HashSet如何检查重复？</h4><p>在前面讲hashCode和equals时就提到了，HashSet集合同样适用。向HashSet中存入一个元素，HashSet首先会根据对象的hashCode值判断当期集合中此hashCode对应的位置有没有值，如果没有就直接添加，如果有就再调用equals方法比较两个对象是否相同，相同就不再储存（保证了Set集合不重复的特性），否则就散列到其他位置储存。</p>\n<hr>\n<h4 id=\"HashMap底层实现？\"><a href=\"#HashMap底层实现？\" class=\"headerlink\" title=\"HashMap底层实现？\"></a>HashMap底层实现？</h4><p>Map在Java中的实现由很多，HashMap便是其中之一，随着JDK版本的更新，HashMap的实现也在不断更新：</p>\n<ul>\n<li>&lt;=JDK1.7: Table数组 + Entry链表</li>\n<li><blockquote>\n<p>=JDK1.8: Table数组 + Entry链表/红黑树</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h4><p><strong>Hash（哈希、散列）</strong>，就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。<br>Hash函数的一种实现：<br>直接取余法： f(x) = x mod max<br>位运算法： f(x) = x &amp; max<br>HashMap采用 位运算法，相比直接取余，位运算直接对内存中的二进制数据操作，不需要再转阿欢为十进制，因此处理速度很快：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 &amp; 33 = 1</span><br><span class=\"line\">    </span><br><span class=\"line\">    000111</span><br><span class=\"line\">  &amp; 100001</span><br><span class=\"line\">  --------</span><br><span class=\"line\">    000001 = 1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Hash冲突\"><a href=\"#Hash冲突\" class=\"headerlink\" title=\"Hash冲突\"></a>Hash冲突</h4><p>假设将100个数据通过Hash散列后存储到10个不同的容器中，必定会出现多个元素分布到同一个容器中。具体到HashMap集合中，若将多个K-V数据存入put，HashMap根据元素key计算到对应的hashCode值，如果计算得到多个不同的key对应的hashCode值相同（即要储存到同一位置），此时这种现象就称为 Hash冲突。<br>HashMap默认采用了 链地址法 解决Hash冲突问题，即通过类似单链表的方式将 冲突的元素 串起来，搜索时遍历这个链表即可。注意： 如果冲突的Hash越来越多，这个链就会越来越长。</p>\n<hr>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p><img src=\"http://cdn.tycoding.cn/8db4a3bdfb238da1a1c4431d2b6e075c_hd.png\" alt=\"hash冲突与实现原理\"><br>这里我们需要了解两个名词：<br>Table: 哈希桶数组（哈希表），存放Node元素，底层是一个Node[] table<br>Node: 节点元素，Node是HashMap的一个内部类，实现了Map.Entry接口，本质是一个映射（K-V）<br>HashMap内部的一些关键属性需要了解：<br>DEFAULT_INITIAL_CAPACITY: Tabale数组的初始化长度，默认是1 &lt;&lt; 4，2^4 = 16<br>MAXIMUM_CAPACITY: Table数组最高长度，默认为1 &lt;&lt; 30，2^30 = 1073741824<br>DEFAULT_LOAD_FACTOR: 负载因子，当总元素数 &gt; 数组长度 * 负载因子时，Table数组将扩容，默认是0.75<br>TREEIFY_THRESHOLD: 树化阀值，当单个Table内Node数量超过该值，则将链表转换为红黑树，默认是8<br>UNTREEIFY_THRESHOLD: 链化阀值，当扩容期间单个Table的Entry数量小于该值，则将红黑数转换为链表，默认为6<br>MIN_TREEIFY_CAPACITY: 最小树化阀值，当Table中所有元素超过该值，才会进行树化<br>size: 当前HashMap实际存在的键值对数量<br>threshold: HashMap所能容纳的最大数据量的Node（键值对）个数。Node[] table初始化长度length是16，loadFactor负载因子默认是0.75，threshold = length * loadFactor<br>loadFactor: 负载因子，默认是0.17<br>modCount: 记录HashMap内部结构发生变化的次数<br>HashMap内部存在一个NodeTable数组，这个数组的初始化长度是DEFAULT_INITIAL_CAPACITY，他是一个单向链表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    final int <span class=\"built_in\">hash</span>; //key的Hash值</span><br><span class=\"line\">    final K key; //key</span><br><span class=\"line\">    V value; //value</span><br><span class=\"line\">    Node&lt;K,V&gt; next; //下一个节点</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考单链表的结构，Table中每个Node节点包含两个部分，Node元素作为节点的header，next指向下一个节点。<strong>这种链式结构的存在正是为了解决Hash冲突</strong></p>\n<p>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.put(<span class=\"string\">\"loonycoder\"</span>, <span class=\"string\">\"18\"</span>);</span><br></pre></td></tr></table></figure>\n<p>HashMap将根据”loonycoder”这个Key得到其hashCode值，然后经过Hash算法定位到其在HashMap储存的位置，如果两个不同的key定位到了同一个位置，此时就发生了Hash冲突。<br>在JDK1.7之前，解决Hash冲突的方式是将冲突的Node节点放在一个链表中。在JDK1.8中，当Table中链长超过TREEIFY_THRESHOLD阀值后，会将链表转换为红黑树的实现TreeNode:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; left;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; right;</span><br><span class=\"line\">    TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class=\"line\">    boolean red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当发生<strong>Hash冲突</strong>时，根据HashMap默认采用的 <strong>链地址法</strong>，即将冲突的Hash串成一个链式结构储存到HashMap对应的位置。但是 随着Hash冲突越来越多，这个<strong>链将越来越长</strong>，这就将导致遍历碰撞key时的消耗不断增加，也就直接导致了性能的不足。在JDK1.8后，HashMap对单个Table中的Node超出某个阀值后，将开始树化操作（链表转换为红黑树），这对搜索的性能将会有很大的提升。<br><img src=\"http://cdn.tycoding.cn/JDK1.8%E4%B9%8B%E5%90%8E%E7%9A%84HashMap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg\" alt=\"地址链法\"></p>\n<p><strong>总结</strong><br>到此，我们总结一下HashMap的实现原理：</p>\n<ul>\n<li>HashMap根据key的hashCode值存储元素。put新元素会遍历链表，根据新元素的key计算hashCode得到散列位置，如果该位置有值再调用equals判断value是否相同，相同就散列到其他位置储存。</li>\n<li>HashMap在put新元素时如果遇到key对应的hashCode相同，可能会产生Hash冲突问题。HashMap的做法是采用链式结构（链表）储存存在Hash冲突的元素，查询时再遍历这个链接结构元素集合即可。</li>\n<li>如果发生Hash冲突的元素很多，这个 <strong>链</strong> 将很长，影响到遍历key消耗性能的增加，于是判断当Table中Node节点大于默认值8时，将链表转换为红黑树（TreeNode）存储元素。</li>\n</ul>\n<hr>\n<h4 id=\"Collection和Collections的区别？\"><a href=\"#Collection和Collections的区别？\" class=\"headerlink\" title=\"Collection和Collections的区别？\"></a>Collection和Collections的区别？</h4><ul>\n<li>Collection是集合类的上级接口，继承他的接口主要有Set和List</li>\n<li>Collections仅是针对集合类封装的一个工具类，在java.util包下</li>\n</ul>\n<hr>\n<h4 id=\"Comparable和Comparator的区别？\"><a href=\"#Comparable和Comparator的区别？\" class=\"headerlink\" title=\"Comparable和Comparator的区别？\"></a>Comparable和Comparator的区别？</h4><ul>\n<li>Comparable接口来自java.lang包，提供compareTo(Object obj) 方法排序</li>\n<li>Comparator接口来自java.util包，提供compare(Object obj1, Object obj2)方法排序<br>当需要对一个集合采用一种方式排序，使用Comparable接口；如果需要对一个集合采用两种排序方式就使用Comparator接口。</li>\n</ul>\n<h4 id=\"Java集合框架总结\"><a href=\"#Java集合框架总结\" class=\"headerlink\" title=\"Java集合框架总结\"></a>Java集合框架总结</h4><h5 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h5><p><img src=\"http://cdn.tycoding.cn/QQ20190623-181246.png\" alt=\"Collection\"></p>\n<p><strong>List</strong></p>\n<p>ArrayList: Object数组，线程不安全，查询快，增删慢，效率高<br>Vector: Object数组，线程安全，查询快，增删慢，效率低<br>LinkedList: 双向链表，线程不安全，查询慢，增删快，效率高</p>\n<p><strong>Set</strong></p>\n<p>HashSet: 无序、唯一，基于HashMap实现，底层采用HashMap存储元素<br>LinkedHashSet: LinkedHashSet继承自HashSet，并且其内部通过LinkedHashMap实现<br>TreeSet 有序、唯一，红黑树</p>\n<h5 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h5><p><img src=\"http://cdn.tycoding.cn/QQ20190623-181259.png\" alt=\"Map\"></p>\n<ul>\n<li>HashMap: JDK1.8之前HashMap由数组和链表组成，数组时HashMap的主体，链表是为了解决Hash冲突问题。JDK1.8之后当Table中Node数量大于8时，就将链表转换为红黑树，以减少搜索时间提高效率。</li>\n<li>LinkedHashMap: LinkedHashMap继承自HashMap，所有他的底层仍然由数组和链表/红黑树实现。另外，LinkedHashMap在上面的结构基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。</li>\n<li>HashTable: 数组+链表组成。数组时HashTable的主体，链表是为了解决Hash冲突问题<br>TreeMap: 红黑树</li>\n</ul>\n<hr>\n<h3 id=\"Java并发\"><a href=\"#Java并发\" class=\"headerlink\" title=\"Java并发\"></a>Java并发</h3><h4 id=\"线程和进程的区别？\"><a href=\"#线程和进程的区别？\" class=\"headerlink\" title=\"线程和进程的区别？\"></a>线程和进程的区别？</h4><ul>\n<li>进程是程序的一次执行过程，是系统运行程序的基本单位</li>\n<li>线程与进程类似，但线程是一个比进程更小的执行单位。一个进程执行过程中可以产生多个线程，<br>在Java中，启用一个main方法就是启动了一个JVM进程，而main函数所在的线程就是这个进程中的一个线程，也称为主线程。</li>\n</ul>\n<hr>\n<h4 id=\"从JVM角度分析进程和线程的关系？\"><a href=\"#从JVM角度分析进程和线程的关系？\" class=\"headerlink\" title=\"从JVM角度分析进程和线程的关系？\"></a>从JVM角度分析进程和线程的关系？</h4><p>根据JVM的内存划分，对于线程而言：多个线程共享进程的堆、方法区资源，但每个线程又有自己的程序计数器、虚拟机栈、本地方法栈。</p>\n<p>也就是说，在一个JVM进程中，可以存在多个线程，每个线程都共享了这个JVM进程的方法区、堆；并且每个线程又都具有自己的虚拟机栈、本地方法栈、程序计数器等。</p>\n<h5 id=\"为什么方法区和堆是线程共享区？\"><a href=\"#为什么方法区和堆是线程共享区？\" class=\"headerlink\" title=\"为什么方法区和堆是线程共享区？\"></a>为什么方法区和堆是线程共享区？</h5><ul>\n<li><strong>方法区（Method Area）</strong> 存储已被虚拟机加载的类信息、常量、静态变量等数据。方法区中又包含 运行时常量池 ，这部分区域储存Class文件信息和编译期生成的各种字面量和符号引用。</li>\n<li><strong>堆（Heap）</strong> 堆内存储存了对象实例（比如new关键字创建的实例对象），它是JVM中内存区最大的一块区域。<br>所以，一个进程的启动可能包含了多个线程，而这个进程中的静态变量等都是随着类加载而加载的，他应该不属于某个线程独有，所以将其存储于方法区中。对象实例都储存在Java堆内存中，作为Java最大的一块内存区域，肯定不能是某个线程独占的。</li>\n</ul>\n<h5 id=\"为什么虚拟机栈和本地方法栈是线程独占区？\"><a href=\"#为什么虚拟机栈和本地方法栈是线程独占区？\" class=\"headerlink\" title=\"为什么虚拟机栈和本地方法栈是线程独占区？\"></a>为什么虚拟机栈和本地方法栈是线程独占区？</h5><ul>\n<li><strong>虚拟机栈</strong>： 每个Java方法执行的同时都会创建一个栈帧储存局部变量表、操作数栈、方法出口等。从方法的执行到结束，对应将栈帧压入Java虚拟机栈和从虚拟机栈中弹出的过程。</li>\n<li><strong>本地方法栈</strong>： 本地方法栈类似Java虚拟机栈，只不过Java虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的native方法服务。</li>\n</ul>\n<h5 id=\"程序计数器是什么？\"><a href=\"#程序计数器是什么？\" class=\"headerlink\" title=\"程序计数器是什么？\"></a>程序计数器是什么？</h5><p><strong>程序计数器（Program Counter Register）</strong>：当前线程执行的字节码的行号指示器。每个线程都有独立的程序计数器。此内存区域是Java虚拟机中唯一一个没有任何OutOfMemoryError情况的区域。</p>\n<hr>\n<h4 id=\"说说并行和并发的区别？\"><a href=\"#说说并行和并发的区别？\" class=\"headerlink\" title=\"说说并行和并发的区别？\"></a>说说并行和并发的区别？</h4><ul>\n<li><strong>并行</strong>： 同一时间段，多个任务都在执行（单位时间内不一定同时执行）</li>\n<li><strong>并发</strong>： 单位时间内，多个任务同时执行。</li>\n</ul>\n<hr>\n<h4 id=\"使用多线程可能带来什么问题？\"><a href=\"#使用多线程可能带来什么问题？\" class=\"headerlink\" title=\"使用多线程可能带来什么问题？\"></a>使用多线程可能带来什么问题？</h4><p>并发编程的目的就是提高程序的执行效率，但并发编程可能造成：内存泄漏、上下文切换、死锁等问题</p>\n<hr>\n<h4 id=\"说说线程的生命周期和状态？\"><a href=\"#说说线程的生命周期和状态？\" class=\"headerlink\" title=\"说说线程的生命周期和状态？\"></a>说说线程的生命周期和状态？</h4><table>\n<thead>\n<tr>\n<th align=\"left\">状态名称</th>\n<th align=\"left\">状态说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">new</td>\n<td align=\"left\">初始状态，线程被创建，但还没有调用start()方法</td>\n</tr>\n<tr>\n<td align=\"left\">runnable</td>\n<td align=\"left\">运行状态，Java线程将操作系统中就绪和运行两种状态统称为“运行中”</td>\n</tr>\n<tr>\n<td align=\"left\">blocked</td>\n<td align=\"left\">阻塞状态，表示线程阻塞于锁</td>\n</tr>\n<tr>\n<td align=\"left\">waiting</td>\n<td align=\"left\">等待状态，线程需要等待当前线程或其他线程执行完成</td>\n</tr>\n<tr>\n<td align=\"left\">time_waiting</td>\n<td align=\"left\">超时等待状态，他可以实现在指定时间后自动返回</td>\n</tr>\n<tr>\n<td align=\"left\">terminated</td>\n<td align=\"left\">终止状态，表示当前线程已经执行完毕</td>\n</tr>\n</tbody></table>\n<p>对应，程序会因为不同代码的执行产生不同的状态，如下图：<br><img src=\"http://cdn.tycoding.cn/Java+%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png\" alt=\"线程图\"><br>如上，线程创建后将进入NEW（初始）状态，调用start()开始运行，当线程执行wait()方法后，线程将进入WAITING（等待）状态，可以通过wait(long)或join(long)等方法终止等待状态；当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到BLOCKED（阻塞）状态。</p>\n<hr>\n<h4 id=\"什么是上下文切换？\"><a href=\"#什么是上下文切换？\" class=\"headerlink\" title=\"什么是上下文切换？\"></a>什么是上下文切换？</h4><p>简单来说，并发编程中实际线程的数量都可能大于CPU核心的个数，而COU一个核心在任意时刻只能被一个线程使用，CPU为了保证并发的线程都有被执行，采用<strong>随机分配时间片并轮转</strong>的方式；而一个线程的时间片用户将保存并进入就绪状态直到下次分配时间片再执行，这个 <strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p>\n<hr>\n<h4 id=\"什么是死锁？如何避免\"><a href=\"#什么是死锁？如何避免\" class=\"headerlink\" title=\"什么是死锁？如何避免?\"></a>什么是死锁？如何避免?</h4><p>举例：线程A持有资源2，线程B持有资源1，在线程A、B都没有释放自己所持有资源的情况下（锁未释放），他们都想同时获取对方的资源，因为资源1、2都被锁定，两个线程都会进入相互等待的情况，这种情况称为死锁。<br><img src=\"http://cdn.tycoding.cn/2019-4%E6%AD%BB%E9%94%811.png\" alt=\"死锁\"><br>栗子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DeadLockDemo &#123;</span><br><span class=\"line\">    private static Object resource1 = new Object();//资源 1</span><br><span class=\"line\">    private static Object resource2 = new Object();//资源 2</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            synchronized (resource1) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource1\"</span>);</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"waiting get resource2\"</span>);</span><br><span class=\"line\">                synchronized (resource2) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource2\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"线程 1\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            synchronized (resource2) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource2\"</span>);</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">\"waiting get resource1\"</span>);</span><br><span class=\"line\">                synchronized (resource1) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource1\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"线程 2\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Output：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread[线程 1,5,main]get resource1</span><br><span class=\"line\">Thread[线程 2,5,main]get resource2</span><br><span class=\"line\">Thread[线程 1,5,main]waiting get resource2</span><br><span class=\"line\">Thread[线程 2,5,main]waiting get resource1</span><br></pre></td></tr></table></figure>\n<p>线程1以resource1作为同步监视器，即可以轻松获取resource1同时也锁定了resource1，此时调用sleep让线程1等待1秒钟；此时线程2开始执行，他以resource2作为同步监视器同时也锁定了resource2，此时调用sleep让线程2等待1秒钟；而此时线程1等待1秒已经结束了，当他想要获取resource2时发现resource2已经被线程2锁定了，同理线程2结束等待后想要获取resource1时发现resource1已经被线程1锁定了。那么两者都无法同时获取对方的线程，便进入死锁状态。<br>因此产生死锁需要具备以下四个条件：</p>\n<p>1、互斥条件：该资源任意一个时刻只能由一个线程占用<br>2、请求和保持条件：一个线程因请求资源而阻塞时，对已获取的资源保持不放<br>3、不剥夺条件：线程已获取的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才使用资源<br>4、循环等待条件：若干进程之前形成一种头尾相接的循环等待资源关系。</p>\n<p>避免死锁就要破坏这四个条件中任意一个：<br>1、破坏互斥条件：这个条件我们无法破坏，因为我们用锁的目的就是想让他们互斥<br>2、破坏请求与保持条件：一次性申请所有资源<br>3、破坏循环等待条件：按照一定顺序申请资源，避免资源的循环使用</p>\n<p>解决方案: 修改线程2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Thread(() -&gt; &#123;</span><br><span class=\"line\">    synchronized (resource1) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource1\"</span>);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(1000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread() + <span class=\"string\">\"waiting get resource2\"</span>);</span><br><span class=\"line\">        synchronized (resource2) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread() + <span class=\"string\">\"get resource2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"string\">\"线程 2\"</span>).start();</span><br></pre></td></tr></table></figure>\n\n<p>Output：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread[线程 1,5,main]get resource1</span><br><span class=\"line\">Thread[线程 1,5,main]waiting get resource2</span><br><span class=\"line\">Thread[线程 1,5,main]get resource2</span><br><span class=\"line\">Thread[线程 2,5,main]get resource1</span><br><span class=\"line\">Thread[线程 2,5,main]waiting get resource2</span><br><span class=\"line\">Thread[线程 2,5,main]get resource2</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with <span class=\"built_in\">exit</span> code 0</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"说说sleep-方法和wait-方法的区别？\"><a href=\"#说说sleep-方法和wait-方法的区别？\" class=\"headerlink\" title=\"说说sleep()方法和wait()方法的区别？\"></a>说说sleep()方法和wait()方法的区别？</h4><p>两者最主要的区别在于：<strong>sleep 方法没有释放锁，而 wait 方法释放了锁</strong></p>\n<ul>\n<li>两者都可以暂停线程的执行</li>\n<li>wait()通常用于线程间交互/通信，sleep()通常用户暂停执行</li>\n<li>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。</li>\n</ul>\n<hr>\n<h4 id=\"调用start-方法会执行run-方法，为什么不能直接调用run-方法？\"><a href=\"#调用start-方法会执行run-方法，为什么不能直接调用run-方法？\" class=\"headerlink\" title=\"调用start()方法会执行run()方法，为什么不能直接调用run()方法？\"></a>调用start()方法会执行run()方法，为什么不能直接调用run()方法？</h4><p>new一个Thread，线程进入了新建状态；调用start()方法，会启用一个线程并使线程进入就绪状态，当分配到时间片后就可以开始执行。start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这才是真正的多线程工作。而直接执行run()方法，会吧run()方法当做一个main线程下的一个普通方法去执行，并不会在某个线程中执行他。<br><strong>总结：调用start方法可以启动线程并使线程进入就绪状态，而run()方法只是Thread的一个普通方法调用，还是在main主线程里执行，并不会在一个新线程中执行</strong></p>\n<hr>\n<h4 id=\"synchronized关键字\"><a href=\"#synchronized关键字\" class=\"headerlink\" title=\"synchronized关键字\"></a>synchronized关键字</h4><p>synchronized关键字解决多个线程之间访问资源的同步性，synchronized关键字可以保证它修饰的方法或代码块在任意时刻只能有一个线程执行。<br>synchronized关键字最主要的三种使用方式：</p>\n<ul>\n<li><p><strong>修饰实例方法</strong>： 给当前对象加锁，进入同步代码块前要获取当前对象实例的锁</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此处的`synchronized`就相当于`synchronized(this)`，锁定的是当前对象</span><br><span class=\"line\">public synchronized void <span class=\"function\"><span class=\"title\">add</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>修饰静态方法</strong>： 给当前类加锁（因为静态方法没有this），会作用于当前类的所有对象实例，因为静态成员不属于任何一个实例对象，是一个类成员。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此处的`synchronized`就相当于`synzhronized(T.class)`，(T的当前类)</span><br><span class=\"line\">public synchronized static void <span class=\"function\"><span class=\"title\">add</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>修饰代码块</strong>：指定加锁对象，对给定对象加锁，进入同步代码块之前要获取给定对象的锁</p>\n</li>\n</ul>\n<hr>\n"},{"title":"Shiro会话管理","date":"2019-11-18T16:00:00.000Z","_content":"\n### Shiro在线会话管理\n\n参考文章：\n- [跟我学Shrio-在线会话](https://www.iteye.com/blog/jinnianshilongnian-2047643)\n- [Spring Boot Shiro在线会话管理](https://mrbird.cc/Spring-Boot-Shiro%20session.html)\n\n实现效果预览：\n![实现效果预览](/images/shiro1.png)\n\nShiro提供一个对象org.apache.shiro.session.mgt.eis.SessionDAO，通过此对象可以获取到Shiro的Session中有效的Session对象，通过此对象，我们可以获取到用户登录的数据，比如：用户名、密码、ID、SessionID、登录时间、最后访问时间、IP地址等等。\n\n![目录](/images/shiro2.png)\n\n下面我们实现两个功能：\n- 获取在线会话列表\n- 实现强制下线功能\n\n#### 准备\n\n##### ShiroConfig\n这里我使用的是Redis来储存Shiro的Session信息，修改SessionDAO配置：\n```bash\n@Bean\npublic RedisSessionDAO redisSessionDAO() {\n    RedisSessionDAO redisSessionDAO = new RedisSessionDAO();\n    redisSessionDAO.setRedisManager(redisManager());\n    return redisSessionDAO;\n}\n\n@ConfigurationProperties(prefix = \"redis.shiro\")\npublic RedisManager redisManager() {\n    return new RedisManager();\n}\n```\n\n还需要将SessionDAO注入到SessionManager中：\n```bash\n@Bean\npublic SessionManager sessionManager() {\n    DefaultWebSessionManager defaultWebSessionManager = new DefaultWebSessionManager();\n    defaultWebSessionManager.setCacheManager(cacheManager());\n    defaultWebSessionManager.setSessionDAO(sessionDAO());\n    return sessionManager;\n}\n```\n\n最后将SessionManager注入到SecurityManager中：\n```bash\n@Bean\npublic SecurityManager securityManager() {\n    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n    securityManager.setRealm(realm());\n\n    //自定义sessionManager\n    securityManager.setSessionManager(sessionManager());\n    //自定义缓存实现\n    securityManager.setCacheManager(cacheManager());\n\n    return securityManager;\n}\n```\n\n#### 获取在线会话列表\n\n##### OnlineUser.java\n```bash\n@Data\npublic class OnlineUser implements Serializable {\n\n    private String id; //sessionId\n\n    private String uid; //用户ID\n\n    private String username; //用户名\n\n    private String host; //主机地址\n\n    private String address; //地理位置\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\n    private Date startTime; //用户开始访问时间\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\n    private Date endTime; //用户最后访问时间\n\n    private Long timeout; //超时时间\n\n    private String status; //状态\n\n    public void setHost(String host) {\n        this.host = host.equals(\"0:0:0:0:0:0:0:1\") ? \"127.0.0.1\" : host;\n    }\n}\n```\n\n##### Service\n编写获取在线会话列表的service层实现：\n```bash\n@Override\npublic List<OnlineUser> list() {\n    List<OnlineUser> list = new ArrayList<>();\n    Collection<Session> sessions = sessionDAO.getActiveSessions(); //获取在线会话的集合\n    for (Session session : sessions) {\n        if (session != null) {\n            OnlineUser onlineUser = new OnlineUser();\n            SimplePrincipalCollection principalCollection;\n            User user;\n            //判断此session是否还在登录状态\n            if (session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY) == null) {\n                continue;\n            } else {\n                //如果此session正在登录，将此session的数据放入principalCollection集合中，从而可获取登录用户对象数据\n                principalCollection = (SimplePrincipalCollection) session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);\n                user = (User) principalCollection.getPrimaryPrincipal();\n                onlineUser.setUid(user.getId().toString());\n                onlineUser.setUsername(user.getUsername());\n            }\n            onlineUser.setId(session.getId().toString());\n            onlineUser.setHost(session.getHost());\n            onlineUser.setAddress(AddressUtil.getAddress(session.getHost()));\n            onlineUser.setStartTime(session.getStartTimestamp());\n            onlineUser.setEndTime(session.getLastAccessTime());\n            long timeout = session.getTimeout();\n            onlineUser.setTimeout(timeout);\n            onlineUser.setStatus(timeout == 0L ? \"0\" : \"1\"); //0在线 1下线\n            list.add(onlineUser);\n        }\n    }\n    return list;\n}\n```\n\ngetActiveSessions()将获取到所有有效的Session集合，通过DefaultSubjectContext.PRINCIPALS_SESSION_KEY可以判断当前系统Subject中的session key和sessions列表中的session是否匹配，不匹配则session无效。\nsession.getHost()顾名思义就是获取Host主机地址即IP地址。\nAddressUtil.getAddress(session.getHost())是通过IP地址查询其详细的地理位置，使用了ip2region开源库。\n\n##### 根据IP查询地址位置\n\n开源地址：https://github.com/lionsoul2014/ip2region\n引入ip2region的依赖：\n```bash\n<dependency>\n    <groupId>org.lionsoul</groupId>\n    <artifactId>ip2region</artifactId>\n    <version>1.7.2</version>\n</dependency>\n```\n拷贝ip2region.db文件（开源仓库中找）到项目的resources/config/下\n参考官方实例代码写工具类AddressUtil.java\n官方实例：https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java\n\n```bash\npublic class AddressUtil {\n\n    public static String getAddress(String ip) {\n        //db\n        String dbPath = AddressUtil.class.getResource(\"/config/ip2region.db\").getPath();\n\n        File file = new File(dbPath);\n\n        if (!file.exists()) {\n            throw new GlobalException(\"缺少 ip2region.db库\");\n        }\n\n        int algorithm = DbSearcher.BTREE_ALGORITHM; //B-tree\n\n        try {\n            DbConfig config = new DbConfig();\n            DbSearcher searcher = new DbSearcher(config, file.getPath());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n            //define the method\n            Method method = null;\n            switch (algorithm) {\n                case DbSearcher.BTREE_ALGORITHM:\n                    method = searcher.getClass().getMethod(\"btreeSearch\", String.class);\n                    break;\n                case DbSearcher.BINARY_ALGORITHM:\n                    method = searcher.getClass().getMethod(\"binarySearch\", String.class);\n                    break;\n                case DbSearcher.MEMORY_ALGORITYM:\n                    method = searcher.getClass().getMethod(\"memorySearch\", String.class);\n                    break;\n            }\n\n            DataBlock dataBlock = null;\n            if (!Util.isIpAddress(ip)) {\n                System.out.println(\"Error: Invalid ip address\");\n            }\n            dataBlock = (DataBlock) method.invoke(searcher, ip);\n            reader.close();\n            searcher.close();\n            return dataBlock.getRegion();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n}\n```\n\n##### 结\n当前端请求/online/list接口时，将List<OnlineUser>结合数据返回给前端渲染即可。\n\n#### 实现强制下线功能\n\n##### controller\n```bash\n@GetMapping(\"/forceLogout\")\npublic ResponseCode forceLogout(String id) {\n    try {\n        sessionService.forceLogout(id);\n        return ResponseCode.SUCCESS();\n    } catch (Exception e) {\n        e.printStackTrace();\n        return ResponseCode.ERROR();\n    }\n}\n```\n\n注意这个id是sessionID\n\n##### service实现\n```bash\n@Override\npublic void forceLogout(String id) {\n    Session session = sessionDAO.readSession(id);\n    session.setTimeout(0L);\n    session.stop();\n    sessionDAO.delete(session);\n}\n```\n\n\n","source":"_posts/Shiro.md","raw":"---\ntitle: Shiro会话管理\ncategories:\n    - Java框架\ndate: 2019-11-19\ntags:\n\t- 框架\n\t- 权限框架\t\n---\n\n### Shiro在线会话管理\n\n参考文章：\n- [跟我学Shrio-在线会话](https://www.iteye.com/blog/jinnianshilongnian-2047643)\n- [Spring Boot Shiro在线会话管理](https://mrbird.cc/Spring-Boot-Shiro%20session.html)\n\n实现效果预览：\n![实现效果预览](/images/shiro1.png)\n\nShiro提供一个对象org.apache.shiro.session.mgt.eis.SessionDAO，通过此对象可以获取到Shiro的Session中有效的Session对象，通过此对象，我们可以获取到用户登录的数据，比如：用户名、密码、ID、SessionID、登录时间、最后访问时间、IP地址等等。\n\n![目录](/images/shiro2.png)\n\n下面我们实现两个功能：\n- 获取在线会话列表\n- 实现强制下线功能\n\n#### 准备\n\n##### ShiroConfig\n这里我使用的是Redis来储存Shiro的Session信息，修改SessionDAO配置：\n```bash\n@Bean\npublic RedisSessionDAO redisSessionDAO() {\n    RedisSessionDAO redisSessionDAO = new RedisSessionDAO();\n    redisSessionDAO.setRedisManager(redisManager());\n    return redisSessionDAO;\n}\n\n@ConfigurationProperties(prefix = \"redis.shiro\")\npublic RedisManager redisManager() {\n    return new RedisManager();\n}\n```\n\n还需要将SessionDAO注入到SessionManager中：\n```bash\n@Bean\npublic SessionManager sessionManager() {\n    DefaultWebSessionManager defaultWebSessionManager = new DefaultWebSessionManager();\n    defaultWebSessionManager.setCacheManager(cacheManager());\n    defaultWebSessionManager.setSessionDAO(sessionDAO());\n    return sessionManager;\n}\n```\n\n最后将SessionManager注入到SecurityManager中：\n```bash\n@Bean\npublic SecurityManager securityManager() {\n    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n    securityManager.setRealm(realm());\n\n    //自定义sessionManager\n    securityManager.setSessionManager(sessionManager());\n    //自定义缓存实现\n    securityManager.setCacheManager(cacheManager());\n\n    return securityManager;\n}\n```\n\n#### 获取在线会话列表\n\n##### OnlineUser.java\n```bash\n@Data\npublic class OnlineUser implements Serializable {\n\n    private String id; //sessionId\n\n    private String uid; //用户ID\n\n    private String username; //用户名\n\n    private String host; //主机地址\n\n    private String address; //地理位置\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\n    private Date startTime; //用户开始访问时间\n\n    @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\n    private Date endTime; //用户最后访问时间\n\n    private Long timeout; //超时时间\n\n    private String status; //状态\n\n    public void setHost(String host) {\n        this.host = host.equals(\"0:0:0:0:0:0:0:1\") ? \"127.0.0.1\" : host;\n    }\n}\n```\n\n##### Service\n编写获取在线会话列表的service层实现：\n```bash\n@Override\npublic List<OnlineUser> list() {\n    List<OnlineUser> list = new ArrayList<>();\n    Collection<Session> sessions = sessionDAO.getActiveSessions(); //获取在线会话的集合\n    for (Session session : sessions) {\n        if (session != null) {\n            OnlineUser onlineUser = new OnlineUser();\n            SimplePrincipalCollection principalCollection;\n            User user;\n            //判断此session是否还在登录状态\n            if (session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY) == null) {\n                continue;\n            } else {\n                //如果此session正在登录，将此session的数据放入principalCollection集合中，从而可获取登录用户对象数据\n                principalCollection = (SimplePrincipalCollection) session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);\n                user = (User) principalCollection.getPrimaryPrincipal();\n                onlineUser.setUid(user.getId().toString());\n                onlineUser.setUsername(user.getUsername());\n            }\n            onlineUser.setId(session.getId().toString());\n            onlineUser.setHost(session.getHost());\n            onlineUser.setAddress(AddressUtil.getAddress(session.getHost()));\n            onlineUser.setStartTime(session.getStartTimestamp());\n            onlineUser.setEndTime(session.getLastAccessTime());\n            long timeout = session.getTimeout();\n            onlineUser.setTimeout(timeout);\n            onlineUser.setStatus(timeout == 0L ? \"0\" : \"1\"); //0在线 1下线\n            list.add(onlineUser);\n        }\n    }\n    return list;\n}\n```\n\ngetActiveSessions()将获取到所有有效的Session集合，通过DefaultSubjectContext.PRINCIPALS_SESSION_KEY可以判断当前系统Subject中的session key和sessions列表中的session是否匹配，不匹配则session无效。\nsession.getHost()顾名思义就是获取Host主机地址即IP地址。\nAddressUtil.getAddress(session.getHost())是通过IP地址查询其详细的地理位置，使用了ip2region开源库。\n\n##### 根据IP查询地址位置\n\n开源地址：https://github.com/lionsoul2014/ip2region\n引入ip2region的依赖：\n```bash\n<dependency>\n    <groupId>org.lionsoul</groupId>\n    <artifactId>ip2region</artifactId>\n    <version>1.7.2</version>\n</dependency>\n```\n拷贝ip2region.db文件（开源仓库中找）到项目的resources/config/下\n参考官方实例代码写工具类AddressUtil.java\n官方实例：https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java\n\n```bash\npublic class AddressUtil {\n\n    public static String getAddress(String ip) {\n        //db\n        String dbPath = AddressUtil.class.getResource(\"/config/ip2region.db\").getPath();\n\n        File file = new File(dbPath);\n\n        if (!file.exists()) {\n            throw new GlobalException(\"缺少 ip2region.db库\");\n        }\n\n        int algorithm = DbSearcher.BTREE_ALGORITHM; //B-tree\n\n        try {\n            DbConfig config = new DbConfig();\n            DbSearcher searcher = new DbSearcher(config, file.getPath());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n            //define the method\n            Method method = null;\n            switch (algorithm) {\n                case DbSearcher.BTREE_ALGORITHM:\n                    method = searcher.getClass().getMethod(\"btreeSearch\", String.class);\n                    break;\n                case DbSearcher.BINARY_ALGORITHM:\n                    method = searcher.getClass().getMethod(\"binarySearch\", String.class);\n                    break;\n                case DbSearcher.MEMORY_ALGORITYM:\n                    method = searcher.getClass().getMethod(\"memorySearch\", String.class);\n                    break;\n            }\n\n            DataBlock dataBlock = null;\n            if (!Util.isIpAddress(ip)) {\n                System.out.println(\"Error: Invalid ip address\");\n            }\n            dataBlock = (DataBlock) method.invoke(searcher, ip);\n            reader.close();\n            searcher.close();\n            return dataBlock.getRegion();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n}\n```\n\n##### 结\n当前端请求/online/list接口时，将List<OnlineUser>结合数据返回给前端渲染即可。\n\n#### 实现强制下线功能\n\n##### controller\n```bash\n@GetMapping(\"/forceLogout\")\npublic ResponseCode forceLogout(String id) {\n    try {\n        sessionService.forceLogout(id);\n        return ResponseCode.SUCCESS();\n    } catch (Exception e) {\n        e.printStackTrace();\n        return ResponseCode.ERROR();\n    }\n}\n```\n\n注意这个id是sessionID\n\n##### service实现\n```bash\n@Override\npublic void forceLogout(String id) {\n    Session session = sessionDAO.readSession(id);\n    session.setTimeout(0L);\n    session.stop();\n    sessionDAO.delete(session);\n}\n```\n\n\n","slug":"Shiro","published":1,"updated":"2020-02-12T10:55:41.340Z","_id":"ck57xfme50000d36kef11hpp8","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Shiro在线会话管理\"><a href=\"#Shiro在线会话管理\" class=\"headerlink\" title=\"Shiro在线会话管理\"></a>Shiro在线会话管理</h3><p>参考文章：</p>\n<ul>\n<li><a href=\"https://www.iteye.com/blog/jinnianshilongnian-2047643\" target=\"_blank\" rel=\"noopener\">跟我学Shrio-在线会话</a></li>\n<li><a href=\"https://mrbird.cc/Spring-Boot-Shiro%20session.html\" target=\"_blank\" rel=\"noopener\">Spring Boot Shiro在线会话管理</a></li>\n</ul>\n<p>实现效果预览：<br><img src=\"/images/shiro1.png\" alt=\"实现效果预览\"></p>\n<p>Shiro提供一个对象org.apache.shiro.session.mgt.eis.SessionDAO，通过此对象可以获取到Shiro的Session中有效的Session对象，通过此对象，我们可以获取到用户登录的数据，比如：用户名、密码、ID、SessionID、登录时间、最后访问时间、IP地址等等。</p>\n<p><img src=\"/images/shiro2.png\" alt=\"目录\"></p>\n<p>下面我们实现两个功能：</p>\n<ul>\n<li>获取在线会话列表</li>\n<li>实现强制下线功能</li>\n</ul>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><h5 id=\"ShiroConfig\"><a href=\"#ShiroConfig\" class=\"headerlink\" title=\"ShiroConfig\"></a>ShiroConfig</h5><p>这里我使用的是Redis来储存Shiro的Session信息，修改SessionDAO配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RedisSessionDAO <span class=\"function\"><span class=\"title\">redisSessionDAO</span></span>() &#123;</span><br><span class=\"line\">    RedisSessionDAO redisSessionDAO = new RedisSessionDAO();</span><br><span class=\"line\">    redisSessionDAO.setRedisManager(redisManager());</span><br><span class=\"line\">    <span class=\"built_in\">return</span> redisSessionDAO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@ConfigurationProperties(prefix = <span class=\"string\">\"redis.shiro\"</span>)</span><br><span class=\"line\">public RedisManager <span class=\"function\"><span class=\"title\">redisManager</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new RedisManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还需要将SessionDAO注入到SessionManager中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public SessionManager <span class=\"function\"><span class=\"title\">sessionManager</span></span>() &#123;</span><br><span class=\"line\">    DefaultWebSessionManager defaultWebSessionManager = new DefaultWebSessionManager();</span><br><span class=\"line\">    defaultWebSessionManager.setCacheManager(cacheManager());</span><br><span class=\"line\">    defaultWebSessionManager.setSessionDAO(sessionDAO());</span><br><span class=\"line\">    <span class=\"built_in\">return</span> sessionManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后将SessionManager注入到SecurityManager中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public SecurityManager <span class=\"function\"><span class=\"title\">securityManager</span></span>() &#123;</span><br><span class=\"line\">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class=\"line\">    securityManager.setRealm(realm());</span><br><span class=\"line\"></span><br><span class=\"line\">    //自定义sessionManager</span><br><span class=\"line\">    securityManager.setSessionManager(sessionManager());</span><br><span class=\"line\">    //自定义缓存实现</span><br><span class=\"line\">    securityManager.setCacheManager(cacheManager());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> securityManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取在线会话列表\"><a href=\"#获取在线会话列表\" class=\"headerlink\" title=\"获取在线会话列表\"></a>获取在线会话列表</h4><h5 id=\"OnlineUser-java\"><a href=\"#OnlineUser-java\" class=\"headerlink\" title=\"OnlineUser.java\"></a>OnlineUser.java</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">public class OnlineUser implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String id; //sessionId</span><br><span class=\"line\"></span><br><span class=\"line\">    private String uid; //用户ID</span><br><span class=\"line\"></span><br><span class=\"line\">    private String username; //用户名</span><br><span class=\"line\"></span><br><span class=\"line\">    private String host; //主机地址</span><br><span class=\"line\"></span><br><span class=\"line\">    private String address; //地理位置</span><br><span class=\"line\"></span><br><span class=\"line\">    @DateTimeFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br><span class=\"line\">    @JsonFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>, timezone = <span class=\"string\">\"GMT+8\"</span>)</span><br><span class=\"line\">    private Date startTime; //用户开始访问时间</span><br><span class=\"line\"></span><br><span class=\"line\">    @DateTimeFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br><span class=\"line\">    @JsonFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>, timezone = <span class=\"string\">\"GMT+8\"</span>)</span><br><span class=\"line\">    private Date endTime; //用户最后访问时间</span><br><span class=\"line\"></span><br><span class=\"line\">    private Long timeout; //超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">    private String status; //状态</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setHost(String host) &#123;</span><br><span class=\"line\">        this.host = host.equals(<span class=\"string\">\"0:0:0:0:0:0:0:1\"</span>) ? <span class=\"string\">\"127.0.0.1\"</span> : host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h5><p>编写获取在线会话列表的service层实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public List&lt;OnlineUser&gt; <span class=\"function\"><span class=\"title\">list</span></span>() &#123;</span><br><span class=\"line\">    List&lt;OnlineUser&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    Collection&lt;Session&gt; sessions = sessionDAO.getActiveSessions(); //获取在线会话的集合</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Session session : sessions) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session != null) &#123;</span><br><span class=\"line\">            OnlineUser onlineUser = new OnlineUser();</span><br><span class=\"line\">            SimplePrincipalCollection principalCollection;</span><br><span class=\"line\">            User user;</span><br><span class=\"line\">            //判断此session是否还在登录状态</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY) == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                //如果此session正在登录，将此session的数据放入principalCollection集合中，从而可获取登录用户对象数据</span><br><span class=\"line\">                principalCollection = (SimplePrincipalCollection) session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);</span><br><span class=\"line\">                user = (User) principalCollection.getPrimaryPrincipal();</span><br><span class=\"line\">                onlineUser.setUid(user.getId().toString());</span><br><span class=\"line\">                onlineUser.setUsername(user.getUsername());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            onlineUser.setId(session.getId().toString());</span><br><span class=\"line\">            onlineUser.setHost(session.getHost());</span><br><span class=\"line\">            onlineUser.setAddress(AddressUtil.getAddress(session.getHost()));</span><br><span class=\"line\">            onlineUser.setStartTime(session.getStartTimestamp());</span><br><span class=\"line\">            onlineUser.setEndTime(session.getLastAccessTime());</span><br><span class=\"line\">            long timeout = session.getTimeout();</span><br><span class=\"line\">            onlineUser.setTimeout(timeout);</span><br><span class=\"line\">            onlineUser.setStatus(timeout == 0L ? <span class=\"string\">\"0\"</span> : <span class=\"string\">\"1\"</span>); //0在线 1下线</span><br><span class=\"line\">            list.add(onlineUser);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>getActiveSessions()将获取到所有有效的Session集合，通过DefaultSubjectContext.PRINCIPALS_SESSION_KEY可以判断当前系统Subject中的session key和sessions列表中的session是否匹配，不匹配则session无效。<br>session.getHost()顾名思义就是获取Host主机地址即IP地址。<br>AddressUtil.getAddress(session.getHost())是通过IP地址查询其详细的地理位置，使用了ip2region开源库。</p>\n<h5 id=\"根据IP查询地址位置\"><a href=\"#根据IP查询地址位置\" class=\"headerlink\" title=\"根据IP查询地址位置\"></a>根据IP查询地址位置</h5><p>开源地址：<a href=\"https://github.com/lionsoul2014/ip2region\" target=\"_blank\" rel=\"noopener\">https://github.com/lionsoul2014/ip2region</a><br>引入ip2region的依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.lionsoul&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;ip2region&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.7.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>拷贝ip2region.db文件（开源仓库中找）到项目的resources/config/下<br>参考官方实例代码写工具类AddressUtil.java<br>官方实例：<a href=\"https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java\" target=\"_blank\" rel=\"noopener\">https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AddressUtil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String getAddress(String ip) &#123;</span><br><span class=\"line\">        //db</span><br><span class=\"line\">        String dbPath = AddressUtil.class.getResource(<span class=\"string\">\"/config/ip2region.db\"</span>).getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = new File(dbPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">            throw new GlobalException(<span class=\"string\">\"缺少 ip2region.db库\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int algorithm = DbSearcher.BTREE_ALGORITHM; //B-tree</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            DbConfig config = new DbConfig();</span><br><span class=\"line\">            DbSearcher searcher = new DbSearcher(config, file.getPath());</span><br><span class=\"line\">            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));</span><br><span class=\"line\"></span><br><span class=\"line\">            //define the method</span><br><span class=\"line\">            Method method = null;</span><br><span class=\"line\">            switch (algorithm) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> DbSearcher.BTREE_ALGORITHM:</span><br><span class=\"line\">                    method = searcher.getClass().getMethod(<span class=\"string\">\"btreeSearch\"</span>, String.class);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> DbSearcher.BINARY_ALGORITHM:</span><br><span class=\"line\">                    method = searcher.getClass().getMethod(<span class=\"string\">\"binarySearch\"</span>, String.class);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> DbSearcher.MEMORY_ALGORITYM:</span><br><span class=\"line\">                    method = searcher.getClass().getMethod(<span class=\"string\">\"memorySearch\"</span>, String.class);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            DataBlock dataBlock = null;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Util.isIpAddress(ip)) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Error: Invalid ip address\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dataBlock = (DataBlock) method.invoke(searcher, ip);</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            searcher.close();</span><br><span class=\"line\">            <span class=\"built_in\">return</span> dataBlock.getRegion();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结\"><a href=\"#结\" class=\"headerlink\" title=\"结\"></a>结</h5><p>当前端请求/online/list接口时，将List<OnlineUser>结合数据返回给前端渲染即可。</p>\n<h4 id=\"实现强制下线功能\"><a href=\"#实现强制下线功能\" class=\"headerlink\" title=\"实现强制下线功能\"></a>实现强制下线功能</h4><h5 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(<span class=\"string\">\"/forceLogout\"</span>)</span><br><span class=\"line\">public ResponseCode forceLogout(String id) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        sessionService.forceLogout(id);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ResponseCode.SUCCESS();</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ResponseCode.ERROR();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意这个id是sessionID</p>\n<h5 id=\"service实现\"><a href=\"#service实现\" class=\"headerlink\" title=\"service实现\"></a>service实现</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void forceLogout(String id) &#123;</span><br><span class=\"line\">    Session session = sessionDAO.readSession(id);</span><br><span class=\"line\">    session.setTimeout(0L);</span><br><span class=\"line\">    session.stop();</span><br><span class=\"line\">    sessionDAO.delete(session);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Shiro在线会话管理\"><a href=\"#Shiro在线会话管理\" class=\"headerlink\" title=\"Shiro在线会话管理\"></a>Shiro在线会话管理</h3><p>参考文章：</p>\n<ul>\n<li><a href=\"https://www.iteye.com/blog/jinnianshilongnian-2047643\" target=\"_blank\" rel=\"noopener\">跟我学Shrio-在线会话</a></li>\n<li><a href=\"https://mrbird.cc/Spring-Boot-Shiro%20session.html\" target=\"_blank\" rel=\"noopener\">Spring Boot Shiro在线会话管理</a></li>\n</ul>\n<p>实现效果预览：<br><img src=\"/images/shiro1.png\" alt=\"实现效果预览\"></p>\n<p>Shiro提供一个对象org.apache.shiro.session.mgt.eis.SessionDAO，通过此对象可以获取到Shiro的Session中有效的Session对象，通过此对象，我们可以获取到用户登录的数据，比如：用户名、密码、ID、SessionID、登录时间、最后访问时间、IP地址等等。</p>\n<p><img src=\"/images/shiro2.png\" alt=\"目录\"></p>\n<p>下面我们实现两个功能：</p>\n<ul>\n<li>获取在线会话列表</li>\n<li>实现强制下线功能</li>\n</ul>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><h5 id=\"ShiroConfig\"><a href=\"#ShiroConfig\" class=\"headerlink\" title=\"ShiroConfig\"></a>ShiroConfig</h5><p>这里我使用的是Redis来储存Shiro的Session信息，修改SessionDAO配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public RedisSessionDAO <span class=\"function\"><span class=\"title\">redisSessionDAO</span></span>() &#123;</span><br><span class=\"line\">    RedisSessionDAO redisSessionDAO = new RedisSessionDAO();</span><br><span class=\"line\">    redisSessionDAO.setRedisManager(redisManager());</span><br><span class=\"line\">    <span class=\"built_in\">return</span> redisSessionDAO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@ConfigurationProperties(prefix = <span class=\"string\">\"redis.shiro\"</span>)</span><br><span class=\"line\">public RedisManager <span class=\"function\"><span class=\"title\">redisManager</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new RedisManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还需要将SessionDAO注入到SessionManager中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public SessionManager <span class=\"function\"><span class=\"title\">sessionManager</span></span>() &#123;</span><br><span class=\"line\">    DefaultWebSessionManager defaultWebSessionManager = new DefaultWebSessionManager();</span><br><span class=\"line\">    defaultWebSessionManager.setCacheManager(cacheManager());</span><br><span class=\"line\">    defaultWebSessionManager.setSessionDAO(sessionDAO());</span><br><span class=\"line\">    <span class=\"built_in\">return</span> sessionManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后将SessionManager注入到SecurityManager中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public SecurityManager <span class=\"function\"><span class=\"title\">securityManager</span></span>() &#123;</span><br><span class=\"line\">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class=\"line\">    securityManager.setRealm(realm());</span><br><span class=\"line\"></span><br><span class=\"line\">    //自定义sessionManager</span><br><span class=\"line\">    securityManager.setSessionManager(sessionManager());</span><br><span class=\"line\">    //自定义缓存实现</span><br><span class=\"line\">    securityManager.setCacheManager(cacheManager());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> securityManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取在线会话列表\"><a href=\"#获取在线会话列表\" class=\"headerlink\" title=\"获取在线会话列表\"></a>获取在线会话列表</h4><h5 id=\"OnlineUser-java\"><a href=\"#OnlineUser-java\" class=\"headerlink\" title=\"OnlineUser.java\"></a>OnlineUser.java</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">public class OnlineUser implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String id; //sessionId</span><br><span class=\"line\"></span><br><span class=\"line\">    private String uid; //用户ID</span><br><span class=\"line\"></span><br><span class=\"line\">    private String username; //用户名</span><br><span class=\"line\"></span><br><span class=\"line\">    private String host; //主机地址</span><br><span class=\"line\"></span><br><span class=\"line\">    private String address; //地理位置</span><br><span class=\"line\"></span><br><span class=\"line\">    @DateTimeFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br><span class=\"line\">    @JsonFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>, timezone = <span class=\"string\">\"GMT+8\"</span>)</span><br><span class=\"line\">    private Date startTime; //用户开始访问时间</span><br><span class=\"line\"></span><br><span class=\"line\">    @DateTimeFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br><span class=\"line\">    @JsonFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>, timezone = <span class=\"string\">\"GMT+8\"</span>)</span><br><span class=\"line\">    private Date endTime; //用户最后访问时间</span><br><span class=\"line\"></span><br><span class=\"line\">    private Long timeout; //超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">    private String status; //状态</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setHost(String host) &#123;</span><br><span class=\"line\">        this.host = host.equals(<span class=\"string\">\"0:0:0:0:0:0:0:1\"</span>) ? <span class=\"string\">\"127.0.0.1\"</span> : host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h5><p>编写获取在线会话列表的service层实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public List&lt;OnlineUser&gt; <span class=\"function\"><span class=\"title\">list</span></span>() &#123;</span><br><span class=\"line\">    List&lt;OnlineUser&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    Collection&lt;Session&gt; sessions = sessionDAO.getActiveSessions(); //获取在线会话的集合</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Session session : sessions) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session != null) &#123;</span><br><span class=\"line\">            OnlineUser onlineUser = new OnlineUser();</span><br><span class=\"line\">            SimplePrincipalCollection principalCollection;</span><br><span class=\"line\">            User user;</span><br><span class=\"line\">            //判断此session是否还在登录状态</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY) == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                //如果此session正在登录，将此session的数据放入principalCollection集合中，从而可获取登录用户对象数据</span><br><span class=\"line\">                principalCollection = (SimplePrincipalCollection) session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);</span><br><span class=\"line\">                user = (User) principalCollection.getPrimaryPrincipal();</span><br><span class=\"line\">                onlineUser.setUid(user.getId().toString());</span><br><span class=\"line\">                onlineUser.setUsername(user.getUsername());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            onlineUser.setId(session.getId().toString());</span><br><span class=\"line\">            onlineUser.setHost(session.getHost());</span><br><span class=\"line\">            onlineUser.setAddress(AddressUtil.getAddress(session.getHost()));</span><br><span class=\"line\">            onlineUser.setStartTime(session.getStartTimestamp());</span><br><span class=\"line\">            onlineUser.setEndTime(session.getLastAccessTime());</span><br><span class=\"line\">            long timeout = session.getTimeout();</span><br><span class=\"line\">            onlineUser.setTimeout(timeout);</span><br><span class=\"line\">            onlineUser.setStatus(timeout == 0L ? <span class=\"string\">\"0\"</span> : <span class=\"string\">\"1\"</span>); //0在线 1下线</span><br><span class=\"line\">            list.add(onlineUser);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>getActiveSessions()将获取到所有有效的Session集合，通过DefaultSubjectContext.PRINCIPALS_SESSION_KEY可以判断当前系统Subject中的session key和sessions列表中的session是否匹配，不匹配则session无效。<br>session.getHost()顾名思义就是获取Host主机地址即IP地址。<br>AddressUtil.getAddress(session.getHost())是通过IP地址查询其详细的地理位置，使用了ip2region开源库。</p>\n<h5 id=\"根据IP查询地址位置\"><a href=\"#根据IP查询地址位置\" class=\"headerlink\" title=\"根据IP查询地址位置\"></a>根据IP查询地址位置</h5><p>开源地址：<a href=\"https://github.com/lionsoul2014/ip2region\" target=\"_blank\" rel=\"noopener\">https://github.com/lionsoul2014/ip2region</a><br>引入ip2region的依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.lionsoul&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;ip2region&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.7.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>拷贝ip2region.db文件（开源仓库中找）到项目的resources/config/下<br>参考官方实例代码写工具类AddressUtil.java<br>官方实例：<a href=\"https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java\" target=\"_blank\" rel=\"noopener\">https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AddressUtil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String getAddress(String ip) &#123;</span><br><span class=\"line\">        //db</span><br><span class=\"line\">        String dbPath = AddressUtil.class.getResource(<span class=\"string\">\"/config/ip2region.db\"</span>).getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = new File(dbPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">            throw new GlobalException(<span class=\"string\">\"缺少 ip2region.db库\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int algorithm = DbSearcher.BTREE_ALGORITHM; //B-tree</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            DbConfig config = new DbConfig();</span><br><span class=\"line\">            DbSearcher searcher = new DbSearcher(config, file.getPath());</span><br><span class=\"line\">            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));</span><br><span class=\"line\"></span><br><span class=\"line\">            //define the method</span><br><span class=\"line\">            Method method = null;</span><br><span class=\"line\">            switch (algorithm) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> DbSearcher.BTREE_ALGORITHM:</span><br><span class=\"line\">                    method = searcher.getClass().getMethod(<span class=\"string\">\"btreeSearch\"</span>, String.class);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> DbSearcher.BINARY_ALGORITHM:</span><br><span class=\"line\">                    method = searcher.getClass().getMethod(<span class=\"string\">\"binarySearch\"</span>, String.class);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> DbSearcher.MEMORY_ALGORITYM:</span><br><span class=\"line\">                    method = searcher.getClass().getMethod(<span class=\"string\">\"memorySearch\"</span>, String.class);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            DataBlock dataBlock = null;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Util.isIpAddress(ip)) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Error: Invalid ip address\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dataBlock = (DataBlock) method.invoke(searcher, ip);</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            searcher.close();</span><br><span class=\"line\">            <span class=\"built_in\">return</span> dataBlock.getRegion();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结\"><a href=\"#结\" class=\"headerlink\" title=\"结\"></a>结</h5><p>当前端请求/online/list接口时，将List<OnlineUser>结合数据返回给前端渲染即可。</p>\n<h4 id=\"实现强制下线功能\"><a href=\"#实现强制下线功能\" class=\"headerlink\" title=\"实现强制下线功能\"></a>实现强制下线功能</h4><h5 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(<span class=\"string\">\"/forceLogout\"</span>)</span><br><span class=\"line\">public ResponseCode forceLogout(String id) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        sessionService.forceLogout(id);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ResponseCode.SUCCESS();</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ResponseCode.ERROR();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意这个id是sessionID</p>\n<h5 id=\"service实现\"><a href=\"#service实现\" class=\"headerlink\" title=\"service实现\"></a>service实现</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void forceLogout(String id) &#123;</span><br><span class=\"line\">    Session session = sessionDAO.readSession(id);</span><br><span class=\"line\">    session.setTimeout(0L);</span><br><span class=\"line\">    session.stop();</span><br><span class=\"line\">    sessionDAO.delete(session);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Mybatis入门及搭建","date":"2020-01-02T16:00:00.000Z","_content":"\n上大学的时候自学过一段时间mybatis框架，感觉很好用。\n但是在工作中并没有用到，于是翻出之前的视频重新复习了一下。\n\n---\n\n### Mybatis的配置方式开发\n\n#### 一、准备工作\n\n因为Mybatis是持久层框架，所以在此之前我们要做一些准备工作，首先我们要在Mysql中建好表并插入数据。\n建表及导入sql\n```bash\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL auto_increment,\n  `username` varchar(32) NOT NULL COMMENT '用户名称',\n  `birthday` datetime default NULL COMMENT '生日',\n  `sex` char(1) default NULL COMMENT '性别',\n  `address` varchar(256) default NULL COMMENT '地址',\n  PRIMARY KEY  (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,'张三','2018-02-27 17:47:08','男','北京'),(2,'李四','2018-03-02 15:09:37','女','深圳'),(3,'王五','2018-03-04 11:34:34','女','成都'),(4,'赵六','2018-03-04 12:04:06','男','上海'),(5,'loonycoder','2018-03-07 17:37:26','男','西安'),(6,'望月','2018-03-08 11:44:00','女','杭州');\n\n```\n\n如图：\n![建表](/images/table.png)\n\n#### 二、新建项目\n\n我们这里要新建一个maven项目。\n![创建Maven项目](/images/1.png)\n\n![创建Maven项目](/images/2.png)\n\n![创建Maven项目](/images/3.png)\n\n创建完成之后，我们打开pom.xml文件引入依赖。\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.loonycoder</groupId>\n    <artifactId>MybatisDemo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <packaging>jar</packaging>\n    <dependencies>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.4</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.6</version>\n        </dependency>\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.17</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n---\n\n#### 三、创建表对象的映射实体类\n\n因为mybatis是一个ORM（Object Relational Mapping）框架，所以我们要准备一个和表字段一一对应的实体类。\n\n**注意**：\n**表中的字段名和实体类中的字段名字一定要一致！**\n**实体类一定要实现Serializable接口**\n\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Serializable {\n    private Integer id;\n    private String username;\n    private Date birthday;\n    private String address;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Date getBirthday() {\n        return birthday;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                \", birthday=\" + birthday +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n```\n\n--- \n\n#### 四、新建dao接口\n\n这里直接上代码，我在此新建了一个查询所有的方法，此处记住方法名和返回值类型，后续会用到。\n\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.User;\n\nimport java.util.List;\n\npublic interface IUserDao {\n    List<User> findAll();\n}\n\n```\n\n---\n\n#### 五、创建mybatis的主配置文件\n\n该配置文件需要放在/resources目录下，配置文件的名称在具有规范性的前提下是随意起的，我这里采用了默认的规范(我发现很多人都这么起)\n\nSqlMapConfig.xml\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!--mybatis的主配置文件-->\n<configuration>\n    <!--配置环境-->\n    <environments default=\"mysql\">\n        <!--配置mysql的环境-->\n        <environment id=\"mysql\">\n            <!--配置事务类型-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!--配置数据源(连接池)-->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\" />\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/MybatisDemo/\" />\n                <property name=\"username\" value=\"root\" />\n                <property name=\"password\" value=\"20141016\" />\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!--指定映射配置文件位置，映射配置文件指的是每个dao独立的配置文件-->\n    <mappers>\n        <mapper resource=\"com/loonycoder/dao/IUserDao.xml\" />\n    </mappers>\n</configuration>\n```\n\n配置数据源的时候，把url、username、password 修改成你自己的数据库链接、用户名和密码即可。\n\n注意：\n**下方的mapper部分的配置我接下来会讲，后续按照你自己配置的路径配置即可。**\n\n---\n\n#### 六、配置mapper文件\n\n前面虽然配置了mybatis主配置文件，但是我们在实际操作中如果存在多个对象的dao接口，主配置文件需要怎么准确找到该接口呢？\n我们就需要为每个dao配置一个独立的配置文件\n我习惯上把文件命名成 **xxxMapper.xml**，这里命名成xxxDao.xml是为了方便理解。\n文件存放目录为/resources目录下，与实体对象dao接口的包同级。\n![xml文件配置](/images/mapperxml.png)\n\n代码如下：\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace需要配置dao的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserDao\">\n    <!--配置查询所有-->\n    <!--id一定要是方法的名称-->\n    <select id=\"findAll\" resultType=\"com.loonycoder.domain.User\">\n        select * from user;\n    </select>\n</mapper>\n```\n\n---\n\n#### 七、引入log4j\n\n这个是可选操作，为了后期记录日志，我们可以采用log4j去实现。此处只是了解。\n将log4j.properties文件放在/resources目录下即可。\n\n```bash\n# Set root category priority to INFO and its only appender to CONSOLE.\n#log4j.rootCategory=INFO,CONSOLE             debug  info  warn  error  fatal\nlog4j.rootCategory=debug, CONSOLE, LOGFILE\n\n# Set the enterprise logger category to FATAL and its only appender to CONSOLE.\nlog4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE\n\n# CONSOLE is set to be a ConsoleAppender using a PatternLayout.\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} %-6r [%15.15t] %-5p %30.30c %x - %m\\n\n\n# LOGFILE is set to be a File appender using a PatternLayout.\nlog.appender.LOGFILE=org.apache.log4j.FileAppender\nlog.appender.LOGFILE.FILE=/usr/gmx/LearnWorkspace\nlog.appender.LOGFILE.Append=true\nlog.appender.LOGFILE.layout=org.apache.log4j.PatternLayout\nlog.appender.LOGFILE.layout.ConversionPattern=%d{ISO8601} %-6r [%15.15t] %-5p %30.30c %x - %m\\n\n```\n\n---\n\n#### 八、测试案例\n\n如此，我们的mybatis就搭建完成了，我们接下来测试一下。\n在/test/java目录下新建一个test类\n如图：\n![test类](/images/test.png)\n\n代码如下：\n```bash\npackage com.loonycoder;\n\n\nimport com.loonycoder.dao.IUserDao;\nimport com.loonycoder.domain.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\n\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class MybatisTest {\n\n    public static void main(String[] args) throws Exception{\n        //1.读取配置文件\n        InputStream inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\");\n        //2.创建SqlSessionFactory工厂\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\n        //3.使用工厂创建SqlSession对象\n        SqlSession session = sqlSessionFactory.openSession();\n        //4.使用SqlSession创建dao接口的代理对象\n        IUserDao userDao = session.getMapper(IUserDao.class);\n        //5.使用代理对象执行方法\n        List<User> users= userDao.findAll();\n        for (User user: users) {\n            System.out.println(user);\n        }\n        //6.释放资源\n        session.close();\n        inputStream.close();\n    }\n}\n```\n\n运行结果：\n![运行结果](/images/testResult.png)\n\n\n---\n\n### Mybaits的注解方式开发\n\nMybatis也为我们提供了基于注解的开发方式\n基于注解开发意味着脱离xml配置，所以我们在上述项目中可以直接移除com/loonycoder/dao/IUserDao.xml文件\n同时需要修改SqlMapConfig.xml中的映射配置文件部分\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!--mybatis的主配置文件-->\n<configuration>\n    <!--配置环境-->\n    <environments default=\"mysql\">\n        <environment id=\"mysql\">\n            <!--配置事务-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!--配置数据源（连接池）-->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\" />\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/mybatis\" />\n                <property name=\"username\" value=\"root\" />\n                <property name=\"password\" value=\"root\" />\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!--配置映射文件（mapper类的映射文件）-->\n    <mappers>\n        <!--此处做了修改，之前的属性是resource，现在改为class，并且指定到dao接口的全限定类名-->\n        <mapper class=\"com.loonycoder.dao.IUserDao\" />\n    </mappers>\n</configuration>\n```\n\n同时需要在dao接口的方法上添加注解@Select\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.User;\n\nimport java.util.List;\n\npublic interface IUserDao {\n    @Select(\"select * from user\")\n    List<User> findAll();\n}\n```\n\n运行结果：\n![运行结果](/images/testResult.png)\n\n\n\n","source":"_posts/Mybatis-1.md","raw":"---\ntitle: Mybatis入门及搭建\ncategories:\n    - Mybatis\n    \ndate: 2020-01-03\ntags:\n\t- Java\n\t- Java框架\n    - 数据库\n\n---\n\n上大学的时候自学过一段时间mybatis框架，感觉很好用。\n但是在工作中并没有用到，于是翻出之前的视频重新复习了一下。\n\n---\n\n### Mybatis的配置方式开发\n\n#### 一、准备工作\n\n因为Mybatis是持久层框架，所以在此之前我们要做一些准备工作，首先我们要在Mysql中建好表并插入数据。\n建表及导入sql\n```bash\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL auto_increment,\n  `username` varchar(32) NOT NULL COMMENT '用户名称',\n  `birthday` datetime default NULL COMMENT '生日',\n  `sex` char(1) default NULL COMMENT '性别',\n  `address` varchar(256) default NULL COMMENT '地址',\n  PRIMARY KEY  (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,'张三','2018-02-27 17:47:08','男','北京'),(2,'李四','2018-03-02 15:09:37','女','深圳'),(3,'王五','2018-03-04 11:34:34','女','成都'),(4,'赵六','2018-03-04 12:04:06','男','上海'),(5,'loonycoder','2018-03-07 17:37:26','男','西安'),(6,'望月','2018-03-08 11:44:00','女','杭州');\n\n```\n\n如图：\n![建表](/images/table.png)\n\n#### 二、新建项目\n\n我们这里要新建一个maven项目。\n![创建Maven项目](/images/1.png)\n\n![创建Maven项目](/images/2.png)\n\n![创建Maven项目](/images/3.png)\n\n创建完成之后，我们打开pom.xml文件引入依赖。\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.loonycoder</groupId>\n    <artifactId>MybatisDemo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <packaging>jar</packaging>\n    <dependencies>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.4</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.6</version>\n        </dependency>\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.17</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n---\n\n#### 三、创建表对象的映射实体类\n\n因为mybatis是一个ORM（Object Relational Mapping）框架，所以我们要准备一个和表字段一一对应的实体类。\n\n**注意**：\n**表中的字段名和实体类中的字段名字一定要一致！**\n**实体类一定要实现Serializable接口**\n\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Serializable {\n    private Integer id;\n    private String username;\n    private Date birthday;\n    private String address;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Date getBirthday() {\n        return birthday;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                \", birthday=\" + birthday +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n```\n\n--- \n\n#### 四、新建dao接口\n\n这里直接上代码，我在此新建了一个查询所有的方法，此处记住方法名和返回值类型，后续会用到。\n\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.User;\n\nimport java.util.List;\n\npublic interface IUserDao {\n    List<User> findAll();\n}\n\n```\n\n---\n\n#### 五、创建mybatis的主配置文件\n\n该配置文件需要放在/resources目录下，配置文件的名称在具有规范性的前提下是随意起的，我这里采用了默认的规范(我发现很多人都这么起)\n\nSqlMapConfig.xml\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!--mybatis的主配置文件-->\n<configuration>\n    <!--配置环境-->\n    <environments default=\"mysql\">\n        <!--配置mysql的环境-->\n        <environment id=\"mysql\">\n            <!--配置事务类型-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!--配置数据源(连接池)-->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\" />\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/MybatisDemo/\" />\n                <property name=\"username\" value=\"root\" />\n                <property name=\"password\" value=\"20141016\" />\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!--指定映射配置文件位置，映射配置文件指的是每个dao独立的配置文件-->\n    <mappers>\n        <mapper resource=\"com/loonycoder/dao/IUserDao.xml\" />\n    </mappers>\n</configuration>\n```\n\n配置数据源的时候，把url、username、password 修改成你自己的数据库链接、用户名和密码即可。\n\n注意：\n**下方的mapper部分的配置我接下来会讲，后续按照你自己配置的路径配置即可。**\n\n---\n\n#### 六、配置mapper文件\n\n前面虽然配置了mybatis主配置文件，但是我们在实际操作中如果存在多个对象的dao接口，主配置文件需要怎么准确找到该接口呢？\n我们就需要为每个dao配置一个独立的配置文件\n我习惯上把文件命名成 **xxxMapper.xml**，这里命名成xxxDao.xml是为了方便理解。\n文件存放目录为/resources目录下，与实体对象dao接口的包同级。\n![xml文件配置](/images/mapperxml.png)\n\n代码如下：\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace需要配置dao的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserDao\">\n    <!--配置查询所有-->\n    <!--id一定要是方法的名称-->\n    <select id=\"findAll\" resultType=\"com.loonycoder.domain.User\">\n        select * from user;\n    </select>\n</mapper>\n```\n\n---\n\n#### 七、引入log4j\n\n这个是可选操作，为了后期记录日志，我们可以采用log4j去实现。此处只是了解。\n将log4j.properties文件放在/resources目录下即可。\n\n```bash\n# Set root category priority to INFO and its only appender to CONSOLE.\n#log4j.rootCategory=INFO,CONSOLE             debug  info  warn  error  fatal\nlog4j.rootCategory=debug, CONSOLE, LOGFILE\n\n# Set the enterprise logger category to FATAL and its only appender to CONSOLE.\nlog4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE\n\n# CONSOLE is set to be a ConsoleAppender using a PatternLayout.\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} %-6r [%15.15t] %-5p %30.30c %x - %m\\n\n\n# LOGFILE is set to be a File appender using a PatternLayout.\nlog.appender.LOGFILE=org.apache.log4j.FileAppender\nlog.appender.LOGFILE.FILE=/usr/gmx/LearnWorkspace\nlog.appender.LOGFILE.Append=true\nlog.appender.LOGFILE.layout=org.apache.log4j.PatternLayout\nlog.appender.LOGFILE.layout.ConversionPattern=%d{ISO8601} %-6r [%15.15t] %-5p %30.30c %x - %m\\n\n```\n\n---\n\n#### 八、测试案例\n\n如此，我们的mybatis就搭建完成了，我们接下来测试一下。\n在/test/java目录下新建一个test类\n如图：\n![test类](/images/test.png)\n\n代码如下：\n```bash\npackage com.loonycoder;\n\n\nimport com.loonycoder.dao.IUserDao;\nimport com.loonycoder.domain.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\n\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class MybatisTest {\n\n    public static void main(String[] args) throws Exception{\n        //1.读取配置文件\n        InputStream inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\");\n        //2.创建SqlSessionFactory工厂\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\n        //3.使用工厂创建SqlSession对象\n        SqlSession session = sqlSessionFactory.openSession();\n        //4.使用SqlSession创建dao接口的代理对象\n        IUserDao userDao = session.getMapper(IUserDao.class);\n        //5.使用代理对象执行方法\n        List<User> users= userDao.findAll();\n        for (User user: users) {\n            System.out.println(user);\n        }\n        //6.释放资源\n        session.close();\n        inputStream.close();\n    }\n}\n```\n\n运行结果：\n![运行结果](/images/testResult.png)\n\n\n---\n\n### Mybaits的注解方式开发\n\nMybatis也为我们提供了基于注解的开发方式\n基于注解开发意味着脱离xml配置，所以我们在上述项目中可以直接移除com/loonycoder/dao/IUserDao.xml文件\n同时需要修改SqlMapConfig.xml中的映射配置文件部分\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!--mybatis的主配置文件-->\n<configuration>\n    <!--配置环境-->\n    <environments default=\"mysql\">\n        <environment id=\"mysql\">\n            <!--配置事务-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!--配置数据源（连接池）-->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\" />\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/mybatis\" />\n                <property name=\"username\" value=\"root\" />\n                <property name=\"password\" value=\"root\" />\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!--配置映射文件（mapper类的映射文件）-->\n    <mappers>\n        <!--此处做了修改，之前的属性是resource，现在改为class，并且指定到dao接口的全限定类名-->\n        <mapper class=\"com.loonycoder.dao.IUserDao\" />\n    </mappers>\n</configuration>\n```\n\n同时需要在dao接口的方法上添加注解@Select\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.User;\n\nimport java.util.List;\n\npublic interface IUserDao {\n    @Select(\"select * from user\")\n    List<User> findAll();\n}\n```\n\n运行结果：\n![运行结果](/images/testResult.png)\n\n\n\n","slug":"Mybatis-1","published":1,"updated":"2020-02-12T10:55:57.415Z","_id":"ck6i13ob40000jns6gz7mgozn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上大学的时候自学过一段时间mybatis框架，感觉很好用。<br>但是在工作中并没有用到，于是翻出之前的视频重新复习了一下。</p>\n<hr>\n<h3 id=\"Mybatis的配置方式开发\"><a href=\"#Mybatis的配置方式开发\" class=\"headerlink\" title=\"Mybatis的配置方式开发\"></a>Mybatis的配置方式开发</h3><h4 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h4><p>因为Mybatis是持久层框架，所以在此之前我们要做一些准备工作，首先我们要在Mysql中建好表并插入数据。<br>建表及导入sql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  `username` varchar(32) NOT NULL COMMENT <span class=\"string\">'用户名称'</span>,</span><br><span class=\"line\">  `birthday` datetime default NULL COMMENT <span class=\"string\">'生日'</span>,</span><br><span class=\"line\">  `sex` char(1) default NULL COMMENT <span class=\"string\">'性别'</span>,</span><br><span class=\"line\">  `address` varchar(256) default NULL COMMENT <span class=\"string\">'地址'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,<span class=\"string\">'张三'</span>,<span class=\"string\">'2018-02-27 17:47:08'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'北京'</span>),(2,<span class=\"string\">'李四'</span>,<span class=\"string\">'2018-03-02 15:09:37'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'深圳'</span>),(3,<span class=\"string\">'王五'</span>,<span class=\"string\">'2018-03-04 11:34:34'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'成都'</span>),(4,<span class=\"string\">'赵六'</span>,<span class=\"string\">'2018-03-04 12:04:06'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'上海'</span>),(5,<span class=\"string\">'loonycoder'</span>,<span class=\"string\">'2018-03-07 17:37:26'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'西安'</span>),(6,<span class=\"string\">'望月'</span>,<span class=\"string\">'2018-03-08 11:44:00'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'杭州'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如图：<br><img src=\"/images/table.png\" alt=\"建表\"></p>\n<h4 id=\"二、新建项目\"><a href=\"#二、新建项目\" class=\"headerlink\" title=\"二、新建项目\"></a>二、新建项目</h4><p>我们这里要新建一个maven项目。<br><img src=\"/images/1.png\" alt=\"创建Maven项目\"></p>\n<p><img src=\"/images/2.png\" alt=\"创建Maven项目\"></p>\n<p><img src=\"/images/3.png\" alt=\"创建Maven项目\"></p>\n<p>创建完成之后，我们打开pom.xml文件引入依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.loonycoder&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;MybatisDemo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.4.4&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.6&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"三、创建表对象的映射实体类\"><a href=\"#三、创建表对象的映射实体类\" class=\"headerlink\" title=\"三、创建表对象的映射实体类\"></a>三、创建表对象的映射实体类</h4><p>因为mybatis是一个ORM（Object Relational Mapping）框架，所以我们要准备一个和表字段一一对应的实体类。</p>\n<p><strong>注意</strong>：<br><strong>表中的字段名和实体类中的字段名字一定要一致！</strong><br><strong>实体类一定要实现Serializable接口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String username;</span><br><span class=\"line\">    private Date birthday;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getUsername</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUsername(String username) &#123;</span><br><span class=\"line\">        this.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Date <span class=\"function\"><span class=\"title\">getBirthday</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBirthday(Date birthday) &#123;</span><br><span class=\"line\">        this.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getAddress</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAddress(String address) &#123;</span><br><span class=\"line\">        this.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", username='\"</span> + username + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", birthday=\" + birthday +</span></span><br><span class=\"line\"><span class=\"string\">                \", address='</span><span class=\"string\">\" + address + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                '&#125;';</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"四、新建dao接口\"><a href=\"#四、新建dao接口\" class=\"headerlink\" title=\"四、新建dao接口\"></a>四、新建dao接口</h4><p>这里直接上代码，我在此新建了一个查询所有的方法，此处记住方法名和返回值类型，后续会用到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IUserDao &#123;</span><br><span class=\"line\">    List&lt;User&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"五、创建mybatis的主配置文件\"><a href=\"#五、创建mybatis的主配置文件\" class=\"headerlink\" title=\"五、创建mybatis的主配置文件\"></a>五、创建mybatis的主配置文件</h4><p>该配置文件需要放在/resources目录下，配置文件的名称在具有规范性的前提下是随意起的，我这里采用了默认的规范(我发现很多人都这么起)</p>\n<p>SqlMapConfig.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--mybatis的主配置文件--&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--配置环境--&gt;</span><br><span class=\"line\">    &lt;environments default=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">        &lt;!--配置mysql的环境--&gt;</span><br><span class=\"line\">        &lt;environment id=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">            &lt;!--配置事务类型--&gt;</span><br><span class=\"line\">            &lt;transactionManager <span class=\"built_in\">type</span>=<span class=\"string\">\"JDBC\"</span>&gt;&lt;/transactionManager&gt;</span><br><span class=\"line\">            &lt;!--配置数据源(连接池)--&gt;</span><br><span class=\"line\">            &lt;dataSource <span class=\"built_in\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"driver\"</span> value=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"url\"</span> value=<span class=\"string\">\"jdbc:mysql://localhost:3306/MybatisDemo/\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"root\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"password\"</span> value=<span class=\"string\">\"20141016\"</span> /&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--指定映射配置文件位置，映射配置文件指的是每个dao独立的配置文件--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IUserDao.xml\"</span> /&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p>配置数据源的时候，把url、username、password 修改成你自己的数据库链接、用户名和密码即可。</p>\n<p>注意：<br><strong>下方的mapper部分的配置我接下来会讲，后续按照你自己配置的路径配置即可。</strong></p>\n<hr>\n<h4 id=\"六、配置mapper文件\"><a href=\"#六、配置mapper文件\" class=\"headerlink\" title=\"六、配置mapper文件\"></a>六、配置mapper文件</h4><p>前面虽然配置了mybatis主配置文件，但是我们在实际操作中如果存在多个对象的dao接口，主配置文件需要怎么准确找到该接口呢？<br>我们就需要为每个dao配置一个独立的配置文件<br>我习惯上把文件命名成 <strong>xxxMapper.xml</strong>，这里命名成xxxDao.xml是为了方便理解。<br>文件存放目录为/resources目录下，与实体对象dao接口的包同级。<br><img src=\"/images/mapperxml.png\" alt=\"xml文件配置\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace需要配置dao的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserDao\"</span>&gt;</span><br><span class=\"line\">    &lt;!--配置查询所有--&gt;</span><br><span class=\"line\">    &lt;!--id一定要是方法的名称--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"findAll\"</span> resultType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        select * from user;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"七、引入log4j\"><a href=\"#七、引入log4j\" class=\"headerlink\" title=\"七、引入log4j\"></a>七、引入log4j</h4><p>这个是可选操作，为了后期记录日志，我们可以采用log4j去实现。此处只是了解。<br>将log4j.properties文件放在/resources目录下即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class=\"line\"><span class=\"comment\">#log4j.rootCategory=INFO,CONSOLE             debug  info  warn  error  fatal</span></span><br><span class=\"line\">log4j.rootCategory=debug, CONSOLE, LOGFILE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class=\"line\">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class=\"line\">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class=\"line\">log.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class=\"line\">log.appender.LOGFILE.FILE=/usr/gmx/LearnWorkspace</span><br><span class=\"line\">log.appender.LOGFILE.Append=<span class=\"literal\">true</span></span><br><span class=\"line\">log.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\\n</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"八、测试案例\"><a href=\"#八、测试案例\" class=\"headerlink\" title=\"八、测试案例\"></a>八、测试案例</h4><p>如此，我们的mybatis就搭建完成了，我们接下来测试一下。<br>在/test/java目录下新建一个test类<br>如图：<br><img src=\"/images/test.png\" alt=\"test类\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.dao.IUserDao;</span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\">import org.apache.ibatis.io.Resources;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MybatisTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">        //1.读取配置文件</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(<span class=\"string\">\"SqlMapConfig.xml\"</span>);</span><br><span class=\"line\">        //2.创建SqlSessionFactory工厂</span><br><span class=\"line\">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class=\"line\">        //3.使用工厂创建SqlSession对象</span><br><span class=\"line\">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class=\"line\">        //4.使用SqlSession创建dao接口的代理对象</span><br><span class=\"line\">        IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class=\"line\">        //5.使用代理对象执行方法</span><br><span class=\"line\">        List&lt;User&gt; users= userDao.findAll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user: users) &#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //6.释放资源</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/images/testResult.png\" alt=\"运行结果\"></p>\n<hr>\n<h3 id=\"Mybaits的注解方式开发\"><a href=\"#Mybaits的注解方式开发\" class=\"headerlink\" title=\"Mybaits的注解方式开发\"></a>Mybaits的注解方式开发</h3><p>Mybatis也为我们提供了基于注解的开发方式<br>基于注解开发意味着脱离xml配置，所以我们在上述项目中可以直接移除com/loonycoder/dao/IUserDao.xml文件<br>同时需要修改SqlMapConfig.xml中的映射配置文件部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--mybatis的主配置文件--&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--配置环境--&gt;</span><br><span class=\"line\">    &lt;environments default=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">        &lt;environment id=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">            &lt;!--配置事务--&gt;</span><br><span class=\"line\">            &lt;transactionManager <span class=\"built_in\">type</span>=<span class=\"string\">\"JDBC\"</span>&gt;&lt;/transactionManager&gt;</span><br><span class=\"line\">            &lt;!--配置数据源（连接池）--&gt;</span><br><span class=\"line\">            &lt;dataSource <span class=\"built_in\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"driver\"</span> value=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"url\"</span> value=<span class=\"string\">\"jdbc:mysql://localhost:3306/mybatis\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"root\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"password\"</span> value=<span class=\"string\">\"root\"</span> /&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;!--此处做了修改，之前的属性是resource，现在改为class，并且指定到dao接口的全限定类名--&gt;</span><br><span class=\"line\">        &lt;mapper class=<span class=\"string\">\"com.loonycoder.dao.IUserDao\"</span> /&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p>同时需要在dao接口的方法上添加注解@Select</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IUserDao &#123;</span><br><span class=\"line\">    @Select(<span class=\"string\">\"select * from user\"</span>)</span><br><span class=\"line\">    List&lt;User&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/images/testResult.png\" alt=\"运行结果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上大学的时候自学过一段时间mybatis框架，感觉很好用。<br>但是在工作中并没有用到，于是翻出之前的视频重新复习了一下。</p>\n<hr>\n<h3 id=\"Mybatis的配置方式开发\"><a href=\"#Mybatis的配置方式开发\" class=\"headerlink\" title=\"Mybatis的配置方式开发\"></a>Mybatis的配置方式开发</h3><h4 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h4><p>因为Mybatis是持久层框架，所以在此之前我们要做一些准备工作，首先我们要在Mysql中建好表并插入数据。<br>建表及导入sql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  `username` varchar(32) NOT NULL COMMENT <span class=\"string\">'用户名称'</span>,</span><br><span class=\"line\">  `birthday` datetime default NULL COMMENT <span class=\"string\">'生日'</span>,</span><br><span class=\"line\">  `sex` char(1) default NULL COMMENT <span class=\"string\">'性别'</span>,</span><br><span class=\"line\">  `address` varchar(256) default NULL COMMENT <span class=\"string\">'地址'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,<span class=\"string\">'张三'</span>,<span class=\"string\">'2018-02-27 17:47:08'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'北京'</span>),(2,<span class=\"string\">'李四'</span>,<span class=\"string\">'2018-03-02 15:09:37'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'深圳'</span>),(3,<span class=\"string\">'王五'</span>,<span class=\"string\">'2018-03-04 11:34:34'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'成都'</span>),(4,<span class=\"string\">'赵六'</span>,<span class=\"string\">'2018-03-04 12:04:06'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'上海'</span>),(5,<span class=\"string\">'loonycoder'</span>,<span class=\"string\">'2018-03-07 17:37:26'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'西安'</span>),(6,<span class=\"string\">'望月'</span>,<span class=\"string\">'2018-03-08 11:44:00'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'杭州'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如图：<br><img src=\"/images/table.png\" alt=\"建表\"></p>\n<h4 id=\"二、新建项目\"><a href=\"#二、新建项目\" class=\"headerlink\" title=\"二、新建项目\"></a>二、新建项目</h4><p>我们这里要新建一个maven项目。<br><img src=\"/images/1.png\" alt=\"创建Maven项目\"></p>\n<p><img src=\"/images/2.png\" alt=\"创建Maven项目\"></p>\n<p><img src=\"/images/3.png\" alt=\"创建Maven项目\"></p>\n<p>创建完成之后，我们打开pom.xml文件引入依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.loonycoder&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;MybatisDemo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.4.4&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.6&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"三、创建表对象的映射实体类\"><a href=\"#三、创建表对象的映射实体类\" class=\"headerlink\" title=\"三、创建表对象的映射实体类\"></a>三、创建表对象的映射实体类</h4><p>因为mybatis是一个ORM（Object Relational Mapping）框架，所以我们要准备一个和表字段一一对应的实体类。</p>\n<p><strong>注意</strong>：<br><strong>表中的字段名和实体类中的字段名字一定要一致！</strong><br><strong>实体类一定要实现Serializable接口</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String username;</span><br><span class=\"line\">    private Date birthday;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getUsername</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUsername(String username) &#123;</span><br><span class=\"line\">        this.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Date <span class=\"function\"><span class=\"title\">getBirthday</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBirthday(Date birthday) &#123;</span><br><span class=\"line\">        this.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getAddress</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAddress(String address) &#123;</span><br><span class=\"line\">        this.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", username='\"</span> + username + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", birthday=\" + birthday +</span></span><br><span class=\"line\"><span class=\"string\">                \", address='</span><span class=\"string\">\" + address + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                '&#125;';</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"四、新建dao接口\"><a href=\"#四、新建dao接口\" class=\"headerlink\" title=\"四、新建dao接口\"></a>四、新建dao接口</h4><p>这里直接上代码，我在此新建了一个查询所有的方法，此处记住方法名和返回值类型，后续会用到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IUserDao &#123;</span><br><span class=\"line\">    List&lt;User&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"五、创建mybatis的主配置文件\"><a href=\"#五、创建mybatis的主配置文件\" class=\"headerlink\" title=\"五、创建mybatis的主配置文件\"></a>五、创建mybatis的主配置文件</h4><p>该配置文件需要放在/resources目录下，配置文件的名称在具有规范性的前提下是随意起的，我这里采用了默认的规范(我发现很多人都这么起)</p>\n<p>SqlMapConfig.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--mybatis的主配置文件--&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--配置环境--&gt;</span><br><span class=\"line\">    &lt;environments default=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">        &lt;!--配置mysql的环境--&gt;</span><br><span class=\"line\">        &lt;environment id=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">            &lt;!--配置事务类型--&gt;</span><br><span class=\"line\">            &lt;transactionManager <span class=\"built_in\">type</span>=<span class=\"string\">\"JDBC\"</span>&gt;&lt;/transactionManager&gt;</span><br><span class=\"line\">            &lt;!--配置数据源(连接池)--&gt;</span><br><span class=\"line\">            &lt;dataSource <span class=\"built_in\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"driver\"</span> value=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"url\"</span> value=<span class=\"string\">\"jdbc:mysql://localhost:3306/MybatisDemo/\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"root\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"password\"</span> value=<span class=\"string\">\"20141016\"</span> /&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--指定映射配置文件位置，映射配置文件指的是每个dao独立的配置文件--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IUserDao.xml\"</span> /&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p>配置数据源的时候，把url、username、password 修改成你自己的数据库链接、用户名和密码即可。</p>\n<p>注意：<br><strong>下方的mapper部分的配置我接下来会讲，后续按照你自己配置的路径配置即可。</strong></p>\n<hr>\n<h4 id=\"六、配置mapper文件\"><a href=\"#六、配置mapper文件\" class=\"headerlink\" title=\"六、配置mapper文件\"></a>六、配置mapper文件</h4><p>前面虽然配置了mybatis主配置文件，但是我们在实际操作中如果存在多个对象的dao接口，主配置文件需要怎么准确找到该接口呢？<br>我们就需要为每个dao配置一个独立的配置文件<br>我习惯上把文件命名成 <strong>xxxMapper.xml</strong>，这里命名成xxxDao.xml是为了方便理解。<br>文件存放目录为/resources目录下，与实体对象dao接口的包同级。<br><img src=\"/images/mapperxml.png\" alt=\"xml文件配置\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace需要配置dao的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserDao\"</span>&gt;</span><br><span class=\"line\">    &lt;!--配置查询所有--&gt;</span><br><span class=\"line\">    &lt;!--id一定要是方法的名称--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"findAll\"</span> resultType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        select * from user;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"七、引入log4j\"><a href=\"#七、引入log4j\" class=\"headerlink\" title=\"七、引入log4j\"></a>七、引入log4j</h4><p>这个是可选操作，为了后期记录日志，我们可以采用log4j去实现。此处只是了解。<br>将log4j.properties文件放在/resources目录下即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class=\"line\"><span class=\"comment\">#log4j.rootCategory=INFO,CONSOLE             debug  info  warn  error  fatal</span></span><br><span class=\"line\">log4j.rootCategory=debug, CONSOLE, LOGFILE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class=\"line\">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class=\"line\">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class=\"line\">log.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class=\"line\">log.appender.LOGFILE.FILE=/usr/gmx/LearnWorkspace</span><br><span class=\"line\">log.appender.LOGFILE.Append=<span class=\"literal\">true</span></span><br><span class=\"line\">log.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\\n</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"八、测试案例\"><a href=\"#八、测试案例\" class=\"headerlink\" title=\"八、测试案例\"></a>八、测试案例</h4><p>如此，我们的mybatis就搭建完成了，我们接下来测试一下。<br>在/test/java目录下新建一个test类<br>如图：<br><img src=\"/images/test.png\" alt=\"test类\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.dao.IUserDao;</span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\">import org.apache.ibatis.io.Resources;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MybatisTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">        //1.读取配置文件</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(<span class=\"string\">\"SqlMapConfig.xml\"</span>);</span><br><span class=\"line\">        //2.创建SqlSessionFactory工厂</span><br><span class=\"line\">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class=\"line\">        //3.使用工厂创建SqlSession对象</span><br><span class=\"line\">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class=\"line\">        //4.使用SqlSession创建dao接口的代理对象</span><br><span class=\"line\">        IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class=\"line\">        //5.使用代理对象执行方法</span><br><span class=\"line\">        List&lt;User&gt; users= userDao.findAll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user: users) &#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //6.释放资源</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/images/testResult.png\" alt=\"运行结果\"></p>\n<hr>\n<h3 id=\"Mybaits的注解方式开发\"><a href=\"#Mybaits的注解方式开发\" class=\"headerlink\" title=\"Mybaits的注解方式开发\"></a>Mybaits的注解方式开发</h3><p>Mybatis也为我们提供了基于注解的开发方式<br>基于注解开发意味着脱离xml配置，所以我们在上述项目中可以直接移除com/loonycoder/dao/IUserDao.xml文件<br>同时需要修改SqlMapConfig.xml中的映射配置文件部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--mybatis的主配置文件--&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--配置环境--&gt;</span><br><span class=\"line\">    &lt;environments default=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">        &lt;environment id=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">            &lt;!--配置事务--&gt;</span><br><span class=\"line\">            &lt;transactionManager <span class=\"built_in\">type</span>=<span class=\"string\">\"JDBC\"</span>&gt;&lt;/transactionManager&gt;</span><br><span class=\"line\">            &lt;!--配置数据源（连接池）--&gt;</span><br><span class=\"line\">            &lt;dataSource <span class=\"built_in\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"driver\"</span> value=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"url\"</span> value=<span class=\"string\">\"jdbc:mysql://localhost:3306/mybatis\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"root\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"password\"</span> value=<span class=\"string\">\"root\"</span> /&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;!--此处做了修改，之前的属性是resource，现在改为class，并且指定到dao接口的全限定类名--&gt;</span><br><span class=\"line\">        &lt;mapper class=<span class=\"string\">\"com.loonycoder.dao.IUserDao\"</span> /&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p>同时需要在dao接口的方法上添加注解@Select</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IUserDao &#123;</span><br><span class=\"line\">    @Select(<span class=\"string\">\"select * from user\"</span>)</span><br><span class=\"line\">    List&lt;User&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/images/testResult.png\" alt=\"运行结果\"></p>\n"},{"title":"初识Vue","date":"2019-11-29T16:00:00.000Z","_content":"\n### 什么是Vue.js\n\n+ Vue.js是目前很火的前端框架；与Angualr.js和React.js并称为前端三大主流框架。\n+ Vue.js是一套构建用户界面的框架，只关注视图层（MVC中的V层）；它易于上手，便于和第三方库或既有项目整合，\n+ 在Vue中，一个核心的概念就是减少对DOM元素的操作，让程序员更多的去关注业务逻辑。\n\n---\n\n### 后端的MVC和前端的MVVM之间的区别\n\n+ MVC是后端的分层开发概念\n+ MVVM是前端视图层的概念，主要关注于：视图层分离；也就是说：MVV将前端分为三个部分Model、View、VM（ViewModel）\n\n+ Model： 页面需要展示的数据\n+ View: 视图、HTML\n+ VM: 数据（Model）和视图（View）之间的调度者\n\n**图解**\n![vue图解](/images/vue1.png)\n\n---\n\n### 入门案例\n\n```bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <!-- 插值表达式 -->\n    <p>{{ msg }}</p>\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: {     // data中存放的是el中需要的数据\n            msg: 'Hello Vue!'\n        }\n    });\n</script>\n\n</body>\n</html>\n```\n\n**解释**\n\n1、首先需要引入Vue.js\n2、声明Vue实例的控制区域，我们可以放在指定div中，或者body体；控制区域下使用的Vue语法就会被Vue识别到\n3、创建Vue实例，这个实例其实就是MVVM中的vm调度者\n4、el: 表示当时Vue实例的控制区域；data: 存放当前Vue实例中所需的Model（数据）。其中的msg就是一个Vue的元素。\n5、在指定Vue实例区域下，展示我们已经声明的元素msg，使用：即可展示出来（其中msg是在Vue中声明的元素，如果未声明会报错）\n\n---\n\n### 常用指令\n\n#### v-cloak\n\n在入门案例中我们初步了解到，在View层我们可以通过插值表达式的方式展示Vue绑定的数据；但是存在一个问题，当网络很慢的情况下，即在vue.js还没有加载完毕时，视图层不会将识别为Vue中的插值表达式，而是作为字符串显示到页面上。\n为了解决这个问题，Vue.js提供了v-cloak指令，可以解决插值表达式闪烁的问题。\n\n```bash\n<p v-cloak>{{ msg }}</p>\n```\n\n**扩展**\n\n解决插值表达式闪烁问题，除了v-cloak指令，Vue还提供了v-text指令。\n\n```bash\n<p v-text=\"msg\"></p>\n```\n\n**v-cloak与v-text的区别**\nv-text默认会覆盖掉元素中原有的内容\nv-cloak不会覆盖掉原有的内容\n![vue2](/images/vue2.png)\n\n#### v-bind\n\n**在上面，我们了解了v-text输出Vue元素，但是如果我们需要显示的数据是一段HTML代码，v-text和都将无能为力，\n为此，Vue提供了专门渲染HTML数据的指令：v-html**\n\n![vue3](/images/vue3.png)\n\n上面我们学习的指令都是Vue内置的指令，那么在Vue内置的指令中显示Vue绑定的变量，这当然没毛病；但是如果直接在HTML属性中使用Vue绑定的指令（不是用）这样可以吗？\n\n```bash\n<input type=\"button\" value=\"msg\"/>\n```\n\n回答当然是不行的，因为在HTML属性中直接使用Vue绑定的变量，HTML并不能将其识别为其引用的是Vue中的元素，而是作为一个字符串输出。\n为了解决上述问题，Vue提供了v-bind:指令来绑定一些HTML属性：\n\n```bash\n<input type=\"button\" v-bind:value=\"msg\">\n```\n\n如上，被v-bind:绑定的属性，其元素不再是字符串，而是被识别为Vue的绑定的变量（同样这个变量必须声明了）。另外v-bind:还有一个简易写法：\n\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" value=\"msg\" />\n    <input type=\"button\" v-bind:value=\"msg\">\n    <input type=\"button\" :value=\"msg\">\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '戳我'\n        }\n    });\n</script>\n```\n\n效果如图：\n![vue4](/images/vue4.png)\n\n#### v-on\n\nVue提供了事件绑定机制的指令：v-on:；用其我们可以用来绑定一些常见的触发事件：click、mouseover ...\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" :value=\"msg\" v-on:click=\"show\">\n    <input type=\"button\" :value=\"msg\" v-on:mouseover=\"show\">\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '戳我'\n        },\n        methods: {\n            show: function(){\n                alert(\"hello\");\n            }\n        }\n    });\n</script>\n```\n\n其中methods是Vue内置的对象，用于存放一些自定义的方法函数\n\n**拓展**\n\n使用js内置的函数setInterval(定时器)，实现跑马灯效果：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" value=\"开始\" @click=\"action\">\n    <input type=\"button\" value=\"停止\" @click=\"stop\">\n    <p>{{msg}}</p>\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '嘻嘻，哈哈',\n            intervalId: null\n        },\n        methods: {\n            action(){\n                if(this.intervalId != null) return;\n\n                // 定时器\n                this.intervalId = setInterval(() => {\n                    // 截取首字符\n                    var start = this.msg.substring(0, 1);\n                    // 截取第一个字符后的所有字符\n                    var end = this.msg.substring(1);\n                    // 将后面的字符拼接到前面，实现循环的效果\n                    this.msg = end + start;\n                },400)\n            },\n            stop(){\n                // 停止定时器\n                clearInterval(this.intervalId)\n                // 每次清除定时器后需要将intervalId重新设置为null\n                this.intervalId = null;\n            }\n        }\n    });\n</script>\n```\n\n**解释**\n\n1、v-on:也有简写形式：@，用法如上。\n2、在视图层取VM中的数据我们可以使用或一些内置指令；而在VM实例内部获取定义的其他变量或方法等，使用：this.数据属性名（其中的this表示当前VM实例对象）。\n3、methodName:function(){}在ES6中有一个简便的写法：methodName(){}。 4、setInterval()和clearInterval()是js中内置的函数，用法如上。\n5、正常我们调用函数会写：name(function(){})，而ES6也提供了一个方式：methodName(() => {})，这种用法的好处就解决了this指向问题，因为如果元素定义在了函数内部，那么其中的this就表示当前函数的对象，如果我们需要使用外部的对象，除了在外部全局定义一个对象，一个简单的方式就是使用ES6提供的=>。\n\n效果如图：\n![vue5](/images/vue5.png)\n\n\n#### 事件修饰符\n\n> .stop 阻止冒泡\n> .prevent 阻止默认事件\n> .capture 添加时间侦听器时使用时间捕获模式\n> .self 只当事件在该元素本身（比如不是子元素）触发时触发回调\n> .once 事件只触发一次\n\n用法：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <div @click=\"divClick\">\n        <input type=\"button\" value=\"戳我\" @click.stop=\"btnClick\">\n        <input type=\"button\" value=\"戳我\" @click.prevent=\"btnClick\">\n    </div>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '嘻嘻，哈哈',\n        },\n        methods: {\n            divClick() {\n                console.log(\"这是div的点击事件\");\n            },\n            btnClick() {\n                console.log(\"这是btn的点击事件\");\n            }\n        }\n    });\n</script>\n```\n\n#### v-model\n\n- 唯一的双向绑定指令：v-model\n- 单向绑定指令：v-bing\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"text\" v-model=\"msg\">\n    <p>{{msg}}</p>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: 'hello!',\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n---\n\n### Vue中的样式\n\n\n#### 外联样式\n- 数组\n```bash\n<h2 :class=\"['italic','color']\">LoonyCoder</h2>\n```\n其中的italic、color是自定义的类名，需在外部定义CSS样式\n\n- 数组中嵌套对象\n```bash\n<h2 :class=\"['italic',{'color': flag}]\">LoonyCoder</h2>\n```\n其中的flag是Vue绑定的变量，在data进行声明\n\n- 直接使用对象\n```bash\n<h2 :class=\"{italic:true, color:flag}\">LoonyCoder</h2>\n```\n\n实例：\n```bash\n<style>\n    .italic {\n        font-style: italic;\n    }\n\n    .color {\n        color: skyblue;\n    }\n</style>\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <h2 :class=\"['italic','color']\">LoonyCoder</h2>\n    <h2 :class=\"['italic', {'color':flag}]\">LoonyCoder</h2>\n    <h2 :class=\"{italic:false, color:flag}\">LoonyCoder</h2>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            flag: true\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n#### 内联样式\n\n- 将样式对象定义到data中，并在:style中引用\n```bash\n<h2 :style=\"styleObj\">LoonyCoder</h2>\n\ndata: {\n    styleObj: { 'color': 'red', 'font-weight': '200px'}\n}\n```\n\n- 在:style中通过数组，引用多个data上的样式对象\n```bash\n<h2 :style=\"[styleObj, styleObj2]\">LoonyCoder</h2>\n\ndata: {\n    styleObj: { 'color': 'red', 'font-weight': '200px'},\n    styleObj2: { 'font-style': 'italic' }\n}\n```\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <h2 :style=\"styleObj\">LoonyCoder</h2>\n    <h2 :style=\"[styleObj, styleObj2]\">LoonyCoder</h2>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            styleObj: { 'color': 'red', 'font-weight': '200px' },\n            styleObj2: { 'font-style': 'italic' }\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n#### v-for\n\nVue提供了遍历集合、数组的指令：v-for；用法: v-for=\"别名 in 集合名\"\n\n#### 迭代数组\n```bash\n<p v-for=\"item, i in list\">索引：{{i}} --- 值：{{item}}</p>\n\ndata: {\n    list: [1,2,3,4]\n}\n```\n**其中的i是迭代得到的别名，可写可不写，但是必须是在迭代元素别名的后面定义**\n\n#### 迭代对象数组\n```bash\n<p v-for=\"item in list2\">id: {{item.id}} --- name: {{item.name}}</p>\n\ndata: {\n    list2: [\n            { id:1, name: '嘻嘻' },\n            { id:2, name: '哈哈' }\n        ],\n}\n```\n\n**迭代对象数组，通过 的方式，这个属性名就是对象数组中定义的元素属性名**\n\n#### 迭代对象\n```bash\n<p v-for=\"(val, key) in user\">键: {{key}} --- 值: {{val}}</p>\n\ndata: {\n    user: {\n            id: 1,\n            name: 'LoonyCoder'\n        }\n}\n```\n\n**迭代对象，迭代得到的是对象的value值和key值，注意得到的第一个是value值，第二个是key值，与我们定义的对象属性顺序是刚好相反的。**\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <p v-for=\"item, i in list\">索引：{{i}} --- 值：{{item}}</p>\n    <p v-for=\"item in list2\">id: {{item.id}} --- name: {{item.name}}</p>\n    <p v-for=\"(val, key) in user\">键: {{key}} --- 值: {{val}}</p>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            list: [1,2,3,4], \n            list2: [\n                { id:1, name: '嘻嘻' },\n                { id:2, name: '哈哈' }\n            ],\n            user: {\n                id: 1,\n                name: 'LoonyCoder'\n            }\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n#### 注意\n在vue2.0+版本里，当使用v-for渲染数据，必须制定对应的key值（这里的key是一个属性，不是前面迭代的key值）。\n\n**用法：**\n```bash\n<p v-for=\"item in user\" :key=\"item.id\">\n```\n其中:key就说明了key属性必须是通过v-bind绑定的元素，而:key=\"\"中指定的值必须是string/number类型的值，比如此处使用的是item.id中ID是number值，并且是唯一的。\n**目的：**\n避免迭代元素时，为循环元素绑定的是列表中的第几个元素（指定位置），而不是指定的某个元素（指定身份）。\n\n#### v-show和v-if\n\nVue提供了两个指令来实现元素显示状态的切换：v-if v-show\n**区别**\n- v-if的特点：每次都会重新删除和创建元素，具有较高的切换性能消耗（因为每次执行都要进行删除和创建元素）。\n- v-show的特点：每次不会重建进行DOM的删除和创建操作，只是切换了元素的display:none样式，具有较高的初识渲染消耗（即每次都只是将元素隐藏了，并没有真正的删除掉）。\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" @click=\"flag=!flag\" value=\"toggle\">\n\n    <h3 v-if=\"flag\">这是v-if控制的元素</h3>\n    <h3 v-show=\"flag\">这是v-show控制的元素</h3>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            flag: false\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n效果如下：\n![vue6](/images/vue6.png)","source":"_posts/Vue1.md","raw":"---\ntitle: 初识Vue\ncategories:\n    - Web前端\ndate: 2019-11-30\ntags:\n\t- 前端框架\n\t\n---\n\n### 什么是Vue.js\n\n+ Vue.js是目前很火的前端框架；与Angualr.js和React.js并称为前端三大主流框架。\n+ Vue.js是一套构建用户界面的框架，只关注视图层（MVC中的V层）；它易于上手，便于和第三方库或既有项目整合，\n+ 在Vue中，一个核心的概念就是减少对DOM元素的操作，让程序员更多的去关注业务逻辑。\n\n---\n\n### 后端的MVC和前端的MVVM之间的区别\n\n+ MVC是后端的分层开发概念\n+ MVVM是前端视图层的概念，主要关注于：视图层分离；也就是说：MVV将前端分为三个部分Model、View、VM（ViewModel）\n\n+ Model： 页面需要展示的数据\n+ View: 视图、HTML\n+ VM: 数据（Model）和视图（View）之间的调度者\n\n**图解**\n![vue图解](/images/vue1.png)\n\n---\n\n### 入门案例\n\n```bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <!-- 插值表达式 -->\n    <p>{{ msg }}</p>\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: {     // data中存放的是el中需要的数据\n            msg: 'Hello Vue!'\n        }\n    });\n</script>\n\n</body>\n</html>\n```\n\n**解释**\n\n1、首先需要引入Vue.js\n2、声明Vue实例的控制区域，我们可以放在指定div中，或者body体；控制区域下使用的Vue语法就会被Vue识别到\n3、创建Vue实例，这个实例其实就是MVVM中的vm调度者\n4、el: 表示当时Vue实例的控制区域；data: 存放当前Vue实例中所需的Model（数据）。其中的msg就是一个Vue的元素。\n5、在指定Vue实例区域下，展示我们已经声明的元素msg，使用：即可展示出来（其中msg是在Vue中声明的元素，如果未声明会报错）\n\n---\n\n### 常用指令\n\n#### v-cloak\n\n在入门案例中我们初步了解到，在View层我们可以通过插值表达式的方式展示Vue绑定的数据；但是存在一个问题，当网络很慢的情况下，即在vue.js还没有加载完毕时，视图层不会将识别为Vue中的插值表达式，而是作为字符串显示到页面上。\n为了解决这个问题，Vue.js提供了v-cloak指令，可以解决插值表达式闪烁的问题。\n\n```bash\n<p v-cloak>{{ msg }}</p>\n```\n\n**扩展**\n\n解决插值表达式闪烁问题，除了v-cloak指令，Vue还提供了v-text指令。\n\n```bash\n<p v-text=\"msg\"></p>\n```\n\n**v-cloak与v-text的区别**\nv-text默认会覆盖掉元素中原有的内容\nv-cloak不会覆盖掉原有的内容\n![vue2](/images/vue2.png)\n\n#### v-bind\n\n**在上面，我们了解了v-text输出Vue元素，但是如果我们需要显示的数据是一段HTML代码，v-text和都将无能为力，\n为此，Vue提供了专门渲染HTML数据的指令：v-html**\n\n![vue3](/images/vue3.png)\n\n上面我们学习的指令都是Vue内置的指令，那么在Vue内置的指令中显示Vue绑定的变量，这当然没毛病；但是如果直接在HTML属性中使用Vue绑定的指令（不是用）这样可以吗？\n\n```bash\n<input type=\"button\" value=\"msg\"/>\n```\n\n回答当然是不行的，因为在HTML属性中直接使用Vue绑定的变量，HTML并不能将其识别为其引用的是Vue中的元素，而是作为一个字符串输出。\n为了解决上述问题，Vue提供了v-bind:指令来绑定一些HTML属性：\n\n```bash\n<input type=\"button\" v-bind:value=\"msg\">\n```\n\n如上，被v-bind:绑定的属性，其元素不再是字符串，而是被识别为Vue的绑定的变量（同样这个变量必须声明了）。另外v-bind:还有一个简易写法：\n\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" value=\"msg\" />\n    <input type=\"button\" v-bind:value=\"msg\">\n    <input type=\"button\" :value=\"msg\">\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '戳我'\n        }\n    });\n</script>\n```\n\n效果如图：\n![vue4](/images/vue4.png)\n\n#### v-on\n\nVue提供了事件绑定机制的指令：v-on:；用其我们可以用来绑定一些常见的触发事件：click、mouseover ...\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" :value=\"msg\" v-on:click=\"show\">\n    <input type=\"button\" :value=\"msg\" v-on:mouseover=\"show\">\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '戳我'\n        },\n        methods: {\n            show: function(){\n                alert(\"hello\");\n            }\n        }\n    });\n</script>\n```\n\n其中methods是Vue内置的对象，用于存放一些自定义的方法函数\n\n**拓展**\n\n使用js内置的函数setInterval(定时器)，实现跑马灯效果：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" value=\"开始\" @click=\"action\">\n    <input type=\"button\" value=\"停止\" @click=\"stop\">\n    <p>{{msg}}</p>\n</div>\n\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '嘻嘻，哈哈',\n            intervalId: null\n        },\n        methods: {\n            action(){\n                if(this.intervalId != null) return;\n\n                // 定时器\n                this.intervalId = setInterval(() => {\n                    // 截取首字符\n                    var start = this.msg.substring(0, 1);\n                    // 截取第一个字符后的所有字符\n                    var end = this.msg.substring(1);\n                    // 将后面的字符拼接到前面，实现循环的效果\n                    this.msg = end + start;\n                },400)\n            },\n            stop(){\n                // 停止定时器\n                clearInterval(this.intervalId)\n                // 每次清除定时器后需要将intervalId重新设置为null\n                this.intervalId = null;\n            }\n        }\n    });\n</script>\n```\n\n**解释**\n\n1、v-on:也有简写形式：@，用法如上。\n2、在视图层取VM中的数据我们可以使用或一些内置指令；而在VM实例内部获取定义的其他变量或方法等，使用：this.数据属性名（其中的this表示当前VM实例对象）。\n3、methodName:function(){}在ES6中有一个简便的写法：methodName(){}。 4、setInterval()和clearInterval()是js中内置的函数，用法如上。\n5、正常我们调用函数会写：name(function(){})，而ES6也提供了一个方式：methodName(() => {})，这种用法的好处就解决了this指向问题，因为如果元素定义在了函数内部，那么其中的this就表示当前函数的对象，如果我们需要使用外部的对象，除了在外部全局定义一个对象，一个简单的方式就是使用ES6提供的=>。\n\n效果如图：\n![vue5](/images/vue5.png)\n\n\n#### 事件修饰符\n\n> .stop 阻止冒泡\n> .prevent 阻止默认事件\n> .capture 添加时间侦听器时使用时间捕获模式\n> .self 只当事件在该元素本身（比如不是子元素）触发时触发回调\n> .once 事件只触发一次\n\n用法：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <div @click=\"divClick\">\n        <input type=\"button\" value=\"戳我\" @click.stop=\"btnClick\">\n        <input type=\"button\" value=\"戳我\" @click.prevent=\"btnClick\">\n    </div>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: '嘻嘻，哈哈',\n        },\n        methods: {\n            divClick() {\n                console.log(\"这是div的点击事件\");\n            },\n            btnClick() {\n                console.log(\"这是btn的点击事件\");\n            }\n        }\n    });\n</script>\n```\n\n#### v-model\n\n- 唯一的双向绑定指令：v-model\n- 单向绑定指令：v-bing\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"text\" v-model=\"msg\">\n    <p>{{msg}}</p>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            msg: 'hello!',\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n---\n\n### Vue中的样式\n\n\n#### 外联样式\n- 数组\n```bash\n<h2 :class=\"['italic','color']\">LoonyCoder</h2>\n```\n其中的italic、color是自定义的类名，需在外部定义CSS样式\n\n- 数组中嵌套对象\n```bash\n<h2 :class=\"['italic',{'color': flag}]\">LoonyCoder</h2>\n```\n其中的flag是Vue绑定的变量，在data进行声明\n\n- 直接使用对象\n```bash\n<h2 :class=\"{italic:true, color:flag}\">LoonyCoder</h2>\n```\n\n实例：\n```bash\n<style>\n    .italic {\n        font-style: italic;\n    }\n\n    .color {\n        color: skyblue;\n    }\n</style>\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <h2 :class=\"['italic','color']\">LoonyCoder</h2>\n    <h2 :class=\"['italic', {'color':flag}]\">LoonyCoder</h2>\n    <h2 :class=\"{italic:false, color:flag}\">LoonyCoder</h2>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            flag: true\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n#### 内联样式\n\n- 将样式对象定义到data中，并在:style中引用\n```bash\n<h2 :style=\"styleObj\">LoonyCoder</h2>\n\ndata: {\n    styleObj: { 'color': 'red', 'font-weight': '200px'}\n}\n```\n\n- 在:style中通过数组，引用多个data上的样式对象\n```bash\n<h2 :style=\"[styleObj, styleObj2]\">LoonyCoder</h2>\n\ndata: {\n    styleObj: { 'color': 'red', 'font-weight': '200px'},\n    styleObj2: { 'font-style': 'italic' }\n}\n```\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <h2 :style=\"styleObj\">LoonyCoder</h2>\n    <h2 :style=\"[styleObj, styleObj2]\">LoonyCoder</h2>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            styleObj: { 'color': 'red', 'font-weight': '200px' },\n            styleObj2: { 'font-style': 'italic' }\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n#### v-for\n\nVue提供了遍历集合、数组的指令：v-for；用法: v-for=\"别名 in 集合名\"\n\n#### 迭代数组\n```bash\n<p v-for=\"item, i in list\">索引：{{i}} --- 值：{{item}}</p>\n\ndata: {\n    list: [1,2,3,4]\n}\n```\n**其中的i是迭代得到的别名，可写可不写，但是必须是在迭代元素别名的后面定义**\n\n#### 迭代对象数组\n```bash\n<p v-for=\"item in list2\">id: {{item.id}} --- name: {{item.name}}</p>\n\ndata: {\n    list2: [\n            { id:1, name: '嘻嘻' },\n            { id:2, name: '哈哈' }\n        ],\n}\n```\n\n**迭代对象数组，通过 的方式，这个属性名就是对象数组中定义的元素属性名**\n\n#### 迭代对象\n```bash\n<p v-for=\"(val, key) in user\">键: {{key}} --- 值: {{val}}</p>\n\ndata: {\n    user: {\n            id: 1,\n            name: 'LoonyCoder'\n        }\n}\n```\n\n**迭代对象，迭代得到的是对象的value值和key值，注意得到的第一个是value值，第二个是key值，与我们定义的对象属性顺序是刚好相反的。**\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <p v-for=\"item, i in list\">索引：{{i}} --- 值：{{item}}</p>\n    <p v-for=\"item in list2\">id: {{item.id}} --- name: {{item.name}}</p>\n    <p v-for=\"(val, key) in user\">键: {{key}} --- 值: {{val}}</p>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            list: [1,2,3,4], \n            list2: [\n                { id:1, name: '嘻嘻' },\n                { id:2, name: '哈哈' }\n            ],\n            user: {\n                id: 1,\n                name: 'LoonyCoder'\n            }\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n#### 注意\n在vue2.0+版本里，当使用v-for渲染数据，必须制定对应的key值（这里的key是一个属性，不是前面迭代的key值）。\n\n**用法：**\n```bash\n<p v-for=\"item in user\" :key=\"item.id\">\n```\n其中:key就说明了key属性必须是通过v-bind绑定的元素，而:key=\"\"中指定的值必须是string/number类型的值，比如此处使用的是item.id中ID是number值，并且是唯一的。\n**目的：**\n避免迭代元素时，为循环元素绑定的是列表中的第几个元素（指定位置），而不是指定的某个元素（指定身份）。\n\n#### v-show和v-if\n\nVue提供了两个指令来实现元素显示状态的切换：v-if v-show\n**区别**\n- v-if的特点：每次都会重新删除和创建元素，具有较高的切换性能消耗（因为每次执行都要进行删除和创建元素）。\n- v-show的特点：每次不会重建进行DOM的删除和创建操作，只是切换了元素的display:none样式，具有较高的初识渲染消耗（即每次都只是将元素隐藏了，并没有真正的删除掉）。\n\n实例：\n```bash\n<!-- Vue实例的控制区域 -->\n<div id=\"app\">\n    <input type=\"button\" @click=\"flag=!flag\" value=\"toggle\">\n\n    <h3 v-if=\"flag\">这是v-if控制的元素</h3>\n    <h3 v-show=\"flag\">这是v-show控制的元素</h3>\n</div>\n<!-- js部分 -->\n<script src=\"../lib/vue.js\"></script>\n<script>\n    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者\n    var vm = new Vue({\n        el: '#app', // element的简写，表示我们当前new的这个Vue实例的区域\n        data: { // data中存放的是el中需要的数据\n            flag: false\n        },\n        methods: {\n\n        }\n    });\n</script>\n```\n\n效果如下：\n![vue6](/images/vue6.png)","slug":"Vue1","published":1,"updated":"2020-02-12T10:54:37.422Z","_id":"ck6i8hlnq0000tks60gd499cg","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是Vue-js\"><a href=\"#什么是Vue-js\" class=\"headerlink\" title=\"什么是Vue.js\"></a>什么是Vue.js</h3><ul>\n<li>Vue.js是目前很火的前端框架；与Angualr.js和React.js并称为前端三大主流框架。</li>\n<li>Vue.js是一套构建用户界面的框架，只关注视图层（MVC中的V层）；它易于上手，便于和第三方库或既有项目整合，</li>\n<li>在Vue中，一个核心的概念就是减少对DOM元素的操作，让程序员更多的去关注业务逻辑。</li>\n</ul>\n<hr>\n<h3 id=\"后端的MVC和前端的MVVM之间的区别\"><a href=\"#后端的MVC和前端的MVVM之间的区别\" class=\"headerlink\" title=\"后端的MVC和前端的MVVM之间的区别\"></a>后端的MVC和前端的MVVM之间的区别</h3><ul>\n<li><p>MVC是后端的分层开发概念</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于：视图层分离；也就是说：MVV将前端分为三个部分Model、View、VM（ViewModel）</p>\n</li>\n<li><p>Model： 页面需要展示的数据</p>\n</li>\n<li><p>View: 视图、HTML</p>\n</li>\n<li><p>VM: 数据（Model）和视图（View）之间的调度者</p>\n</li>\n</ul>\n<p><strong>图解</strong><br><img src=\"/images/vue1.png\" alt=\"vue图解\"></p>\n<hr>\n<h3 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 插值表达式 --&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123;     // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'Hello Vue!'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong></p>\n<p>1、首先需要引入Vue.js<br>2、声明Vue实例的控制区域，我们可以放在指定div中，或者body体；控制区域下使用的Vue语法就会被Vue识别到<br>3、创建Vue实例，这个实例其实就是MVVM中的vm调度者<br>4、el: 表示当时Vue实例的控制区域；data: 存放当前Vue实例中所需的Model（数据）。其中的msg就是一个Vue的元素。<br>5、在指定Vue实例区域下，展示我们已经声明的元素msg，使用：即可展示出来（其中msg是在Vue中声明的元素，如果未声明会报错）</p>\n<hr>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><h4 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h4><p>在入门案例中我们初步了解到，在View层我们可以通过插值表达式的方式展示Vue绑定的数据；但是存在一个问题，当网络很慢的情况下，即在vue.js还没有加载完毕时，视图层不会将识别为Vue中的插值表达式，而是作为字符串显示到页面上。<br>为了解决这个问题，Vue.js提供了v-cloak指令，可以解决插值表达式闪烁的问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-cloak&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>扩展</strong></p>\n<p>解决插值表达式闪烁问题，除了v-cloak指令，Vue还提供了v-text指令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-text=<span class=\"string\">\"msg\"</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>v-cloak与v-text的区别</strong><br>v-text默认会覆盖掉元素中原有的内容<br>v-cloak不会覆盖掉原有的内容<br><img src=\"/images/vue2.png\" alt=\"vue2\"></p>\n<h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h4><p><strong>在上面，我们了解了v-text输出Vue元素，但是如果我们需要显示的数据是一段HTML代码，v-text和都将无能为力，<br>为此，Vue提供了专门渲染HTML数据的指令：v-html</strong></p>\n<p><img src=\"/images/vue3.png\" alt=\"vue3\"></p>\n<p>上面我们学习的指令都是Vue内置的指令，那么在Vue内置的指令中显示Vue绑定的变量，这当然没毛病；但是如果直接在HTML属性中使用Vue绑定的指令（不是用）这样可以吗？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"msg\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>回答当然是不行的，因为在HTML属性中直接使用Vue绑定的变量，HTML并不能将其识别为其引用的是Vue中的元素，而是作为一个字符串输出。<br>为了解决上述问题，Vue提供了v-bind:指令来绑定一些HTML属性：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> v-bind:value=<span class=\"string\">\"msg\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，被v-bind:绑定的属性，其元素不再是字符串，而是被识别为Vue的绑定的变量（同样这个变量必须声明了）。另外v-bind:还有一个简易写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"msg\"</span> /&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> v-bind:value=<span class=\"string\">\"msg\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> :value=<span class=\"string\">\"msg\"</span>&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'戳我'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img src=\"/images/vue4.png\" alt=\"vue4\"></p>\n<h4 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h4><p>Vue提供了事件绑定机制的指令：v-on:；用其我们可以用来绑定一些常见的触发事件：click、mouseover …</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> :value=<span class=\"string\">\"msg\"</span> v-on:click=<span class=\"string\">\"show\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> :value=<span class=\"string\">\"msg\"</span> v-on:mouseover=<span class=\"string\">\"show\"</span>&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'戳我'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            show: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">                alert(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中methods是Vue内置的对象，用于存放一些自定义的方法函数</p>\n<p><strong>拓展</strong></p>\n<p>使用js内置的函数setInterval(定时器)，实现跑马灯效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"开始\"</span> @click=<span class=\"string\">\"action\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"停止\"</span> @click=<span class=\"string\">\"stop\"</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'嘻嘻，哈哈'</span>,</span><br><span class=\"line\">            intervalId: null</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">action</span></span>()&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(this.intervalId != null) <span class=\"built_in\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 定时器</span><br><span class=\"line\">                this.intervalId = setInterval(() =&gt; &#123;</span><br><span class=\"line\">                    // 截取首字符</span><br><span class=\"line\">                    var start = this.msg.substring(0, 1);</span><br><span class=\"line\">                    // 截取第一个字符后的所有字符</span><br><span class=\"line\">                    var end = this.msg.substring(1);</span><br><span class=\"line\">                    // 将后面的字符拼接到前面，实现循环的效果</span><br><span class=\"line\">                    this.msg = end + start;</span><br><span class=\"line\">                &#125;,400)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">                // 停止定时器</span><br><span class=\"line\">                clearInterval(this.intervalId)</span><br><span class=\"line\">                // 每次清除定时器后需要将intervalId重新设置为null</span><br><span class=\"line\">                this.intervalId = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong></p>\n<p>1、v-on:也有简写形式：@，用法如上。<br>2、在视图层取VM中的数据我们可以使用或一些内置指令；而在VM实例内部获取定义的其他变量或方法等，使用：this.数据属性名（其中的this表示当前VM实例对象）。<br>3、methodName:function(){}在ES6中有一个简便的写法：methodName(){}。 4、setInterval()和clearInterval()是js中内置的函数，用法如上。<br>5、正常我们调用函数会写：name(function(){})，而ES6也提供了一个方式：methodName(() =&gt; {})，这种用法的好处就解决了this指向问题，因为如果元素定义在了函数内部，那么其中的this就表示当前函数的对象，如果我们需要使用外部的对象，除了在外部全局定义一个对象，一个简单的方式就是使用ES6提供的=&gt;。</p>\n<p>效果如图：<br><img src=\"/images/vue5.png\" alt=\"vue5\"></p>\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><blockquote>\n<p>.stop 阻止冒泡<br>.prevent 阻止默认事件<br>.capture 添加时间侦听器时使用时间捕获模式<br>.self 只当事件在该元素本身（比如不是子元素）触发时触发回调<br>.once 事件只触发一次</p>\n</blockquote>\n<p>用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;div @click=<span class=\"string\">\"divClick\"</span>&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"戳我\"</span> @click.stop=<span class=\"string\">\"btnClick\"</span>&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"戳我\"</span> @click.prevent=<span class=\"string\">\"btnClick\"</span>&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'嘻嘻，哈哈'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">divClick</span></span>() &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">\"这是div的点击事件\"</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">btnClick</span></span>() &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">\"这是btn的点击事件\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h4><ul>\n<li>唯一的双向绑定指令：v-model</li>\n<li>单向绑定指令：v-bing</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"msg\"</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'hello!'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Vue中的样式\"><a href=\"#Vue中的样式\" class=\"headerlink\" title=\"Vue中的样式\"></a>Vue中的样式</h3><h4 id=\"外联样式\"><a href=\"#外联样式\" class=\"headerlink\" title=\"外联样式\"></a>外联样式</h4><ul>\n<li><p>数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :class=<span class=\"string\">\"['italic','color']\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n<p>其中的italic、color是自定义的类名，需在外部定义CSS样式</p>\n</li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :class=<span class=\"string\">\"['italic',&#123;'color': flag&#125;]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n<p>其中的flag是Vue绑定的变量，在data进行声明</p>\n</li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :class=<span class=\"string\">\"&#123;italic:true, color:flag&#125;\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .italic &#123;</span><br><span class=\"line\">        font-style: italic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .color &#123;</span><br><span class=\"line\">        color: skyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;h2 :class=<span class=\"string\">\"['italic','color']\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2 :class=<span class=\"string\">\"['italic', &#123;'color':flag&#125;]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2 :class=<span class=\"string\">\"&#123;italic:false, color:flag&#125;\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            flag: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h4><ul>\n<li><p>将样式对象定义到data中，并在:style中引用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :style=<span class=\"string\">\"styleObj\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    styleObj: &#123; <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>, <span class=\"string\">'font-weight'</span>: <span class=\"string\">'200px'</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在:style中通过数组，引用多个data上的样式对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :style=<span class=\"string\">\"[styleObj, styleObj2]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    styleObj: &#123; <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>, <span class=\"string\">'font-weight'</span>: <span class=\"string\">'200px'</span>&#125;,</span><br><span class=\"line\">    styleObj2: &#123; <span class=\"string\">'font-style'</span>: <span class=\"string\">'italic'</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;h2 :style=<span class=\"string\">\"styleObj\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2 :style=<span class=\"string\">\"[styleObj, styleObj2]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            styleObj: &#123; <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>, <span class=\"string\">'font-weight'</span>: <span class=\"string\">'200px'</span> &#125;,</span><br><span class=\"line\">            styleObj2: &#123; <span class=\"string\">'font-style'</span>: <span class=\"string\">'italic'</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h4><p>Vue提供了遍历集合、数组的指令：v-for；用法: v-for=”别名 in 集合名”</p>\n<h4 id=\"迭代数组\"><a href=\"#迭代数组\" class=\"headerlink\" title=\"迭代数组\"></a>迭代数组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"item, i in list\"</span>&gt;索引：&#123;&#123;i&#125;&#125; --- 值：&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    list: [1,2,3,4]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其中的i是迭代得到的别名，可写可不写，但是必须是在迭代元素别名的后面定义</strong></p>\n<h4 id=\"迭代对象数组\"><a href=\"#迭代对象数组\" class=\"headerlink\" title=\"迭代对象数组\"></a>迭代对象数组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"item in list2\"</span>&gt;id: &#123;&#123;item.id&#125;&#125; --- name: &#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    list2: [</span><br><span class=\"line\">            &#123; id:1, name: <span class=\"string\">'嘻嘻'</span> &#125;,</span><br><span class=\"line\">            &#123; id:2, name: <span class=\"string\">'哈哈'</span> &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代对象数组，通过 的方式，这个属性名就是对象数组中定义的元素属性名</strong></p>\n<h4 id=\"迭代对象\"><a href=\"#迭代对象\" class=\"headerlink\" title=\"迭代对象\"></a>迭代对象</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"(val, key) in user\"</span>&gt;键: &#123;&#123;key&#125;&#125; --- 值: &#123;&#123;val&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">            id: 1,</span><br><span class=\"line\">            name: <span class=\"string\">'LoonyCoder'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代对象，迭代得到的是对象的value值和key值，注意得到的第一个是value值，第二个是key值，与我们定义的对象属性顺序是刚好相反的。</strong></p>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;p v-for=<span class=\"string\">\"item, i in list\"</span>&gt;索引：&#123;&#123;i&#125;&#125; --- 值：&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p v-for=<span class=\"string\">\"item in list2\"</span>&gt;id: &#123;&#123;item.id&#125;&#125; --- name: &#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p v-for=<span class=\"string\">\"(val, key) in user\"</span>&gt;键: &#123;&#123;key&#125;&#125; --- 值: &#123;&#123;val&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            list: [1,2,3,4], </span><br><span class=\"line\">            list2: [</span><br><span class=\"line\">                &#123; id:1, name: <span class=\"string\">'嘻嘻'</span> &#125;,</span><br><span class=\"line\">                &#123; id:2, name: <span class=\"string\">'哈哈'</span> &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            user: &#123;</span><br><span class=\"line\">                id: 1,</span><br><span class=\"line\">                name: <span class=\"string\">'LoonyCoder'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>在vue2.0+版本里，当使用v-for渲染数据，必须制定对应的key值（这里的key是一个属性，不是前面迭代的key值）。</p>\n<p><strong>用法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"item in user\"</span> :key=<span class=\"string\">\"item.id\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>其中:key就说明了key属性必须是通过v-bind绑定的元素，而:key=””中指定的值必须是string/number类型的值，比如此处使用的是item.id中ID是number值，并且是唯一的。<br><strong>目的：</strong><br>避免迭代元素时，为循环元素绑定的是列表中的第几个元素（指定位置），而不是指定的某个元素（指定身份）。</p>\n<h4 id=\"v-show和v-if\"><a href=\"#v-show和v-if\" class=\"headerlink\" title=\"v-show和v-if\"></a>v-show和v-if</h4><p>Vue提供了两个指令来实现元素显示状态的切换：v-if v-show<br><strong>区别</strong></p>\n<ul>\n<li>v-if的特点：每次都会重新删除和创建元素，具有较高的切换性能消耗（因为每次执行都要进行删除和创建元素）。</li>\n<li>v-show的特点：每次不会重建进行DOM的删除和创建操作，只是切换了元素的display:none样式，具有较高的初识渲染消耗（即每次都只是将元素隐藏了，并没有真正的删除掉）。</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"flag=!flag\"</span> value=<span class=\"string\">\"toggle\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;h3 v-if=<span class=\"string\">\"flag\"</span>&gt;这是v-if控制的元素&lt;/h3&gt;</span><br><span class=\"line\">    &lt;h3 v-show=<span class=\"string\">\"flag\"</span>&gt;这是v-show控制的元素&lt;/h3&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            flag: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><img src=\"/images/vue6.png\" alt=\"vue6\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Vue-js\"><a href=\"#什么是Vue-js\" class=\"headerlink\" title=\"什么是Vue.js\"></a>什么是Vue.js</h3><ul>\n<li>Vue.js是目前很火的前端框架；与Angualr.js和React.js并称为前端三大主流框架。</li>\n<li>Vue.js是一套构建用户界面的框架，只关注视图层（MVC中的V层）；它易于上手，便于和第三方库或既有项目整合，</li>\n<li>在Vue中，一个核心的概念就是减少对DOM元素的操作，让程序员更多的去关注业务逻辑。</li>\n</ul>\n<hr>\n<h3 id=\"后端的MVC和前端的MVVM之间的区别\"><a href=\"#后端的MVC和前端的MVVM之间的区别\" class=\"headerlink\" title=\"后端的MVC和前端的MVVM之间的区别\"></a>后端的MVC和前端的MVVM之间的区别</h3><ul>\n<li><p>MVC是后端的分层开发概念</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于：视图层分离；也就是说：MVV将前端分为三个部分Model、View、VM（ViewModel）</p>\n</li>\n<li><p>Model： 页面需要展示的数据</p>\n</li>\n<li><p>View: 视图、HTML</p>\n</li>\n<li><p>VM: 数据（Model）和视图（View）之间的调度者</p>\n</li>\n</ul>\n<p><strong>图解</strong><br><img src=\"/images/vue1.png\" alt=\"vue图解\"></p>\n<hr>\n<h3 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 插值表达式 --&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123;     // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'Hello Vue!'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong></p>\n<p>1、首先需要引入Vue.js<br>2、声明Vue实例的控制区域，我们可以放在指定div中，或者body体；控制区域下使用的Vue语法就会被Vue识别到<br>3、创建Vue实例，这个实例其实就是MVVM中的vm调度者<br>4、el: 表示当时Vue实例的控制区域；data: 存放当前Vue实例中所需的Model（数据）。其中的msg就是一个Vue的元素。<br>5、在指定Vue实例区域下，展示我们已经声明的元素msg，使用：即可展示出来（其中msg是在Vue中声明的元素，如果未声明会报错）</p>\n<hr>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><h4 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h4><p>在入门案例中我们初步了解到，在View层我们可以通过插值表达式的方式展示Vue绑定的数据；但是存在一个问题，当网络很慢的情况下，即在vue.js还没有加载完毕时，视图层不会将识别为Vue中的插值表达式，而是作为字符串显示到页面上。<br>为了解决这个问题，Vue.js提供了v-cloak指令，可以解决插值表达式闪烁的问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-cloak&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>扩展</strong></p>\n<p>解决插值表达式闪烁问题，除了v-cloak指令，Vue还提供了v-text指令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-text=<span class=\"string\">\"msg\"</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>v-cloak与v-text的区别</strong><br>v-text默认会覆盖掉元素中原有的内容<br>v-cloak不会覆盖掉原有的内容<br><img src=\"/images/vue2.png\" alt=\"vue2\"></p>\n<h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h4><p><strong>在上面，我们了解了v-text输出Vue元素，但是如果我们需要显示的数据是一段HTML代码，v-text和都将无能为力，<br>为此，Vue提供了专门渲染HTML数据的指令：v-html</strong></p>\n<p><img src=\"/images/vue3.png\" alt=\"vue3\"></p>\n<p>上面我们学习的指令都是Vue内置的指令，那么在Vue内置的指令中显示Vue绑定的变量，这当然没毛病；但是如果直接在HTML属性中使用Vue绑定的指令（不是用）这样可以吗？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"msg\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>回答当然是不行的，因为在HTML属性中直接使用Vue绑定的变量，HTML并不能将其识别为其引用的是Vue中的元素，而是作为一个字符串输出。<br>为了解决上述问题，Vue提供了v-bind:指令来绑定一些HTML属性：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> v-bind:value=<span class=\"string\">\"msg\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，被v-bind:绑定的属性，其元素不再是字符串，而是被识别为Vue的绑定的变量（同样这个变量必须声明了）。另外v-bind:还有一个简易写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"msg\"</span> /&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> v-bind:value=<span class=\"string\">\"msg\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> :value=<span class=\"string\">\"msg\"</span>&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'戳我'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img src=\"/images/vue4.png\" alt=\"vue4\"></p>\n<h4 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h4><p>Vue提供了事件绑定机制的指令：v-on:；用其我们可以用来绑定一些常见的触发事件：click、mouseover …</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> :value=<span class=\"string\">\"msg\"</span> v-on:click=<span class=\"string\">\"show\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> :value=<span class=\"string\">\"msg\"</span> v-on:mouseover=<span class=\"string\">\"show\"</span>&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'戳我'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            show: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">                alert(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中methods是Vue内置的对象，用于存放一些自定义的方法函数</p>\n<p><strong>拓展</strong></p>\n<p>使用js内置的函数setInterval(定时器)，实现跑马灯效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"开始\"</span> @click=<span class=\"string\">\"action\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"停止\"</span> @click=<span class=\"string\">\"stop\"</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'嘻嘻，哈哈'</span>,</span><br><span class=\"line\">            intervalId: null</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">action</span></span>()&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(this.intervalId != null) <span class=\"built_in\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 定时器</span><br><span class=\"line\">                this.intervalId = setInterval(() =&gt; &#123;</span><br><span class=\"line\">                    // 截取首字符</span><br><span class=\"line\">                    var start = this.msg.substring(0, 1);</span><br><span class=\"line\">                    // 截取第一个字符后的所有字符</span><br><span class=\"line\">                    var end = this.msg.substring(1);</span><br><span class=\"line\">                    // 将后面的字符拼接到前面，实现循环的效果</span><br><span class=\"line\">                    this.msg = end + start;</span><br><span class=\"line\">                &#125;,400)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">                // 停止定时器</span><br><span class=\"line\">                clearInterval(this.intervalId)</span><br><span class=\"line\">                // 每次清除定时器后需要将intervalId重新设置为null</span><br><span class=\"line\">                this.intervalId = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong></p>\n<p>1、v-on:也有简写形式：@，用法如上。<br>2、在视图层取VM中的数据我们可以使用或一些内置指令；而在VM实例内部获取定义的其他变量或方法等，使用：this.数据属性名（其中的this表示当前VM实例对象）。<br>3、methodName:function(){}在ES6中有一个简便的写法：methodName(){}。 4、setInterval()和clearInterval()是js中内置的函数，用法如上。<br>5、正常我们调用函数会写：name(function(){})，而ES6也提供了一个方式：methodName(() =&gt; {})，这种用法的好处就解决了this指向问题，因为如果元素定义在了函数内部，那么其中的this就表示当前函数的对象，如果我们需要使用外部的对象，除了在外部全局定义一个对象，一个简单的方式就是使用ES6提供的=&gt;。</p>\n<p>效果如图：<br><img src=\"/images/vue5.png\" alt=\"vue5\"></p>\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><blockquote>\n<p>.stop 阻止冒泡<br>.prevent 阻止默认事件<br>.capture 添加时间侦听器时使用时间捕获模式<br>.self 只当事件在该元素本身（比如不是子元素）触发时触发回调<br>.once 事件只触发一次</p>\n</blockquote>\n<p>用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;div @click=<span class=\"string\">\"divClick\"</span>&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"戳我\"</span> @click.stop=<span class=\"string\">\"btnClick\"</span>&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"戳我\"</span> @click.prevent=<span class=\"string\">\"btnClick\"</span>&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'嘻嘻，哈哈'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">divClick</span></span>() &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">\"这是div的点击事件\"</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">btnClick</span></span>() &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">\"这是btn的点击事件\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h4><ul>\n<li>唯一的双向绑定指令：v-model</li>\n<li>单向绑定指令：v-bing</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"msg\"</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            msg: <span class=\"string\">'hello!'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Vue中的样式\"><a href=\"#Vue中的样式\" class=\"headerlink\" title=\"Vue中的样式\"></a>Vue中的样式</h3><h4 id=\"外联样式\"><a href=\"#外联样式\" class=\"headerlink\" title=\"外联样式\"></a>外联样式</h4><ul>\n<li><p>数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :class=<span class=\"string\">\"['italic','color']\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n<p>其中的italic、color是自定义的类名，需在外部定义CSS样式</p>\n</li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :class=<span class=\"string\">\"['italic',&#123;'color': flag&#125;]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n<p>其中的flag是Vue绑定的变量，在data进行声明</p>\n</li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :class=<span class=\"string\">\"&#123;italic:true, color:flag&#125;\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .italic &#123;</span><br><span class=\"line\">        font-style: italic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .color &#123;</span><br><span class=\"line\">        color: skyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;h2 :class=<span class=\"string\">\"['italic','color']\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2 :class=<span class=\"string\">\"['italic', &#123;'color':flag&#125;]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2 :class=<span class=\"string\">\"&#123;italic:false, color:flag&#125;\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            flag: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h4><ul>\n<li><p>将样式对象定义到data中，并在:style中引用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :style=<span class=\"string\">\"styleObj\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    styleObj: &#123; <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>, <span class=\"string\">'font-weight'</span>: <span class=\"string\">'200px'</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在:style中通过数组，引用多个data上的样式对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 :style=<span class=\"string\">\"[styleObj, styleObj2]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    styleObj: &#123; <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>, <span class=\"string\">'font-weight'</span>: <span class=\"string\">'200px'</span>&#125;,</span><br><span class=\"line\">    styleObj2: &#123; <span class=\"string\">'font-style'</span>: <span class=\"string\">'italic'</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;h2 :style=<span class=\"string\">\"styleObj\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2 :style=<span class=\"string\">\"[styleObj, styleObj2]\"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            styleObj: &#123; <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>, <span class=\"string\">'font-weight'</span>: <span class=\"string\">'200px'</span> &#125;,</span><br><span class=\"line\">            styleObj2: &#123; <span class=\"string\">'font-style'</span>: <span class=\"string\">'italic'</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h4><p>Vue提供了遍历集合、数组的指令：v-for；用法: v-for=”别名 in 集合名”</p>\n<h4 id=\"迭代数组\"><a href=\"#迭代数组\" class=\"headerlink\" title=\"迭代数组\"></a>迭代数组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"item, i in list\"</span>&gt;索引：&#123;&#123;i&#125;&#125; --- 值：&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    list: [1,2,3,4]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其中的i是迭代得到的别名，可写可不写，但是必须是在迭代元素别名的后面定义</strong></p>\n<h4 id=\"迭代对象数组\"><a href=\"#迭代对象数组\" class=\"headerlink\" title=\"迭代对象数组\"></a>迭代对象数组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"item in list2\"</span>&gt;id: &#123;&#123;item.id&#125;&#125; --- name: &#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    list2: [</span><br><span class=\"line\">            &#123; id:1, name: <span class=\"string\">'嘻嘻'</span> &#125;,</span><br><span class=\"line\">            &#123; id:2, name: <span class=\"string\">'哈哈'</span> &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代对象数组，通过 的方式，这个属性名就是对象数组中定义的元素属性名</strong></p>\n<h4 id=\"迭代对象\"><a href=\"#迭代对象\" class=\"headerlink\" title=\"迭代对象\"></a>迭代对象</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"(val, key) in user\"</span>&gt;键: &#123;&#123;key&#125;&#125; --- 值: &#123;&#123;val&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">            id: 1,</span><br><span class=\"line\">            name: <span class=\"string\">'LoonyCoder'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代对象，迭代得到的是对象的value值和key值，注意得到的第一个是value值，第二个是key值，与我们定义的对象属性顺序是刚好相反的。</strong></p>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;p v-for=<span class=\"string\">\"item, i in list\"</span>&gt;索引：&#123;&#123;i&#125;&#125; --- 值：&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p v-for=<span class=\"string\">\"item in list2\"</span>&gt;id: &#123;&#123;item.id&#125;&#125; --- name: &#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p v-for=<span class=\"string\">\"(val, key) in user\"</span>&gt;键: &#123;&#123;key&#125;&#125; --- 值: &#123;&#123;val&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            list: [1,2,3,4], </span><br><span class=\"line\">            list2: [</span><br><span class=\"line\">                &#123; id:1, name: <span class=\"string\">'嘻嘻'</span> &#125;,</span><br><span class=\"line\">                &#123; id:2, name: <span class=\"string\">'哈哈'</span> &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            user: &#123;</span><br><span class=\"line\">                id: 1,</span><br><span class=\"line\">                name: <span class=\"string\">'LoonyCoder'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>在vue2.0+版本里，当使用v-for渲染数据，必须制定对应的key值（这里的key是一个属性，不是前面迭代的key值）。</p>\n<p><strong>用法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-for=<span class=\"string\">\"item in user\"</span> :key=<span class=\"string\">\"item.id\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>其中:key就说明了key属性必须是通过v-bind绑定的元素，而:key=””中指定的值必须是string/number类型的值，比如此处使用的是item.id中ID是number值，并且是唯一的。<br><strong>目的：</strong><br>避免迭代元素时，为循环元素绑定的是列表中的第几个元素（指定位置），而不是指定的某个元素（指定身份）。</p>\n<h4 id=\"v-show和v-if\"><a href=\"#v-show和v-if\" class=\"headerlink\" title=\"v-show和v-if\"></a>v-show和v-if</h4><p>Vue提供了两个指令来实现元素显示状态的切换：v-if v-show<br><strong>区别</strong></p>\n<ul>\n<li>v-if的特点：每次都会重新删除和创建元素，具有较高的切换性能消耗（因为每次执行都要进行删除和创建元素）。</li>\n<li>v-show的特点：每次不会重建进行DOM的删除和创建操作，只是切换了元素的display:none样式，具有较高的初识渲染消耗（即每次都只是将元素隐藏了，并没有真正的删除掉）。</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"flag=!flag\"</span> value=<span class=\"string\">\"toggle\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;h3 v-if=<span class=\"string\">\"flag\"</span>&gt;这是v-if控制的元素&lt;/h3&gt;</span><br><span class=\"line\">    &lt;h3 v-show=<span class=\"string\">\"flag\"</span>&gt;这是v-show控制的元素&lt;/h3&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- js部分 --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class=\"line\">        data: &#123; // data中存放的是el中需要的数据</span><br><span class=\"line\">            flag: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><img src=\"/images/vue6.png\" alt=\"vue6\"></p>\n"},{"title":"Vue过滤器和Vue-resource","date":"2019-12-09T16:00:00.000Z","_content":"\n### 过滤器\n\n\n之前我们学习了Vue的 **vue基本指令** 进阶学习，我们需要了解Vue的过滤器：Vue.js允许你自定义过滤器，可被用作一些常见元素的格式化。过滤器可以用在两个地方：mustache插值和v-bind表达式。\n用法：\n```bash\n{{ 过滤器名称 | function }}\n```\n**定义：**\nVue提供了两种方式创建过滤器：\n- 1、全局过滤器\n```bash\nVue.filter('过滤器名称', function(){})\n```\n- 2、私有过滤器\n```bash\nnew Vue()({\n    el: '',\n    data: {},\n    methods: {},\n    filters: {\n        过滤器名称: function(){}\n    }\n})\n```\n\n#### 全局过滤器\n```bash\n<h3>{{ msg | myFilters('时光') }}</h3>\n\nVue.filter('myFilters', function(data, pattern){\n    if(pattern == '时光'){\n        var old = data.substring(0,4);\n        return old + ',时光路口。';\n    }\n});\n```\n\n**解释：**\n如上：Vue提供的全局过滤器，直接使用Vue调用，而不是定义在Vue实例中\n- Vue.filter()中第一个参数是过滤器名称，第二个参数是function(){}\n- function(){}中还有两个参数，第一个参数是原始的值，第二个参数是你想给过滤器方法传递的值。\n\n#### 私有过滤器\n```bash\n<h3>{{ msg | myFilters('望月') }}</h3>\n\nvar vm2 = new Vue({\n    el: '#app2',\n    data: {\n        msg: 'loonycoder！'\n    },\n    methods: {},\n    filters: {\n\n        myFilters: function(data, pattern) {\n            if(pattern == '望月'){\n                var old = data.substring(0,4);\n                return old + ',loonycoder';\n            }\n        }\n})\n```\n私有过滤器和全局过滤器用法基本相同，仅仅是作用于不同而已。\n\n### 自定义指令\n\n#### 按键修饰符\n在我们搜索商品时，在一些网站中我们直接回车后立即进行搜索，而不是点击搜索按钮才会搜索，那么这个功能怎么实现呢？\n那么我们就需要了解Vue中提供的**按键修饰符**\n用法： @keyup.按键别名 = \"要调用的方法名\"\n\n**按键别名**\n> .enter\n> .tab\n> .esc\n> .delete\n> …\n\n**示例**\n```bash\n<input type=\"text\" @keyup.enter=\"open\">\n\nmethods: {\n    open(){\n        alert(\"弹出\");\n    }\n}\n```\n\n**自定义按键修饰符**\n如果Vue提供的按键修饰符不能满足你的需求，你也可以使用Vue提供的自定义按键修饰符来实现，因为每个键盘的按键都对应了一个键盘码值，比如F2对应的键盘码值是：113：\n用法：\n```bash\n<input type=\"text\" @keyup.f2=\"open\">\n\nVue.config.keyCodes.f2 = 113;   \n\nmethods: {\n    open(){\n        alert(\"弹出\");\n    }\n}\n```\n\n#### 获取文本焦点\n获取文本焦点使用了focus属性，那么我们需要定义一个v-focus指令\n```bash\nVue.directive('focus', {\n    bind: function(el) {},\n    inserted: function(el) {},\n    updated: function(el) {}\n});\n```\n\n如上，使用Vue.directive()实现定义全局指令，需要注意以下几点：\n- 1、在directive()方法中包含两个参数：\n > 参数1：指令的名称，注意，在定义的时候指令名称不需要加v-前缀，但是在使用的时候需要加v-前缀。\n > 参数2：是一个对象，这个对象包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作。\n\n**示例：**\n```bash\nVue.directive('focus', {\n\n});\n\n// 使用的时候使用： v-focus\n```\n\n- 2、在directive()函数的第二个参数中（对象）中又包含了三个实例方法：\n> bind: 当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次；但是需要知道元素绑定了这个指令，若涉及对DOM操作的，并不会立即执行，因为元素不会立即插入到DOM中。所以涉及对元素进行DOM相关操作的，不要定义到这个方法中。\n> inserted: 当元素插入到DOM的时候，会立即执行，并只触发一次。\n> updated: 当VNode更新的时候，会指定updated，可能触发多次。\n\n**示例：**\n```bash\nue.directive('focus', {\n    bind: function(el) {\n        el.focus()\n    }\n});\n\n// 调用\n<input type=\"text\" v-focus />\n```\n\n如上，其中bind函数的第一个参数永远是el，它表示绑定的那个元素，是一个原生的JS对象；这里我们调用了JS的focus方法\n\n##### 钩子函数\n指令定义函数提供了几个钩子函数（可选）：\n>bind\n>inserted\n>update\n>componentUpdated: 所在组件的VNode及其孩子的VNode全部更新的时候调用\n>unbind: 只调用一次，指令与元素解除绑定时调用\n\n**钩子函数参数**\n在上面使用directive()函数的时候我们已经介绍了一些常用的钩子函数，那么既然是函数，就可能需要进行传参，那么为了实现钩子函数传参，Vue提供了几个参数属性来实现对钩子函数参数的一些操作：\n- el: 指令所绑定的元素，可以用来直接操作DOM。\n- binding: 一个对象，包含以下属性：\n    - name: 指令名，不包含v-前缀\n    - value: 指令的绑定值，如v-focus=\"1 + 1\"，那么value=2。\n    - expression: 绑定值的字符串形式，如v-focus=\"1+1\"，那么experssion的值是1+1。\n    - …\n- …\n\n**示例：**\n实现在文本框中输入的数据颜色要为蓝色\n```bash\n<input type=\"text\" v-color=\"'blue'\">\n\n// 自定义设置颜色的指令\nVue.directive('color', {\n    bind: function(el, binding){\n        el.style.color = binding.value\n    }\n});\n```\n\n其中因为设计要获取值的操作，所以使用binding这个对象钩子函数参数来使用接收，那么：\n1、这个el就表示当前这个input文本框对象\n2、这个binding就表示v-color=\"'blue'\"指令传递的参数blue（因为使用''单引号即不是字符串）\n3、binding-value就是获取到v-color指令绑定的参数值是：blue，通过el.style.color表示设置这个文本框样式中的颜色属性\n\n##### 定义私有指令\n使用**私有指令**和**全局指令**的用法基本相同，我们参考上面讲过的**私有过滤器**和**全局过滤器**就能猜想到**私有指令**的用法：\n**示例：**\n```bash\n<p v-fontsize=\"'50px'\">私有指令</p>\n\nvar vm = new Vue({\n    el: '',\n    data: {},\n    methods: {},\n    filters: {},\n    directives: {\n        'fontsize': {\n            bind: function(el, binding){\n                el.style.fontSize = binding.value\n            }\n        }\n    }\n});\n```\n\n**自定义指令的简写形式**\n对于仅仅使用bind和update钩子函数的操作，可以进行下列的简写形式：\n```bash\n<p v-fontsize=\"'50px'\">私有指令</p>\n\nvar vm = new Vue({\n    el: '',\n    data: {},\n    methods: {},\n    filters: {},\n    directives: {\n        'fontsize': function(el, binding){\n            el.style.fontSize = binding.value\n        }\n    }\n});\n```\n\n#### 综合案例\n实现将列表数据渲染到表格中，并实现添加功能案例（包含上面讲到的所有技术的**实例**）：\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <style type=\"text/css\">\n    table {\n        min-height: 25px;\n        line-height: 25px;\n        text-align: center;\n        border-collapse: collapse;\n    }\n\n    table,\n    table tr th,\n    table tr td {\n        border: 1px solid #0094ff;\n        padding: 11px;\n    }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        id:\n        <input type=\"text\" v-model=\"id\" v-focus v-color=\"'blue'\"> username:\n        <input type=\"text\" v-model=\"username\" @keyup.enter=\"add\">\n        <input type=\"button\" value=\"添加\" @click=\"add\">\n        <br/>\n        <br/>\n        <table>\n            <thead>\n                <tr>\n                    <th>id</th>\n                    <th>name</th>\n                    <th>date</th>\n                    <th>fun</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"user in list\" :key=\"user.id\">\n                    <td>{{user.id}}</td>\n                    <td>{{user.username}}</td>\n                    <td>{{user.time | dataFormat('') }}</td>\n                    <td><a href=\"#\" @click=\"del(user.id)\">删除</a></td>\n                </tr>\n            </tbody>\n        </table>\n        <p>未使用过滤器：{{ new Date() }}</p>\n        <p>使用全局过滤器：{{ new Date() | dataFormat('') }}</p>\n    </div>\n    <div id=\"app2\">\n        使用私有过滤器：{{ dt | dataFormat('')}}\n        <p v-fontsize=\"'50px'\">私有指令</p>\n    </div>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n    // 自定义文本框获取焦点指令\n    // Vue.directive()定义全局指令，包含两个参数：\n    // 参数1：指令的名称，注意，在定义的时候指令的名称不需要加v-前缀，但是在使用的时候需要加v-focus\n    // 参数2：是一个对象，这个对象中包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作\n    Vue.directive('focus', {\n        // 注意，在下面的函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生JS对象\n        bind: function(el) { //每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次\n            // 注意：在元素绑定了指令时，还没有插入到DOM中去，这时候调用focus方法是没有作用的，因为一个元素，只有插入到DOM之后，才能获取焦点\n            // el.focus()\n        },\n        inserted: function(el) { // inserted表示元素插入到DOM中的时候，会执行,触发一次\n            el.focus()\n        },\n        updated: function(el) { // 当VNode更新的是否，会执行updated，可触发多次\n        }\n    });\n\n    // 自定义设置颜色的指令\n    Vue.directive('color', {\n        bind: function(el, binding) {\n            el.style.color = binding.value\n        }\n    });\n\n    // 自定义按键\n    Vue.config.keyCodes.f2 = 113;\n\n    // 演示私有过滤器\n    var vm2 = new Vue({\n        el: '#app2',\n        data: {\n            dt: new Date(),\n        },\n        methods: {\n            open() {\n                alert(\"弹出\");\n            }\n        },\n        filters: {\n            dataFormat: function(data, pattern) {\n                // 获取当前日期\n                var dt = new Date(data);\n\n                // 获取年月日\n                var y = dt.getFullYear();\n                var m = dt.getMonth() + 1;\n                var d = dt.getDate();\n\n                if (pattern.toLowerCase() == 'yyyy-mm-dd') {\n                    return `${y}-${m}-${d}`;\n                } else {\n                    var hh = dt.getHours();\n                    var mm = dt.getMinutes();\n                    var ss = dt.getSeconds();\n\n                    // es6中提供的 yyyy-mm-dd hh:mm:ss 的简写形式\n                    return `${y}-${m}-${d} ${hh}:${mm}:${ss}` + '-->私有';\n                }\n            }\n        },\n        // 自定义私有指令（简写形式）\n        directives: {\n            'fontsize': function(el, binding) {\n                el.style.fontSize = binding.value\n            }\n        }\n    });\n\n    // 全局过滤器\n    Vue.filter('dataFormat', function(data, pattern) {\n        // 获取当前日期\n        var dt = new Date(data);\n\n        // 获取年月日\n        var y = dt.getFullYear();\n        var m = dt.getMonth() + 1;\n        var d = dt.getDate();\n\n        if (pattern.toLowerCase() == 'yyyy-mm-dd') {\n            return `${y}-${m}-${d}`;\n        } else {\n            var hh = dt.getHours();\n            var mm = dt.getMinutes();\n            var ss = dt.getSeconds();\n\n            return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n        }\n    });\n\n    // 创建Vue实例\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            id: '',\n            username: '',\n            list: [\n                { id: 1, username: '望月', time: new Date() },\n                { id: 2, username: 'loonycoder', time: new Date() }\n            ]\n        },\n        methods: {\n            add() {\n                var user = { id: this.id, username: this.username, time: new Date() };\n                this.list.push(user);\n            },\n            del(id) {\n                // some()是操作数组的方法，作用是循环数组，并当return true是就终止循环\n                // 其中的user理解为循环list元素的别名，i表示索引\n                this.list.some((user, i) => {\n                    if (user.id == id) {\n                        this.list.splice(i, 1);\n                        return true;\n                    }\n                })\n            }\n        }\n    });\n    </script>\n</body>\n</html>\n```\n\n#### Vue实例的生命周期\n- 什么是声明周期：从Vue实例创建、运行、到销毁期间，伴随着发生的事件的过程成为生命周期。\n- 生命周期钩子：就是声明周期事件的别名。\n- 主要的声明周期函数分类\n\n> 创建期间的声明周期函数：\n> * beforeCreate: 实例刚在内存中被创建，此时，还没有初始化好data和methods属性。\n> * created: 实例已经在内存中创建好，此时data和methods已经创建好，但还没有编译模板。\n> * beforeMount: 此时已经完成了模板的编译，但是还没有挂载到页面上。\n> * mounted: 此时，已经将编译好的模板，挂载到了页面指定的容器中。\n> 运行期间的声明周期函数:\n> * beforeUpdate: 状态更新之前执行此函数，此时的data数据是最新的，但是此时还没有开始渲染DOM节点\n> * updated: 实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据都是最新的，界面已经被重新渲染好了。\n销毁期间的生命周期函数\n> * beforeDestory: 实例销毁之前调用，在这一步，实例仍然可以使用。\n> * destroyed: Vue实例销毁后调用，调用后，Vue实例指示的所有东西都会解除绑定，所有的事件监听器都会被移除，所所有的子实例也会被销毁。\n\n##### beforeCreate\n此函数执行的时候，data和methods中的数据还没有初始化。\n![beforeCreate](/images/vue7.png)\n![beforeCreate](/images/vue8.png)\n\n##### created\n此函数中，data和methods都已经初始化好了，如果需要调用methods中的方法或操作data中的值最早就在created函数中操作。\n![created](/images/vue9.png)\n![created](/images/vue10.png)\n\n##### beforeMount\n此函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去。\n![beforeMount](/images/vue11.png)\n![beforeMount](/images/vue12.png)\n\n##### mounted\n只要执行完了mounted，表示整个Vue实例已经初始化完毕了，此时组件已经进入了运行阶段。\n![mounted](/images/vue13.png)\n\n##### 图示\n![图示](/images/vue14.png)\n\n---\n\n### vue-resource实现请求提交\n作为一个后端开发者，我们需要的数据都应该是从数据库中取出来的，目前JSP页面越来越不常用，而更常用HTML页面，那么就体现出来类似Vue这种框架的好处了。\n下面我们就了解一下怎样使用Vue实现发送AJAX的请求：\n\n##### 配置\n首先使用Vue实现发送AJAX请求，我们需要导入一个包：\n```bash\nvue-resource.js\n```\n**Methods**\n```bash\nthis.$http.get('url', [options]).then(successCallback, errorCallback);\n\nthis.$http.post('url', [body], [options]).then(successCallback, errorCallback);\n```\n\n解释：\n- this表示的是当前Vue实例对象，而vue-resource.js提供了$http属性用来调用其内置的请求方法，并且vue-resource.js是基于vue.js的。\noptions是指可选的请求参数，就是你发送请求想要传递的参数。\n- then可以实现发送完请求后，通过其获取请求成功响应的数据\n- then中包含两个参数successCallback和errorCallback，这两个都是对象，我们可以通过其进行对相应数据的操作。\n\n##### 实例\n```bash\n<button @click=\"getInfo\">点击我</button>\n\nvar vm = new Vue({\n    el: '#app',\n    data: {},\n    methods: {\n        getInfo(){\n            this.$http.get('url').then(result => {\n                console.log(result.body);\n            })\n        }\n    }\n});\n```\n\n**解释：**\n当我们请求成功后，可以通过then来获取请求成功响应的数据，而可以通过.data或.body来获取响应data，而我们通常使用result.body来获取具体响应的参数。注意其中的result => {}是ES6中的写法。\n\n##### post请求\n**注意：** post请求常用于类似提交表单的功能，而对于提交表单，存在一个表单提交格式，默认是：application/x-wwww-form-urlencoded ；而通过Vue发起的post请求，默认没有表单格式，所以，有的服务器就处理不了。\n那么我们可以通过post方法的第三个参数：{ emulateJSON: true }来设置提交内容类型为普通表单数据格式。\n\n**示例：**\n```bash\nthis.$http.post('url', {}, { emulateJSON: true }).then(result => {\n    console.log(result.body)\n})\n```\n\n其他请求方法与上面的雷同，具体方法请参考官方文档。\n\n#### 请求接口根域名配置\n\n由于我们个人的项目可能是部署到本地的Tomcat服务器上的，可能不会涉及请求接口的域名配置，那么我们先看一个案例：\n发送post请求到服务器接口\n\n```bash\n...\n\nmethods: {\n    add(){\n        this.$http.post('http://tycoding.cn/api/add', {}, {emulateJSON: true}).then(result => {\n            \n        });\n    }\n}\n```\n\n如上，当我们发送请求的时候，URL路径需要写上域名地址<http://www.loonycoder.com>，然后才是请求路径/api/add，那么我们每次发送ajax请求都会需要写这个域名地址，就会显得比较麻烦，所以Vue-resource给我们提供了一种设置默认请求**根域名**的配置：\n```bash\nVue.http.options.root = 'http://www.loonycoder.com';\n```\n\n如上，就是一个全局的请求根域名配置。\n\n**注意**\n仅了解了上面的配置可能请求还会404，那么我们需要知道：\n> 如果我们通过了全局配置请求接口的根域名，那么每次发送HTTP请求时，请求的URL路径应该以相对域名开头，即前面不能带/： * 如果this.$http.post('/xxx')请求URL带了/，那么Vue就不会启用上面的全局请求根域名配置，就会404.\n* 如果前面不带/即：this.$http.post('xxx')，那么就会启用上面的全局请求根域名配置进行URL的拼接。\n\n##### 全局配置表单提交格式选项\n上面讲到了如果使用post请求提交表单，那么你应该指定{emulateJSON: true}参数，那么每次进行post请求都指定又会显得很麻烦，那么vue-resource也给我们提供了一个全局配置的方式：\n```bash\nVue.http.options.emulateJSON = true;\n```\n这样我们就不需要再post请求中再配置第三个参数了：\n```bash\nmethods: {\n    add(){\n        this.$http.post('http://tycoding.cn/api/add', {}).then(result => {\n            \n        });\n    }\n}\n```\n\n##### 实例\n请求后台并即时渲染表格数据的案例：\n```bash\n<!-- html段 -->\n<input type=\"text\" v-model=\"username\">\n<input type=\"button\" value=\"添加\" @click=\"add\">\n\n<table>\n    <tr>\n        <th>编号</th>\n        <th>用户名</th>\n        <th>操作</th>\n    </tr>\n    <tbody>\n        <tr v-for=\"user in list\" :key=\"user.id\">\n            <td>{{user.id}}</td>\n            <td>{{user.username}}</td>\n            <td>\n                <a href=\"#\" @click.pervent=\"del(user.id)\">删除</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<!-- javascript段 -->\n<script type=\"text/javascript\">\n// 设置全局根域名\nVue.http.options.root = 'http://tycoding.cn/';\n\n//设置全局表单提交格式\nVue.http.options.emulateJSON = true;\n\n// 实例化Vue\nnew Vue({\n    el: '',\n    data: {\n        username: '',\n        list: []\n    },\n    created: {\n        // 因为进入列表页面就需要在列表中显示出数据，那么就需要实现加载页面时自动加载findAll方法\n        // 而之前我们已经知道了，Vue的声明周期中，最早可以操作methods和data中的数据的阶段是：created生命周期函数阶段。\n        // 那么在这里调用findAll方法即可\n        this.findAll();\n    },\n    methods: {\n        // 查询所有列表数据\n        findAll(){\n            this.$http.get('api/findAll').then(result => {\n                this.list = result.body;\n            }),\n        },\n\n        // 添加功能\n        add(){\n            this.$http.post('api/add', {username: this.username}).then(result => {\n                if(result.body.status == 0){\n                    // 如果状态码为0就表示请求成功，这个状态码的值根据实际定\n                    // 请求成功，即添加了一条新的数据，那么需要重新刷新列表（不然新数据不能及时的更新到页面上）\n                    this.findAll()\n                }else{\n                    alert('添加失败');\n                }\n            })\n        },\n\n        //删除功能\n        del(id){\n            this.$http.get('api/del' + id).then(result => {\n                if(result.body.status == 0){\n                    //请求成功\n                    //刷新列表\n                    this.findAll();\n                }else{\n                    alert('删除失败');\n                }\n            })\n        }\n    }\n});\n</script>\n```\n\n如上我们已经完成了常见的几个功能，后面我们将会介绍基于SpringMVC框架，实现与Vue整合并重写增删改查功能。\n\n**注意：**\n- 1、首先我们需要配置根域名，且具体的AJAX请求URL不能添加'/'；如果是基于本地的Tomcat服务器的项目，可能不需要配置根域名，具体视情况而定\n- 2、实现查询所有列表数据功能，思路是：1、发送AJAX请求数据；2、将响应的数据赋值给data中的list集合this.list = result.body。注意响应数据是存放到body中的，具体请F12查看浏览器请求头信息和响应头信息。\n- 3、上面获取了数据库中的列表数据，我们需要渲染到页面上，那么点击进入列表页面，列表页面中应该立即显示数据库中的所有数据，即findAll方法应该在初始化页面的同时自动去调用，并将数据赋值给list列表。而我们之前讲过操作methods和data中参数的最早时机是created声明周期函数阶段，那么我们直接在created函数中调用findAll方法即可实现自动加载。\n- 4、添加功能的思路：\n    + 1、在data中先声明需要添加的参数；\n    + 2、在表单中用v-model绑定需要添加的参数；\n    + 3、点击添加功能按钮，绑定@click事件，在methods中写对应的方法；\n    + 4、发送AJAX请求，并在URL中拼接需要添加的数据（通过this.username）获取绑定的参数；\n    + 5、如果是post请求，还需要设置表单提交格式{emulateJSON: true}，而我们使用了全局配置就不需要再在post参数中指定了；\n    + 6、如果添加成功，就调用findAll方法重新刷新列表\n- 5、删除功能需要在绑定@click事件的时候将id传入。并且我们需要使用@click&middot;pervent来阻止&lt;a&gt;标签的默认跳转。\n- 6、上面仅是提供演示，具体操作由实际情况而定。\n\n\n","source":"_posts/Vue2.md","raw":"---\ntitle: Vue过滤器和Vue-resource\ncategories:\n    - Web前端\ndate: 2019-12-10\ntags:\n\t- 前端框架\n\t\n---\n\n### 过滤器\n\n\n之前我们学习了Vue的 **vue基本指令** 进阶学习，我们需要了解Vue的过滤器：Vue.js允许你自定义过滤器，可被用作一些常见元素的格式化。过滤器可以用在两个地方：mustache插值和v-bind表达式。\n用法：\n```bash\n{{ 过滤器名称 | function }}\n```\n**定义：**\nVue提供了两种方式创建过滤器：\n- 1、全局过滤器\n```bash\nVue.filter('过滤器名称', function(){})\n```\n- 2、私有过滤器\n```bash\nnew Vue()({\n    el: '',\n    data: {},\n    methods: {},\n    filters: {\n        过滤器名称: function(){}\n    }\n})\n```\n\n#### 全局过滤器\n```bash\n<h3>{{ msg | myFilters('时光') }}</h3>\n\nVue.filter('myFilters', function(data, pattern){\n    if(pattern == '时光'){\n        var old = data.substring(0,4);\n        return old + ',时光路口。';\n    }\n});\n```\n\n**解释：**\n如上：Vue提供的全局过滤器，直接使用Vue调用，而不是定义在Vue实例中\n- Vue.filter()中第一个参数是过滤器名称，第二个参数是function(){}\n- function(){}中还有两个参数，第一个参数是原始的值，第二个参数是你想给过滤器方法传递的值。\n\n#### 私有过滤器\n```bash\n<h3>{{ msg | myFilters('望月') }}</h3>\n\nvar vm2 = new Vue({\n    el: '#app2',\n    data: {\n        msg: 'loonycoder！'\n    },\n    methods: {},\n    filters: {\n\n        myFilters: function(data, pattern) {\n            if(pattern == '望月'){\n                var old = data.substring(0,4);\n                return old + ',loonycoder';\n            }\n        }\n})\n```\n私有过滤器和全局过滤器用法基本相同，仅仅是作用于不同而已。\n\n### 自定义指令\n\n#### 按键修饰符\n在我们搜索商品时，在一些网站中我们直接回车后立即进行搜索，而不是点击搜索按钮才会搜索，那么这个功能怎么实现呢？\n那么我们就需要了解Vue中提供的**按键修饰符**\n用法： @keyup.按键别名 = \"要调用的方法名\"\n\n**按键别名**\n> .enter\n> .tab\n> .esc\n> .delete\n> …\n\n**示例**\n```bash\n<input type=\"text\" @keyup.enter=\"open\">\n\nmethods: {\n    open(){\n        alert(\"弹出\");\n    }\n}\n```\n\n**自定义按键修饰符**\n如果Vue提供的按键修饰符不能满足你的需求，你也可以使用Vue提供的自定义按键修饰符来实现，因为每个键盘的按键都对应了一个键盘码值，比如F2对应的键盘码值是：113：\n用法：\n```bash\n<input type=\"text\" @keyup.f2=\"open\">\n\nVue.config.keyCodes.f2 = 113;   \n\nmethods: {\n    open(){\n        alert(\"弹出\");\n    }\n}\n```\n\n#### 获取文本焦点\n获取文本焦点使用了focus属性，那么我们需要定义一个v-focus指令\n```bash\nVue.directive('focus', {\n    bind: function(el) {},\n    inserted: function(el) {},\n    updated: function(el) {}\n});\n```\n\n如上，使用Vue.directive()实现定义全局指令，需要注意以下几点：\n- 1、在directive()方法中包含两个参数：\n > 参数1：指令的名称，注意，在定义的时候指令名称不需要加v-前缀，但是在使用的时候需要加v-前缀。\n > 参数2：是一个对象，这个对象包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作。\n\n**示例：**\n```bash\nVue.directive('focus', {\n\n});\n\n// 使用的时候使用： v-focus\n```\n\n- 2、在directive()函数的第二个参数中（对象）中又包含了三个实例方法：\n> bind: 当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次；但是需要知道元素绑定了这个指令，若涉及对DOM操作的，并不会立即执行，因为元素不会立即插入到DOM中。所以涉及对元素进行DOM相关操作的，不要定义到这个方法中。\n> inserted: 当元素插入到DOM的时候，会立即执行，并只触发一次。\n> updated: 当VNode更新的时候，会指定updated，可能触发多次。\n\n**示例：**\n```bash\nue.directive('focus', {\n    bind: function(el) {\n        el.focus()\n    }\n});\n\n// 调用\n<input type=\"text\" v-focus />\n```\n\n如上，其中bind函数的第一个参数永远是el，它表示绑定的那个元素，是一个原生的JS对象；这里我们调用了JS的focus方法\n\n##### 钩子函数\n指令定义函数提供了几个钩子函数（可选）：\n>bind\n>inserted\n>update\n>componentUpdated: 所在组件的VNode及其孩子的VNode全部更新的时候调用\n>unbind: 只调用一次，指令与元素解除绑定时调用\n\n**钩子函数参数**\n在上面使用directive()函数的时候我们已经介绍了一些常用的钩子函数，那么既然是函数，就可能需要进行传参，那么为了实现钩子函数传参，Vue提供了几个参数属性来实现对钩子函数参数的一些操作：\n- el: 指令所绑定的元素，可以用来直接操作DOM。\n- binding: 一个对象，包含以下属性：\n    - name: 指令名，不包含v-前缀\n    - value: 指令的绑定值，如v-focus=\"1 + 1\"，那么value=2。\n    - expression: 绑定值的字符串形式，如v-focus=\"1+1\"，那么experssion的值是1+1。\n    - …\n- …\n\n**示例：**\n实现在文本框中输入的数据颜色要为蓝色\n```bash\n<input type=\"text\" v-color=\"'blue'\">\n\n// 自定义设置颜色的指令\nVue.directive('color', {\n    bind: function(el, binding){\n        el.style.color = binding.value\n    }\n});\n```\n\n其中因为设计要获取值的操作，所以使用binding这个对象钩子函数参数来使用接收，那么：\n1、这个el就表示当前这个input文本框对象\n2、这个binding就表示v-color=\"'blue'\"指令传递的参数blue（因为使用''单引号即不是字符串）\n3、binding-value就是获取到v-color指令绑定的参数值是：blue，通过el.style.color表示设置这个文本框样式中的颜色属性\n\n##### 定义私有指令\n使用**私有指令**和**全局指令**的用法基本相同，我们参考上面讲过的**私有过滤器**和**全局过滤器**就能猜想到**私有指令**的用法：\n**示例：**\n```bash\n<p v-fontsize=\"'50px'\">私有指令</p>\n\nvar vm = new Vue({\n    el: '',\n    data: {},\n    methods: {},\n    filters: {},\n    directives: {\n        'fontsize': {\n            bind: function(el, binding){\n                el.style.fontSize = binding.value\n            }\n        }\n    }\n});\n```\n\n**自定义指令的简写形式**\n对于仅仅使用bind和update钩子函数的操作，可以进行下列的简写形式：\n```bash\n<p v-fontsize=\"'50px'\">私有指令</p>\n\nvar vm = new Vue({\n    el: '',\n    data: {},\n    methods: {},\n    filters: {},\n    directives: {\n        'fontsize': function(el, binding){\n            el.style.fontSize = binding.value\n        }\n    }\n});\n```\n\n#### 综合案例\n实现将列表数据渲染到表格中，并实现添加功能案例（包含上面讲到的所有技术的**实例**）：\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <style type=\"text/css\">\n    table {\n        min-height: 25px;\n        line-height: 25px;\n        text-align: center;\n        border-collapse: collapse;\n    }\n\n    table,\n    table tr th,\n    table tr td {\n        border: 1px solid #0094ff;\n        padding: 11px;\n    }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        id:\n        <input type=\"text\" v-model=\"id\" v-focus v-color=\"'blue'\"> username:\n        <input type=\"text\" v-model=\"username\" @keyup.enter=\"add\">\n        <input type=\"button\" value=\"添加\" @click=\"add\">\n        <br/>\n        <br/>\n        <table>\n            <thead>\n                <tr>\n                    <th>id</th>\n                    <th>name</th>\n                    <th>date</th>\n                    <th>fun</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"user in list\" :key=\"user.id\">\n                    <td>{{user.id}}</td>\n                    <td>{{user.username}}</td>\n                    <td>{{user.time | dataFormat('') }}</td>\n                    <td><a href=\"#\" @click=\"del(user.id)\">删除</a></td>\n                </tr>\n            </tbody>\n        </table>\n        <p>未使用过滤器：{{ new Date() }}</p>\n        <p>使用全局过滤器：{{ new Date() | dataFormat('') }}</p>\n    </div>\n    <div id=\"app2\">\n        使用私有过滤器：{{ dt | dataFormat('')}}\n        <p v-fontsize=\"'50px'\">私有指令</p>\n    </div>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n    // 自定义文本框获取焦点指令\n    // Vue.directive()定义全局指令，包含两个参数：\n    // 参数1：指令的名称，注意，在定义的时候指令的名称不需要加v-前缀，但是在使用的时候需要加v-focus\n    // 参数2：是一个对象，这个对象中包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作\n    Vue.directive('focus', {\n        // 注意，在下面的函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生JS对象\n        bind: function(el) { //每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次\n            // 注意：在元素绑定了指令时，还没有插入到DOM中去，这时候调用focus方法是没有作用的，因为一个元素，只有插入到DOM之后，才能获取焦点\n            // el.focus()\n        },\n        inserted: function(el) { // inserted表示元素插入到DOM中的时候，会执行,触发一次\n            el.focus()\n        },\n        updated: function(el) { // 当VNode更新的是否，会执行updated，可触发多次\n        }\n    });\n\n    // 自定义设置颜色的指令\n    Vue.directive('color', {\n        bind: function(el, binding) {\n            el.style.color = binding.value\n        }\n    });\n\n    // 自定义按键\n    Vue.config.keyCodes.f2 = 113;\n\n    // 演示私有过滤器\n    var vm2 = new Vue({\n        el: '#app2',\n        data: {\n            dt: new Date(),\n        },\n        methods: {\n            open() {\n                alert(\"弹出\");\n            }\n        },\n        filters: {\n            dataFormat: function(data, pattern) {\n                // 获取当前日期\n                var dt = new Date(data);\n\n                // 获取年月日\n                var y = dt.getFullYear();\n                var m = dt.getMonth() + 1;\n                var d = dt.getDate();\n\n                if (pattern.toLowerCase() == 'yyyy-mm-dd') {\n                    return `${y}-${m}-${d}`;\n                } else {\n                    var hh = dt.getHours();\n                    var mm = dt.getMinutes();\n                    var ss = dt.getSeconds();\n\n                    // es6中提供的 yyyy-mm-dd hh:mm:ss 的简写形式\n                    return `${y}-${m}-${d} ${hh}:${mm}:${ss}` + '-->私有';\n                }\n            }\n        },\n        // 自定义私有指令（简写形式）\n        directives: {\n            'fontsize': function(el, binding) {\n                el.style.fontSize = binding.value\n            }\n        }\n    });\n\n    // 全局过滤器\n    Vue.filter('dataFormat', function(data, pattern) {\n        // 获取当前日期\n        var dt = new Date(data);\n\n        // 获取年月日\n        var y = dt.getFullYear();\n        var m = dt.getMonth() + 1;\n        var d = dt.getDate();\n\n        if (pattern.toLowerCase() == 'yyyy-mm-dd') {\n            return `${y}-${m}-${d}`;\n        } else {\n            var hh = dt.getHours();\n            var mm = dt.getMinutes();\n            var ss = dt.getSeconds();\n\n            return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n        }\n    });\n\n    // 创建Vue实例\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            id: '',\n            username: '',\n            list: [\n                { id: 1, username: '望月', time: new Date() },\n                { id: 2, username: 'loonycoder', time: new Date() }\n            ]\n        },\n        methods: {\n            add() {\n                var user = { id: this.id, username: this.username, time: new Date() };\n                this.list.push(user);\n            },\n            del(id) {\n                // some()是操作数组的方法，作用是循环数组，并当return true是就终止循环\n                // 其中的user理解为循环list元素的别名，i表示索引\n                this.list.some((user, i) => {\n                    if (user.id == id) {\n                        this.list.splice(i, 1);\n                        return true;\n                    }\n                })\n            }\n        }\n    });\n    </script>\n</body>\n</html>\n```\n\n#### Vue实例的生命周期\n- 什么是声明周期：从Vue实例创建、运行、到销毁期间，伴随着发生的事件的过程成为生命周期。\n- 生命周期钩子：就是声明周期事件的别名。\n- 主要的声明周期函数分类\n\n> 创建期间的声明周期函数：\n> * beforeCreate: 实例刚在内存中被创建，此时，还没有初始化好data和methods属性。\n> * created: 实例已经在内存中创建好，此时data和methods已经创建好，但还没有编译模板。\n> * beforeMount: 此时已经完成了模板的编译，但是还没有挂载到页面上。\n> * mounted: 此时，已经将编译好的模板，挂载到了页面指定的容器中。\n> 运行期间的声明周期函数:\n> * beforeUpdate: 状态更新之前执行此函数，此时的data数据是最新的，但是此时还没有开始渲染DOM节点\n> * updated: 实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据都是最新的，界面已经被重新渲染好了。\n销毁期间的生命周期函数\n> * beforeDestory: 实例销毁之前调用，在这一步，实例仍然可以使用。\n> * destroyed: Vue实例销毁后调用，调用后，Vue实例指示的所有东西都会解除绑定，所有的事件监听器都会被移除，所所有的子实例也会被销毁。\n\n##### beforeCreate\n此函数执行的时候，data和methods中的数据还没有初始化。\n![beforeCreate](/images/vue7.png)\n![beforeCreate](/images/vue8.png)\n\n##### created\n此函数中，data和methods都已经初始化好了，如果需要调用methods中的方法或操作data中的值最早就在created函数中操作。\n![created](/images/vue9.png)\n![created](/images/vue10.png)\n\n##### beforeMount\n此函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去。\n![beforeMount](/images/vue11.png)\n![beforeMount](/images/vue12.png)\n\n##### mounted\n只要执行完了mounted，表示整个Vue实例已经初始化完毕了，此时组件已经进入了运行阶段。\n![mounted](/images/vue13.png)\n\n##### 图示\n![图示](/images/vue14.png)\n\n---\n\n### vue-resource实现请求提交\n作为一个后端开发者，我们需要的数据都应该是从数据库中取出来的，目前JSP页面越来越不常用，而更常用HTML页面，那么就体现出来类似Vue这种框架的好处了。\n下面我们就了解一下怎样使用Vue实现发送AJAX的请求：\n\n##### 配置\n首先使用Vue实现发送AJAX请求，我们需要导入一个包：\n```bash\nvue-resource.js\n```\n**Methods**\n```bash\nthis.$http.get('url', [options]).then(successCallback, errorCallback);\n\nthis.$http.post('url', [body], [options]).then(successCallback, errorCallback);\n```\n\n解释：\n- this表示的是当前Vue实例对象，而vue-resource.js提供了$http属性用来调用其内置的请求方法，并且vue-resource.js是基于vue.js的。\noptions是指可选的请求参数，就是你发送请求想要传递的参数。\n- then可以实现发送完请求后，通过其获取请求成功响应的数据\n- then中包含两个参数successCallback和errorCallback，这两个都是对象，我们可以通过其进行对相应数据的操作。\n\n##### 实例\n```bash\n<button @click=\"getInfo\">点击我</button>\n\nvar vm = new Vue({\n    el: '#app',\n    data: {},\n    methods: {\n        getInfo(){\n            this.$http.get('url').then(result => {\n                console.log(result.body);\n            })\n        }\n    }\n});\n```\n\n**解释：**\n当我们请求成功后，可以通过then来获取请求成功响应的数据，而可以通过.data或.body来获取响应data，而我们通常使用result.body来获取具体响应的参数。注意其中的result => {}是ES6中的写法。\n\n##### post请求\n**注意：** post请求常用于类似提交表单的功能，而对于提交表单，存在一个表单提交格式，默认是：application/x-wwww-form-urlencoded ；而通过Vue发起的post请求，默认没有表单格式，所以，有的服务器就处理不了。\n那么我们可以通过post方法的第三个参数：{ emulateJSON: true }来设置提交内容类型为普通表单数据格式。\n\n**示例：**\n```bash\nthis.$http.post('url', {}, { emulateJSON: true }).then(result => {\n    console.log(result.body)\n})\n```\n\n其他请求方法与上面的雷同，具体方法请参考官方文档。\n\n#### 请求接口根域名配置\n\n由于我们个人的项目可能是部署到本地的Tomcat服务器上的，可能不会涉及请求接口的域名配置，那么我们先看一个案例：\n发送post请求到服务器接口\n\n```bash\n...\n\nmethods: {\n    add(){\n        this.$http.post('http://tycoding.cn/api/add', {}, {emulateJSON: true}).then(result => {\n            \n        });\n    }\n}\n```\n\n如上，当我们发送请求的时候，URL路径需要写上域名地址<http://www.loonycoder.com>，然后才是请求路径/api/add，那么我们每次发送ajax请求都会需要写这个域名地址，就会显得比较麻烦，所以Vue-resource给我们提供了一种设置默认请求**根域名**的配置：\n```bash\nVue.http.options.root = 'http://www.loonycoder.com';\n```\n\n如上，就是一个全局的请求根域名配置。\n\n**注意**\n仅了解了上面的配置可能请求还会404，那么我们需要知道：\n> 如果我们通过了全局配置请求接口的根域名，那么每次发送HTTP请求时，请求的URL路径应该以相对域名开头，即前面不能带/： * 如果this.$http.post('/xxx')请求URL带了/，那么Vue就不会启用上面的全局请求根域名配置，就会404.\n* 如果前面不带/即：this.$http.post('xxx')，那么就会启用上面的全局请求根域名配置进行URL的拼接。\n\n##### 全局配置表单提交格式选项\n上面讲到了如果使用post请求提交表单，那么你应该指定{emulateJSON: true}参数，那么每次进行post请求都指定又会显得很麻烦，那么vue-resource也给我们提供了一个全局配置的方式：\n```bash\nVue.http.options.emulateJSON = true;\n```\n这样我们就不需要再post请求中再配置第三个参数了：\n```bash\nmethods: {\n    add(){\n        this.$http.post('http://tycoding.cn/api/add', {}).then(result => {\n            \n        });\n    }\n}\n```\n\n##### 实例\n请求后台并即时渲染表格数据的案例：\n```bash\n<!-- html段 -->\n<input type=\"text\" v-model=\"username\">\n<input type=\"button\" value=\"添加\" @click=\"add\">\n\n<table>\n    <tr>\n        <th>编号</th>\n        <th>用户名</th>\n        <th>操作</th>\n    </tr>\n    <tbody>\n        <tr v-for=\"user in list\" :key=\"user.id\">\n            <td>{{user.id}}</td>\n            <td>{{user.username}}</td>\n            <td>\n                <a href=\"#\" @click.pervent=\"del(user.id)\">删除</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<!-- javascript段 -->\n<script type=\"text/javascript\">\n// 设置全局根域名\nVue.http.options.root = 'http://tycoding.cn/';\n\n//设置全局表单提交格式\nVue.http.options.emulateJSON = true;\n\n// 实例化Vue\nnew Vue({\n    el: '',\n    data: {\n        username: '',\n        list: []\n    },\n    created: {\n        // 因为进入列表页面就需要在列表中显示出数据，那么就需要实现加载页面时自动加载findAll方法\n        // 而之前我们已经知道了，Vue的声明周期中，最早可以操作methods和data中的数据的阶段是：created生命周期函数阶段。\n        // 那么在这里调用findAll方法即可\n        this.findAll();\n    },\n    methods: {\n        // 查询所有列表数据\n        findAll(){\n            this.$http.get('api/findAll').then(result => {\n                this.list = result.body;\n            }),\n        },\n\n        // 添加功能\n        add(){\n            this.$http.post('api/add', {username: this.username}).then(result => {\n                if(result.body.status == 0){\n                    // 如果状态码为0就表示请求成功，这个状态码的值根据实际定\n                    // 请求成功，即添加了一条新的数据，那么需要重新刷新列表（不然新数据不能及时的更新到页面上）\n                    this.findAll()\n                }else{\n                    alert('添加失败');\n                }\n            })\n        },\n\n        //删除功能\n        del(id){\n            this.$http.get('api/del' + id).then(result => {\n                if(result.body.status == 0){\n                    //请求成功\n                    //刷新列表\n                    this.findAll();\n                }else{\n                    alert('删除失败');\n                }\n            })\n        }\n    }\n});\n</script>\n```\n\n如上我们已经完成了常见的几个功能，后面我们将会介绍基于SpringMVC框架，实现与Vue整合并重写增删改查功能。\n\n**注意：**\n- 1、首先我们需要配置根域名，且具体的AJAX请求URL不能添加'/'；如果是基于本地的Tomcat服务器的项目，可能不需要配置根域名，具体视情况而定\n- 2、实现查询所有列表数据功能，思路是：1、发送AJAX请求数据；2、将响应的数据赋值给data中的list集合this.list = result.body。注意响应数据是存放到body中的，具体请F12查看浏览器请求头信息和响应头信息。\n- 3、上面获取了数据库中的列表数据，我们需要渲染到页面上，那么点击进入列表页面，列表页面中应该立即显示数据库中的所有数据，即findAll方法应该在初始化页面的同时自动去调用，并将数据赋值给list列表。而我们之前讲过操作methods和data中参数的最早时机是created声明周期函数阶段，那么我们直接在created函数中调用findAll方法即可实现自动加载。\n- 4、添加功能的思路：\n    + 1、在data中先声明需要添加的参数；\n    + 2、在表单中用v-model绑定需要添加的参数；\n    + 3、点击添加功能按钮，绑定@click事件，在methods中写对应的方法；\n    + 4、发送AJAX请求，并在URL中拼接需要添加的数据（通过this.username）获取绑定的参数；\n    + 5、如果是post请求，还需要设置表单提交格式{emulateJSON: true}，而我们使用了全局配置就不需要再在post参数中指定了；\n    + 6、如果添加成功，就调用findAll方法重新刷新列表\n- 5、删除功能需要在绑定@click事件的时候将id传入。并且我们需要使用@click&middot;pervent来阻止&lt;a&gt;标签的默认跳转。\n- 6、上面仅是提供演示，具体操作由实际情况而定。\n\n\n","slug":"Vue2","published":1,"updated":"2020-02-12T10:54:45.757Z","_id":"ck6i8hlo10001tks69xdqdx5y","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>之前我们学习了Vue的 <strong>vue基本指令</strong> 进阶学习，我们需要了解Vue的过滤器：Vue.js允许你自定义过滤器，可被用作一些常见元素的格式化。过滤器可以用在两个地方：mustache插值和v-bind表达式。<br>用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; 过滤器名称 | <span class=\"keyword\">function</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>定义：</strong><br>Vue提供了两种方式创建过滤器：</p>\n<ul>\n<li>1、全局过滤器<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">'过滤器名称'</span>, <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>2、私有过滤器<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue()(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\">        过滤器名称: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;&#123;&#123; msg | myFilters(<span class=\"string\">'时光'</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(<span class=\"string\">'myFilters'</span>, <span class=\"keyword\">function</span>(data, pattern)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pattern == <span class=\"string\">'时光'</span>)&#123;</span><br><span class=\"line\">        var old = data.substring(0,4);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> old + <span class=\"string\">',时光路口。'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong><br>如上：Vue提供的全局过滤器，直接使用Vue调用，而不是定义在Vue实例中</p>\n<ul>\n<li>Vue.filter()中第一个参数是过滤器名称，第二个参数是function(){}</li>\n<li>function(){}中还有两个参数，第一个参数是原始的值，第二个参数是你想给过滤器方法传递的值。</li>\n</ul>\n<h4 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;&#123;&#123; msg | myFilters(<span class=\"string\">'望月'</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm2 = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app2'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        msg: <span class=\"string\">'loonycoder！'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        myFilters: <span class=\"keyword\">function</span>(data, pattern) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pattern == <span class=\"string\">'望月'</span>)&#123;</span><br><span class=\"line\">                var old = data.substring(0,4);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> old + <span class=\"string\">',loonycoder'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>私有过滤器和全局过滤器用法基本相同，仅仅是作用于不同而已。</p>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><h4 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h4><p>在我们搜索商品时，在一些网站中我们直接回车后立即进行搜索，而不是点击搜索按钮才会搜索，那么这个功能怎么实现呢？<br>那么我们就需要了解Vue中提供的<strong>按键修饰符</strong><br>用法： @keyup.按键别名 = “要调用的方法名”</p>\n<p><strong>按键别名</strong></p>\n<blockquote>\n<p>.enter<br>.tab<br>.esc<br>.delete<br>…</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> @keyup.enter=<span class=\"string\">\"open\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">open</span></span>()&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"弹出\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义按键修饰符</strong><br>如果Vue提供的按键修饰符不能满足你的需求，你也可以使用Vue提供的自定义按键修饰符来实现，因为每个键盘的按键都对应了一个键盘码值，比如F2对应的键盘码值是：113：<br>用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> @keyup.f2=<span class=\"string\">\"open\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 = 113;   </span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">open</span></span>()&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"弹出\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取文本焦点\"><a href=\"#获取文本焦点\" class=\"headerlink\" title=\"获取文本焦点\"></a>获取文本焦点</h4><p>获取文本焦点使用了focus属性，那么我们需要定义一个v-focus指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el) &#123;&#125;,</span><br><span class=\"line\">    inserted: <span class=\"keyword\">function</span>(el) &#123;&#125;,</span><br><span class=\"line\">    updated: <span class=\"keyword\">function</span>(el) &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如上，使用Vue.directive()实现定义全局指令，需要注意以下几点：</p>\n<ul>\n<li>1、在directive()方法中包含两个参数：<blockquote>\n<p>参数1：指令的名称，注意，在定义的时候指令名称不需要加v-前缀，但是在使用的时候需要加v-前缀。<br>参数2：是一个对象，这个对象包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用的时候使用： v-focus</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2、在directive()函数的第二个参数中（对象）中又包含了三个实例方法：<blockquote>\n<p>bind: 当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次；但是需要知道元素绑定了这个指令，若涉及对DOM操作的，并不会立即执行，因为元素不会立即插入到DOM中。所以涉及对元素进行DOM相关操作的，不要定义到这个方法中。<br>inserted: 当元素插入到DOM的时候，会立即执行，并只触发一次。<br>updated: 当VNode更新的时候，会指定updated，可能触发多次。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el) &#123;</span><br><span class=\"line\">        el.focus()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用</span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-focus /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，其中bind函数的第一个参数永远是el，它表示绑定的那个元素，是一个原生的JS对象；这里我们调用了JS的focus方法</p>\n<h5 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h5><p>指令定义函数提供了几个钩子函数（可选）：</p>\n<blockquote>\n<p>bind<br>inserted<br>update<br>componentUpdated: 所在组件的VNode及其孩子的VNode全部更新的时候调用<br>unbind: 只调用一次，指令与元素解除绑定时调用</p>\n</blockquote>\n<p><strong>钩子函数参数</strong><br>在上面使用directive()函数的时候我们已经介绍了一些常用的钩子函数，那么既然是函数，就可能需要进行传参，那么为了实现钩子函数传参，Vue提供了几个参数属性来实现对钩子函数参数的一些操作：</p>\n<ul>\n<li>el: 指令所绑定的元素，可以用来直接操作DOM。</li>\n<li>binding: 一个对象，包含以下属性：<ul>\n<li>name: 指令名，不包含v-前缀</li>\n<li>value: 指令的绑定值，如v-focus=”1 + 1”，那么value=2。</li>\n<li>expression: 绑定值的字符串形式，如v-focus=”1+1”，那么experssion的值是1+1。</li>\n<li>…</li>\n</ul>\n</li>\n<li>…</li>\n</ul>\n<p><strong>示例：</strong><br>实现在文本框中输入的数据颜色要为蓝色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-color=<span class=\"string\">\"'blue'\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 自定义设置颜色的指令</span><br><span class=\"line\">Vue.directive(<span class=\"string\">'color'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el, binding)&#123;</span><br><span class=\"line\">        el.style.color = binding.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中因为设计要获取值的操作，所以使用binding这个对象钩子函数参数来使用接收，那么：<br>1、这个el就表示当前这个input文本框对象<br>2、这个binding就表示v-color=”‘blue’”指令传递的参数blue（因为使用’’单引号即不是字符串）<br>3、binding-value就是获取到v-color指令绑定的参数值是：blue，通过el.style.color表示设置这个文本框样式中的颜色属性</p>\n<h5 id=\"定义私有指令\"><a href=\"#定义私有指令\" class=\"headerlink\" title=\"定义私有指令\"></a>定义私有指令</h5><p>使用<strong>私有指令</strong>和<strong>全局指令</strong>的用法基本相同，我们参考上面讲过的<strong>私有过滤器</strong>和<strong>全局过滤器</strong>就能猜想到<strong>私有指令</strong>的用法：<br><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-fontsize=<span class=\"string\">\"'50px'\"</span>&gt;私有指令&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;&#125;,</span><br><span class=\"line\">    directives: &#123;</span><br><span class=\"line\">        <span class=\"string\">'fontsize'</span>: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el, binding)&#123;</span><br><span class=\"line\">                el.style.fontSize = binding.value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义指令的简写形式</strong><br>对于仅仅使用bind和update钩子函数的操作，可以进行下列的简写形式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-fontsize=<span class=\"string\">\"'50px'\"</span>&gt;私有指令&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;&#125;,</span><br><span class=\"line\">    directives: &#123;</span><br><span class=\"line\">        <span class=\"string\">'fontsize'</span>: <span class=\"keyword\">function</span>(el, binding)&#123;</span><br><span class=\"line\">            el.style.fontSize = binding.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h4><p>实现将列表数据渲染到表格中，并实现添加功能案例（包含上面讲到的所有技术的<strong>实例</strong>）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">    table &#123;</span><br><span class=\"line\">        min-height: 25px;</span><br><span class=\"line\">        line-height: 25px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        border-collapse: collapse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    table,</span><br><span class=\"line\">    table tr th,</span><br><span class=\"line\">    table tr td &#123;</span><br><span class=\"line\">        border: 1px solid <span class=\"comment\">#0094ff;</span></span><br><span class=\"line\">        padding: 11px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        id:</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"id\"</span> v-focus v-color=<span class=\"string\">\"'blue'\"</span>&gt; username:</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"username\"</span> @keyup.enter=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"添加\"</span> @click=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">        &lt;br/&gt;</span><br><span class=\"line\">        &lt;br/&gt;</span><br><span class=\"line\">        &lt;table&gt;</span><br><span class=\"line\">            &lt;thead&gt;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;th&gt;id&lt;/th&gt;</span><br><span class=\"line\">                    &lt;th&gt;name&lt;/th&gt;</span><br><span class=\"line\">                    &lt;th&gt;date&lt;/th&gt;</span><br><span class=\"line\">                    &lt;th&gt;fun&lt;/th&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/thead&gt;</span><br><span class=\"line\">            &lt;tbody&gt;</span><br><span class=\"line\">                &lt;tr v-for=<span class=\"string\">\"user in list\"</span> :key=<span class=\"string\">\"user.id\"</span>&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123;user.username&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123;user.time | dataFormat(<span class=\"string\">''</span>) &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&lt;a href=<span class=\"string\">\"#\"</span> @click=<span class=\"string\">\"del(user.id)\"</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/tbody&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">        &lt;p&gt;未使用过滤器：&#123;&#123; new Date() &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;使用全局过滤器：&#123;&#123; new Date() | dataFormat(<span class=\"string\">''</span>) &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app2\"</span>&gt;</span><br><span class=\"line\">        使用私有过滤器：&#123;&#123; dt | dataFormat(<span class=\"string\">''</span>)&#125;&#125;</span><br><span class=\"line\">        &lt;p v-fontsize=<span class=\"string\">\"'50px'\"</span>&gt;私有指令&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    // 自定义文本框获取焦点指令</span><br><span class=\"line\">    // Vue.directive()定义全局指令，包含两个参数：</span><br><span class=\"line\">    // 参数1：指令的名称，注意，在定义的时候指令的名称不需要加v-前缀，但是在使用的时候需要加v-focus</span><br><span class=\"line\">    // 参数2：是一个对象，这个对象中包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作</span><br><span class=\"line\">    Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">        // 注意，在下面的函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生JS对象</span><br><span class=\"line\">        <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el) &#123; //每当指令绑定到元素上的时候，会立即执行这个<span class=\"built_in\">bind</span>函数，只执行一次</span><br><span class=\"line\">            // 注意：在元素绑定了指令时，还没有插入到DOM中去，这时候调用focus方法是没有作用的，因为一个元素，只有插入到DOM之后，才能获取焦点</span><br><span class=\"line\">            // el.focus()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        inserted: <span class=\"keyword\">function</span>(el) &#123; // inserted表示元素插入到DOM中的时候，会执行,触发一次</span><br><span class=\"line\">            el.focus()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        updated: <span class=\"keyword\">function</span>(el) &#123; // 当VNode更新的是否，会执行updated，可触发多次</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 自定义设置颜色的指令</span><br><span class=\"line\">    Vue.directive(<span class=\"string\">'color'</span>, &#123;</span><br><span class=\"line\">        <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el, binding) &#123;</span><br><span class=\"line\">            el.style.color = binding.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 自定义按键</span><br><span class=\"line\">    Vue.config.keyCodes.f2 = 113;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 演示私有过滤器</span><br><span class=\"line\">    var vm2 = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app2'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            dt: new Date(),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">open</span></span>() &#123;</span><br><span class=\"line\">                alert(<span class=\"string\">\"弹出\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        filters: &#123;</span><br><span class=\"line\">            dataFormat: <span class=\"keyword\">function</span>(data, pattern) &#123;</span><br><span class=\"line\">                // 获取当前日期</span><br><span class=\"line\">                var dt = new Date(data);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 获取年月日</span><br><span class=\"line\">                var y = dt.getFullYear();</span><br><span class=\"line\">                var m = dt.getMonth() + 1;</span><br><span class=\"line\">                var d = dt.getDate();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pattern.toLowerCase() == <span class=\"string\">'yyyy-mm-dd'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span>`;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    var hh = dt.getHours();</span><br><span class=\"line\">                    var mm = dt.getMinutes();</span><br><span class=\"line\">                    var ss = dt.getSeconds();</span><br><span class=\"line\"></span><br><span class=\"line\">                    // es6中提供的 yyyy-mm-dd hh:mm:ss 的简写形式</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span> <span class=\"variable\">$&#123;hh&#125;</span>:<span class=\"variable\">$&#123;mm&#125;</span>:<span class=\"variable\">$&#123;ss&#125;</span>` + <span class=\"string\">'--&gt;私有'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 自定义私有指令（简写形式）</span><br><span class=\"line\">        directives: &#123;</span><br><span class=\"line\">            <span class=\"string\">'fontsize'</span>: <span class=\"keyword\">function</span>(el, binding) &#123;</span><br><span class=\"line\">                el.style.fontSize = binding.value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 全局过滤器</span><br><span class=\"line\">    Vue.filter(<span class=\"string\">'dataFormat'</span>, <span class=\"keyword\">function</span>(data, pattern) &#123;</span><br><span class=\"line\">        // 获取当前日期</span><br><span class=\"line\">        var dt = new Date(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 获取年月日</span><br><span class=\"line\">        var y = dt.getFullYear();</span><br><span class=\"line\">        var m = dt.getMonth() + 1;</span><br><span class=\"line\">        var d = dt.getDate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pattern.toLowerCase() == <span class=\"string\">'yyyy-mm-dd'</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span>`;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var hh = dt.getHours();</span><br><span class=\"line\">            var mm = dt.getMinutes();</span><br><span class=\"line\">            var ss = dt.getSeconds();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span> <span class=\"variable\">$&#123;hh&#125;</span>:<span class=\"variable\">$&#123;mm&#125;</span>:<span class=\"variable\">$&#123;ss&#125;</span>`;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建Vue实例</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            id: <span class=\"string\">''</span>,</span><br><span class=\"line\">            username: <span class=\"string\">''</span>,</span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123; id: 1, username: <span class=\"string\">'望月'</span>, time: new Date() &#125;,</span><br><span class=\"line\">                &#123; id: 2, username: <span class=\"string\">'loonycoder'</span>, time: new Date() &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">add</span></span>() &#123;</span><br><span class=\"line\">                var user = &#123; id: this.id, username: this.username, time: new Date() &#125;;</span><br><span class=\"line\">                this.list.push(user);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            del(id) &#123;</span><br><span class=\"line\">                // some()是操作数组的方法，作用是循环数组，并当<span class=\"built_in\">return</span> <span class=\"literal\">true</span>是就终止循环</span><br><span class=\"line\">                // 其中的user理解为循环list元素的别名，i表示索引</span><br><span class=\"line\">                this.list.some((user, i) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (user.id == id) &#123;</span><br><span class=\"line\">                        this.list.splice(i, 1);</span><br><span class=\"line\">                        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Vue实例的生命周期\"><a href=\"#Vue实例的生命周期\" class=\"headerlink\" title=\"Vue实例的生命周期\"></a>Vue实例的生命周期</h4><ul>\n<li>什么是声明周期：从Vue实例创建、运行、到销毁期间，伴随着发生的事件的过程成为生命周期。</li>\n<li>生命周期钩子：就是声明周期事件的别名。</li>\n<li>主要的声明周期函数分类</li>\n</ul>\n<blockquote>\n<p>创建期间的声明周期函数：</p>\n<ul>\n<li>beforeCreate: 实例刚在内存中被创建，此时，还没有初始化好data和methods属性。</li>\n<li>created: 实例已经在内存中创建好，此时data和methods已经创建好，但还没有编译模板。</li>\n<li>beforeMount: 此时已经完成了模板的编译，但是还没有挂载到页面上。</li>\n<li>mounted: 此时，已经将编译好的模板，挂载到了页面指定的容器中。<br>运行期间的声明周期函数:</li>\n<li>beforeUpdate: 状态更新之前执行此函数，此时的data数据是最新的，但是此时还没有开始渲染DOM节点</li>\n<li>updated: 实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据都是最新的，界面已经被重新渲染好了。<br>销毁期间的生命周期函数</li>\n<li>beforeDestory: 实例销毁之前调用，在这一步，实例仍然可以使用。</li>\n<li>destroyed: Vue实例销毁后调用，调用后，Vue实例指示的所有东西都会解除绑定，所有的事件监听器都会被移除，所所有的子实例也会被销毁。</li>\n</ul>\n</blockquote>\n<h5 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h5><p>此函数执行的时候，data和methods中的数据还没有初始化。<br><img src=\"/images/vue7.png\" alt=\"beforeCreate\"><br><img src=\"/images/vue8.png\" alt=\"beforeCreate\"></p>\n<h5 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h5><p>此函数中，data和methods都已经初始化好了，如果需要调用methods中的方法或操作data中的值最早就在created函数中操作。<br><img src=\"/images/vue9.png\" alt=\"created\"><br><img src=\"/images/vue10.png\" alt=\"created\"></p>\n<h5 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h5><p>此函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去。<br><img src=\"/images/vue11.png\" alt=\"beforeMount\"><br><img src=\"/images/vue12.png\" alt=\"beforeMount\"></p>\n<h5 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h5><p>只要执行完了mounted，表示整个Vue实例已经初始化完毕了，此时组件已经进入了运行阶段。<br><img src=\"/images/vue13.png\" alt=\"mounted\"></p>\n<h5 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h5><p><img src=\"/images/vue14.png\" alt=\"图示\"></p>\n<hr>\n<h3 id=\"vue-resource实现请求提交\"><a href=\"#vue-resource实现请求提交\" class=\"headerlink\" title=\"vue-resource实现请求提交\"></a>vue-resource实现请求提交</h3><p>作为一个后端开发者，我们需要的数据都应该是从数据库中取出来的，目前JSP页面越来越不常用，而更常用HTML页面，那么就体现出来类似Vue这种框架的好处了。<br>下面我们就了解一下怎样使用Vue实现发送AJAX的请求：</p>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>首先使用Vue实现发送AJAX请求，我们需要导入一个包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue-resource.js</span><br></pre></td></tr></table></figure>\n<p><strong>Methods</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'url'</span>, [options]).<span class=\"keyword\">then</span>(successCallback, errorCallback);</span><br><span class=\"line\"></span><br><span class=\"line\">this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'url'</span>, [body], [options]).<span class=\"keyword\">then</span>(successCallback, errorCallback);</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ul>\n<li>this表示的是当前Vue实例对象，而vue-resource.js提供了$http属性用来调用其内置的请求方法，并且vue-resource.js是基于vue.js的。<br>options是指可选的请求参数，就是你发送请求想要传递的参数。</li>\n<li>then可以实现发送完请求后，通过其获取请求成功响应的数据</li>\n<li>then中包含两个参数successCallback和errorCallback，这两个都是对象，我们可以通过其进行对相应数据的操作。</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click=<span class=\"string\">\"getInfo\"</span>&gt;点击我&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">getInfo</span></span>()&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'url'</span>).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                console.log(result.body);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong><br>当我们请求成功后，可以通过then来获取请求成功响应的数据，而可以通过.data或.body来获取响应data，而我们通常使用result.body来获取具体响应的参数。注意其中的result =&gt; {}是ES6中的写法。</p>\n<h5 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h5><p><strong>注意：</strong> post请求常用于类似提交表单的功能，而对于提交表单，存在一个表单提交格式，默认是：application/x-wwww-form-urlencoded ；而通过Vue发起的post请求，默认没有表单格式，所以，有的服务器就处理不了。<br>那么我们可以通过post方法的第三个参数：{ emulateJSON: true }来设置提交内容类型为普通表单数据格式。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'url'</span>, &#123;&#125;, &#123; emulateJSON: <span class=\"literal\">true</span> &#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">    console.log(result.body)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其他请求方法与上面的雷同，具体方法请参考官方文档。</p>\n<h4 id=\"请求接口根域名配置\"><a href=\"#请求接口根域名配置\" class=\"headerlink\" title=\"请求接口根域名配置\"></a>请求接口根域名配置</h4><p>由于我们个人的项目可能是部署到本地的Tomcat服务器上的，可能不会涉及请求接口的域名配置，那么我们先看一个案例：<br>发送post请求到服务器接口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</span><br><span class=\"line\">        this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'http://tycoding.cn/api/add'</span>, &#123;&#125;, &#123;emulateJSON: <span class=\"literal\">true</span>&#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，当我们发送请求的时候，URL路径需要写上域名地址<a href=\"http://www.loonycoder.com\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com</a>，然后才是请求路径/api/add，那么我们每次发送ajax请求都会需要写这个域名地址，就会显得比较麻烦，所以Vue-resource给我们提供了一种设置默认请求<strong>根域名</strong>的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.http.options.root = <span class=\"string\">'http://www.loonycoder.com'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如上，就是一个全局的请求根域名配置。</p>\n<p><strong>注意</strong><br>仅了解了上面的配置可能请求还会404，那么我们需要知道：</p>\n<blockquote>\n<p>如果我们通过了全局配置请求接口的根域名，那么每次发送HTTP请求时，请求的URL路径应该以相对域名开头，即前面不能带/： * 如果this.$http.post(‘/xxx’)请求URL带了/，那么Vue就不会启用上面的全局请求根域名配置，就会404.</p>\n</blockquote>\n<ul>\n<li>如果前面不带/即：this.$http.post(‘xxx’)，那么就会启用上面的全局请求根域名配置进行URL的拼接。</li>\n</ul>\n<h5 id=\"全局配置表单提交格式选项\"><a href=\"#全局配置表单提交格式选项\" class=\"headerlink\" title=\"全局配置表单提交格式选项\"></a>全局配置表单提交格式选项</h5><p>上面讲到了如果使用post请求提交表单，那么你应该指定{emulateJSON: true}参数，那么每次进行post请求都指定又会显得很麻烦，那么vue-resource也给我们提供了一个全局配置的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.http.options.emulateJSON = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>这样我们就不需要再post请求中再配置第三个参数了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</span><br><span class=\"line\">        this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'http://tycoding.cn/api/add'</span>, &#123;&#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>请求后台并即时渲染表格数据的案例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html段 --&gt;</span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"username\"</span>&gt;</span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"添加\"</span> @click=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"line\">        &lt;th&gt;用户名&lt;/th&gt;</span><br><span class=\"line\">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">    &lt;tbody&gt;</span><br><span class=\"line\">        &lt;tr v-for=<span class=\"string\">\"user in list\"</span> :key=<span class=\"string\">\"user.id\"</span>&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;user.username&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;</span><br><span class=\"line\">                &lt;a href=<span class=\"string\">\"#\"</span> @click.pervent=<span class=\"string\">\"del(user.id)\"</span>&gt;删除&lt;/a&gt;</span><br><span class=\"line\">            &lt;/td&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">    &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- javascript段 --&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 设置全局根域名</span><br><span class=\"line\">Vue.http.options.root = <span class=\"string\">'http://tycoding.cn/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">//设置全局表单提交格式</span><br><span class=\"line\">Vue.http.options.emulateJSON = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实例化Vue</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        username: <span class=\"string\">''</span>,</span><br><span class=\"line\">        list: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created: &#123;</span><br><span class=\"line\">        // 因为进入列表页面就需要在列表中显示出数据，那么就需要实现加载页面时自动加载findAll方法</span><br><span class=\"line\">        // 而之前我们已经知道了，Vue的声明周期中，最早可以操作methods和data中的数据的阶段是：created生命周期函数阶段。</span><br><span class=\"line\">        // 那么在这里调用findAll方法即可</span><br><span class=\"line\">        this.findAll();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        // 查询所有列表数据</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">findAll</span></span>()&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'api/findAll'</span>).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                this.list = result.body;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 添加功能</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'api/add'</span>, &#123;username: this.username&#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.body.status == 0)&#123;</span><br><span class=\"line\">                    // 如果状态码为0就表示请求成功，这个状态码的值根据实际定</span><br><span class=\"line\">                    // 请求成功，即添加了一条新的数据，那么需要重新刷新列表（不然新数据不能及时的更新到页面上）</span><br><span class=\"line\">                    this.findAll()</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'添加失败'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        //删除功能</span><br><span class=\"line\">        del(id)&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'api/del'</span> + id).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.body.status == 0)&#123;</span><br><span class=\"line\">                    //请求成功</span><br><span class=\"line\">                    //刷新列表</span><br><span class=\"line\">                    this.findAll();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'删除失败'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上我们已经完成了常见的几个功能，后面我们将会介绍基于SpringMVC框架，实现与Vue整合并重写增删改查功能。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>1、首先我们需要配置根域名，且具体的AJAX请求URL不能添加’/‘；如果是基于本地的Tomcat服务器的项目，可能不需要配置根域名，具体视情况而定</li>\n<li>2、实现查询所有列表数据功能，思路是：1、发送AJAX请求数据；2、将响应的数据赋值给data中的list集合this.list = result.body。注意响应数据是存放到body中的，具体请F12查看浏览器请求头信息和响应头信息。</li>\n<li>3、上面获取了数据库中的列表数据，我们需要渲染到页面上，那么点击进入列表页面，列表页面中应该立即显示数据库中的所有数据，即findAll方法应该在初始化页面的同时自动去调用，并将数据赋值给list列表。而我们之前讲过操作methods和data中参数的最早时机是created声明周期函数阶段，那么我们直接在created函数中调用findAll方法即可实现自动加载。</li>\n<li>4、添加功能的思路：<ul>\n<li>1、在data中先声明需要添加的参数；</li>\n<li>2、在表单中用v-model绑定需要添加的参数；</li>\n<li>3、点击添加功能按钮，绑定@click事件，在methods中写对应的方法；</li>\n<li>4、发送AJAX请求，并在URL中拼接需要添加的数据（通过this.username）获取绑定的参数；</li>\n<li>5、如果是post请求，还需要设置表单提交格式{emulateJSON: true}，而我们使用了全局配置就不需要再在post参数中指定了；</li>\n<li>6、如果添加成功，就调用findAll方法重新刷新列表</li>\n</ul>\n</li>\n<li>5、删除功能需要在绑定@click事件的时候将id传入。并且我们需要使用@click&middot;pervent来阻止&lt;a&gt;标签的默认跳转。</li>\n<li>6、上面仅是提供演示，具体操作由实际情况而定。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>之前我们学习了Vue的 <strong>vue基本指令</strong> 进阶学习，我们需要了解Vue的过滤器：Vue.js允许你自定义过滤器，可被用作一些常见元素的格式化。过滤器可以用在两个地方：mustache插值和v-bind表达式。<br>用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; 过滤器名称 | <span class=\"keyword\">function</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>定义：</strong><br>Vue提供了两种方式创建过滤器：</p>\n<ul>\n<li>1、全局过滤器<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">'过滤器名称'</span>, <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>2、私有过滤器<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue()(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\">        过滤器名称: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;&#123;&#123; msg | myFilters(<span class=\"string\">'时光'</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(<span class=\"string\">'myFilters'</span>, <span class=\"keyword\">function</span>(data, pattern)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pattern == <span class=\"string\">'时光'</span>)&#123;</span><br><span class=\"line\">        var old = data.substring(0,4);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> old + <span class=\"string\">',时光路口。'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong><br>如上：Vue提供的全局过滤器，直接使用Vue调用，而不是定义在Vue实例中</p>\n<ul>\n<li>Vue.filter()中第一个参数是过滤器名称，第二个参数是function(){}</li>\n<li>function(){}中还有两个参数，第一个参数是原始的值，第二个参数是你想给过滤器方法传递的值。</li>\n</ul>\n<h4 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;&#123;&#123; msg | myFilters(<span class=\"string\">'望月'</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm2 = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app2'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        msg: <span class=\"string\">'loonycoder！'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        myFilters: <span class=\"keyword\">function</span>(data, pattern) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pattern == <span class=\"string\">'望月'</span>)&#123;</span><br><span class=\"line\">                var old = data.substring(0,4);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> old + <span class=\"string\">',loonycoder'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>私有过滤器和全局过滤器用法基本相同，仅仅是作用于不同而已。</p>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><h4 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h4><p>在我们搜索商品时，在一些网站中我们直接回车后立即进行搜索，而不是点击搜索按钮才会搜索，那么这个功能怎么实现呢？<br>那么我们就需要了解Vue中提供的<strong>按键修饰符</strong><br>用法： @keyup.按键别名 = “要调用的方法名”</p>\n<p><strong>按键别名</strong></p>\n<blockquote>\n<p>.enter<br>.tab<br>.esc<br>.delete<br>…</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> @keyup.enter=<span class=\"string\">\"open\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">open</span></span>()&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"弹出\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义按键修饰符</strong><br>如果Vue提供的按键修饰符不能满足你的需求，你也可以使用Vue提供的自定义按键修饰符来实现，因为每个键盘的按键都对应了一个键盘码值，比如F2对应的键盘码值是：113：<br>用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> @keyup.f2=<span class=\"string\">\"open\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 = 113;   </span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">open</span></span>()&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"弹出\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取文本焦点\"><a href=\"#获取文本焦点\" class=\"headerlink\" title=\"获取文本焦点\"></a>获取文本焦点</h4><p>获取文本焦点使用了focus属性，那么我们需要定义一个v-focus指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el) &#123;&#125;,</span><br><span class=\"line\">    inserted: <span class=\"keyword\">function</span>(el) &#123;&#125;,</span><br><span class=\"line\">    updated: <span class=\"keyword\">function</span>(el) &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如上，使用Vue.directive()实现定义全局指令，需要注意以下几点：</p>\n<ul>\n<li>1、在directive()方法中包含两个参数：<blockquote>\n<p>参数1：指令的名称，注意，在定义的时候指令名称不需要加v-前缀，但是在使用的时候需要加v-前缀。<br>参数2：是一个对象，这个对象包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用的时候使用： v-focus</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2、在directive()函数的第二个参数中（对象）中又包含了三个实例方法：<blockquote>\n<p>bind: 当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次；但是需要知道元素绑定了这个指令，若涉及对DOM操作的，并不会立即执行，因为元素不会立即插入到DOM中。所以涉及对元素进行DOM相关操作的，不要定义到这个方法中。<br>inserted: 当元素插入到DOM的时候，会立即执行，并只触发一次。<br>updated: 当VNode更新的时候，会指定updated，可能触发多次。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el) &#123;</span><br><span class=\"line\">        el.focus()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用</span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-focus /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，其中bind函数的第一个参数永远是el，它表示绑定的那个元素，是一个原生的JS对象；这里我们调用了JS的focus方法</p>\n<h5 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h5><p>指令定义函数提供了几个钩子函数（可选）：</p>\n<blockquote>\n<p>bind<br>inserted<br>update<br>componentUpdated: 所在组件的VNode及其孩子的VNode全部更新的时候调用<br>unbind: 只调用一次，指令与元素解除绑定时调用</p>\n</blockquote>\n<p><strong>钩子函数参数</strong><br>在上面使用directive()函数的时候我们已经介绍了一些常用的钩子函数，那么既然是函数，就可能需要进行传参，那么为了实现钩子函数传参，Vue提供了几个参数属性来实现对钩子函数参数的一些操作：</p>\n<ul>\n<li>el: 指令所绑定的元素，可以用来直接操作DOM。</li>\n<li>binding: 一个对象，包含以下属性：<ul>\n<li>name: 指令名，不包含v-前缀</li>\n<li>value: 指令的绑定值，如v-focus=”1 + 1”，那么value=2。</li>\n<li>expression: 绑定值的字符串形式，如v-focus=”1+1”，那么experssion的值是1+1。</li>\n<li>…</li>\n</ul>\n</li>\n<li>…</li>\n</ul>\n<p><strong>示例：</strong><br>实现在文本框中输入的数据颜色要为蓝色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-color=<span class=\"string\">\"'blue'\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 自定义设置颜色的指令</span><br><span class=\"line\">Vue.directive(<span class=\"string\">'color'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el, binding)&#123;</span><br><span class=\"line\">        el.style.color = binding.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中因为设计要获取值的操作，所以使用binding这个对象钩子函数参数来使用接收，那么：<br>1、这个el就表示当前这个input文本框对象<br>2、这个binding就表示v-color=”‘blue’”指令传递的参数blue（因为使用’’单引号即不是字符串）<br>3、binding-value就是获取到v-color指令绑定的参数值是：blue，通过el.style.color表示设置这个文本框样式中的颜色属性</p>\n<h5 id=\"定义私有指令\"><a href=\"#定义私有指令\" class=\"headerlink\" title=\"定义私有指令\"></a>定义私有指令</h5><p>使用<strong>私有指令</strong>和<strong>全局指令</strong>的用法基本相同，我们参考上面讲过的<strong>私有过滤器</strong>和<strong>全局过滤器</strong>就能猜想到<strong>私有指令</strong>的用法：<br><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-fontsize=<span class=\"string\">\"'50px'\"</span>&gt;私有指令&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;&#125;,</span><br><span class=\"line\">    directives: &#123;</span><br><span class=\"line\">        <span class=\"string\">'fontsize'</span>: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el, binding)&#123;</span><br><span class=\"line\">                el.style.fontSize = binding.value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义指令的简写形式</strong><br>对于仅仅使用bind和update钩子函数的操作，可以进行下列的简写形式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-fontsize=<span class=\"string\">\"'50px'\"</span>&gt;私有指令&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    filters: &#123;&#125;,</span><br><span class=\"line\">    directives: &#123;</span><br><span class=\"line\">        <span class=\"string\">'fontsize'</span>: <span class=\"keyword\">function</span>(el, binding)&#123;</span><br><span class=\"line\">            el.style.fontSize = binding.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h4><p>实现将列表数据渲染到表格中，并实现添加功能案例（包含上面讲到的所有技术的<strong>实例</strong>）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;style <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">    table &#123;</span><br><span class=\"line\">        min-height: 25px;</span><br><span class=\"line\">        line-height: 25px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        border-collapse: collapse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    table,</span><br><span class=\"line\">    table tr th,</span><br><span class=\"line\">    table tr td &#123;</span><br><span class=\"line\">        border: 1px solid <span class=\"comment\">#0094ff;</span></span><br><span class=\"line\">        padding: 11px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        id:</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"id\"</span> v-focus v-color=<span class=\"string\">\"'blue'\"</span>&gt; username:</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"username\"</span> @keyup.enter=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"添加\"</span> @click=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\">        &lt;br/&gt;</span><br><span class=\"line\">        &lt;br/&gt;</span><br><span class=\"line\">        &lt;table&gt;</span><br><span class=\"line\">            &lt;thead&gt;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;th&gt;id&lt;/th&gt;</span><br><span class=\"line\">                    &lt;th&gt;name&lt;/th&gt;</span><br><span class=\"line\">                    &lt;th&gt;date&lt;/th&gt;</span><br><span class=\"line\">                    &lt;th&gt;fun&lt;/th&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/thead&gt;</span><br><span class=\"line\">            &lt;tbody&gt;</span><br><span class=\"line\">                &lt;tr v-for=<span class=\"string\">\"user in list\"</span> :key=<span class=\"string\">\"user.id\"</span>&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123;user.username&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123;user.time | dataFormat(<span class=\"string\">''</span>) &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&lt;a href=<span class=\"string\">\"#\"</span> @click=<span class=\"string\">\"del(user.id)\"</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/tbody&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">        &lt;p&gt;未使用过滤器：&#123;&#123; new Date() &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;使用全局过滤器：&#123;&#123; new Date() | dataFormat(<span class=\"string\">''</span>) &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app2\"</span>&gt;</span><br><span class=\"line\">        使用私有过滤器：&#123;&#123; dt | dataFormat(<span class=\"string\">''</span>)&#125;&#125;</span><br><span class=\"line\">        &lt;p v-fontsize=<span class=\"string\">\"'50px'\"</span>&gt;私有指令&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    // 自定义文本框获取焦点指令</span><br><span class=\"line\">    // Vue.directive()定义全局指令，包含两个参数：</span><br><span class=\"line\">    // 参数1：指令的名称，注意，在定义的时候指令的名称不需要加v-前缀，但是在使用的时候需要加v-focus</span><br><span class=\"line\">    // 参数2：是一个对象，这个对象中包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作</span><br><span class=\"line\">    Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">        // 注意，在下面的函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生JS对象</span><br><span class=\"line\">        <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el) &#123; //每当指令绑定到元素上的时候，会立即执行这个<span class=\"built_in\">bind</span>函数，只执行一次</span><br><span class=\"line\">            // 注意：在元素绑定了指令时，还没有插入到DOM中去，这时候调用focus方法是没有作用的，因为一个元素，只有插入到DOM之后，才能获取焦点</span><br><span class=\"line\">            // el.focus()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        inserted: <span class=\"keyword\">function</span>(el) &#123; // inserted表示元素插入到DOM中的时候，会执行,触发一次</span><br><span class=\"line\">            el.focus()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        updated: <span class=\"keyword\">function</span>(el) &#123; // 当VNode更新的是否，会执行updated，可触发多次</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 自定义设置颜色的指令</span><br><span class=\"line\">    Vue.directive(<span class=\"string\">'color'</span>, &#123;</span><br><span class=\"line\">        <span class=\"built_in\">bind</span>: <span class=\"keyword\">function</span>(el, binding) &#123;</span><br><span class=\"line\">            el.style.color = binding.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 自定义按键</span><br><span class=\"line\">    Vue.config.keyCodes.f2 = 113;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 演示私有过滤器</span><br><span class=\"line\">    var vm2 = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app2'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            dt: new Date(),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">open</span></span>() &#123;</span><br><span class=\"line\">                alert(<span class=\"string\">\"弹出\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        filters: &#123;</span><br><span class=\"line\">            dataFormat: <span class=\"keyword\">function</span>(data, pattern) &#123;</span><br><span class=\"line\">                // 获取当前日期</span><br><span class=\"line\">                var dt = new Date(data);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 获取年月日</span><br><span class=\"line\">                var y = dt.getFullYear();</span><br><span class=\"line\">                var m = dt.getMonth() + 1;</span><br><span class=\"line\">                var d = dt.getDate();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pattern.toLowerCase() == <span class=\"string\">'yyyy-mm-dd'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span>`;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    var hh = dt.getHours();</span><br><span class=\"line\">                    var mm = dt.getMinutes();</span><br><span class=\"line\">                    var ss = dt.getSeconds();</span><br><span class=\"line\"></span><br><span class=\"line\">                    // es6中提供的 yyyy-mm-dd hh:mm:ss 的简写形式</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span> <span class=\"variable\">$&#123;hh&#125;</span>:<span class=\"variable\">$&#123;mm&#125;</span>:<span class=\"variable\">$&#123;ss&#125;</span>` + <span class=\"string\">'--&gt;私有'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        // 自定义私有指令（简写形式）</span><br><span class=\"line\">        directives: &#123;</span><br><span class=\"line\">            <span class=\"string\">'fontsize'</span>: <span class=\"keyword\">function</span>(el, binding) &#123;</span><br><span class=\"line\">                el.style.fontSize = binding.value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 全局过滤器</span><br><span class=\"line\">    Vue.filter(<span class=\"string\">'dataFormat'</span>, <span class=\"keyword\">function</span>(data, pattern) &#123;</span><br><span class=\"line\">        // 获取当前日期</span><br><span class=\"line\">        var dt = new Date(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 获取年月日</span><br><span class=\"line\">        var y = dt.getFullYear();</span><br><span class=\"line\">        var m = dt.getMonth() + 1;</span><br><span class=\"line\">        var d = dt.getDate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pattern.toLowerCase() == <span class=\"string\">'yyyy-mm-dd'</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span>`;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var hh = dt.getHours();</span><br><span class=\"line\">            var mm = dt.getMinutes();</span><br><span class=\"line\">            var ss = dt.getSeconds();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">return</span> `<span class=\"variable\">$&#123;y&#125;</span>-<span class=\"variable\">$&#123;m&#125;</span>-<span class=\"variable\">$&#123;d&#125;</span> <span class=\"variable\">$&#123;hh&#125;</span>:<span class=\"variable\">$&#123;mm&#125;</span>:<span class=\"variable\">$&#123;ss&#125;</span>`;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建Vue实例</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            id: <span class=\"string\">''</span>,</span><br><span class=\"line\">            username: <span class=\"string\">''</span>,</span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123; id: 1, username: <span class=\"string\">'望月'</span>, time: new Date() &#125;,</span><br><span class=\"line\">                &#123; id: 2, username: <span class=\"string\">'loonycoder'</span>, time: new Date() &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">add</span></span>() &#123;</span><br><span class=\"line\">                var user = &#123; id: this.id, username: this.username, time: new Date() &#125;;</span><br><span class=\"line\">                this.list.push(user);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            del(id) &#123;</span><br><span class=\"line\">                // some()是操作数组的方法，作用是循环数组，并当<span class=\"built_in\">return</span> <span class=\"literal\">true</span>是就终止循环</span><br><span class=\"line\">                // 其中的user理解为循环list元素的别名，i表示索引</span><br><span class=\"line\">                this.list.some((user, i) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (user.id == id) &#123;</span><br><span class=\"line\">                        this.list.splice(i, 1);</span><br><span class=\"line\">                        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Vue实例的生命周期\"><a href=\"#Vue实例的生命周期\" class=\"headerlink\" title=\"Vue实例的生命周期\"></a>Vue实例的生命周期</h4><ul>\n<li>什么是声明周期：从Vue实例创建、运行、到销毁期间，伴随着发生的事件的过程成为生命周期。</li>\n<li>生命周期钩子：就是声明周期事件的别名。</li>\n<li>主要的声明周期函数分类</li>\n</ul>\n<blockquote>\n<p>创建期间的声明周期函数：</p>\n<ul>\n<li>beforeCreate: 实例刚在内存中被创建，此时，还没有初始化好data和methods属性。</li>\n<li>created: 实例已经在内存中创建好，此时data和methods已经创建好，但还没有编译模板。</li>\n<li>beforeMount: 此时已经完成了模板的编译，但是还没有挂载到页面上。</li>\n<li>mounted: 此时，已经将编译好的模板，挂载到了页面指定的容器中。<br>运行期间的声明周期函数:</li>\n<li>beforeUpdate: 状态更新之前执行此函数，此时的data数据是最新的，但是此时还没有开始渲染DOM节点</li>\n<li>updated: 实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据都是最新的，界面已经被重新渲染好了。<br>销毁期间的生命周期函数</li>\n<li>beforeDestory: 实例销毁之前调用，在这一步，实例仍然可以使用。</li>\n<li>destroyed: Vue实例销毁后调用，调用后，Vue实例指示的所有东西都会解除绑定，所有的事件监听器都会被移除，所所有的子实例也会被销毁。</li>\n</ul>\n</blockquote>\n<h5 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h5><p>此函数执行的时候，data和methods中的数据还没有初始化。<br><img src=\"/images/vue7.png\" alt=\"beforeCreate\"><br><img src=\"/images/vue8.png\" alt=\"beforeCreate\"></p>\n<h5 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h5><p>此函数中，data和methods都已经初始化好了，如果需要调用methods中的方法或操作data中的值最早就在created函数中操作。<br><img src=\"/images/vue9.png\" alt=\"created\"><br><img src=\"/images/vue10.png\" alt=\"created\"></p>\n<h5 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h5><p>此函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去。<br><img src=\"/images/vue11.png\" alt=\"beforeMount\"><br><img src=\"/images/vue12.png\" alt=\"beforeMount\"></p>\n<h5 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h5><p>只要执行完了mounted，表示整个Vue实例已经初始化完毕了，此时组件已经进入了运行阶段。<br><img src=\"/images/vue13.png\" alt=\"mounted\"></p>\n<h5 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h5><p><img src=\"/images/vue14.png\" alt=\"图示\"></p>\n<hr>\n<h3 id=\"vue-resource实现请求提交\"><a href=\"#vue-resource实现请求提交\" class=\"headerlink\" title=\"vue-resource实现请求提交\"></a>vue-resource实现请求提交</h3><p>作为一个后端开发者，我们需要的数据都应该是从数据库中取出来的，目前JSP页面越来越不常用，而更常用HTML页面，那么就体现出来类似Vue这种框架的好处了。<br>下面我们就了解一下怎样使用Vue实现发送AJAX的请求：</p>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>首先使用Vue实现发送AJAX请求，我们需要导入一个包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue-resource.js</span><br></pre></td></tr></table></figure>\n<p><strong>Methods</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'url'</span>, [options]).<span class=\"keyword\">then</span>(successCallback, errorCallback);</span><br><span class=\"line\"></span><br><span class=\"line\">this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'url'</span>, [body], [options]).<span class=\"keyword\">then</span>(successCallback, errorCallback);</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ul>\n<li>this表示的是当前Vue实例对象，而vue-resource.js提供了$http属性用来调用其内置的请求方法，并且vue-resource.js是基于vue.js的。<br>options是指可选的请求参数，就是你发送请求想要传递的参数。</li>\n<li>then可以实现发送完请求后，通过其获取请求成功响应的数据</li>\n<li>then中包含两个参数successCallback和errorCallback，这两个都是对象，我们可以通过其进行对相应数据的操作。</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click=<span class=\"string\">\"getInfo\"</span>&gt;点击我&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">getInfo</span></span>()&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'url'</span>).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                console.log(result.body);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong><br>当我们请求成功后，可以通过then来获取请求成功响应的数据，而可以通过.data或.body来获取响应data，而我们通常使用result.body来获取具体响应的参数。注意其中的result =&gt; {}是ES6中的写法。</p>\n<h5 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h5><p><strong>注意：</strong> post请求常用于类似提交表单的功能，而对于提交表单，存在一个表单提交格式，默认是：application/x-wwww-form-urlencoded ；而通过Vue发起的post请求，默认没有表单格式，所以，有的服务器就处理不了。<br>那么我们可以通过post方法的第三个参数：{ emulateJSON: true }来设置提交内容类型为普通表单数据格式。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'url'</span>, &#123;&#125;, &#123; emulateJSON: <span class=\"literal\">true</span> &#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">    console.log(result.body)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其他请求方法与上面的雷同，具体方法请参考官方文档。</p>\n<h4 id=\"请求接口根域名配置\"><a href=\"#请求接口根域名配置\" class=\"headerlink\" title=\"请求接口根域名配置\"></a>请求接口根域名配置</h4><p>由于我们个人的项目可能是部署到本地的Tomcat服务器上的，可能不会涉及请求接口的域名配置，那么我们先看一个案例：<br>发送post请求到服务器接口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</span><br><span class=\"line\">        this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'http://tycoding.cn/api/add'</span>, &#123;&#125;, &#123;emulateJSON: <span class=\"literal\">true</span>&#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，当我们发送请求的时候，URL路径需要写上域名地址<a href=\"http://www.loonycoder.com\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com</a>，然后才是请求路径/api/add，那么我们每次发送ajax请求都会需要写这个域名地址，就会显得比较麻烦，所以Vue-resource给我们提供了一种设置默认请求<strong>根域名</strong>的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.http.options.root = <span class=\"string\">'http://www.loonycoder.com'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如上，就是一个全局的请求根域名配置。</p>\n<p><strong>注意</strong><br>仅了解了上面的配置可能请求还会404，那么我们需要知道：</p>\n<blockquote>\n<p>如果我们通过了全局配置请求接口的根域名，那么每次发送HTTP请求时，请求的URL路径应该以相对域名开头，即前面不能带/： * 如果this.$http.post(‘/xxx’)请求URL带了/，那么Vue就不会启用上面的全局请求根域名配置，就会404.</p>\n</blockquote>\n<ul>\n<li>如果前面不带/即：this.$http.post(‘xxx’)，那么就会启用上面的全局请求根域名配置进行URL的拼接。</li>\n</ul>\n<h5 id=\"全局配置表单提交格式选项\"><a href=\"#全局配置表单提交格式选项\" class=\"headerlink\" title=\"全局配置表单提交格式选项\"></a>全局配置表单提交格式选项</h5><p>上面讲到了如果使用post请求提交表单，那么你应该指定{emulateJSON: true}参数，那么每次进行post请求都指定又会显得很麻烦，那么vue-resource也给我们提供了一个全局配置的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.http.options.emulateJSON = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>这样我们就不需要再post请求中再配置第三个参数了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</span><br><span class=\"line\">        this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'http://tycoding.cn/api/add'</span>, &#123;&#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>请求后台并即时渲染表格数据的案例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html段 --&gt;</span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"username\"</span>&gt;</span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"添加\"</span> @click=<span class=\"string\">\"add\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"line\">        &lt;th&gt;用户名&lt;/th&gt;</span><br><span class=\"line\">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">    &lt;tbody&gt;</span><br><span class=\"line\">        &lt;tr v-for=<span class=\"string\">\"user in list\"</span> :key=<span class=\"string\">\"user.id\"</span>&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;user.username&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;</span><br><span class=\"line\">                &lt;a href=<span class=\"string\">\"#\"</span> @click.pervent=<span class=\"string\">\"del(user.id)\"</span>&gt;删除&lt;/a&gt;</span><br><span class=\"line\">            &lt;/td&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">    &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- javascript段 --&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 设置全局根域名</span><br><span class=\"line\">Vue.http.options.root = <span class=\"string\">'http://tycoding.cn/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">//设置全局表单提交格式</span><br><span class=\"line\">Vue.http.options.emulateJSON = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实例化Vue</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        username: <span class=\"string\">''</span>,</span><br><span class=\"line\">        list: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created: &#123;</span><br><span class=\"line\">        // 因为进入列表页面就需要在列表中显示出数据，那么就需要实现加载页面时自动加载findAll方法</span><br><span class=\"line\">        // 而之前我们已经知道了，Vue的声明周期中，最早可以操作methods和data中的数据的阶段是：created生命周期函数阶段。</span><br><span class=\"line\">        // 那么在这里调用findAll方法即可</span><br><span class=\"line\">        this.findAll();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        // 查询所有列表数据</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">findAll</span></span>()&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'api/findAll'</span>).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                this.list = result.body;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 添加功能</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.post(<span class=\"string\">'api/add'</span>, &#123;username: this.username&#125;).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.body.status == 0)&#123;</span><br><span class=\"line\">                    // 如果状态码为0就表示请求成功，这个状态码的值根据实际定</span><br><span class=\"line\">                    // 请求成功，即添加了一条新的数据，那么需要重新刷新列表（不然新数据不能及时的更新到页面上）</span><br><span class=\"line\">                    this.findAll()</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'添加失败'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        //删除功能</span><br><span class=\"line\">        del(id)&#123;</span><br><span class=\"line\">            this.<span class=\"variable\">$http</span>.get(<span class=\"string\">'api/del'</span> + id).<span class=\"keyword\">then</span>(result =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.body.status == 0)&#123;</span><br><span class=\"line\">                    //请求成功</span><br><span class=\"line\">                    //刷新列表</span><br><span class=\"line\">                    this.findAll();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'删除失败'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上我们已经完成了常见的几个功能，后面我们将会介绍基于SpringMVC框架，实现与Vue整合并重写增删改查功能。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>1、首先我们需要配置根域名，且具体的AJAX请求URL不能添加’/‘；如果是基于本地的Tomcat服务器的项目，可能不需要配置根域名，具体视情况而定</li>\n<li>2、实现查询所有列表数据功能，思路是：1、发送AJAX请求数据；2、将响应的数据赋值给data中的list集合this.list = result.body。注意响应数据是存放到body中的，具体请F12查看浏览器请求头信息和响应头信息。</li>\n<li>3、上面获取了数据库中的列表数据，我们需要渲染到页面上，那么点击进入列表页面，列表页面中应该立即显示数据库中的所有数据，即findAll方法应该在初始化页面的同时自动去调用，并将数据赋值给list列表。而我们之前讲过操作methods和data中参数的最早时机是created声明周期函数阶段，那么我们直接在created函数中调用findAll方法即可实现自动加载。</li>\n<li>4、添加功能的思路：<ul>\n<li>1、在data中先声明需要添加的参数；</li>\n<li>2、在表单中用v-model绑定需要添加的参数；</li>\n<li>3、点击添加功能按钮，绑定@click事件，在methods中写对应的方法；</li>\n<li>4、发送AJAX请求，并在URL中拼接需要添加的数据（通过this.username）获取绑定的参数；</li>\n<li>5、如果是post请求，还需要设置表单提交格式{emulateJSON: true}，而我们使用了全局配置就不需要再在post参数中指定了；</li>\n<li>6、如果添加成功，就调用findAll方法重新刷新列表</li>\n</ul>\n</li>\n<li>5、删除功能需要在绑定@click事件的时候将id传入。并且我们需要使用@click&middot;pervent来阻止&lt;a&gt;标签的默认跳转。</li>\n<li>6、上面仅是提供演示，具体操作由实际情况而定。</li>\n</ul>\n"},{"title":"Vue组件","date":"2019-12-11T16:00:00.000Z","_content":"\n#### Vue创建组件\n\n##### 什么是组件\n什么是组件？组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样地方功能，就可以去调用对应的组件即可。\n组件化和模块化的区别：\n- 模块化：是从代码逻辑的角度进行划分的，方便代码分层开发，保证每个功能模块的只能单一；\n- 组件化：是从UI界面的角度进行划分的；前端的组件化，方便了UI组件的重用；\n\n##### 定义Vue组件\n\n**方式一**\n1、使用Vue.extend来创建全局的Vue组件\n2、通过template属性来指定组件要展示的HTML结构\n3、通过Vue.component()定义全局组件\n4、在HTML指定位置通过Tag标签的形式应用你的组件，组件的名称即是tag标签的名称\n```bash\n<div id=\"app\">\n\t<!-- 组件的名称即为对应tag标签的名称 -->\n\t<mycom1></mycom1>\n</div>\n\n<script>\n\t// 创建组件\n\tvar com1 = Vue.extend({\n\t\ttemplate: '<h3>这是使用Vue.extend 创建的组件</h3>'\n\t});\n\n\t// 使用Vue.component('组件的名称', 创建出来的组件模板对象)，定义全局组件\n\tVue.component('mycom1', com1);\n</script>\n```\n**注意：**\n- 用Vue.component()定义组件名称的时候有两种命名方式：1、驼峰命名：Xxx；2、xxx。注意，使用驼峰命名时，tag标签不能使用驼峰名称，应将相应的大写字母替换为-加小写字母，例如：Vue.component('myCom', com1)，那么tag标签应为： &lt;my-com&gt; &lt;/my-com&gt;\n\n**方式二**\n```bash\n<!-- 组件的名称即为对应tag标签的名称 -->\n<mycom1></mycom1>\n\n<script>\n\n\t// 使用Vue.component('组件的名称', 创建出来的组件模板对象)，定义全局组件\n\tVue.component('mycom1', Vue.extend({\n\t\ttemplate: '<h3>这是使用Vue.extend 创建的组件</h3>'\n\t}));\n</script>\n```\n\n方式二就像是方式一的简化版，但是注意：\n在template中定义的内容只能存在一个根节点元素，即上面例子中template中不能出现和 &lt;h3&gt;平级的标签。\n比如下面这种写法就是**错误的**\n```bash\nVue.component('mycom1', Vue.extend({\n\ttemplate: '<h3>这是使用Vue.extend 创建的组件</h3><span></span>'\n}));\n```\n解决办法就是，外层嵌套一个根标签就行了：\n```bash\nVue.component('mycom1', Vue.extend({\n\ttemplate: '<div><h3>这是使用Vue.extend 创建的组件</h3><span></span></div>'\n}));\n```\n**方式三**\n1、JavaScript中仍使用Vue.component来定义全局组件，和方式二相似，但是里面不再是template: 'HTML结构'了，而是引用一个外部标签的id值，即template:'id'。\n2、在被Vue实例控制的app外面，定义&lt;template id=\"id\"&gt;你的HTML结构&lt;/template&gt;\n这种方式的好处就是是就组件代码都是定义在HTML结构中的，有智能代码提示；而JavaScript中定义组件仅是写一个引用。\n实例：\n```bash\n<div id=\"app\">\n\t<!-- 页面引用 -->\n</div>\n\n\n<template id=\"tmp\">\n\t<!-- 比如仅存在一个根节点元素 -->\n\t<div>\n\t\t<h1></h1>>\n\t\t<h2></h2>\n\t</div>\n</template>\n\n//JavaScript部分\nVue.component('mycom', {\n\ttemplate: '#tmp'\n});\n```\n\n**定义私**有组件\n除了上面讲到的定义全局组件，我们也可以定义私有组件，使用components: {}函数。\n如：\n```bash\n<div id=\"app\">\n    <tem></tem>\n</div>\n<template id=\"tmp\">\n    <h3>这是私有组件</h3>\n</template>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\nnew Vue({\n    el: '#app',\n    data: {},\n    methods: {},\n    components: {\n        tem: {\n            template: '#tmp'\n        }\n    }\n\n});\n</script>\n```\n\n##### 组件元素\n**组件的**data\n在组件中，同样可以有自己的data数据，但是用法和Vue实例中的data用法有所不同：\n1、组件中的data必须是一个方法，即\n```bash\ndata: function(){ }\n```\n2、组件中的data方法必须返回一个Object对象\n```bash\ndata: function(){\n\treturn object\n}\n```\n\n实例：\n```bash\n<div id=\"app\">\n    <mycom1></mycom1>\n</div>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\nVue.component('mycom1', Vue.extend({\n\tdata: function(){\n\t\treturn {\n\t\t\tmsg: '这是组件的data'\n\t\t}\n\t},\n\ttemplate: '<h3>这是使用Vue.extend 创建的组件-- {{msg}}</h3>'\n}));\n\nnew Vue({\n    el: '#app',\n    data: {},\n    methods: {},\n    components: {\n    }\n});\n</script>\n```\n\n**组件的**切换\n在遇到登录注册表单时，通常我们需要对两个按钮进行切换实现显示不同的表单，那么Vue中的组件切换正符合了这个功能要求。\n\n**方式一**\n\n可以使用Vue提供的v-if和v-else来实现两个组件间的切换，但是，仅支持切换两个组件\n\n实例：\n```bash\n<div id=\"app\">\n    <a href=\"#\" @click.prevent=\"flag=true\">登录</a>\n    <a href=\"#\" @click.prevent=\"flag=false\">注册</a>\n\n    <login v-if=\"flag\"></login>\n    <register v-else=\"flag\"></register>\n</div>\n<template id=\"login\">\n    <h3>这是登录表单</h3>\n</template>\n<template id=\"register\">\n\t<h3>这是注册表单</h3>\n</template>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\n// 创建登录组件\nVue.component('login', {\n\ttemplate: '#login'\n});\n\n// 创建注册组件\nVue.component('register', {\n\ttemplate: '#register'\n})\n\nnew Vue({\n    el: '#app',\n    data: {\n    \tflag: true\n    },\n    methods: {}\n\n});\n</script>\n```\n定义flag参数，当flag=true就显示组件，当flar=false就隐藏组件\n\n**方式二**\n\nVue提供了component来展示对应名称的组件。其中component是一个占位符，:is属性，可以用来指定要展示的组件名称\n\n实例：\n```bash\n<div id=\"app\">\n    <a href=\"#\" @click.prevent=\"comName='login'\">登录</a>\n    <a href=\"#\" @click.prevent=\"comName='register'\">注册</a>\n\n    <component :is=\"comName\"></component>\n</div>\n<template id=\"login\">\n    <h3>这是登录表单</h3>\n</template>\n<template id=\"register\">\n\t<h3>这是注册表单</h3>\n</template>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\n// 创建登录组件\nVue.component('login', {\n\ttemplate: '#login'\n});\n\n// 创建注册组件\nVue.component('register', {\n\ttemplate: '#register'\n})\n\nnew Vue({\n    el: '#app',\n    data: {\n    \tcomName: 'login'\n    },\n    methods: {}\n});\n</script>\n```\n即使用Vue提供的component，它能够实现自动对组件进行展示和隐藏，通过:is='组件名称'。\n\n##### 父子组件间传值\n**父组件**给子组件传值\n\n父组件给子组件传值，即实现在子组件中调用父组件中的methods或是获取父组件中的data.\n\n**传参数**\n\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1></com1>\n    </div>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tmsg: '这是父组件data值'\n        },\n        methods: {\n        \tshow(){\n        \t\tconsole.log(\"这是父组件的show方法\");\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '<h2>这是子组件</h2>'\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n如上，当我们直接在子组件中引用父组件data中定义的msg数据，将上面的修改为：\n```bash\ncom1: {\n\ttemplate: '<h2>这是子组件--{{msg}}</h2>'\n}\n```\n那么就会报错。所以就证实了默认在子组件中不能访问父组件中的data或methods。\n为了解决子组件获取父组件数据，Vue提供了以下方式获取：\n- 1、父组件在引用子组件的时候，通过属性绑定的方式v-bind:，把需要传递给子组件的数据以属性绑定的形式传递到子组件内部，供子组件使用。\n- 2、在子组件中，通过props: []获取到父组件传递过来的数据；这样就完成了父组件向子组件传值\n\n**实例：**\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 :fatoson=\"msg\"></com1>\n    </div>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tmsg: '这是父组件data值'\n        },\n        methods: {},\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '<h2>这是子组件--{{fatoson}}</h2>',\n        \t\tprops: ['fatoson']\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n\n如上，我们在子组件实例中使用了v-bind绑定了一个参数fatoson，其值是：msg即在父组件data中定义的值；那么就相当于父组件的一个data数据被Vue绑定到了子组件实例中，且父组件data值的别名是fatoson，那么在子组件中通过props: []属性就能获取到这个别名，然后就实现了父组件向子组件传值。需要注意以下：\n- 1、我们可以将为子组件绑定的参数名称是父组件值的别名。即此时msg相当于fatoson。\n- 2、注意命名中若是驼峰命名，在HTML中必须用-替换。\n- 3、注意props是Vue为父组将向子组件传值提供的一个参数，且他是唯一的数组类型的。\n- 4、注意子组件通过props获取到的父组件的值是只读的，即不能修改。\n\n**传方法**\n上面讲了父组件给子组件传递普通的参数，下面我们将了解到父组件怎样给子组件传递方法。\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 @open=\"show\"></com1>\n    </div>\n    <template id=\"tmp\">\n    \t<div>\n    \t\t<h2>这是子组件</h2>\n    \t\t<input type=\"button\" @click=\"myclick\" value=\"子组件按钮，点击触发父组件方法\"/>\n    \t</div>\n    </template>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tmsg: '这是父组件data值'\n        },\n        methods: {\n        \tshow(){\n        \t\tconsole.log(\"这是父组件的show方法\");\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '#tmp',\n        \t\tprops: ['fatoson'],\n        \t\tmethods: {\n        \t\t\tmyclick(){\n       \t\t \t\t\tthis.$emit('open');\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n\n**解释：**\n- 1、这里子组件的template数据引用外部的&lt;template&gt;&lt;/template&gt;中的HTML代码。\n- 2、与传值思路相同，传递方法也需要在子组件实例中使用v-on即@来绑定方法，方法别名@open，方法的值是show是在父组件中定义的方法名。\n- 3、与传值思路相同，传值使用了props来接受传递的参数，那么传方法提供了$emit()元素\n\n**综合**\n上面讲的父组件向子组件传递方法，那么既然是方法就肯定能传递方法参数。我们只需要在父组件方法中指定值名称即可\n```bash\n@子组件接收的方法别名=\"父组件中的方法(父组件中的参数值或data)\"\n```\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 @open=\"show(fatosonval)\"></com1>\n    </div>\n    <template id=\"tmp\">\n    \t<div>\n    \t\t<h2>这是子组件</h2>\n    \t\t<input type=\"button\" @click=\"myclick\" value=\"子组件按钮，点击触发父组件方法\"/>\n    \t</div>\n    </template>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tfatosonval: {\n        \t\tid: '1',\n        \t\tname: 'Loonycoder'\n        \t}\n        },\n        methods: {\n        \tshow(data){\n        \t\tconsole.log(data);\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '#tmp',\n        \t\tmethods: {\n        \t\t\tmyclick(){\n       \t\t \t\t\tthis.$emit('open');\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n\n**子组件**给父组件传值\n即实现在父组件中调用子组件中的方法\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 @open=\"show\"></com1>\n    </div>\n    <template id=\"tmp\">\n    \t<div>\n    \t\t<h2>这是子组件</h2>\n    \t\t<input type=\"button\" @click=\"myclick\" value=\"子组件按钮，点击触发父组件方法\"/>\n    \t</div>\n    </template>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tfatosonval: null\n        },\n        methods: {\n        \tshow(data){\n        \t\tconsole.log(data);\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '#tmp',\n        \t\tdata(){\n        \t\t\treturn {\n        \t\t\t\tsonval: { name: 'Loonycoder', age: 24 }\n        \t\t\t}\n        \t\t},\n        \t\tmethods: {\n        \t\t\tmyclick(){\n       \t\t \t\t\tthis.$emit('open', this.sonval);\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n之前我们实现父组件向子组件传值的时候，需要在@open()中指定父组件中的data，而子组件给父组件传值的时候就不需要再指定了，而是直接在调用子组件中的open（这是父组件方法的别名），将子组件的值写进$emit('方法别名', data参数)中即可。\n\n##### Vue获取DOM元素和组件\n首先我们需要明白的就是Vue并不提倡我们操作DOM元素，Vue的宗旨就是让我们只关心业务逻辑。\n那么通常我们需要获取一个如&lt;h2&gt;&lt;/h2&gt;中的值，采用原生JS通常需要先为tag标签定义一个id属性，然后通过JS代码document.getElementById('id').innterText来获取到&lt;h2&gt;中的文本数据，而Vue也实现了操作原生DOM的功能：\n- 在需要获取的HTML标签中指定`ref`属性，其值可自定义。\n- 在Vue实例中，使用`this.$refs.指定的值`来获取DOM对象，进行操作。\n```bash\n<h2 ref=\"h2\">这是h2的文本数据</h2>\n\nconsole.log(this.$refs.h2.innerText);\n```\n**通过$refs还能轻易获取子组件中的data和methods数据**\n首先需要为子组件引用实例定义ref=\"com1\"属性，然后在Vue实例中通过this.$refs.com1即可获取子组件中的所有对象，即还能获取到子组件中的data和methods\n实例：\n```bash\n<body>\n    <!-- 父组件实例 -->\n    <div id=\"app\">\n        <!-- 子组件实例 -->\n        <com1 ref=\"com1\"></com1>\n        <input type=\"button\" @click=\"show\" value=\"获取元素\">\n\n        <h2 ref=\"h2\">这是父组件</h2>\n    </div>\n    <template id=\"tmp\">\n        <div>\n            <h2>这是子组件</h2>\n        </div>\n    </template>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n    new Vue({\n        el: '#app',\n        methods: {\n            show(){\n                // console.log(this.$refs.h2.innerText);\n                // console.log(this.$refs.com1); //获取子组件中的所有实例对象\n                // console.log(this.$refs.com1.sonval); //获取子组件中定义的data值\n                console.log(this.$refs.com1.sonshow()); //调用子组件中定义的方法\n\n            }\n        },\n\n        // 子组件\n        components: {\n            com1: {\n                template: '#tmp',\n                data() {\n                    return {\n                        sonval: { name: 'Loonycoder', age: 24 }\n                    }\n                },\n                methods: {\n                    sonshow() {\n                        console.log('子组件的方法');\n                    }\n                }\n            }\n        }\n    });\n    </script>\n</body>\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Vue3.md","raw":"---\ntitle: Vue组件\ncategories:\n    - Web前端\ndate: 2019-12-12\ntags:\n\t- 前端框架\n\t\n---\n\n#### Vue创建组件\n\n##### 什么是组件\n什么是组件？组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样地方功能，就可以去调用对应的组件即可。\n组件化和模块化的区别：\n- 模块化：是从代码逻辑的角度进行划分的，方便代码分层开发，保证每个功能模块的只能单一；\n- 组件化：是从UI界面的角度进行划分的；前端的组件化，方便了UI组件的重用；\n\n##### 定义Vue组件\n\n**方式一**\n1、使用Vue.extend来创建全局的Vue组件\n2、通过template属性来指定组件要展示的HTML结构\n3、通过Vue.component()定义全局组件\n4、在HTML指定位置通过Tag标签的形式应用你的组件，组件的名称即是tag标签的名称\n```bash\n<div id=\"app\">\n\t<!-- 组件的名称即为对应tag标签的名称 -->\n\t<mycom1></mycom1>\n</div>\n\n<script>\n\t// 创建组件\n\tvar com1 = Vue.extend({\n\t\ttemplate: '<h3>这是使用Vue.extend 创建的组件</h3>'\n\t});\n\n\t// 使用Vue.component('组件的名称', 创建出来的组件模板对象)，定义全局组件\n\tVue.component('mycom1', com1);\n</script>\n```\n**注意：**\n- 用Vue.component()定义组件名称的时候有两种命名方式：1、驼峰命名：Xxx；2、xxx。注意，使用驼峰命名时，tag标签不能使用驼峰名称，应将相应的大写字母替换为-加小写字母，例如：Vue.component('myCom', com1)，那么tag标签应为： &lt;my-com&gt; &lt;/my-com&gt;\n\n**方式二**\n```bash\n<!-- 组件的名称即为对应tag标签的名称 -->\n<mycom1></mycom1>\n\n<script>\n\n\t// 使用Vue.component('组件的名称', 创建出来的组件模板对象)，定义全局组件\n\tVue.component('mycom1', Vue.extend({\n\t\ttemplate: '<h3>这是使用Vue.extend 创建的组件</h3>'\n\t}));\n</script>\n```\n\n方式二就像是方式一的简化版，但是注意：\n在template中定义的内容只能存在一个根节点元素，即上面例子中template中不能出现和 &lt;h3&gt;平级的标签。\n比如下面这种写法就是**错误的**\n```bash\nVue.component('mycom1', Vue.extend({\n\ttemplate: '<h3>这是使用Vue.extend 创建的组件</h3><span></span>'\n}));\n```\n解决办法就是，外层嵌套一个根标签就行了：\n```bash\nVue.component('mycom1', Vue.extend({\n\ttemplate: '<div><h3>这是使用Vue.extend 创建的组件</h3><span></span></div>'\n}));\n```\n**方式三**\n1、JavaScript中仍使用Vue.component来定义全局组件，和方式二相似，但是里面不再是template: 'HTML结构'了，而是引用一个外部标签的id值，即template:'id'。\n2、在被Vue实例控制的app外面，定义&lt;template id=\"id\"&gt;你的HTML结构&lt;/template&gt;\n这种方式的好处就是是就组件代码都是定义在HTML结构中的，有智能代码提示；而JavaScript中定义组件仅是写一个引用。\n实例：\n```bash\n<div id=\"app\">\n\t<!-- 页面引用 -->\n</div>\n\n\n<template id=\"tmp\">\n\t<!-- 比如仅存在一个根节点元素 -->\n\t<div>\n\t\t<h1></h1>>\n\t\t<h2></h2>\n\t</div>\n</template>\n\n//JavaScript部分\nVue.component('mycom', {\n\ttemplate: '#tmp'\n});\n```\n\n**定义私**有组件\n除了上面讲到的定义全局组件，我们也可以定义私有组件，使用components: {}函数。\n如：\n```bash\n<div id=\"app\">\n    <tem></tem>\n</div>\n<template id=\"tmp\">\n    <h3>这是私有组件</h3>\n</template>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\nnew Vue({\n    el: '#app',\n    data: {},\n    methods: {},\n    components: {\n        tem: {\n            template: '#tmp'\n        }\n    }\n\n});\n</script>\n```\n\n##### 组件元素\n**组件的**data\n在组件中，同样可以有自己的data数据，但是用法和Vue实例中的data用法有所不同：\n1、组件中的data必须是一个方法，即\n```bash\ndata: function(){ }\n```\n2、组件中的data方法必须返回一个Object对象\n```bash\ndata: function(){\n\treturn object\n}\n```\n\n实例：\n```bash\n<div id=\"app\">\n    <mycom1></mycom1>\n</div>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\nVue.component('mycom1', Vue.extend({\n\tdata: function(){\n\t\treturn {\n\t\t\tmsg: '这是组件的data'\n\t\t}\n\t},\n\ttemplate: '<h3>这是使用Vue.extend 创建的组件-- {{msg}}</h3>'\n}));\n\nnew Vue({\n    el: '#app',\n    data: {},\n    methods: {},\n    components: {\n    }\n});\n</script>\n```\n\n**组件的**切换\n在遇到登录注册表单时，通常我们需要对两个按钮进行切换实现显示不同的表单，那么Vue中的组件切换正符合了这个功能要求。\n\n**方式一**\n\n可以使用Vue提供的v-if和v-else来实现两个组件间的切换，但是，仅支持切换两个组件\n\n实例：\n```bash\n<div id=\"app\">\n    <a href=\"#\" @click.prevent=\"flag=true\">登录</a>\n    <a href=\"#\" @click.prevent=\"flag=false\">注册</a>\n\n    <login v-if=\"flag\"></login>\n    <register v-else=\"flag\"></register>\n</div>\n<template id=\"login\">\n    <h3>这是登录表单</h3>\n</template>\n<template id=\"register\">\n\t<h3>这是注册表单</h3>\n</template>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\n// 创建登录组件\nVue.component('login', {\n\ttemplate: '#login'\n});\n\n// 创建注册组件\nVue.component('register', {\n\ttemplate: '#register'\n})\n\nnew Vue({\n    el: '#app',\n    data: {\n    \tflag: true\n    },\n    methods: {}\n\n});\n</script>\n```\n定义flag参数，当flag=true就显示组件，当flar=false就隐藏组件\n\n**方式二**\n\nVue提供了component来展示对应名称的组件。其中component是一个占位符，:is属性，可以用来指定要展示的组件名称\n\n实例：\n```bash\n<div id=\"app\">\n    <a href=\"#\" @click.prevent=\"comName='login'\">登录</a>\n    <a href=\"#\" @click.prevent=\"comName='register'\">注册</a>\n\n    <component :is=\"comName\"></component>\n</div>\n<template id=\"login\">\n    <h3>这是登录表单</h3>\n</template>\n<template id=\"register\">\n\t<h3>这是注册表单</h3>\n</template>\n<script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n<script type=\"text/javascript\">\n// 创建登录组件\nVue.component('login', {\n\ttemplate: '#login'\n});\n\n// 创建注册组件\nVue.component('register', {\n\ttemplate: '#register'\n})\n\nnew Vue({\n    el: '#app',\n    data: {\n    \tcomName: 'login'\n    },\n    methods: {}\n});\n</script>\n```\n即使用Vue提供的component，它能够实现自动对组件进行展示和隐藏，通过:is='组件名称'。\n\n##### 父子组件间传值\n**父组件**给子组件传值\n\n父组件给子组件传值，即实现在子组件中调用父组件中的methods或是获取父组件中的data.\n\n**传参数**\n\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1></com1>\n    </div>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tmsg: '这是父组件data值'\n        },\n        methods: {\n        \tshow(){\n        \t\tconsole.log(\"这是父组件的show方法\");\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '<h2>这是子组件</h2>'\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n如上，当我们直接在子组件中引用父组件data中定义的msg数据，将上面的修改为：\n```bash\ncom1: {\n\ttemplate: '<h2>这是子组件--{{msg}}</h2>'\n}\n```\n那么就会报错。所以就证实了默认在子组件中不能访问父组件中的data或methods。\n为了解决子组件获取父组件数据，Vue提供了以下方式获取：\n- 1、父组件在引用子组件的时候，通过属性绑定的方式v-bind:，把需要传递给子组件的数据以属性绑定的形式传递到子组件内部，供子组件使用。\n- 2、在子组件中，通过props: []获取到父组件传递过来的数据；这样就完成了父组件向子组件传值\n\n**实例：**\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 :fatoson=\"msg\"></com1>\n    </div>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tmsg: '这是父组件data值'\n        },\n        methods: {},\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '<h2>这是子组件--{{fatoson}}</h2>',\n        \t\tprops: ['fatoson']\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n\n如上，我们在子组件实例中使用了v-bind绑定了一个参数fatoson，其值是：msg即在父组件data中定义的值；那么就相当于父组件的一个data数据被Vue绑定到了子组件实例中，且父组件data值的别名是fatoson，那么在子组件中通过props: []属性就能获取到这个别名，然后就实现了父组件向子组件传值。需要注意以下：\n- 1、我们可以将为子组件绑定的参数名称是父组件值的别名。即此时msg相当于fatoson。\n- 2、注意命名中若是驼峰命名，在HTML中必须用-替换。\n- 3、注意props是Vue为父组将向子组件传值提供的一个参数，且他是唯一的数组类型的。\n- 4、注意子组件通过props获取到的父组件的值是只读的，即不能修改。\n\n**传方法**\n上面讲了父组件给子组件传递普通的参数，下面我们将了解到父组件怎样给子组件传递方法。\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 @open=\"show\"></com1>\n    </div>\n    <template id=\"tmp\">\n    \t<div>\n    \t\t<h2>这是子组件</h2>\n    \t\t<input type=\"button\" @click=\"myclick\" value=\"子组件按钮，点击触发父组件方法\"/>\n    \t</div>\n    </template>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tmsg: '这是父组件data值'\n        },\n        methods: {\n        \tshow(){\n        \t\tconsole.log(\"这是父组件的show方法\");\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '#tmp',\n        \t\tprops: ['fatoson'],\n        \t\tmethods: {\n        \t\t\tmyclick(){\n       \t\t \t\t\tthis.$emit('open');\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n\n**解释：**\n- 1、这里子组件的template数据引用外部的&lt;template&gt;&lt;/template&gt;中的HTML代码。\n- 2、与传值思路相同，传递方法也需要在子组件实例中使用v-on即@来绑定方法，方法别名@open，方法的值是show是在父组件中定义的方法名。\n- 3、与传值思路相同，传值使用了props来接受传递的参数，那么传方法提供了$emit()元素\n\n**综合**\n上面讲的父组件向子组件传递方法，那么既然是方法就肯定能传递方法参数。我们只需要在父组件方法中指定值名称即可\n```bash\n@子组件接收的方法别名=\"父组件中的方法(父组件中的参数值或data)\"\n```\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 @open=\"show(fatosonval)\"></com1>\n    </div>\n    <template id=\"tmp\">\n    \t<div>\n    \t\t<h2>这是子组件</h2>\n    \t\t<input type=\"button\" @click=\"myclick\" value=\"子组件按钮，点击触发父组件方法\"/>\n    \t</div>\n    </template>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tfatosonval: {\n        \t\tid: '1',\n        \t\tname: 'Loonycoder'\n        \t}\n        },\n        methods: {\n        \tshow(data){\n        \t\tconsole.log(data);\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '#tmp',\n        \t\tmethods: {\n        \t\t\tmyclick(){\n       \t\t \t\t\tthis.$emit('open');\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n\n**子组件**给父组件传值\n即实现在父组件中调用子组件中的方法\n```bash\n<body>\n\t<!-- 父组件实例 -->\n    <div id=\"app\">\n\t\t\n        <!-- 子组件实例 -->\n        <com1 @open=\"show\"></com1>\n    </div>\n    <template id=\"tmp\">\n    \t<div>\n    \t\t<h2>这是子组件</h2>\n    \t\t<input type=\"button\" @click=\"myclick\" value=\"子组件按钮，点击触发父组件方法\"/>\n    \t</div>\n    </template>\n\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n\n    new Vue({\n        el: '#app',\n        data: {\n        \tfatosonval: null\n        },\n        methods: {\n        \tshow(data){\n        \t\tconsole.log(data);\n        \t}\n        },\n\n        // 子组件\n        components: {\n        \tcom1: {\n        \t\ttemplate: '#tmp',\n        \t\tdata(){\n        \t\t\treturn {\n        \t\t\t\tsonval: { name: 'Loonycoder', age: 24 }\n        \t\t\t}\n        \t\t},\n        \t\tmethods: {\n        \t\t\tmyclick(){\n       \t\t \t\t\tthis.$emit('open', this.sonval);\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    });\n    </script>\n</body>\n```\n之前我们实现父组件向子组件传值的时候，需要在@open()中指定父组件中的data，而子组件给父组件传值的时候就不需要再指定了，而是直接在调用子组件中的open（这是父组件方法的别名），将子组件的值写进$emit('方法别名', data参数)中即可。\n\n##### Vue获取DOM元素和组件\n首先我们需要明白的就是Vue并不提倡我们操作DOM元素，Vue的宗旨就是让我们只关心业务逻辑。\n那么通常我们需要获取一个如&lt;h2&gt;&lt;/h2&gt;中的值，采用原生JS通常需要先为tag标签定义一个id属性，然后通过JS代码document.getElementById('id').innterText来获取到&lt;h2&gt;中的文本数据，而Vue也实现了操作原生DOM的功能：\n- 在需要获取的HTML标签中指定`ref`属性，其值可自定义。\n- 在Vue实例中，使用`this.$refs.指定的值`来获取DOM对象，进行操作。\n```bash\n<h2 ref=\"h2\">这是h2的文本数据</h2>\n\nconsole.log(this.$refs.h2.innerText);\n```\n**通过$refs还能轻易获取子组件中的data和methods数据**\n首先需要为子组件引用实例定义ref=\"com1\"属性，然后在Vue实例中通过this.$refs.com1即可获取子组件中的所有对象，即还能获取到子组件中的data和methods\n实例：\n```bash\n<body>\n    <!-- 父组件实例 -->\n    <div id=\"app\">\n        <!-- 子组件实例 -->\n        <com1 ref=\"com1\"></com1>\n        <input type=\"button\" @click=\"show\" value=\"获取元素\">\n\n        <h2 ref=\"h2\">这是父组件</h2>\n    </div>\n    <template id=\"tmp\">\n        <div>\n            <h2>这是子组件</h2>\n        </div>\n    </template>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\">\n    new Vue({\n        el: '#app',\n        methods: {\n            show(){\n                // console.log(this.$refs.h2.innerText);\n                // console.log(this.$refs.com1); //获取子组件中的所有实例对象\n                // console.log(this.$refs.com1.sonval); //获取子组件中定义的data值\n                console.log(this.$refs.com1.sonshow()); //调用子组件中定义的方法\n\n            }\n        },\n\n        // 子组件\n        components: {\n            com1: {\n                template: '#tmp',\n                data() {\n                    return {\n                        sonval: { name: 'Loonycoder', age: 24 }\n                    }\n                },\n                methods: {\n                    sonshow() {\n                        console.log('子组件的方法');\n                    }\n                }\n            }\n        }\n    });\n    </script>\n</body>\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"Vue3","published":1,"updated":"2020-02-12T10:54:51.896Z","_id":"ck6ivxamv0000n8s6a1re1k3g","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Vue创建组件\"><a href=\"#Vue创建组件\" class=\"headerlink\" title=\"Vue创建组件\"></a>Vue创建组件</h4><h5 id=\"什么是组件\"><a href=\"#什么是组件\" class=\"headerlink\" title=\"什么是组件\"></a>什么是组件</h5><p>什么是组件？组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样地方功能，就可以去调用对应的组件即可。<br>组件化和模块化的区别：</p>\n<ul>\n<li>模块化：是从代码逻辑的角度进行划分的，方便代码分层开发，保证每个功能模块的只能单一；</li>\n<li>组件化：是从UI界面的角度进行划分的；前端的组件化，方便了UI组件的重用；</li>\n</ul>\n<h5 id=\"定义Vue组件\"><a href=\"#定义Vue组件\" class=\"headerlink\" title=\"定义Vue组件\"></a>定义Vue组件</h5><p><strong>方式一</strong><br>1、使用Vue.extend来创建全局的Vue组件<br>2、通过template属性来指定组件要展示的HTML结构<br>3、通过Vue.component()定义全局组件<br>4、在HTML指定位置通过Tag标签的形式应用你的组件，组件的名称即是tag标签的名称</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t&lt;!-- 组件的名称即为对应tag标签的名称 --&gt;</span><br><span class=\"line\">\t&lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t// 创建组件</span><br><span class=\"line\">\tvar com1 = Vue.extend(&#123;</span><br><span class=\"line\">\t\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用Vue.component(<span class=\"string\">'组件的名称'</span>, 创建出来的组件模板对象)，定义全局组件</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'mycom1'</span>, com1);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li>用Vue.component()定义组件名称的时候有两种命名方式：1、驼峰命名：Xxx；2、xxx。注意，使用驼峰命名时，tag标签不能使用驼峰名称，应将相应的大写字母替换为-加小写字母，例如：Vue.component(‘myCom’, com1)，那么tag标签应为： &lt;my-com&gt; &lt;/my-com&gt;</li>\n</ul>\n<p><strong>方式二</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 组件的名称即为对应tag标签的名称 --&gt;</span><br><span class=\"line\">&lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用Vue.component(<span class=\"string\">'组件的名称'</span>, 创建出来的组件模板对象)，定义全局组件</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\t\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class=\"line\">\t&#125;));</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>方式二就像是方式一的简化版，但是注意：<br>在template中定义的内容只能存在一个根节点元素，即上面例子中template中不能出现和 &lt;h3&gt;平级的标签。<br>比如下面这种写法就是<strong>错误的</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;&lt;span&gt;&lt;/span&gt;'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>解决办法就是，外层嵌套一个根标签就行了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;div&gt;&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p><strong>方式三</strong><br>1、JavaScript中仍使用Vue.component来定义全局组件，和方式二相似，但是里面不再是template: ‘HTML结构’了，而是引用一个外部标签的id值，即template:’id’。<br>2、在被Vue实例控制的app外面，定义&lt;template id=”id”&gt;你的HTML结构&lt;/template&gt;<br>这种方式的好处就是是就组件代码都是定义在HTML结构中的，有智能代码提示；而JavaScript中定义组件仅是写一个引用。<br>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t&lt;!-- 页面引用 --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">\t&lt;!-- 比如仅存在一个根节点元素 --&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;&lt;/h1&gt;&gt;</span><br><span class=\"line\">\t\t&lt;h2&gt;&lt;/h2&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//JavaScript部分</span><br><span class=\"line\">Vue.component(<span class=\"string\">'mycom'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#tmp'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>定义私</strong>有组件<br>除了上面讲到的定义全局组件，我们也可以定义私有组件，使用components: {}函数。<br>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;tem&gt;&lt;/tem&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;这是私有组件&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        tem: &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'#tmp'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"组件元素\"><a href=\"#组件元素\" class=\"headerlink\" title=\"组件元素\"></a>组件元素</h5><p><strong>组件的</strong>data<br>在组件中，同样可以有自己的data数据，但是用法和Vue实例中的data用法有所不同：<br>1、组件中的data必须是一个方法，即</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"title\">function</span></span>()&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>2、组件中的data方法必须返回一个Object对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">Vue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\tdata: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">\t\t\tmsg: <span class=\"string\">'这是组件的data'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件-- &#123;&#123;msg&#125;&#125;&lt;/h3&gt;'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>组件的</strong>切换<br>在遇到登录注册表单时，通常我们需要对两个按钮进行切换实现显示不同的表单，那么Vue中的组件切换正符合了这个功能要求。</p>\n<p><strong>方式一</strong></p>\n<p>可以使用Vue提供的v-if和v-else来实现两个组件间的切换，但是，仅支持切换两个组件</p>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"flag=true\"</span>&gt;登录&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"flag=false\"</span>&gt;注册&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;login v-if=<span class=\"string\">\"flag\"</span>&gt;&lt;/login&gt;</span><br><span class=\"line\">    &lt;register v-else=<span class=\"string\">\"flag\"</span>&gt;&lt;/register&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"login\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;这是登录表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"register\"</span>&gt;</span><br><span class=\"line\">\t&lt;h3&gt;这是注册表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 创建登录组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'login'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#login'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建注册组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'register'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#register'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tflag: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>定义flag参数，当flag=true就显示组件，当flar=false就隐藏组件</p>\n<p><strong>方式二</strong></p>\n<p>Vue提供了component来展示对应名称的组件。其中component是一个占位符，:is属性，可以用来指定要展示的组件名称</p>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"comName='login'\"</span>&gt;登录&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"comName='register'\"</span>&gt;注册&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;component :is=<span class=\"string\">\"comName\"</span>&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"login\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;这是登录表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"register\"</span>&gt;</span><br><span class=\"line\">\t&lt;h3&gt;这是注册表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 创建登录组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'login'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#login'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建注册组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'register'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#register'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tcomName: <span class=\"string\">'login'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>即使用Vue提供的component，它能够实现自动对组件进行展示和隐藏，通过:is=’组件名称’。</p>\n<h5 id=\"父子组件间传值\"><a href=\"#父子组件间传值\" class=\"headerlink\" title=\"父子组件间传值\"></a>父子组件间传值</h5><p><strong>父组件</strong>给子组件传值</p>\n<p>父组件给子组件传值，即实现在子组件中调用父组件中的methods或是获取父组件中的data.</p>\n<p><strong>传参数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tmsg: <span class=\"string\">'这是父组件data值'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">show</span></span>()&#123;</span><br><span class=\"line\">        \t\tconsole.log(<span class=\"string\">\"这是父组件的show方法\"</span>);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'&lt;h2&gt;这是子组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>如上，当我们直接在子组件中引用父组件data中定义的msg数据，将上面的修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com1: &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;h2&gt;这是子组件--&#123;&#123;msg&#125;&#125;&lt;/h2&gt;'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么就会报错。所以就证实了默认在子组件中不能访问父组件中的data或methods。<br>为了解决子组件获取父组件数据，Vue提供了以下方式获取：</p>\n<ul>\n<li>1、父组件在引用子组件的时候，通过属性绑定的方式v-bind:，把需要传递给子组件的数据以属性绑定的形式传递到子组件内部，供子组件使用。</li>\n<li>2、在子组件中，通过props: []获取到父组件传递过来的数据；这样就完成了父组件向子组件传值</li>\n</ul>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 :fatoson=<span class=\"string\">\"msg\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tmsg: <span class=\"string\">'这是父组件data值'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'&lt;h2&gt;这是子组件--&#123;&#123;fatoson&#125;&#125;&lt;/h2&gt;'</span>,</span><br><span class=\"line\">        \t\tprops: [<span class=\"string\">'fatoson'</span>]</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们在子组件实例中使用了v-bind绑定了一个参数fatoson，其值是：msg即在父组件data中定义的值；那么就相当于父组件的一个data数据被Vue绑定到了子组件实例中，且父组件data值的别名是fatoson，那么在子组件中通过props: []属性就能获取到这个别名，然后就实现了父组件向子组件传值。需要注意以下：</p>\n<ul>\n<li>1、我们可以将为子组件绑定的参数名称是父组件值的别名。即此时msg相当于fatoson。</li>\n<li>2、注意命名中若是驼峰命名，在HTML中必须用-替换。</li>\n<li>3、注意props是Vue为父组将向子组件传值提供的一个参数，且他是唯一的数组类型的。</li>\n<li>4、注意子组件通过props获取到的父组件的值是只读的，即不能修改。</li>\n</ul>\n<p><strong>传方法</strong><br>上面讲了父组件给子组件传递普通的参数，下面我们将了解到父组件怎样给子组件传递方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 @open=<span class=\"string\">\"show\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    \t&lt;div&gt;</span><br><span class=\"line\">    \t\t&lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">    \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"myclick\"</span> value=<span class=\"string\">\"子组件按钮，点击触发父组件方法\"</span>/&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tmsg: <span class=\"string\">'这是父组件data值'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">show</span></span>()&#123;</span><br><span class=\"line\">        \t\tconsole.log(<span class=\"string\">\"这是父组件的show方法\"</span>);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">        \t\tprops: [<span class=\"string\">'fatoson'</span>],</span><br><span class=\"line\">        \t\tmethods: &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"function\"><span class=\"title\">myclick</span></span>()&#123;</span><br><span class=\"line\">       \t\t \t\t\tthis.<span class=\"variable\">$emit</span>(<span class=\"string\">'open'</span>);</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<ul>\n<li>1、这里子组件的template数据引用外部的&lt;template&gt;&lt;/template&gt;中的HTML代码。</li>\n<li>2、与传值思路相同，传递方法也需要在子组件实例中使用v-on即@来绑定方法，方法别名@open，方法的值是show是在父组件中定义的方法名。</li>\n<li>3、与传值思路相同，传值使用了props来接受传递的参数，那么传方法提供了$emit()元素</li>\n</ul>\n<p><strong>综合</strong><br>上面讲的父组件向子组件传递方法，那么既然是方法就肯定能传递方法参数。我们只需要在父组件方法中指定值名称即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@子组件接收的方法别名=<span class=\"string\">\"父组件中的方法(父组件中的参数值或data)\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 @open=<span class=\"string\">\"show(fatosonval)\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    \t&lt;div&gt;</span><br><span class=\"line\">    \t\t&lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">    \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"myclick\"</span> value=<span class=\"string\">\"子组件按钮，点击触发父组件方法\"</span>/&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tfatosonval: &#123;</span><br><span class=\"line\">        \t\tid: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        \t\tname: <span class=\"string\">'Loonycoder'</span></span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \tshow(data)&#123;</span><br><span class=\"line\">        \t\tconsole.log(data);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">        \t\tmethods: &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"function\"><span class=\"title\">myclick</span></span>()&#123;</span><br><span class=\"line\">       \t\t \t\t\tthis.<span class=\"variable\">$emit</span>(<span class=\"string\">'open'</span>);</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>子组件</strong>给父组件传值<br>即实现在父组件中调用子组件中的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 @open=<span class=\"string\">\"show\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    \t&lt;div&gt;</span><br><span class=\"line\">    \t\t&lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">    \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"myclick\"</span> value=<span class=\"string\">\"子组件按钮，点击触发父组件方法\"</span>/&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tfatosonval: null</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \tshow(data)&#123;</span><br><span class=\"line\">        \t\tconsole.log(data);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">        \t\t<span class=\"function\"><span class=\"title\">data</span></span>()&#123;</span><br><span class=\"line\">        \t\t\t<span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        \t\t\t\tsonval: &#123; name: <span class=\"string\">'Loonycoder'</span>, age: 24 &#125;</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;,</span><br><span class=\"line\">        \t\tmethods: &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"function\"><span class=\"title\">myclick</span></span>()&#123;</span><br><span class=\"line\">       \t\t \t\t\tthis.<span class=\"variable\">$emit</span>(<span class=\"string\">'open'</span>, this.sonval);</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>之前我们实现父组件向子组件传值的时候，需要在@open()中指定父组件中的data，而子组件给父组件传值的时候就不需要再指定了，而是直接在调用子组件中的open（这是父组件方法的别名），将子组件的值写进$emit(‘方法别名’, data参数)中即可。</p>\n<h5 id=\"Vue获取DOM元素和组件\"><a href=\"#Vue获取DOM元素和组件\" class=\"headerlink\" title=\"Vue获取DOM元素和组件\"></a>Vue获取DOM元素和组件</h5><p>首先我们需要明白的就是Vue并不提倡我们操作DOM元素，Vue的宗旨就是让我们只关心业务逻辑。<br>那么通常我们需要获取一个如&lt;h2&gt;&lt;/h2&gt;中的值，采用原生JS通常需要先为tag标签定义一个id属性，然后通过JS代码document.getElementById(‘id’).innterText来获取到&lt;h2&gt;中的文本数据，而Vue也实现了操作原生DOM的功能：</p>\n<ul>\n<li>在需要获取的HTML标签中指定<code>ref</code>属性，其值可自定义。</li>\n<li>在Vue实例中，使用<code>this.$refs.指定的值</code>来获取DOM对象，进行操作。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 ref=<span class=\"string\">\"h2\"</span>&gt;这是h2的文本数据&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(this.<span class=\"variable\">$refs</span>.h2.innerText);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>通过$refs还能轻易获取子组件中的data和methods数据</strong><br>首先需要为子组件引用实例定义ref=”com1”属性，然后在Vue实例中通过this.$refs.com1即可获取子组件中的所有对象，即还能获取到子组件中的data和methods<br>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 ref=<span class=\"string\">\"com1\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"show\"</span> value=<span class=\"string\">\"获取元素\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;h2 ref=<span class=\"string\">\"h2\"</span>&gt;这是父组件&lt;/h2&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">show</span></span>()&#123;</span><br><span class=\"line\">                // console.log(this.<span class=\"variable\">$refs</span>.h2.innerText);</span><br><span class=\"line\">                // console.log(this.<span class=\"variable\">$refs</span>.com1); //获取子组件中的所有实例对象</span><br><span class=\"line\">                // console.log(this.<span class=\"variable\">$refs</span>.com1.sonval); //获取子组件中定义的data值</span><br><span class=\"line\">                console.log(this.<span class=\"variable\">$refs</span>.com1.sonshow()); //调用子组件中定义的方法</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">            com1: &#123;</span><br><span class=\"line\">                template: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">                <span class=\"function\"><span class=\"title\">data</span></span>() &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">                        sonval: &#123; name: <span class=\"string\">'Loonycoder'</span>, age: 24 &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"title\">sonshow</span></span>() &#123;</span><br><span class=\"line\">                        console.log(<span class=\"string\">'子组件的方法'</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Vue创建组件\"><a href=\"#Vue创建组件\" class=\"headerlink\" title=\"Vue创建组件\"></a>Vue创建组件</h4><h5 id=\"什么是组件\"><a href=\"#什么是组件\" class=\"headerlink\" title=\"什么是组件\"></a>什么是组件</h5><p>什么是组件？组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样地方功能，就可以去调用对应的组件即可。<br>组件化和模块化的区别：</p>\n<ul>\n<li>模块化：是从代码逻辑的角度进行划分的，方便代码分层开发，保证每个功能模块的只能单一；</li>\n<li>组件化：是从UI界面的角度进行划分的；前端的组件化，方便了UI组件的重用；</li>\n</ul>\n<h5 id=\"定义Vue组件\"><a href=\"#定义Vue组件\" class=\"headerlink\" title=\"定义Vue组件\"></a>定义Vue组件</h5><p><strong>方式一</strong><br>1、使用Vue.extend来创建全局的Vue组件<br>2、通过template属性来指定组件要展示的HTML结构<br>3、通过Vue.component()定义全局组件<br>4、在HTML指定位置通过Tag标签的形式应用你的组件，组件的名称即是tag标签的名称</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t&lt;!-- 组件的名称即为对应tag标签的名称 --&gt;</span><br><span class=\"line\">\t&lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t// 创建组件</span><br><span class=\"line\">\tvar com1 = Vue.extend(&#123;</span><br><span class=\"line\">\t\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用Vue.component(<span class=\"string\">'组件的名称'</span>, 创建出来的组件模板对象)，定义全局组件</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'mycom1'</span>, com1);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li>用Vue.component()定义组件名称的时候有两种命名方式：1、驼峰命名：Xxx；2、xxx。注意，使用驼峰命名时，tag标签不能使用驼峰名称，应将相应的大写字母替换为-加小写字母，例如：Vue.component(‘myCom’, com1)，那么tag标签应为： &lt;my-com&gt; &lt;/my-com&gt;</li>\n</ul>\n<p><strong>方式二</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 组件的名称即为对应tag标签的名称 --&gt;</span><br><span class=\"line\">&lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用Vue.component(<span class=\"string\">'组件的名称'</span>, 创建出来的组件模板对象)，定义全局组件</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\t\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class=\"line\">\t&#125;));</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>方式二就像是方式一的简化版，但是注意：<br>在template中定义的内容只能存在一个根节点元素，即上面例子中template中不能出现和 &lt;h3&gt;平级的标签。<br>比如下面这种写法就是<strong>错误的</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;&lt;span&gt;&lt;/span&gt;'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>解决办法就是，外层嵌套一个根标签就行了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;div&gt;&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p><strong>方式三</strong><br>1、JavaScript中仍使用Vue.component来定义全局组件，和方式二相似，但是里面不再是template: ‘HTML结构’了，而是引用一个外部标签的id值，即template:’id’。<br>2、在被Vue实例控制的app外面，定义&lt;template id=”id”&gt;你的HTML结构&lt;/template&gt;<br>这种方式的好处就是是就组件代码都是定义在HTML结构中的，有智能代码提示；而JavaScript中定义组件仅是写一个引用。<br>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t&lt;!-- 页面引用 --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">\t&lt;!-- 比如仅存在一个根节点元素 --&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;&lt;/h1&gt;&gt;</span><br><span class=\"line\">\t\t&lt;h2&gt;&lt;/h2&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//JavaScript部分</span><br><span class=\"line\">Vue.component(<span class=\"string\">'mycom'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#tmp'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>定义私</strong>有组件<br>除了上面讲到的定义全局组件，我们也可以定义私有组件，使用components: {}函数。<br>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;tem&gt;&lt;/tem&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;这是私有组件&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        tem: &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'#tmp'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"组件元素\"><a href=\"#组件元素\" class=\"headerlink\" title=\"组件元素\"></a>组件元素</h5><p><strong>组件的</strong>data<br>在组件中，同样可以有自己的data数据，但是用法和Vue实例中的data用法有所不同：<br>1、组件中的data必须是一个方法，即</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"title\">function</span></span>()&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>2、组件中的data方法必须返回一个Object对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">Vue.component(<span class=\"string\">'mycom1'</span>, Vue.extend(&#123;</span><br><span class=\"line\">\tdata: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">\t\t\tmsg: <span class=\"string\">'这是组件的data'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;h3&gt;这是使用Vue.extend 创建的组件-- &#123;&#123;msg&#125;&#125;&lt;/h3&gt;'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>组件的</strong>切换<br>在遇到登录注册表单时，通常我们需要对两个按钮进行切换实现显示不同的表单，那么Vue中的组件切换正符合了这个功能要求。</p>\n<p><strong>方式一</strong></p>\n<p>可以使用Vue提供的v-if和v-else来实现两个组件间的切换，但是，仅支持切换两个组件</p>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"flag=true\"</span>&gt;登录&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"flag=false\"</span>&gt;注册&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;login v-if=<span class=\"string\">\"flag\"</span>&gt;&lt;/login&gt;</span><br><span class=\"line\">    &lt;register v-else=<span class=\"string\">\"flag\"</span>&gt;&lt;/register&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"login\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;这是登录表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"register\"</span>&gt;</span><br><span class=\"line\">\t&lt;h3&gt;这是注册表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 创建登录组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'login'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#login'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建注册组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'register'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#register'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tflag: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>定义flag参数，当flag=true就显示组件，当flar=false就隐藏组件</p>\n<p><strong>方式二</strong></p>\n<p>Vue提供了component来展示对应名称的组件。其中component是一个占位符，:is属性，可以用来指定要展示的组件名称</p>\n<p>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"comName='login'\"</span>&gt;登录&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> @click.prevent=<span class=\"string\">\"comName='register'\"</span>&gt;注册&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;component :is=<span class=\"string\">\"comName\"</span>&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"login\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;这是登录表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"register\"</span>&gt;</span><br><span class=\"line\">\t&lt;h3&gt;这是注册表单&lt;/h3&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">// 创建登录组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'login'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#login'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建注册组件</span><br><span class=\"line\">Vue.component(<span class=\"string\">'register'</span>, &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'#register'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tcomName: <span class=\"string\">'login'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>即使用Vue提供的component，它能够实现自动对组件进行展示和隐藏，通过:is=’组件名称’。</p>\n<h5 id=\"父子组件间传值\"><a href=\"#父子组件间传值\" class=\"headerlink\" title=\"父子组件间传值\"></a>父子组件间传值</h5><p><strong>父组件</strong>给子组件传值</p>\n<p>父组件给子组件传值，即实现在子组件中调用父组件中的methods或是获取父组件中的data.</p>\n<p><strong>传参数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tmsg: <span class=\"string\">'这是父组件data值'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">show</span></span>()&#123;</span><br><span class=\"line\">        \t\tconsole.log(<span class=\"string\">\"这是父组件的show方法\"</span>);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'&lt;h2&gt;这是子组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>如上，当我们直接在子组件中引用父组件data中定义的msg数据，将上面的修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com1: &#123;</span><br><span class=\"line\">\ttemplate: <span class=\"string\">'&lt;h2&gt;这是子组件--&#123;&#123;msg&#125;&#125;&lt;/h2&gt;'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么就会报错。所以就证实了默认在子组件中不能访问父组件中的data或methods。<br>为了解决子组件获取父组件数据，Vue提供了以下方式获取：</p>\n<ul>\n<li>1、父组件在引用子组件的时候，通过属性绑定的方式v-bind:，把需要传递给子组件的数据以属性绑定的形式传递到子组件内部，供子组件使用。</li>\n<li>2、在子组件中，通过props: []获取到父组件传递过来的数据；这样就完成了父组件向子组件传值</li>\n</ul>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 :fatoson=<span class=\"string\">\"msg\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tmsg: <span class=\"string\">'这是父组件data值'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'&lt;h2&gt;这是子组件--&#123;&#123;fatoson&#125;&#125;&lt;/h2&gt;'</span>,</span><br><span class=\"line\">        \t\tprops: [<span class=\"string\">'fatoson'</span>]</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们在子组件实例中使用了v-bind绑定了一个参数fatoson，其值是：msg即在父组件data中定义的值；那么就相当于父组件的一个data数据被Vue绑定到了子组件实例中，且父组件data值的别名是fatoson，那么在子组件中通过props: []属性就能获取到这个别名，然后就实现了父组件向子组件传值。需要注意以下：</p>\n<ul>\n<li>1、我们可以将为子组件绑定的参数名称是父组件值的别名。即此时msg相当于fatoson。</li>\n<li>2、注意命名中若是驼峰命名，在HTML中必须用-替换。</li>\n<li>3、注意props是Vue为父组将向子组件传值提供的一个参数，且他是唯一的数组类型的。</li>\n<li>4、注意子组件通过props获取到的父组件的值是只读的，即不能修改。</li>\n</ul>\n<p><strong>传方法</strong><br>上面讲了父组件给子组件传递普通的参数，下面我们将了解到父组件怎样给子组件传递方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 @open=<span class=\"string\">\"show\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    \t&lt;div&gt;</span><br><span class=\"line\">    \t\t&lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">    \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"myclick\"</span> value=<span class=\"string\">\"子组件按钮，点击触发父组件方法\"</span>/&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tmsg: <span class=\"string\">'这是父组件data值'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \t<span class=\"function\"><span class=\"title\">show</span></span>()&#123;</span><br><span class=\"line\">        \t\tconsole.log(<span class=\"string\">\"这是父组件的show方法\"</span>);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">        \t\tprops: [<span class=\"string\">'fatoson'</span>],</span><br><span class=\"line\">        \t\tmethods: &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"function\"><span class=\"title\">myclick</span></span>()&#123;</span><br><span class=\"line\">       \t\t \t\t\tthis.<span class=\"variable\">$emit</span>(<span class=\"string\">'open'</span>);</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<ul>\n<li>1、这里子组件的template数据引用外部的&lt;template&gt;&lt;/template&gt;中的HTML代码。</li>\n<li>2、与传值思路相同，传递方法也需要在子组件实例中使用v-on即@来绑定方法，方法别名@open，方法的值是show是在父组件中定义的方法名。</li>\n<li>3、与传值思路相同，传值使用了props来接受传递的参数，那么传方法提供了$emit()元素</li>\n</ul>\n<p><strong>综合</strong><br>上面讲的父组件向子组件传递方法，那么既然是方法就肯定能传递方法参数。我们只需要在父组件方法中指定值名称即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@子组件接收的方法别名=<span class=\"string\">\"父组件中的方法(父组件中的参数值或data)\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 @open=<span class=\"string\">\"show(fatosonval)\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    \t&lt;div&gt;</span><br><span class=\"line\">    \t\t&lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">    \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"myclick\"</span> value=<span class=\"string\">\"子组件按钮，点击触发父组件方法\"</span>/&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tfatosonval: &#123;</span><br><span class=\"line\">        \t\tid: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        \t\tname: <span class=\"string\">'Loonycoder'</span></span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \tshow(data)&#123;</span><br><span class=\"line\">        \t\tconsole.log(data);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">        \t\tmethods: &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"function\"><span class=\"title\">myclick</span></span>()&#123;</span><br><span class=\"line\">       \t\t \t\t\tthis.<span class=\"variable\">$emit</span>(<span class=\"string\">'open'</span>);</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>子组件</strong>给父组件传值<br>即实现在父组件中调用子组件中的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 @open=<span class=\"string\">\"show\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">    \t&lt;div&gt;</span><br><span class=\"line\">    \t\t&lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">    \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"myclick\"</span> value=<span class=\"string\">\"子组件按钮，点击触发父组件方法\"</span>/&gt;</span><br><span class=\"line\">    \t&lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">        \tfatosonval: null</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">        \tshow(data)&#123;</span><br><span class=\"line\">        \t\tconsole.log(data);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">        \tcom1: &#123;</span><br><span class=\"line\">        \t\ttemplate: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">        \t\t<span class=\"function\"><span class=\"title\">data</span></span>()&#123;</span><br><span class=\"line\">        \t\t\t<span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">        \t\t\t\tsonval: &#123; name: <span class=\"string\">'Loonycoder'</span>, age: 24 &#125;</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;,</span><br><span class=\"line\">        \t\tmethods: &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"function\"><span class=\"title\">myclick</span></span>()&#123;</span><br><span class=\"line\">       \t\t \t\t\tthis.<span class=\"variable\">$emit</span>(<span class=\"string\">'open'</span>, this.sonval);</span><br><span class=\"line\">        \t\t\t&#125;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>之前我们实现父组件向子组件传值的时候，需要在@open()中指定父组件中的data，而子组件给父组件传值的时候就不需要再指定了，而是直接在调用子组件中的open（这是父组件方法的别名），将子组件的值写进$emit(‘方法别名’, data参数)中即可。</p>\n<h5 id=\"Vue获取DOM元素和组件\"><a href=\"#Vue获取DOM元素和组件\" class=\"headerlink\" title=\"Vue获取DOM元素和组件\"></a>Vue获取DOM元素和组件</h5><p>首先我们需要明白的就是Vue并不提倡我们操作DOM元素，Vue的宗旨就是让我们只关心业务逻辑。<br>那么通常我们需要获取一个如&lt;h2&gt;&lt;/h2&gt;中的值，采用原生JS通常需要先为tag标签定义一个id属性，然后通过JS代码document.getElementById(‘id’).innterText来获取到&lt;h2&gt;中的文本数据，而Vue也实现了操作原生DOM的功能：</p>\n<ul>\n<li>在需要获取的HTML标签中指定<code>ref</code>属性，其值可自定义。</li>\n<li>在Vue实例中，使用<code>this.$refs.指定的值</code>来获取DOM对象，进行操作。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 ref=<span class=\"string\">\"h2\"</span>&gt;这是h2的文本数据&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(this.<span class=\"variable\">$refs</span>.h2.innerText);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>通过$refs还能轻易获取子组件中的data和methods数据</strong><br>首先需要为子组件引用实例定义ref=”com1”属性，然后在Vue实例中通过this.$refs.com1即可获取子组件中的所有对象，即还能获取到子组件中的data和methods<br>实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 父组件实例 --&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;!-- 子组件实例 --&gt;</span><br><span class=\"line\">        &lt;com1 ref=<span class=\"string\">\"com1\"</span>&gt;&lt;/com1&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> @click=<span class=\"string\">\"show\"</span> value=<span class=\"string\">\"获取元素\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;h2 ref=<span class=\"string\">\"h2\"</span>&gt;这是父组件&lt;/h2&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">show</span></span>()&#123;</span><br><span class=\"line\">                // console.log(this.<span class=\"variable\">$refs</span>.h2.innerText);</span><br><span class=\"line\">                // console.log(this.<span class=\"variable\">$refs</span>.com1); //获取子组件中的所有实例对象</span><br><span class=\"line\">                // console.log(this.<span class=\"variable\">$refs</span>.com1.sonval); //获取子组件中定义的data值</span><br><span class=\"line\">                console.log(this.<span class=\"variable\">$refs</span>.com1.sonshow()); //调用子组件中定义的方法</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // 子组件</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">            com1: &#123;</span><br><span class=\"line\">                template: <span class=\"string\">'#tmp'</span>,</span><br><span class=\"line\">                <span class=\"function\"><span class=\"title\">data</span></span>() &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">                        sonval: &#123; name: <span class=\"string\">'Loonycoder'</span>, age: 24 &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"title\">sonshow</span></span>() &#123;</span><br><span class=\"line\">                        console.log(<span class=\"string\">'子组件的方法'</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Vue路由","date":"2019-12-11T16:00:00.000Z","_content":"\n### Vue路由\n\n#### 什么是Vue路由？\n\n- **后端路由：**即请求的URL地址都对应后端的接口，请求URL响应对应的服务器的资源。\n- **前端路由：**对于单页面程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以单页面程序中的页面跳转主要通过hash实现。\n\n#### 入门\n\n##### 导入类库\n首先需要导入vue-router组件类库：\n```bash\n<script type=\"text/javascript\" src=\"../lib/vue-router.js\"></script>\n```\n当导入类库后，window全局对象中就存在了一个路由的构造函数： VueRouter；就像导入Vue类库后存在一个Vue的构造函数一样，我们能够通过new VueRouter的方式实例化路由对象。\n如果你使用了new VueRouter({});构造函数来实例化了一个路由对象，你会发现浏览器路径中会出现#/路径，这个路径就是前面讲到的URL中的hash，他并不会向后端发送任何请求，而仅仅是作页面跳转，如果你#/后拼接了一个不存在的路径，自然也不会进行跳转，页面也不会发送任何请求。\n**实例：**\n![vue](/images/vue15.png)\n\n##### 基本使用\n上面我们讲到了使用new VueRouter({})的方式实例化一个路由对象，其中包含几个参数：\n```bash\n<!-- HTML -->\n<div id=\"app\">\n    \n    <!-- 给路由对象创建一个容器，包裹在父组件`app`内\n        相当于一个占位符，路由规则匹配到的组件内容就会展示到`<router-view></router-view>`中\n    -->\n    <router-view></router-view>\n</div>\n\n<!-- ===============分割线===================== -->\n\n<!-- JavaScript -->\n//创建login组件\nvar login = {\n    template: 'login组件'\n}\n\n//创建register组件\nvar register = {\n    template: 'register组件'\n}\n\n// Router实例\nvar 路由对象名称 = new VueRouter({\n    routes: [\n        { path: '/监听URL路径', component: login(组件名称) },\n        { path: '/监听URL路径', component: register(组件名称) }\n    ]\n});\n\n// Vue实例\nvar vm = new Vue({\n    el: 'app',\n    data: {},\n    methods: {},\n    router: 路由对象名称   \n});\n\n```\n\n**解释：**\n- 1、routes 表示这个路由对象中的 路由匹配规则，可以存在多个规则（注意：这里是routes而不是routers）\n- 2、属性一：path 表示监听哪个路由连接地址，即你想跳转都哪个路径上，应在这里注册实现跳转到对应的组件上\n- 3、属性二：component 表示如果路由匹配了前面的path，则展示component属性对应的那个组件\n- 4、component的属性值必须是一个组件的模板对象，不能是组件的引用名称\n- 5、经过1-4的步骤基本完成了路由对象的创建，下面要将这个路由对象注入到Vue实例中，使用router: 组件对象名称实现\n- 6、创建对应需要监听的组件，如上我们创建了login和register组件，与之前讲的不同是这里是一个var 组件名称其值是一个组件对象，和之前的Vue.component方式相似，但是这里仅仅是一个组件对象，并没有注册到Vue实例中，因为没有组件名称，所以不能在HTML中使用&lt;login&gt;&lt;/login&gt; ，注意这里的login是组件对象的名称。\n\n**步骤：**\n- 1、创建router实例new VueRouter，完成相关属性的定义；\n- 2、将这个路由对象注册到Vue实例中，使用router: 路由对象名称的方式；\n- 3、创建第一步中定义的组件名称对应的组件，直接在&lt;script&gt;中定义var组件对象名称即可，在template中定义具体的HTML视图，或是通过template: '#id'引用外部视图也行。\n- 4、在Vue实例控制域app中，创建&lt;router-view&gt;&lt;/router-view&gt;，相当于router容器，你想在页面上展示几个组件就应该在页面中创建几个容器。\n\n如上，我们可以写具体的跳转链接了：\n```bash\n<div id=\"app>\n    <a href=\"#/login\">登录</a>\n    <a href=\"#/register\">注册</a>\n</div>\n```\n\n如上，当我们点击登录或注册，Vue-router就会监听都对应的URL地址，然后在path规则中刚好匹配到规则login，那么就会跳转到对应的组件component: login的login组件中。\n可能你会疑惑了，为什么这里的href需要写为#/login而不是/login或login，你尝试一下就知道了，因为vue-router监听URL地址是基于hash的，不加#/就会找不到路径。\n如果你觉得每次都加#/麻烦的话，Vue-router页提供了一个Tag:&lt;router-link to=\"URL地址\"&gt;&lt;/router-link&gt;，其在浏览器中会被解析为&lt;a&gt;标签。\n\n**实例**\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n    <div id=\"app\">\n        <h1>父组件</h1>\n\n        <a href=\"#/login\">登录</a>\n        <router-link to=\"register\">注册</router-link>\n\n        <router-view></router-view>\n    </div>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\" src=\"../lib/vue-router.js\"></script>\n    <script type=\"text/javascript\">\n\n        var login = {\n            template: '<h2>登录组件</h2>'\n        }\n\n        var register = {\n            template: '<h2>注册组件</h2>'\n        }\n\n        var routerObj = new VueRouter({\n            routes: [\n                { path: '/login', component: login },\n                { path: '/register', component: register }\n            ]\n        });\n\n        var vm = new Vue({\n            el: '#app',\n            data: {},\n            methods: {},\n            router: routerObj\n        });\n    </script>\n</body>\n</html>\n```\n\n但是上面的实例中，我们发现默认进入的根路径中仅有一个父组件名称，一般我们的登录页面应该直接显示登录框，所以vue-router提供了重定向的动能{path: '', redirect: ''}，即在router: []中监听根路径，如果监听都访问的是根路径就重定向到登录URL就好了。\n\n```bash\nvar routerObj = new VueRouter({\n    routes: [\n        { path: '/', redirect: '/login' },\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n    ]\n});\n```\n\n#### 路由参数传递\n在进行页面跳转，即路由的时候，我们可能需要在发送URL时传递一些参数，常见的就如<http://www.loonycoder.com/api?id=1&name='loonycoder'>这种格式。\n那么在URL中传递的参数，vue-router提供了一种获取方式：this.$route。\n那么什么时候能获取到传递的参数呢？ 回顾前面讲到的Vue声明周期函数，那么在自定义组件中自然也存在生命周期函数，所以最早操作组件data和methods中数据的阶段就是created这个声明周期函数的阶段。\n实例：\n![vue](/images/vue16.png)\n![vue](/images/vue17.png)\n\n上面打印的值中，我们能看到，我们再VueRouter中创建的path匹配规则，实际在HTML中会被渲染为相关的正则表达式，来实现路径的匹配。\n其次，我们还能发现，在URL中拼接的参数id在this.$route对象的query属性中，我们通过this.$route.query.id即可获得传递的id值：2。\n\n#### 路由嵌套\n路由嵌套，顾名思义即在父级路由内部存在子路由。例如：\n> 根路径：<http://www.loonycoder.com>\n> 父级路由地址：<http://www.loonycoder.com/api>\n> 子级路由地址：<http://www.loonycoder.com/api/login>\n\n**实例：**\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n    <div id=\"app\">\n        <router-link to=\"/account\">Account</router-link>\n\n        <router-view></router-view>\n    </div>\n\n    <template id=\"tmp\">\n        <div>\n            <h1>这是Account组件</h1>\n\n            <router-link to=\"/account/login\">登录</router-link>\n            <router-link to=\"/account/register\">注册</router-link>\n\n            <router-view></router-view>\n        </div>\n    </template>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\" src=\"../lib/vue-router.js\"></script>\n    <script type=\"text/javascript\">\n\n        var account = {\n            template: '#tmp'\n        }\n\n        var login = {\n            template: '<h2>登录组件</h2>',\n        }\n\n        var register = {\n            template: '<h2>注册组件</h2>'\n        }\n\n        var routerObj = new VueRouter({\n            routes: [\n                { \n                    path: '/account', \n                    component: account,\n                    children: [\n                        { path: 'login', component: login },\n                        { path: 'register', component: register }\n                    ]\n                },\n            ]\n        });\n\n        var vm = new Vue({\n            el: '#app',\n            data: {},\n            methods: {},\n            router: routerObj\n        });\n    </script>\n</body>\n</html>\n```\n\n如上，我们使用了routes: []中的另外一个属性：children，顾名思义就是表示这个父规则/account下存在一些子规则，且在URL中应该体现出来：\n![vue](/images/vue18.png)\n\n**注意：**\n在children中定义的子组件的path规则不能加/，即如上的，直接写path: login即可，这样请求account/login地址时，vue-router会找/account规则下的login规则，且不加/vue-router才会自动将login视为account下的子路径，并自动拼接account/，否则不会自动拼接，那么也无法完成路由的嵌套。\n\n#### 命名视图\n我们常见的后台开发页面，经常遇到上、左、中的布局方式；那么以前我们可能使用iframe实现页面间的跳转，但是现在我们学习的路由要比其更加的方便好用。\n**命名视图**的思想就是为每一个页面展示的视图都起一个名字，目的是为了为每个&lt;router-view&gt;&lt;/router-view&gt;容器刚好匹配一个指定的视图。使用方式：\n```bash\n<router-view></router-view>\n<router-view name=\"left\"></router-view>\n<router-view name=\"main\"></router-view>\n\nroutes: [\n    { \n        path: '/', components: {\n            'default': header\n            'left': left\n            'main': main\n        }\n    }\n]\n```\n\n**解释：**\n其中的path是根路径/，而使用components代替之前的component，目的就是可匹配其下的多个规则；default表示默认的视图组件是header这个组件，即会匹配到第一个&lt;router-view&gt;视图容器中；下面的两个组件会根据name名称需要对应的组件。\n实现上、左、中的布局：\n**思路：**\n1、我们需要创建三个组件，名称分别为：header、left、main；并且在app中创建三个&lt;router-view&gt;&lt;/router-view&gt;路由容器。\n2、采用**命名视图**的方式为每个视图都起一个名字：&lt;router-view name=\"left\"&gt;&lt;/router-view&gt; …\n3、注册路由实例。\n实例：\n![vue](/images/vue19.png)\n![vue](/images/vue20.png)\n","source":"_posts/Vue4.md","raw":"---\ntitle: Vue路由\ncategories:\n    - Web前端\ndate: 2019-12-12\ntags:\n\t- 前端框架\n\n---\n\n### Vue路由\n\n#### 什么是Vue路由？\n\n- **后端路由：**即请求的URL地址都对应后端的接口，请求URL响应对应的服务器的资源。\n- **前端路由：**对于单页面程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以单页面程序中的页面跳转主要通过hash实现。\n\n#### 入门\n\n##### 导入类库\n首先需要导入vue-router组件类库：\n```bash\n<script type=\"text/javascript\" src=\"../lib/vue-router.js\"></script>\n```\n当导入类库后，window全局对象中就存在了一个路由的构造函数： VueRouter；就像导入Vue类库后存在一个Vue的构造函数一样，我们能够通过new VueRouter的方式实例化路由对象。\n如果你使用了new VueRouter({});构造函数来实例化了一个路由对象，你会发现浏览器路径中会出现#/路径，这个路径就是前面讲到的URL中的hash，他并不会向后端发送任何请求，而仅仅是作页面跳转，如果你#/后拼接了一个不存在的路径，自然也不会进行跳转，页面也不会发送任何请求。\n**实例：**\n![vue](/images/vue15.png)\n\n##### 基本使用\n上面我们讲到了使用new VueRouter({})的方式实例化一个路由对象，其中包含几个参数：\n```bash\n<!-- HTML -->\n<div id=\"app\">\n    \n    <!-- 给路由对象创建一个容器，包裹在父组件`app`内\n        相当于一个占位符，路由规则匹配到的组件内容就会展示到`<router-view></router-view>`中\n    -->\n    <router-view></router-view>\n</div>\n\n<!-- ===============分割线===================== -->\n\n<!-- JavaScript -->\n//创建login组件\nvar login = {\n    template: 'login组件'\n}\n\n//创建register组件\nvar register = {\n    template: 'register组件'\n}\n\n// Router实例\nvar 路由对象名称 = new VueRouter({\n    routes: [\n        { path: '/监听URL路径', component: login(组件名称) },\n        { path: '/监听URL路径', component: register(组件名称) }\n    ]\n});\n\n// Vue实例\nvar vm = new Vue({\n    el: 'app',\n    data: {},\n    methods: {},\n    router: 路由对象名称   \n});\n\n```\n\n**解释：**\n- 1、routes 表示这个路由对象中的 路由匹配规则，可以存在多个规则（注意：这里是routes而不是routers）\n- 2、属性一：path 表示监听哪个路由连接地址，即你想跳转都哪个路径上，应在这里注册实现跳转到对应的组件上\n- 3、属性二：component 表示如果路由匹配了前面的path，则展示component属性对应的那个组件\n- 4、component的属性值必须是一个组件的模板对象，不能是组件的引用名称\n- 5、经过1-4的步骤基本完成了路由对象的创建，下面要将这个路由对象注入到Vue实例中，使用router: 组件对象名称实现\n- 6、创建对应需要监听的组件，如上我们创建了login和register组件，与之前讲的不同是这里是一个var 组件名称其值是一个组件对象，和之前的Vue.component方式相似，但是这里仅仅是一个组件对象，并没有注册到Vue实例中，因为没有组件名称，所以不能在HTML中使用&lt;login&gt;&lt;/login&gt; ，注意这里的login是组件对象的名称。\n\n**步骤：**\n- 1、创建router实例new VueRouter，完成相关属性的定义；\n- 2、将这个路由对象注册到Vue实例中，使用router: 路由对象名称的方式；\n- 3、创建第一步中定义的组件名称对应的组件，直接在&lt;script&gt;中定义var组件对象名称即可，在template中定义具体的HTML视图，或是通过template: '#id'引用外部视图也行。\n- 4、在Vue实例控制域app中，创建&lt;router-view&gt;&lt;/router-view&gt;，相当于router容器，你想在页面上展示几个组件就应该在页面中创建几个容器。\n\n如上，我们可以写具体的跳转链接了：\n```bash\n<div id=\"app>\n    <a href=\"#/login\">登录</a>\n    <a href=\"#/register\">注册</a>\n</div>\n```\n\n如上，当我们点击登录或注册，Vue-router就会监听都对应的URL地址，然后在path规则中刚好匹配到规则login，那么就会跳转到对应的组件component: login的login组件中。\n可能你会疑惑了，为什么这里的href需要写为#/login而不是/login或login，你尝试一下就知道了，因为vue-router监听URL地址是基于hash的，不加#/就会找不到路径。\n如果你觉得每次都加#/麻烦的话，Vue-router页提供了一个Tag:&lt;router-link to=\"URL地址\"&gt;&lt;/router-link&gt;，其在浏览器中会被解析为&lt;a&gt;标签。\n\n**实例**\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n    <div id=\"app\">\n        <h1>父组件</h1>\n\n        <a href=\"#/login\">登录</a>\n        <router-link to=\"register\">注册</router-link>\n\n        <router-view></router-view>\n    </div>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\" src=\"../lib/vue-router.js\"></script>\n    <script type=\"text/javascript\">\n\n        var login = {\n            template: '<h2>登录组件</h2>'\n        }\n\n        var register = {\n            template: '<h2>注册组件</h2>'\n        }\n\n        var routerObj = new VueRouter({\n            routes: [\n                { path: '/login', component: login },\n                { path: '/register', component: register }\n            ]\n        });\n\n        var vm = new Vue({\n            el: '#app',\n            data: {},\n            methods: {},\n            router: routerObj\n        });\n    </script>\n</body>\n</html>\n```\n\n但是上面的实例中，我们发现默认进入的根路径中仅有一个父组件名称，一般我们的登录页面应该直接显示登录框，所以vue-router提供了重定向的动能{path: '', redirect: ''}，即在router: []中监听根路径，如果监听都访问的是根路径就重定向到登录URL就好了。\n\n```bash\nvar routerObj = new VueRouter({\n    routes: [\n        { path: '/', redirect: '/login' },\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n    ]\n});\n```\n\n#### 路由参数传递\n在进行页面跳转，即路由的时候，我们可能需要在发送URL时传递一些参数，常见的就如<http://www.loonycoder.com/api?id=1&name='loonycoder'>这种格式。\n那么在URL中传递的参数，vue-router提供了一种获取方式：this.$route。\n那么什么时候能获取到传递的参数呢？ 回顾前面讲到的Vue声明周期函数，那么在自定义组件中自然也存在生命周期函数，所以最早操作组件data和methods中数据的阶段就是created这个声明周期函数的阶段。\n实例：\n![vue](/images/vue16.png)\n![vue](/images/vue17.png)\n\n上面打印的值中，我们能看到，我们再VueRouter中创建的path匹配规则，实际在HTML中会被渲染为相关的正则表达式，来实现路径的匹配。\n其次，我们还能发现，在URL中拼接的参数id在this.$route对象的query属性中，我们通过this.$route.query.id即可获得传递的id值：2。\n\n#### 路由嵌套\n路由嵌套，顾名思义即在父级路由内部存在子路由。例如：\n> 根路径：<http://www.loonycoder.com>\n> 父级路由地址：<http://www.loonycoder.com/api>\n> 子级路由地址：<http://www.loonycoder.com/api/login>\n\n**实例：**\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n    <div id=\"app\">\n        <router-link to=\"/account\">Account</router-link>\n\n        <router-view></router-view>\n    </div>\n\n    <template id=\"tmp\">\n        <div>\n            <h1>这是Account组件</h1>\n\n            <router-link to=\"/account/login\">登录</router-link>\n            <router-link to=\"/account/register\">注册</router-link>\n\n            <router-view></router-view>\n        </div>\n    </template>\n    <script type=\"text/javascript\" src=\"../lib/vue.js\"></script>\n    <script type=\"text/javascript\" src=\"../lib/vue-router.js\"></script>\n    <script type=\"text/javascript\">\n\n        var account = {\n            template: '#tmp'\n        }\n\n        var login = {\n            template: '<h2>登录组件</h2>',\n        }\n\n        var register = {\n            template: '<h2>注册组件</h2>'\n        }\n\n        var routerObj = new VueRouter({\n            routes: [\n                { \n                    path: '/account', \n                    component: account,\n                    children: [\n                        { path: 'login', component: login },\n                        { path: 'register', component: register }\n                    ]\n                },\n            ]\n        });\n\n        var vm = new Vue({\n            el: '#app',\n            data: {},\n            methods: {},\n            router: routerObj\n        });\n    </script>\n</body>\n</html>\n```\n\n如上，我们使用了routes: []中的另外一个属性：children，顾名思义就是表示这个父规则/account下存在一些子规则，且在URL中应该体现出来：\n![vue](/images/vue18.png)\n\n**注意：**\n在children中定义的子组件的path规则不能加/，即如上的，直接写path: login即可，这样请求account/login地址时，vue-router会找/account规则下的login规则，且不加/vue-router才会自动将login视为account下的子路径，并自动拼接account/，否则不会自动拼接，那么也无法完成路由的嵌套。\n\n#### 命名视图\n我们常见的后台开发页面，经常遇到上、左、中的布局方式；那么以前我们可能使用iframe实现页面间的跳转，但是现在我们学习的路由要比其更加的方便好用。\n**命名视图**的思想就是为每一个页面展示的视图都起一个名字，目的是为了为每个&lt;router-view&gt;&lt;/router-view&gt;容器刚好匹配一个指定的视图。使用方式：\n```bash\n<router-view></router-view>\n<router-view name=\"left\"></router-view>\n<router-view name=\"main\"></router-view>\n\nroutes: [\n    { \n        path: '/', components: {\n            'default': header\n            'left': left\n            'main': main\n        }\n    }\n]\n```\n\n**解释：**\n其中的path是根路径/，而使用components代替之前的component，目的就是可匹配其下的多个规则；default表示默认的视图组件是header这个组件，即会匹配到第一个&lt;router-view&gt;视图容器中；下面的两个组件会根据name名称需要对应的组件。\n实现上、左、中的布局：\n**思路：**\n1、我们需要创建三个组件，名称分别为：header、left、main；并且在app中创建三个&lt;router-view&gt;&lt;/router-view&gt;路由容器。\n2、采用**命名视图**的方式为每个视图都起一个名字：&lt;router-view name=\"left\"&gt;&lt;/router-view&gt; …\n3、注册路由实例。\n实例：\n![vue](/images/vue19.png)\n![vue](/images/vue20.png)\n","slug":"Vue4","published":1,"updated":"2020-02-12T10:54:57.995Z","_id":"ck6iw57kg0000ozs63qqa3d4k","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Vue路由\"><a href=\"#Vue路由\" class=\"headerlink\" title=\"Vue路由\"></a>Vue路由</h3><h4 id=\"什么是Vue路由？\"><a href=\"#什么是Vue路由？\" class=\"headerlink\" title=\"什么是Vue路由？\"></a>什么是Vue路由？</h4><ul>\n<li><strong>后端路由：</strong>即请求的URL地址都对应后端的接口，请求URL响应对应的服务器的资源。</li>\n<li><strong>前端路由：</strong>对于单页面程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以单页面程序中的页面跳转主要通过hash实现。</li>\n</ul>\n<h4 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h4><h5 id=\"导入类库\"><a href=\"#导入类库\" class=\"headerlink\" title=\"导入类库\"></a>导入类库</h5><p>首先需要导入vue-router组件类库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue-router.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当导入类库后，window全局对象中就存在了一个路由的构造函数： VueRouter；就像导入Vue类库后存在一个Vue的构造函数一样，我们能够通过new VueRouter的方式实例化路由对象。<br>如果你使用了new VueRouter({});构造函数来实例化了一个路由对象，你会发现浏览器路径中会出现#/路径，这个路径就是前面讲到的URL中的hash，他并不会向后端发送任何请求，而仅仅是作页面跳转，如果你#/后拼接了一个不存在的路径，自然也不会进行跳转，页面也不会发送任何请求。<br><strong>实例：</strong><br><img src=\"/images/vue15.png\" alt=\"vue\"></p>\n<h5 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h5><p>上面我们讲到了使用new VueRouter({})的方式实例化一个路由对象，其中包含几个参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- 给路由对象创建一个容器，包裹在父组件`app`内</span><br><span class=\"line\">        相当于一个占位符，路由规则匹配到的组件内容就会展示到`&lt;router-view&gt;&lt;/router-view&gt;`中</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ===============分割线===================== --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- JavaScript --&gt;</span><br><span class=\"line\">//创建login组件</span><br><span class=\"line\">var login = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'login组件'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建register组件</span><br><span class=\"line\">var register = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'register组件'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Router实例</span><br><span class=\"line\">var 路由对象名称 = new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/监听URL路径'</span>, component: login(组件名称) &#125;,</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/监听URL路径'</span>, component: register(组件名称) &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Vue实例</span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    router: 路由对象名称   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<ul>\n<li>1、routes 表示这个路由对象中的 路由匹配规则，可以存在多个规则（注意：这里是routes而不是routers）</li>\n<li>2、属性一：path 表示监听哪个路由连接地址，即你想跳转都哪个路径上，应在这里注册实现跳转到对应的组件上</li>\n<li>3、属性二：component 表示如果路由匹配了前面的path，则展示component属性对应的那个组件</li>\n<li>4、component的属性值必须是一个组件的模板对象，不能是组件的引用名称</li>\n<li>5、经过1-4的步骤基本完成了路由对象的创建，下面要将这个路由对象注入到Vue实例中，使用router: 组件对象名称实现</li>\n<li>6、创建对应需要监听的组件，如上我们创建了login和register组件，与之前讲的不同是这里是一个var 组件名称其值是一个组件对象，和之前的Vue.component方式相似，但是这里仅仅是一个组件对象，并没有注册到Vue实例中，因为没有组件名称，所以不能在HTML中使用&lt;login&gt;&lt;/login&gt; ，注意这里的login是组件对象的名称。</li>\n</ul>\n<p><strong>步骤：</strong></p>\n<ul>\n<li>1、创建router实例new VueRouter，完成相关属性的定义；</li>\n<li>2、将这个路由对象注册到Vue实例中，使用router: 路由对象名称的方式；</li>\n<li>3、创建第一步中定义的组件名称对应的组件，直接在&lt;script&gt;中定义var组件对象名称即可，在template中定义具体的HTML视图，或是通过template: ‘#id’引用外部视图也行。</li>\n<li>4、在Vue实例控制域app中，创建&lt;router-view&gt;&lt;/router-view&gt;，相当于router容器，你想在页面上展示几个组件就应该在页面中创建几个容器。</li>\n</ul>\n<p>如上，我们可以写具体的跳转链接了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=\"</span><span class=\"comment\">#/login\"&gt;登录&lt;/a&gt;</span></span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#/register\"</span>&gt;注册&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，当我们点击登录或注册，Vue-router就会监听都对应的URL地址，然后在path规则中刚好匹配到规则login，那么就会跳转到对应的组件component: login的login组件中。<br>可能你会疑惑了，为什么这里的href需要写为#/login而不是/login或login，你尝试一下就知道了，因为vue-router监听URL地址是基于hash的，不加#/就会找不到路径。<br>如果你觉得每次都加#/麻烦的话，Vue-router页提供了一个Tag:&lt;router-link to=”URL地址”&gt;&lt;/router-link&gt;，其在浏览器中会被解析为&lt;a&gt;标签。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"#/login\"</span>&gt;登录&lt;/a&gt;</span><br><span class=\"line\">        &lt;router-link to=<span class=\"string\">\"register\"</span>&gt;注册&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue-router.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        var login = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;登录组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var register = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;注册组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var routerObj = new VueRouter(&#123;</span><br><span class=\"line\">            routes: [</span><br><span class=\"line\">                &#123; path: <span class=\"string\">'/login'</span>, component: login &#125;,</span><br><span class=\"line\">                &#123; path: <span class=\"string\">'/register'</span>, component: register &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var vm = new Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">            data: &#123;&#125;,</span><br><span class=\"line\">            methods: &#123;&#125;,</span><br><span class=\"line\">            router: routerObj</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是上面的实例中，我们发现默认进入的根路径中仅有一个父组件名称，一般我们的登录页面应该直接显示登录框，所以vue-router提供了重定向的动能{path: ‘’, redirect: ‘’}，即在router: []中监听根路径，如果监听都访问的是根路径就重定向到登录URL就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var routerObj = new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/'</span>, redirect: <span class=\"string\">'/login'</span> &#125;,</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/login'</span>, component: login &#125;,</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/register'</span>, component: register &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由参数传递\"><a href=\"#路由参数传递\" class=\"headerlink\" title=\"路由参数传递\"></a>路由参数传递</h4><p>在进行页面跳转，即路由的时候，我们可能需要在发送URL时传递一些参数，常见的就如<a href=\"http://www.loonycoder.com/api?id=1&amp;name=&#39;loonycoder&#39;\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com/api?id=1&amp;name=&#39;loonycoder&#39;</a>这种格式。<br>那么在URL中传递的参数，vue-router提供了一种获取方式：this.$route。<br>那么什么时候能获取到传递的参数呢？ 回顾前面讲到的Vue声明周期函数，那么在自定义组件中自然也存在生命周期函数，所以最早操作组件data和methods中数据的阶段就是created这个声明周期函数的阶段。<br>实例：<br><img src=\"/images/vue16.png\" alt=\"vue\"><br><img src=\"/images/vue17.png\" alt=\"vue\"></p>\n<p>上面打印的值中，我们能看到，我们再VueRouter中创建的path匹配规则，实际在HTML中会被渲染为相关的正则表达式，来实现路径的匹配。<br>其次，我们还能发现，在URL中拼接的参数id在this.$route对象的query属性中，我们通过this.$route.query.id即可获得传递的id值：2。</p>\n<h4 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h4><p>路由嵌套，顾名思义即在父级路由内部存在子路由。例如：</p>\n<blockquote>\n<p>根路径：<a href=\"http://www.loonycoder.com\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com</a><br>父级路由地址：<a href=\"http://www.loonycoder.com/api\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com/api</a><br>子级路由地址：<a href=\"http://www.loonycoder.com/api/login\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com/api/login</a></p>\n</blockquote>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;router-link to=<span class=\"string\">\"/account\"</span>&gt;Account&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;h1&gt;这是Account组件&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;router-link to=<span class=\"string\">\"/account/login\"</span>&gt;登录&lt;/router-link&gt;</span><br><span class=\"line\">            &lt;router-link to=<span class=\"string\">\"/account/register\"</span>&gt;注册&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue-router.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        var account = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'#tmp'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var login = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;登录组件&lt;/h2&gt;'</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var register = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;注册组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var routerObj = new VueRouter(&#123;</span><br><span class=\"line\">            routes: [</span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    path: <span class=\"string\">'/account'</span>, </span><br><span class=\"line\">                    component: account,</span><br><span class=\"line\">                    children: [</span><br><span class=\"line\">                        &#123; path: <span class=\"string\">'login'</span>, component: login &#125;,</span><br><span class=\"line\">                        &#123; path: <span class=\"string\">'register'</span>, component: register &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var vm = new Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">            data: &#123;&#125;,</span><br><span class=\"line\">            methods: &#123;&#125;,</span><br><span class=\"line\">            router: routerObj</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们使用了routes: []中的另外一个属性：children，顾名思义就是表示这个父规则/account下存在一些子规则，且在URL中应该体现出来：<br><img src=\"/images/vue18.png\" alt=\"vue\"></p>\n<p><strong>注意：</strong><br>在children中定义的子组件的path规则不能加/，即如上的，直接写path: login即可，这样请求account/login地址时，vue-router会找/account规则下的login规则，且不加/vue-router才会自动将login视为account下的子路径，并自动拼接account/，否则不会自动拼接，那么也无法完成路由的嵌套。</p>\n<h4 id=\"命名视图\"><a href=\"#命名视图\" class=\"headerlink\" title=\"命名视图\"></a>命名视图</h4><p>我们常见的后台开发页面，经常遇到上、左、中的布局方式；那么以前我们可能使用iframe实现页面间的跳转，但是现在我们学习的路由要比其更加的方便好用。<br><strong>命名视图</strong>的思想就是为每一个页面展示的视图都起一个名字，目的是为了为每个&lt;router-view&gt;&lt;/router-view&gt;容器刚好匹配一个指定的视图。使用方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;router-view name=<span class=\"string\">\"left\"</span>&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;router-view name=<span class=\"string\">\"main\"</span>&gt;&lt;/router-view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>, components: &#123;</span><br><span class=\"line\">            <span class=\"string\">'default'</span>: header</span><br><span class=\"line\">            <span class=\"string\">'left'</span>: left</span><br><span class=\"line\">            <span class=\"string\">'main'</span>: main</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong><br>其中的path是根路径/，而使用components代替之前的component，目的就是可匹配其下的多个规则；default表示默认的视图组件是header这个组件，即会匹配到第一个&lt;router-view&gt;视图容器中；下面的两个组件会根据name名称需要对应的组件。<br>实现上、左、中的布局：<br><strong>思路：</strong><br>1、我们需要创建三个组件，名称分别为：header、left、main；并且在app中创建三个&lt;router-view&gt;&lt;/router-view&gt;路由容器。<br>2、采用<strong>命名视图</strong>的方式为每个视图都起一个名字：&lt;router-view name=”left”&gt;&lt;/router-view&gt; …<br>3、注册路由实例。<br>实例：<br><img src=\"/images/vue19.png\" alt=\"vue\"><br><img src=\"/images/vue20.png\" alt=\"vue\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Vue路由\"><a href=\"#Vue路由\" class=\"headerlink\" title=\"Vue路由\"></a>Vue路由</h3><h4 id=\"什么是Vue路由？\"><a href=\"#什么是Vue路由？\" class=\"headerlink\" title=\"什么是Vue路由？\"></a>什么是Vue路由？</h4><ul>\n<li><strong>后端路由：</strong>即请求的URL地址都对应后端的接口，请求URL响应对应的服务器的资源。</li>\n<li><strong>前端路由：</strong>对于单页面程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以单页面程序中的页面跳转主要通过hash实现。</li>\n</ul>\n<h4 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h4><h5 id=\"导入类库\"><a href=\"#导入类库\" class=\"headerlink\" title=\"导入类库\"></a>导入类库</h5><p>首先需要导入vue-router组件类库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue-router.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当导入类库后，window全局对象中就存在了一个路由的构造函数： VueRouter；就像导入Vue类库后存在一个Vue的构造函数一样，我们能够通过new VueRouter的方式实例化路由对象。<br>如果你使用了new VueRouter({});构造函数来实例化了一个路由对象，你会发现浏览器路径中会出现#/路径，这个路径就是前面讲到的URL中的hash，他并不会向后端发送任何请求，而仅仅是作页面跳转，如果你#/后拼接了一个不存在的路径，自然也不会进行跳转，页面也不会发送任何请求。<br><strong>实例：</strong><br><img src=\"/images/vue15.png\" alt=\"vue\"></p>\n<h5 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h5><p>上面我们讲到了使用new VueRouter({})的方式实例化一个路由对象，其中包含几个参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- 给路由对象创建一个容器，包裹在父组件`app`内</span><br><span class=\"line\">        相当于一个占位符，路由规则匹配到的组件内容就会展示到`&lt;router-view&gt;&lt;/router-view&gt;`中</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- ===============分割线===================== --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- JavaScript --&gt;</span><br><span class=\"line\">//创建login组件</span><br><span class=\"line\">var login = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'login组件'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建register组件</span><br><span class=\"line\">var register = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'register组件'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Router实例</span><br><span class=\"line\">var 路由对象名称 = new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/监听URL路径'</span>, component: login(组件名称) &#125;,</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/监听URL路径'</span>, component: register(组件名称) &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Vue实例</span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    router: 路由对象名称   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<ul>\n<li>1、routes 表示这个路由对象中的 路由匹配规则，可以存在多个规则（注意：这里是routes而不是routers）</li>\n<li>2、属性一：path 表示监听哪个路由连接地址，即你想跳转都哪个路径上，应在这里注册实现跳转到对应的组件上</li>\n<li>3、属性二：component 表示如果路由匹配了前面的path，则展示component属性对应的那个组件</li>\n<li>4、component的属性值必须是一个组件的模板对象，不能是组件的引用名称</li>\n<li>5、经过1-4的步骤基本完成了路由对象的创建，下面要将这个路由对象注入到Vue实例中，使用router: 组件对象名称实现</li>\n<li>6、创建对应需要监听的组件，如上我们创建了login和register组件，与之前讲的不同是这里是一个var 组件名称其值是一个组件对象，和之前的Vue.component方式相似，但是这里仅仅是一个组件对象，并没有注册到Vue实例中，因为没有组件名称，所以不能在HTML中使用&lt;login&gt;&lt;/login&gt; ，注意这里的login是组件对象的名称。</li>\n</ul>\n<p><strong>步骤：</strong></p>\n<ul>\n<li>1、创建router实例new VueRouter，完成相关属性的定义；</li>\n<li>2、将这个路由对象注册到Vue实例中，使用router: 路由对象名称的方式；</li>\n<li>3、创建第一步中定义的组件名称对应的组件，直接在&lt;script&gt;中定义var组件对象名称即可，在template中定义具体的HTML视图，或是通过template: ‘#id’引用外部视图也行。</li>\n<li>4、在Vue实例控制域app中，创建&lt;router-view&gt;&lt;/router-view&gt;，相当于router容器，你想在页面上展示几个组件就应该在页面中创建几个容器。</li>\n</ul>\n<p>如上，我们可以写具体的跳转链接了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=\"</span><span class=\"comment\">#/login\"&gt;登录&lt;/a&gt;</span></span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#/register\"</span>&gt;注册&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，当我们点击登录或注册，Vue-router就会监听都对应的URL地址，然后在path规则中刚好匹配到规则login，那么就会跳转到对应的组件component: login的login组件中。<br>可能你会疑惑了，为什么这里的href需要写为#/login而不是/login或login，你尝试一下就知道了，因为vue-router监听URL地址是基于hash的，不加#/就会找不到路径。<br>如果你觉得每次都加#/麻烦的话，Vue-router页提供了一个Tag:&lt;router-link to=”URL地址”&gt;&lt;/router-link&gt;，其在浏览器中会被解析为&lt;a&gt;标签。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"#/login\"</span>&gt;登录&lt;/a&gt;</span><br><span class=\"line\">        &lt;router-link to=<span class=\"string\">\"register\"</span>&gt;注册&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue-router.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        var login = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;登录组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var register = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;注册组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var routerObj = new VueRouter(&#123;</span><br><span class=\"line\">            routes: [</span><br><span class=\"line\">                &#123; path: <span class=\"string\">'/login'</span>, component: login &#125;,</span><br><span class=\"line\">                &#123; path: <span class=\"string\">'/register'</span>, component: register &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var vm = new Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">            data: &#123;&#125;,</span><br><span class=\"line\">            methods: &#123;&#125;,</span><br><span class=\"line\">            router: routerObj</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是上面的实例中，我们发现默认进入的根路径中仅有一个父组件名称，一般我们的登录页面应该直接显示登录框，所以vue-router提供了重定向的动能{path: ‘’, redirect: ‘’}，即在router: []中监听根路径，如果监听都访问的是根路径就重定向到登录URL就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var routerObj = new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/'</span>, redirect: <span class=\"string\">'/login'</span> &#125;,</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/login'</span>, component: login &#125;,</span><br><span class=\"line\">        &#123; path: <span class=\"string\">'/register'</span>, component: register &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由参数传递\"><a href=\"#路由参数传递\" class=\"headerlink\" title=\"路由参数传递\"></a>路由参数传递</h4><p>在进行页面跳转，即路由的时候，我们可能需要在发送URL时传递一些参数，常见的就如<a href=\"http://www.loonycoder.com/api?id=1&amp;name=&#39;loonycoder&#39;\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com/api?id=1&amp;name=&#39;loonycoder&#39;</a>这种格式。<br>那么在URL中传递的参数，vue-router提供了一种获取方式：this.$route。<br>那么什么时候能获取到传递的参数呢？ 回顾前面讲到的Vue声明周期函数，那么在自定义组件中自然也存在生命周期函数，所以最早操作组件data和methods中数据的阶段就是created这个声明周期函数的阶段。<br>实例：<br><img src=\"/images/vue16.png\" alt=\"vue\"><br><img src=\"/images/vue17.png\" alt=\"vue\"></p>\n<p>上面打印的值中，我们能看到，我们再VueRouter中创建的path匹配规则，实际在HTML中会被渲染为相关的正则表达式，来实现路径的匹配。<br>其次，我们还能发现，在URL中拼接的参数id在this.$route对象的query属性中，我们通过this.$route.query.id即可获得传递的id值：2。</p>\n<h4 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h4><p>路由嵌套，顾名思义即在父级路由内部存在子路由。例如：</p>\n<blockquote>\n<p>根路径：<a href=\"http://www.loonycoder.com\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com</a><br>父级路由地址：<a href=\"http://www.loonycoder.com/api\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com/api</a><br>子级路由地址：<a href=\"http://www.loonycoder.com/api/login\" target=\"_blank\" rel=\"noopener\">http://www.loonycoder.com/api/login</a></p>\n</blockquote>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;router-link to=<span class=\"string\">\"/account\"</span>&gt;Account&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;template id=<span class=\"string\">\"tmp\"</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;h1&gt;这是Account组件&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;router-link to=<span class=\"string\">\"/account/login\"</span>&gt;登录&lt;/router-link&gt;</span><br><span class=\"line\">            &lt;router-link to=<span class=\"string\">\"/account/register\"</span>&gt;注册&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../lib/vue-router.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        var account = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'#tmp'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var login = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;登录组件&lt;/h2&gt;'</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var register = &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;h2&gt;注册组件&lt;/h2&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var routerObj = new VueRouter(&#123;</span><br><span class=\"line\">            routes: [</span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    path: <span class=\"string\">'/account'</span>, </span><br><span class=\"line\">                    component: account,</span><br><span class=\"line\">                    children: [</span><br><span class=\"line\">                        &#123; path: <span class=\"string\">'login'</span>, component: login &#125;,</span><br><span class=\"line\">                        &#123; path: <span class=\"string\">'register'</span>, component: register &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var vm = new Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">            data: &#123;&#125;,</span><br><span class=\"line\">            methods: &#123;&#125;,</span><br><span class=\"line\">            router: routerObj</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们使用了routes: []中的另外一个属性：children，顾名思义就是表示这个父规则/account下存在一些子规则，且在URL中应该体现出来：<br><img src=\"/images/vue18.png\" alt=\"vue\"></p>\n<p><strong>注意：</strong><br>在children中定义的子组件的path规则不能加/，即如上的，直接写path: login即可，这样请求account/login地址时，vue-router会找/account规则下的login规则，且不加/vue-router才会自动将login视为account下的子路径，并自动拼接account/，否则不会自动拼接，那么也无法完成路由的嵌套。</p>\n<h4 id=\"命名视图\"><a href=\"#命名视图\" class=\"headerlink\" title=\"命名视图\"></a>命名视图</h4><p>我们常见的后台开发页面，经常遇到上、左、中的布局方式；那么以前我们可能使用iframe实现页面间的跳转，但是现在我们学习的路由要比其更加的方便好用。<br><strong>命名视图</strong>的思想就是为每一个页面展示的视图都起一个名字，目的是为了为每个&lt;router-view&gt;&lt;/router-view&gt;容器刚好匹配一个指定的视图。使用方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;router-view name=<span class=\"string\">\"left\"</span>&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;router-view name=<span class=\"string\">\"main\"</span>&gt;&lt;/router-view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>, components: &#123;</span><br><span class=\"line\">            <span class=\"string\">'default'</span>: header</span><br><span class=\"line\">            <span class=\"string\">'left'</span>: left</span><br><span class=\"line\">            <span class=\"string\">'main'</span>: main</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong><br>其中的path是根路径/，而使用components代替之前的component，目的就是可匹配其下的多个规则；default表示默认的视图组件是header这个组件，即会匹配到第一个&lt;router-view&gt;视图容器中；下面的两个组件会根据name名称需要对应的组件。<br>实现上、左、中的布局：<br><strong>思路：</strong><br>1、我们需要创建三个组件，名称分别为：header、left、main；并且在app中创建三个&lt;router-view&gt;&lt;/router-view&gt;路由容器。<br>2、采用<strong>命名视图</strong>的方式为每个视图都起一个名字：&lt;router-view name=”left”&gt;&lt;/router-view&gt; …<br>3、注册路由实例。<br>实例：<br><img src=\"/images/vue19.png\" alt=\"vue\"><br><img src=\"/images/vue20.png\" alt=\"vue\"></p>\n"},{"title":"Mybatis的增删改查操作","date":"2020-01-05T16:00:00.000Z","_content":"\n### 准备工作\n\n基于我们之前创建的Mybatis项目即可，我在此采用的依旧是基于xml的开发方式。\n\n---\n\n### Mybatis的查询操作\n\n#### 在mapper接口中新增查询方法\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.User;\n\nimport java.util.List;\n\npublic interface IUserMapper {\n\n    /**\n     * 查询用户\n     * @return\n     */\n    public List<User> selectAll();\n    \n    \n}\n\n```\n\n#### 在IUserMapper.xml中添加查询sql语句\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace里面要配置mapper接口的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserMapper\">\n    <!--id要保持和方法名一致-->\n    <!--resultType指定返回值类型，如果是List类型 配置List的泛型即可-->\n    <select id=\"selectAll\" resultType=\"com.loonycoder.domain.User\">\n        select * from user;\n    </select>\n</mapper>\n```\n\n#### 新建测试类执行\n\n由于读取配置文件、创建SqlSessionFactory工厂等步骤复用性较高，我们在这里进行了抽取。\n```bash\npackage com.loonycoder;\n\n\nimport com.loonycoder.dao.IUserMapper;\nimport com.loonycoder.domain.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\n\nimport java.io.InputStream;\nimport java.util.Date;\nimport java.util.List;\n\npublic class MybatisTest {\n\n    private InputStream inputStream;\n    private SqlSessionFactory sqlSessionFactory;\n    private SqlSession session;\n    private IUserMapper userDao;\n\n    //before注解代表在测试方法执行前执行\n    @Before\n    public void init() throws Exception{\n        //1.读取配置文件\n        inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\");\n        //2.创建SqlSessionFactory工厂\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n        sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\n        //3.使用工厂创建SqlSession对象\n        session = sqlSessionFactory.openSession();\n        //4.使用SqlSession创建dao接口的代理对象\n        userDao = session.getMapper(IUserMapper.class);\n    }\n\n\n    //after注解代表在测试方法执行后执行\n    @After\n    public void destroy() throws Exception{\n        //6.释放资源\n        session.close();\n        inputStream.close();\n    }\n\n\n    @Test\n    public void selectTest() throws Exception{\n\n        //5.使用代理对象执行方法\n        List<User> users= userDao.selectAll();\n        for (User user: users) {\n            System.out.println(user);\n        }\n\n    }\n\n}\n\n```\n\n#### 执行结果\n![执行结果](/images/execResult1.png)\n\n---\n\n### Mybatis的保存操作\n\n#### 在mapper接口中新增保存方法\n```bash\n    /**\n     * 保存用户\n     * @param user\n     */\n    public void saveUser(User user);\n```\n\n#### 在IUserMapper.xml中添加保存sql语句\n```bash\n<insert id=\"saveUser\" parameterType=\"com.loonycoder.domain.User\">\n        insert into user (username,sex,birthday,address) values (#{userName},#{sex},#{birthday},#{address});\n    </insert>\n```\n\n**注意：\n#{}为mybatis的固定用法，用于取值。如果User实体类中的属性是自动生成的get/set，则直接写属性名称即可。\n其次，参数一定要一一对应上**\n\n#### 新建测试类执行\n```bash\n    @Test\n    public void insertTest(){\n        User user = new User();\n        user.setUserName(\"Lisa\");\n        user.setBirthday(new Date());\n        user.setAddress(\"广东\");\n        user.setSex(\"女\");\n        userDao.saveUser(user);\n        session.commit();//记得手动提交事务\n    }\n```\n\n**注意：一定要手动提交事务，否则虽然不会报错，但是不会入表！！！**\n\n#### 执行结果\n![执行结果](/images/execResult2.png)\n\n---\n\n### Mybatis的删除操作\n\n#### 在mapper接口中新增删除方法\n```bash\n /**\n     * 删除用户\n     * @param userId\n     */\n    public void deleteUser(Integer userId);\n```\n\n#### 在IUserMapper.xml中添加删除sql语句\n```bash\n<delete id=\"deleteUser\" parameterType=\"java.lang.Integer\">\n        delete from user where id = #{uid};\n    </delete>\n```\n\n**注意：因为该方法只有一个参数，所以我们在sql中标注的uid部分其实是可以随便写的，因为mybatis只会找到这一个参数**\n\n#### 新建测试类执行\n```bash\n @Test\n    public void deleteTest(){\n        userDao.deleteUser(53);\n        session.commit();//记得手动提交事务\n    }\n```\n\n#### 执行结果\n删除前：\n![执行结果](/images/execBefore.png)\n删除后：\n![执行结果](/images/execAfter.png)\n\n---\n\n### Mybatis的修改操作\n\n#### 在mapper接口中新增修改方法\n```bash\n    /**\n     * 修改用户\n     * @param user\n     */\n    public void updateUser(User user);\n```\n\n#### 在IUserMapper.xml中添加修改sql语句\n```bash\n    <update id=\"updateUser\" parameterType=\"com.loonycoder.domain.User\">\n        update user set username = #{username},sex = #{sex},birthday = #{birthday},address = #{address} where id = #{id};\n    </update>\n```\n\n#### 新建测试类执行\n```bash\n    @Test\n    public void updateTest(){\n        User user = new User();\n        user.setId(41);\n        user.setUserName(\"张三丰\");\n        session.commit();//记得手动提交事务\n    }\n```\n\n#### 执行结果\n修改前：\n![执行结果](/images/execAfter.png)\n修改后：\n![执行结果](/images/execAfter1.png)\n\n\n\n","source":"_posts/Mybatis-2.md","raw":"---\ntitle: Mybatis的增删改查操作\ncategories:\n    - Mybatis\n    \ndate: 2020-01-06\ntags:\n\t- Java\n\t- Java框架\n    - 数据库\n\n---\n\n### 准备工作\n\n基于我们之前创建的Mybatis项目即可，我在此采用的依旧是基于xml的开发方式。\n\n---\n\n### Mybatis的查询操作\n\n#### 在mapper接口中新增查询方法\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.User;\n\nimport java.util.List;\n\npublic interface IUserMapper {\n\n    /**\n     * 查询用户\n     * @return\n     */\n    public List<User> selectAll();\n    \n    \n}\n\n```\n\n#### 在IUserMapper.xml中添加查询sql语句\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace里面要配置mapper接口的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserMapper\">\n    <!--id要保持和方法名一致-->\n    <!--resultType指定返回值类型，如果是List类型 配置List的泛型即可-->\n    <select id=\"selectAll\" resultType=\"com.loonycoder.domain.User\">\n        select * from user;\n    </select>\n</mapper>\n```\n\n#### 新建测试类执行\n\n由于读取配置文件、创建SqlSessionFactory工厂等步骤复用性较高，我们在这里进行了抽取。\n```bash\npackage com.loonycoder;\n\n\nimport com.loonycoder.dao.IUserMapper;\nimport com.loonycoder.domain.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\n\nimport java.io.InputStream;\nimport java.util.Date;\nimport java.util.List;\n\npublic class MybatisTest {\n\n    private InputStream inputStream;\n    private SqlSessionFactory sqlSessionFactory;\n    private SqlSession session;\n    private IUserMapper userDao;\n\n    //before注解代表在测试方法执行前执行\n    @Before\n    public void init() throws Exception{\n        //1.读取配置文件\n        inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\");\n        //2.创建SqlSessionFactory工厂\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n        sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\n        //3.使用工厂创建SqlSession对象\n        session = sqlSessionFactory.openSession();\n        //4.使用SqlSession创建dao接口的代理对象\n        userDao = session.getMapper(IUserMapper.class);\n    }\n\n\n    //after注解代表在测试方法执行后执行\n    @After\n    public void destroy() throws Exception{\n        //6.释放资源\n        session.close();\n        inputStream.close();\n    }\n\n\n    @Test\n    public void selectTest() throws Exception{\n\n        //5.使用代理对象执行方法\n        List<User> users= userDao.selectAll();\n        for (User user: users) {\n            System.out.println(user);\n        }\n\n    }\n\n}\n\n```\n\n#### 执行结果\n![执行结果](/images/execResult1.png)\n\n---\n\n### Mybatis的保存操作\n\n#### 在mapper接口中新增保存方法\n```bash\n    /**\n     * 保存用户\n     * @param user\n     */\n    public void saveUser(User user);\n```\n\n#### 在IUserMapper.xml中添加保存sql语句\n```bash\n<insert id=\"saveUser\" parameterType=\"com.loonycoder.domain.User\">\n        insert into user (username,sex,birthday,address) values (#{userName},#{sex},#{birthday},#{address});\n    </insert>\n```\n\n**注意：\n#{}为mybatis的固定用法，用于取值。如果User实体类中的属性是自动生成的get/set，则直接写属性名称即可。\n其次，参数一定要一一对应上**\n\n#### 新建测试类执行\n```bash\n    @Test\n    public void insertTest(){\n        User user = new User();\n        user.setUserName(\"Lisa\");\n        user.setBirthday(new Date());\n        user.setAddress(\"广东\");\n        user.setSex(\"女\");\n        userDao.saveUser(user);\n        session.commit();//记得手动提交事务\n    }\n```\n\n**注意：一定要手动提交事务，否则虽然不会报错，但是不会入表！！！**\n\n#### 执行结果\n![执行结果](/images/execResult2.png)\n\n---\n\n### Mybatis的删除操作\n\n#### 在mapper接口中新增删除方法\n```bash\n /**\n     * 删除用户\n     * @param userId\n     */\n    public void deleteUser(Integer userId);\n```\n\n#### 在IUserMapper.xml中添加删除sql语句\n```bash\n<delete id=\"deleteUser\" parameterType=\"java.lang.Integer\">\n        delete from user where id = #{uid};\n    </delete>\n```\n\n**注意：因为该方法只有一个参数，所以我们在sql中标注的uid部分其实是可以随便写的，因为mybatis只会找到这一个参数**\n\n#### 新建测试类执行\n```bash\n @Test\n    public void deleteTest(){\n        userDao.deleteUser(53);\n        session.commit();//记得手动提交事务\n    }\n```\n\n#### 执行结果\n删除前：\n![执行结果](/images/execBefore.png)\n删除后：\n![执行结果](/images/execAfter.png)\n\n---\n\n### Mybatis的修改操作\n\n#### 在mapper接口中新增修改方法\n```bash\n    /**\n     * 修改用户\n     * @param user\n     */\n    public void updateUser(User user);\n```\n\n#### 在IUserMapper.xml中添加修改sql语句\n```bash\n    <update id=\"updateUser\" parameterType=\"com.loonycoder.domain.User\">\n        update user set username = #{username},sex = #{sex},birthday = #{birthday},address = #{address} where id = #{id};\n    </update>\n```\n\n#### 新建测试类执行\n```bash\n    @Test\n    public void updateTest(){\n        User user = new User();\n        user.setId(41);\n        user.setUserName(\"张三丰\");\n        session.commit();//记得手动提交事务\n    }\n```\n\n#### 执行结果\n修改前：\n![执行结果](/images/execAfter.png)\n修改后：\n![执行结果](/images/execAfter1.png)\n\n\n\n","slug":"Mybatis-2","published":1,"updated":"2020-02-12T12:24:12.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6jadwgy0000gus642mv2prr","content":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>基于我们之前创建的Mybatis项目即可，我在此采用的依旧是基于xml的开发方式。</p>\n<hr>\n<h3 id=\"Mybatis的查询操作\"><a href=\"#Mybatis的查询操作\" class=\"headerlink\" title=\"Mybatis的查询操作\"></a>Mybatis的查询操作</h3><h4 id=\"在mapper接口中新增查询方法\"><a href=\"#在mapper接口中新增查询方法\" class=\"headerlink\" title=\"在mapper接口中新增查询方法\"></a>在mapper接口中新增查询方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IUserMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询用户</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;User&gt; selectAll();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加查询sql语句\"><a href=\"#在IUserMapper-xml中添加查询sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加查询sql语句\"></a>在IUserMapper.xml中添加查询sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class=\"line\">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        select * from user;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建测试类执行\"><a href=\"#新建测试类执行\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><p>由于读取配置文件、创建SqlSessionFactory工厂等步骤复用性较高，我们在这里进行了抽取。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.dao.IUserMapper;</span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\">import org.apache.ibatis.io.Resources;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\">import org.junit.After;</span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MybatisTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private InputStream inputStream;</span><br><span class=\"line\">    private SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    private SqlSession session;</span><br><span class=\"line\">    private IUserMapper userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    //before注解代表在测试方法执行前执行</span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void init() throws Exception&#123;</span><br><span class=\"line\">        //1.读取配置文件</span><br><span class=\"line\">        inputStream = Resources.getResourceAsStream(<span class=\"string\">\"SqlMapConfig.xml\"</span>);</span><br><span class=\"line\">        //2.创建SqlSessionFactory工厂</span><br><span class=\"line\">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class=\"line\">        sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class=\"line\">        //3.使用工厂创建SqlSession对象</span><br><span class=\"line\">        session = sqlSessionFactory.openSession();</span><br><span class=\"line\">        //4.使用SqlSession创建dao接口的代理对象</span><br><span class=\"line\">        userDao = session.getMapper(IUserMapper.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //after注解代表在测试方法执行后执行</span><br><span class=\"line\">    @After</span><br><span class=\"line\">    public void destroy() throws Exception&#123;</span><br><span class=\"line\">        //6.释放资源</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void selectTest() throws Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //5.使用代理对象执行方法</span><br><span class=\"line\">        List&lt;User&gt; users= userDao.selectAll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user: users) &#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p><img src=\"/images/execResult1.png\" alt=\"执行结果\"></p>\n<hr>\n<h3 id=\"Mybatis的保存操作\"><a href=\"#Mybatis的保存操作\" class=\"headerlink\" title=\"Mybatis的保存操作\"></a>Mybatis的保存操作</h3><h4 id=\"在mapper接口中新增保存方法\"><a href=\"#在mapper接口中新增保存方法\" class=\"headerlink\" title=\"在mapper接口中新增保存方法\"></a>在mapper接口中新增保存方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 保存用户</span><br><span class=\"line\"> * @param user</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void saveUser(User user);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加保存sql语句\"><a href=\"#在IUserMapper-xml中添加保存sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加保存sql语句\"></a>在IUserMapper.xml中添加保存sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=<span class=\"string\">\"saveUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        insert into user (username,sex,birthday,address) values (<span class=\"comment\">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class=\"line\">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：<br>#{}为mybatis的固定用法，用于取值。如果User实体类中的属性是自动生成的get/set，则直接写属性名称即可。<br>其次，参数一定要一一对应上</strong></p>\n<h4 id=\"新建测试类执行-1\"><a href=\"#新建测试类执行-1\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">insertTest</span></span>()&#123;</span><br><span class=\"line\">    User user = new User();</span><br><span class=\"line\">    user.setUserName(<span class=\"string\">\"Lisa\"</span>);</span><br><span class=\"line\">    user.setBirthday(new Date());</span><br><span class=\"line\">    user.setAddress(<span class=\"string\">\"广东\"</span>);</span><br><span class=\"line\">    user.setSex(<span class=\"string\">\"女\"</span>);</span><br><span class=\"line\">    userDao.saveUser(user);</span><br><span class=\"line\">    session.commit();//记得手动提交事务</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：一定要手动提交事务，否则虽然不会报错，但是不会入表！！！</strong></p>\n<h4 id=\"执行结果-1\"><a href=\"#执行结果-1\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p><img src=\"/images/execResult2.png\" alt=\"执行结果\"></p>\n<hr>\n<h3 id=\"Mybatis的删除操作\"><a href=\"#Mybatis的删除操作\" class=\"headerlink\" title=\"Mybatis的删除操作\"></a>Mybatis的删除操作</h3><h4 id=\"在mapper接口中新增删除方法\"><a href=\"#在mapper接口中新增删除方法\" class=\"headerlink\" title=\"在mapper接口中新增删除方法\"></a>在mapper接口中新增删除方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 删除用户</span><br><span class=\"line\">    * @param userId</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public void deleteUser(Integer userId);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加删除sql语句\"><a href=\"#在IUserMapper-xml中添加删除sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加删除sql语句\"></a>在IUserMapper.xml中添加删除sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;delete id=<span class=\"string\">\"deleteUser\"</span> parameterType=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span><br><span class=\"line\">        delete from user <span class=\"built_in\">where</span> id = <span class=\"comment\">#&#123;uid&#125;;</span></span><br><span class=\"line\">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：因为该方法只有一个参数，所以我们在sql中标注的uid部分其实是可以随便写的，因为mybatis只会找到这一个参数</strong></p>\n<h4 id=\"新建测试类执行-2\"><a href=\"#新建测试类执行-2\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">   public void <span class=\"function\"><span class=\"title\">deleteTest</span></span>()&#123;</span><br><span class=\"line\">       userDao.deleteUser(53);</span><br><span class=\"line\">       session.commit();//记得手动提交事务</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果-2\"><a href=\"#执行结果-2\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p>删除前：<br><img src=\"/images/execBefore.png\" alt=\"执行结果\"><br>删除后：<br><img src=\"/images/execAfter.png\" alt=\"执行结果\"></p>\n<hr>\n<h3 id=\"Mybatis的修改操作\"><a href=\"#Mybatis的修改操作\" class=\"headerlink\" title=\"Mybatis的修改操作\"></a>Mybatis的修改操作</h3><h4 id=\"在mapper接口中新增修改方法\"><a href=\"#在mapper接口中新增修改方法\" class=\"headerlink\" title=\"在mapper接口中新增修改方法\"></a>在mapper接口中新增修改方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 修改用户</span><br><span class=\"line\"> * @param user</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void updateUser(User user);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加修改sql语句\"><a href=\"#在IUserMapper-xml中添加修改sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加修改sql语句\"></a>在IUserMapper.xml中添加修改sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=<span class=\"string\">\"updateUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">    update user <span class=\"built_in\">set</span> username = <span class=\"comment\">#&#123;username&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class=\"line\">&lt;/update&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建测试类执行-3\"><a href=\"#新建测试类执行-3\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">updateTest</span></span>()&#123;</span><br><span class=\"line\">    User user = new User();</span><br><span class=\"line\">    user.setId(41);</span><br><span class=\"line\">    user.setUserName(<span class=\"string\">\"张三丰\"</span>);</span><br><span class=\"line\">    session.commit();//记得手动提交事务</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果-3\"><a href=\"#执行结果-3\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p>修改前：<br><img src=\"/images/execAfter.png\" alt=\"执行结果\"><br>修改后：<br><img src=\"/images/execAfter1.png\" alt=\"执行结果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>基于我们之前创建的Mybatis项目即可，我在此采用的依旧是基于xml的开发方式。</p>\n<hr>\n<h3 id=\"Mybatis的查询操作\"><a href=\"#Mybatis的查询操作\" class=\"headerlink\" title=\"Mybatis的查询操作\"></a>Mybatis的查询操作</h3><h4 id=\"在mapper接口中新增查询方法\"><a href=\"#在mapper接口中新增查询方法\" class=\"headerlink\" title=\"在mapper接口中新增查询方法\"></a>在mapper接口中新增查询方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IUserMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询用户</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;User&gt; selectAll();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加查询sql语句\"><a href=\"#在IUserMapper-xml中添加查询sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加查询sql语句\"></a>在IUserMapper.xml中添加查询sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class=\"line\">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        select * from user;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建测试类执行\"><a href=\"#新建测试类执行\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><p>由于读取配置文件、创建SqlSessionFactory工厂等步骤复用性较高，我们在这里进行了抽取。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.dao.IUserMapper;</span><br><span class=\"line\">import com.loonycoder.domain.User;</span><br><span class=\"line\">import org.apache.ibatis.io.Resources;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\">import org.junit.After;</span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MybatisTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private InputStream inputStream;</span><br><span class=\"line\">    private SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    private SqlSession session;</span><br><span class=\"line\">    private IUserMapper userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    //before注解代表在测试方法执行前执行</span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void init() throws Exception&#123;</span><br><span class=\"line\">        //1.读取配置文件</span><br><span class=\"line\">        inputStream = Resources.getResourceAsStream(<span class=\"string\">\"SqlMapConfig.xml\"</span>);</span><br><span class=\"line\">        //2.创建SqlSessionFactory工厂</span><br><span class=\"line\">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class=\"line\">        sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class=\"line\">        //3.使用工厂创建SqlSession对象</span><br><span class=\"line\">        session = sqlSessionFactory.openSession();</span><br><span class=\"line\">        //4.使用SqlSession创建dao接口的代理对象</span><br><span class=\"line\">        userDao = session.getMapper(IUserMapper.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //after注解代表在测试方法执行后执行</span><br><span class=\"line\">    @After</span><br><span class=\"line\">    public void destroy() throws Exception&#123;</span><br><span class=\"line\">        //6.释放资源</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void selectTest() throws Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //5.使用代理对象执行方法</span><br><span class=\"line\">        List&lt;User&gt; users= userDao.selectAll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user: users) &#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p><img src=\"/images/execResult1.png\" alt=\"执行结果\"></p>\n<hr>\n<h3 id=\"Mybatis的保存操作\"><a href=\"#Mybatis的保存操作\" class=\"headerlink\" title=\"Mybatis的保存操作\"></a>Mybatis的保存操作</h3><h4 id=\"在mapper接口中新增保存方法\"><a href=\"#在mapper接口中新增保存方法\" class=\"headerlink\" title=\"在mapper接口中新增保存方法\"></a>在mapper接口中新增保存方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 保存用户</span><br><span class=\"line\"> * @param user</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void saveUser(User user);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加保存sql语句\"><a href=\"#在IUserMapper-xml中添加保存sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加保存sql语句\"></a>在IUserMapper.xml中添加保存sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=<span class=\"string\">\"saveUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        insert into user (username,sex,birthday,address) values (<span class=\"comment\">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class=\"line\">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：<br>#{}为mybatis的固定用法，用于取值。如果User实体类中的属性是自动生成的get/set，则直接写属性名称即可。<br>其次，参数一定要一一对应上</strong></p>\n<h4 id=\"新建测试类执行-1\"><a href=\"#新建测试类执行-1\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">insertTest</span></span>()&#123;</span><br><span class=\"line\">    User user = new User();</span><br><span class=\"line\">    user.setUserName(<span class=\"string\">\"Lisa\"</span>);</span><br><span class=\"line\">    user.setBirthday(new Date());</span><br><span class=\"line\">    user.setAddress(<span class=\"string\">\"广东\"</span>);</span><br><span class=\"line\">    user.setSex(<span class=\"string\">\"女\"</span>);</span><br><span class=\"line\">    userDao.saveUser(user);</span><br><span class=\"line\">    session.commit();//记得手动提交事务</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：一定要手动提交事务，否则虽然不会报错，但是不会入表！！！</strong></p>\n<h4 id=\"执行结果-1\"><a href=\"#执行结果-1\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p><img src=\"/images/execResult2.png\" alt=\"执行结果\"></p>\n<hr>\n<h3 id=\"Mybatis的删除操作\"><a href=\"#Mybatis的删除操作\" class=\"headerlink\" title=\"Mybatis的删除操作\"></a>Mybatis的删除操作</h3><h4 id=\"在mapper接口中新增删除方法\"><a href=\"#在mapper接口中新增删除方法\" class=\"headerlink\" title=\"在mapper接口中新增删除方法\"></a>在mapper接口中新增删除方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 删除用户</span><br><span class=\"line\">    * @param userId</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public void deleteUser(Integer userId);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加删除sql语句\"><a href=\"#在IUserMapper-xml中添加删除sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加删除sql语句\"></a>在IUserMapper.xml中添加删除sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;delete id=<span class=\"string\">\"deleteUser\"</span> parameterType=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span><br><span class=\"line\">        delete from user <span class=\"built_in\">where</span> id = <span class=\"comment\">#&#123;uid&#125;;</span></span><br><span class=\"line\">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：因为该方法只有一个参数，所以我们在sql中标注的uid部分其实是可以随便写的，因为mybatis只会找到这一个参数</strong></p>\n<h4 id=\"新建测试类执行-2\"><a href=\"#新建测试类执行-2\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">   public void <span class=\"function\"><span class=\"title\">deleteTest</span></span>()&#123;</span><br><span class=\"line\">       userDao.deleteUser(53);</span><br><span class=\"line\">       session.commit();//记得手动提交事务</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果-2\"><a href=\"#执行结果-2\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p>删除前：<br><img src=\"/images/execBefore.png\" alt=\"执行结果\"><br>删除后：<br><img src=\"/images/execAfter.png\" alt=\"执行结果\"></p>\n<hr>\n<h3 id=\"Mybatis的修改操作\"><a href=\"#Mybatis的修改操作\" class=\"headerlink\" title=\"Mybatis的修改操作\"></a>Mybatis的修改操作</h3><h4 id=\"在mapper接口中新增修改方法\"><a href=\"#在mapper接口中新增修改方法\" class=\"headerlink\" title=\"在mapper接口中新增修改方法\"></a>在mapper接口中新增修改方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 修改用户</span><br><span class=\"line\"> * @param user</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void updateUser(User user);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在IUserMapper-xml中添加修改sql语句\"><a href=\"#在IUserMapper-xml中添加修改sql语句\" class=\"headerlink\" title=\"在IUserMapper.xml中添加修改sql语句\"></a>在IUserMapper.xml中添加修改sql语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=<span class=\"string\">\"updateUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">    update user <span class=\"built_in\">set</span> username = <span class=\"comment\">#&#123;username&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class=\"line\">&lt;/update&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建测试类执行-3\"><a href=\"#新建测试类执行-3\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">updateTest</span></span>()&#123;</span><br><span class=\"line\">    User user = new User();</span><br><span class=\"line\">    user.setId(41);</span><br><span class=\"line\">    user.setUserName(<span class=\"string\">\"张三丰\"</span>);</span><br><span class=\"line\">    session.commit();//记得手动提交事务</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果-3\"><a href=\"#执行结果-3\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p>修改前：<br><img src=\"/images/execAfter.png\" alt=\"执行结果\"><br>修改后：<br><img src=\"/images/execAfter1.png\" alt=\"执行结果\"></p>\n"},{"title":"Mybatis的多表查询","date":"2020-01-06T16:00:00.000Z","_content":"\n### 场景(一对多)\n\n用户和账户\n一个用户可以有多个账户\n一个账户只能属于一个用户（多个账户也可以属于同一个用户）\n\n需要实现：\n查询账户时，可以查询到归属的用户信息。\n\n\n#### 准备工作\n\n##### 建表\n建立用户表和账户表：让用户表和账户表之间具备一对多的关系（需要在账户表中添加外键）\n建表语句\n```bash\nDROP TABLE IF EXISTS `user`;\n\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL auto_increment,\n  `username` varchar(32) NOT NULL COMMENT '用户名称',\n  `birthday` datetime default NULL COMMENT '生日',\n  `sex` char(1) default NULL COMMENT '性别',\n  `address` varchar(256) default NULL COMMENT '地址',\n  PRIMARY KEY  (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,'张三','2018-02-27 17:47:08','男','北京'),(2,'李四','2018-03-02 15:09:37','女','深圳'),(3,'王五','2018-03-04 11:34:34','女','上海'),(4,'赵六','2018-03-04 12:04:06','男','成都'),(4,'刘七','2018-03-07 17:37:26','男','西安'),(48,'孙八','2018-03-08 11:44:00','女','杭州');\n\n\n\n\n\nDROP TABLE IF EXISTS `account`;\n\nCREATE TABLE `account` (\n  `ID` int(11) NOT NULL COMMENT '编号',\n  `UID` int(11) default NULL COMMENT '用户编号',\n  `MONEY` double default NULL COMMENT '金额',\n  PRIMARY KEY  (`ID`),\n  KEY `FK_Reference_8` (`UID`),\n  CONSTRAINT `FK_Reference_8` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `account`(`ID`,`UID`,`MONEY`) values (1,1,1000),(2,3,1000),(3,5,2000);\n```\n\n##### 建实体类\n用户实体类和账户实体类：让用户和账户的实体类能体现出一对多的关系\n由于我们之前新建过用户的实体类，所以我们在这里只新建一个账户实体类即可，和用户实体类一样放在com.loonycoder.domain包下\n此处在从表实体类中引用主表的对象。\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\n\npublic class Account implements Serializable {\n    private Integer id;\n    private Integer uid;\n    private Double money;\n\n    //从表实体应该包含一个主表实体的对象引用\n    private User user;\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public Integer getUid() {\n        return uid;\n    }\n\n    public void setUid(Integer uid) {\n        this.uid = uid;\n    }\n\n    public Double getMoney() {\n        return money;\n    }\n\n    public void setMoney(Double money) {\n        this.money = money;\n    }\n\n    @Override\n    public String toString() {\n        return \"Account{\" +\n                \"id=\" + id +\n                \", uid=\" + uid +\n                \", money=\" + money +\n                '}';\n    }\n}\n\n```\n\n\n\n接下来我们新建一个Account的Mapper接口类，并提供查询所有账户的方法。\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.Account;\nimport com.loonycoder.domain.AccountUser;\n\nimport java.util.List;\n\npublic interface IAccountMapper {\n\n\n    /**\n     * 查询所有账户\n     * @return\n     */\n    List<Account> selectAll();\n\n    /**\n     * 查询所有账户，并且包含账户对应的用户下的姓名和地址信息\n     * @return\n     */\n    List<AccountUser> selectAccountUser();\n}\n\n\n```\n\n##### 配置文件\n用户的配置文件和账户的配置文件\n用户的配置文件用之前的就可以了，我们在此只新建账户的配置文件。\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.loonycoder.dao.IAccountMapper\">\n\n    <!--定义封装account和user的resultMap-->\n    <resultMap id=\"accountUserMap\" type=\"account\">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"uid\" column=\"uid\"></result>\n        <result property=\"money\" column=\"money\"></result>\n        <!--一对一的关系映射，配置封装user的内容-->\n        <association property=\"user\" column=\"uid\" javaType=\"user\">\n            <id property=\"id\" column=\"id\"></id>\n            <result property=\"userName\" column=\"username\"></result>\n            <result property=\"address\" column=\"address\"></result>\n            <result property=\"sex\" column=\"sex\"></result>\n            <result property=\"birthday\" column=\"birthday\"></result>\n        </association>\n    </resultMap>\n\n\n    <select id=\"selectAll\" resultMap=\"accountUserMap\">\n        select u.*,a.id as aid,a.uid,a.money from account a,user u where u.id = a.uid;\n    </select>\n</mapper>\n```\n\n当然我们还需要修改一下SqlMapConfig.xml中的别名和mapper映射配置\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!--mybatis的主配置文件-->\n<configuration>\n    <!--引用外部配置文件配置数据源信息，下面的取值部分需要用${}方式取值-->\n    <properties resource=\"jdbcConfig.properties\">\n    </properties>\n    <!--配置别名 type属性指定实体类，alias指定别名-->\n    <typeAliases >\n        <!--package标签可以指定具体到某个包下所有类都使用别名，默认别名是类的名字，不区分大小写-->\n        <package name=\"com.loonycoder.domain\"></package>\n        <!--<typeAlias type=\"com.loonycoder.domain.User\" alias=\"user\"></typeAlias>-->\n    </typeAliases>\n    <!--配置环境-->\n    <environments default=\"mysql\">\n        <environment id=\"mysql\">\n            <!--配置事务-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!--配置数据源（连接池）-->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${jdbc.driver}\" />\n                <property name=\"url\" value=\"${jdbc.url}\" />\n                <property name=\"username\" value=\"${jdbc.username}\" />\n                <property name=\"password\" value=\"${jdbc.password}\" />\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!--配置映射文件（mapper类的映射文件）-->\n    <mappers>\n        <mapper resource=\"com/loonycoder/dao/IUserMapper.xml\" />\n        <mapper resource=\"com/loonycoder/dao/IAccountMapper.xml\" />\n        <!--<mapper class=\"com.loonycoder.dao.IUserMapper\" />-->\n    </mappers>\n</configuration>\n```\n\n##### 新建测试类执行\n```bash\n    @Test\n    public void selectAllAccount(){\n        List<Account> accts = accountMapper.selectAll();\n        for (Account acct : accts) {\n            System.out.println(\"每个账户下的用户信息\");\n            System.out.println(acct);\n            System.out.println(acct.getUser());\n        }\n    }\n```\n\n##### 执行结果\n![result](/images/mybatis1.png)\n\n---\n\n### 场景(多对一)\n\n需要实现：\n- 查询用户时，可以同时查询出用户下的所有账户信息\n\n##### 修改实体类\n我们修改User实体类，让主表包含从表的集合引用\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\n\npublic class User implements Serializable {\n    private Integer id;\n    private String userName;\n    private Date birthday;\n    private String sex;\n    private String address;\n\n    private List<Account> accounts;\n\n    public List<Account> getAccounts() {\n        return accounts;\n    }\n\n    public void setAccounts(List<Account> accounts) {\n        this.accounts = accounts;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public Date getBirthday() {\n        return birthday;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", userName='\" + userName + '\\'' +\n                \", birthday=\" + birthday +\n                \", sex='\" + sex + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n```\n\n##### 修改配置文件\n\nUser接口类我们不做修改，直接用原来的查询所有用户的方法即可，我们只需要改动映射配置文件。\n修改IUserMapper.xml内容如下：\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace里面要配置mapper接口的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserMapper\">\n    <!--配置列名和实体类属性对应关系 type属性不区分大小写-->\n    <resultMap id=\"userMap\" type=\"com.loonycoder.domain.User\">\n        <!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名-->\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n    </resultMap>\n    <!--定义User的resultMap-->\n    <resultMap id=\"userAccountMap\" type=\"user\">\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <!--配置user对象中accounts集合的映射-->\n        <!--ofType指的是集合的泛型-->\n        <collection property=\"accounts\" ofType=\"account\">\n            <id property=\"id\" column=\"aid\"></id>\n            <result property=\"uid\" column=\"uid\"></result>\n            <result property=\"money\" column=\"money\"></result>\n        </collection>\n    </resultMap>\n    <!--id要保持和方法名一致-->\n    <!--resultType指定返回值类型，如果是List类型 配置List的泛型即可-->\n    <!--此处使用左外连接查询-->\n    <select id=\"selectAll\" resultMap=\"userAccountMap\">\n        select * from user u left outer join account a on u.id = a.uid;\n    </select>\n\n    <insert id=\"saveUser\" parameterType=\"com.loonycoder.domain.User\">\n        insert into user (username,sex,birthday,address) values (#{userName},#{sex},#{birthday},#{address});\n    </insert>\n\n    <delete id=\"deleteUser\" parameterType=\"java.lang.Integer\">\n        delete from user where id = #{uid};\n    </delete>\n\n    <update id=\"updateUser\" parameterType=\"com.loonycoder.domain.User\">\n        update user set username = #{userName},sex = #{sex},birthday = #{birthday},address = #{address} where id = #{id};\n    </update>\n    \n    <select id=\"selectUserByCondition\" resultMap=\"userMap\" parameterType=\"user\">\n          select * from user\n          <where>\n            <if test=\"sex != null and sex != '' \">\n                and sex = #{sex}\n            </if>\n          </where>\n\n    </select>\n</mapper>\n```\n\n##### 新建测试类执行\n```bash\n    @Test\n    public void selectTest() throws Exception{\n\n        //5.使用代理对象执行方法\n        List<User> users= userDao.selectAll();\n        for (User user: users) {\n            System.out.println(\"每个用户下账户的信息：\");\n            System.out.println(user);\n            System.out.println(user.getAccounts());\n        }\n\n    }\n```\n\n##### 执行结果\n![result](/images/mybatis2.png)\n\n---\n\n### 场景(多对多)\n用户和角色\n一个用户有多个角色\n一个角色有多个用户\n需要实现：\n- 当我们查询用户时，可以同时得到用户的角色信息\n- 当我们查询角色时，可以同时得到角色所属的用户信息\n\n##### 新建角色表和中间表\n建表语句：\n```bash\nDROP TABLE IF EXISTS `role`;\n\nCREATE TABLE `role` (\n  `ID` int(11) NOT NULL COMMENT '编号',\n  `ROLE_NAME` varchar(30) default NULL COMMENT '角色名称',\n  `ROLE_DESC` varchar(60) default NULL COMMENT '角色描述',\n  PRIMARY KEY  (`ID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `role`(`ID`,`ROLE_NAME`,`ROLE_DESC`) values (1,'董事长','管理整个公司'),(2,'总裁','管理整个公司'),(3,'部门经理','管理某个部门');\n\n\n\n\n\nDROP TABLE IF EXISTS `user_role`;\n\nCREATE TABLE `user_role` (\n  `UID` int(11) NOT NULL COMMENT '用户编号',\n  `RID` int(11) NOT NULL COMMENT '角色编号',\n  PRIMARY KEY  (`UID`,`RID`),\n  KEY `FK_Reference_10` (`RID`),\n  CONSTRAINT `FK_Reference_10` FOREIGN KEY (`RID`) REFERENCES `role` (`ID`),\n  CONSTRAINT `FK_Reference_9` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\ninsert  into `user_role`(`UID`,`RID`) values (1,1),(3,1),(3,2);\n\n```\n\n##### 新建角色实体类\n此处注意也要让用户和角色体现出多对多关系：需要各自包含对方的一个集合引用。\n\n新建角色实体类：\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\n\npublic class Role implements Serializable {\n    private Integer roleId;\n    private String roleName;\n    private String roleDesc;\n\n    public Integer getRoleId() {\n        return roleId;\n    }\n\n    public void setRoleId(Integer roleId) {\n        this.roleId = roleId;\n    }\n\n    public String getRoleName() {\n        return roleName;\n    }\n\n    public void setRoleName(String roleName) {\n        this.roleName = roleName;\n    }\n\n    public String getRoleDesc() {\n        return roleDesc;\n    }\n\n    public void setRoleDesc(String roleDesc) {\n        this.roleDesc = roleDesc;\n    }\n\n    @Override\n    public String toString() {\n        return \"Role{\" +\n                \"roleId=\" + roleId +\n                \", roleName='\" + roleName + '\\'' +\n                \", roleDesc='\" + roleDesc + '\\'' +\n                '}';\n    }\n}\n\n```\n\n##### 新建实体类接口\n新建RoleMapper接口类：\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.Role;\n\nimport java.util.List;\n\npublic interface IRoleMapper {\n\n\n    /**\n     * 查询所有角色信息\n     * @return\n     */\n    public List<Role> selectAll();\n}\n\n```\n\n##### 新建角色实体配置文件\n一、新建IRoleMapper.xml\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.loonycoder.dao.IRoleMapper\">\n    <!--定义role表的resultMap-->\n    <resultMap id=\"roleMap\" type=\"role\">\n        <id property=\"roleId\" column=\"rid\"></id>\n        <result property=\"roleName\" column=\"role_name\"></result>\n        <result property=\"roleDesc\" column=\"role_desc\"></result>\n        <collection property=\"users\" ofType=\"user\">\n            <id property=\"id\" column=\"id\"></id>\n            <result property=\"userName\" column=\"username\"></result>\n            <result property=\"address\" column=\"address\"></result>\n            <result property=\"sex\" column=\"sex\"></result>\n            <result property=\"birthday\" column=\"birthday\"></result>\n        </collection>\n    </resultMap>\n\n    <!--查询所有角色信息-->\n    <!--使用两次左外连接查询-->\n    <select id=\"selectAll\" resultMap=\"roleMap\">\n        select u.*,r.id as rid,r.role_name,r.role_desc from role r\n        left outer join user_role ur on r.id = ur.rid\n        left outer join user u on u.id = ur.uid\n    </select>\n</mapper>\n\n```\n\n二、在SqlMapConfig.xml中添加映射配置\n```bash\n<!--配置映射文件（mapper类的映射文件）-->\n    <mappers>\n        <mapper resource=\"com/loonycoder/dao/IUserMapper.xml\" />\n        <mapper resource=\"com/loonycoder/dao/IAccountMapper.xml\" />\n        <mapper resource=\"com/loonycoder/dao/IRoleMapper.xml\" />\n        <!--<mapper class=\"com.loonycoder.dao.IUserMapper\" />-->\n    </mappers>\n```\n\n##### 新建测试类执行\n\n```bash\n    @Test\n    public void selectRoleAll(){\n        List<Role> roles = roleMapper.selectAll();\n        for (Role role:roles) {\n            System.out.println(\"每个角色的用户信息：\");\n            System.out.println(role);\n            System.out.println(role.getUsers());\n        }\n    }\n```\n\n##### 执行结果\n![result](/images/mybatis3.png)\n\n---\n\n##### 根据用户查询角色\n\n同理，我们修改用户实体类，添加多对多的关系映射：一个用户具备多个角色\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\n\npublic class User implements Serializable {\n    private Integer id;\n    private String userName;\n    private Date birthday;\n    private String sex;\n    private String address;\n\n\n//    多对多关系映射：一个用户具备多个角色\n    private List<Role> roles;\n\n    public List<Role> getRoles() {\n        return roles;\n    }\n\n    public void setRoles(List<Role> roles) {\n        this.roles = roles;\n    }\n\n    private List<Account> accounts;\n\n    public List<Account> getAccounts() {\n        return accounts;\n    }\n\n    public void setAccounts(List<Account> accounts) {\n        this.accounts = accounts;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public Date getBirthday() {\n        return birthday;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", userName='\" + userName + '\\'' +\n                \", birthday=\" + birthday +\n                \", sex='\" + sex + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n```\n\n其次，修改用户实体映射配置文件。\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace里面要配置mapper接口的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserMapper\">\n    <!--配置列名和实体类属性对应关系 type属性不区分大小写-->\n    <resultMap id=\"userMap\" type=\"com.loonycoder.domain.User\">\n        <!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名-->\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n    </resultMap>\n    <!--定义User的resultMap-->\n    <resultMap id=\"userAccountMap\" type=\"user\">\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <!--配置user对象中accounts集合的映射-->\n        <!--ofType指的是集合的泛型-->\n        <collection property=\"accounts\" ofType=\"account\">\n            <id property=\"id\" column=\"aid\"></id>\n            <result property=\"uid\" column=\"uid\"></result>\n            <result property=\"money\" column=\"money\"></result>\n        </collection>\n    </resultMap>\n    \n    <!--配置user的userRoleMap-->\n    <resultMap id=\"userRoleMap\" type=\"user\">\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <collection property=\"roles\" ofType=\"role\">\n            <id property=\"roleId\" column=\"rid\"></id>\n            <result property=\"roleName\" column=\"role_name\"></result>\n            <result property=\"roleDesc\" column=\"role_desc\"></result>\n        </collection>\n    </resultMap>\n    <!--id要保持和方法名一致-->\n    <!--resultType指定返回值类型，如果是List类型 配置List的泛型即可-->\n    <!--此处使用左外连接查询-->\n    <select id=\"selectAll\" resultMap=\"userAccountMap\">\n        select * from user u left outer join account a on u.id = a.uid;\n    </select>\n\n    <select id=\"selectUserRoleAll\" resultMap=\"userRoleMap\">\n        select u.*,r.id as rid,r.role_name,r.role_desc from user u\n        left outer join user_role ur on u.id = ur.uid\n        left outer join role r on r.id = ur.rid\n    </select>\n\n    <insert id=\"saveUser\" parameterType=\"com.loonycoder.domain.User\">\n        insert into user (username,sex,birthday,address) values (#{userName},#{sex},#{birthday},#{address});\n    </insert>\n\n    <delete id=\"deleteUser\" parameterType=\"java.lang.Integer\">\n        delete from user where id = #{uid};\n    </delete>\n\n    <update id=\"updateUser\" parameterType=\"com.loonycoder.domain.User\">\n        update user set username = #{userName},sex = #{sex},birthday = #{birthday},address = #{address} where id = #{id};\n    </update>\n    \n    <select id=\"selectUserByCondition\" resultMap=\"userMap\" parameterType=\"user\">\n          select * from user\n          <where>\n            <if test=\"sex != null and sex != '' \">\n                and sex = #{sex}\n            </if>\n          </where>\n\n    </select>\n</mapper>\n```\n\n在UserMapper接口中添加查询方法：\n```bash\n/**\n     * 查询用户及用户下所有的角色信息\n     * @return\n     */\n    public List<User> selectUserRoleAll();\n```\n\n新建测试方法：\n```bash\n    @Test\n    public void selectUserRoleAll(){\n        List<User> users = userDao.selectUserRoleAll();\n        for (User user:users) {\n            System.out.println(\"每个用户的角色信息：\");\n            System.out.println(user);\n            System.out.println(user.getRoles());\n        }\n    }\n```\n\n执行结果：\n![result](/images/mybatis4.png)\n","source":"_posts/Mybatis-3.md","raw":"---\ntitle: Mybatis的多表查询\ncategories:\n    - Mybatis\n    \ndate: 2020-01-07\ntags:\n\t- Java\n\t- Java框架\n    - 数据库\n\n---\n\n### 场景(一对多)\n\n用户和账户\n一个用户可以有多个账户\n一个账户只能属于一个用户（多个账户也可以属于同一个用户）\n\n需要实现：\n查询账户时，可以查询到归属的用户信息。\n\n\n#### 准备工作\n\n##### 建表\n建立用户表和账户表：让用户表和账户表之间具备一对多的关系（需要在账户表中添加外键）\n建表语句\n```bash\nDROP TABLE IF EXISTS `user`;\n\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL auto_increment,\n  `username` varchar(32) NOT NULL COMMENT '用户名称',\n  `birthday` datetime default NULL COMMENT '生日',\n  `sex` char(1) default NULL COMMENT '性别',\n  `address` varchar(256) default NULL COMMENT '地址',\n  PRIMARY KEY  (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,'张三','2018-02-27 17:47:08','男','北京'),(2,'李四','2018-03-02 15:09:37','女','深圳'),(3,'王五','2018-03-04 11:34:34','女','上海'),(4,'赵六','2018-03-04 12:04:06','男','成都'),(4,'刘七','2018-03-07 17:37:26','男','西安'),(48,'孙八','2018-03-08 11:44:00','女','杭州');\n\n\n\n\n\nDROP TABLE IF EXISTS `account`;\n\nCREATE TABLE `account` (\n  `ID` int(11) NOT NULL COMMENT '编号',\n  `UID` int(11) default NULL COMMENT '用户编号',\n  `MONEY` double default NULL COMMENT '金额',\n  PRIMARY KEY  (`ID`),\n  KEY `FK_Reference_8` (`UID`),\n  CONSTRAINT `FK_Reference_8` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `account`(`ID`,`UID`,`MONEY`) values (1,1,1000),(2,3,1000),(3,5,2000);\n```\n\n##### 建实体类\n用户实体类和账户实体类：让用户和账户的实体类能体现出一对多的关系\n由于我们之前新建过用户的实体类，所以我们在这里只新建一个账户实体类即可，和用户实体类一样放在com.loonycoder.domain包下\n此处在从表实体类中引用主表的对象。\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\n\npublic class Account implements Serializable {\n    private Integer id;\n    private Integer uid;\n    private Double money;\n\n    //从表实体应该包含一个主表实体的对象引用\n    private User user;\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public Integer getUid() {\n        return uid;\n    }\n\n    public void setUid(Integer uid) {\n        this.uid = uid;\n    }\n\n    public Double getMoney() {\n        return money;\n    }\n\n    public void setMoney(Double money) {\n        this.money = money;\n    }\n\n    @Override\n    public String toString() {\n        return \"Account{\" +\n                \"id=\" + id +\n                \", uid=\" + uid +\n                \", money=\" + money +\n                '}';\n    }\n}\n\n```\n\n\n\n接下来我们新建一个Account的Mapper接口类，并提供查询所有账户的方法。\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.Account;\nimport com.loonycoder.domain.AccountUser;\n\nimport java.util.List;\n\npublic interface IAccountMapper {\n\n\n    /**\n     * 查询所有账户\n     * @return\n     */\n    List<Account> selectAll();\n\n    /**\n     * 查询所有账户，并且包含账户对应的用户下的姓名和地址信息\n     * @return\n     */\n    List<AccountUser> selectAccountUser();\n}\n\n\n```\n\n##### 配置文件\n用户的配置文件和账户的配置文件\n用户的配置文件用之前的就可以了，我们在此只新建账户的配置文件。\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.loonycoder.dao.IAccountMapper\">\n\n    <!--定义封装account和user的resultMap-->\n    <resultMap id=\"accountUserMap\" type=\"account\">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"uid\" column=\"uid\"></result>\n        <result property=\"money\" column=\"money\"></result>\n        <!--一对一的关系映射，配置封装user的内容-->\n        <association property=\"user\" column=\"uid\" javaType=\"user\">\n            <id property=\"id\" column=\"id\"></id>\n            <result property=\"userName\" column=\"username\"></result>\n            <result property=\"address\" column=\"address\"></result>\n            <result property=\"sex\" column=\"sex\"></result>\n            <result property=\"birthday\" column=\"birthday\"></result>\n        </association>\n    </resultMap>\n\n\n    <select id=\"selectAll\" resultMap=\"accountUserMap\">\n        select u.*,a.id as aid,a.uid,a.money from account a,user u where u.id = a.uid;\n    </select>\n</mapper>\n```\n\n当然我们还需要修改一下SqlMapConfig.xml中的别名和mapper映射配置\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!--mybatis的主配置文件-->\n<configuration>\n    <!--引用外部配置文件配置数据源信息，下面的取值部分需要用${}方式取值-->\n    <properties resource=\"jdbcConfig.properties\">\n    </properties>\n    <!--配置别名 type属性指定实体类，alias指定别名-->\n    <typeAliases >\n        <!--package标签可以指定具体到某个包下所有类都使用别名，默认别名是类的名字，不区分大小写-->\n        <package name=\"com.loonycoder.domain\"></package>\n        <!--<typeAlias type=\"com.loonycoder.domain.User\" alias=\"user\"></typeAlias>-->\n    </typeAliases>\n    <!--配置环境-->\n    <environments default=\"mysql\">\n        <environment id=\"mysql\">\n            <!--配置事务-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!--配置数据源（连接池）-->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${jdbc.driver}\" />\n                <property name=\"url\" value=\"${jdbc.url}\" />\n                <property name=\"username\" value=\"${jdbc.username}\" />\n                <property name=\"password\" value=\"${jdbc.password}\" />\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!--配置映射文件（mapper类的映射文件）-->\n    <mappers>\n        <mapper resource=\"com/loonycoder/dao/IUserMapper.xml\" />\n        <mapper resource=\"com/loonycoder/dao/IAccountMapper.xml\" />\n        <!--<mapper class=\"com.loonycoder.dao.IUserMapper\" />-->\n    </mappers>\n</configuration>\n```\n\n##### 新建测试类执行\n```bash\n    @Test\n    public void selectAllAccount(){\n        List<Account> accts = accountMapper.selectAll();\n        for (Account acct : accts) {\n            System.out.println(\"每个账户下的用户信息\");\n            System.out.println(acct);\n            System.out.println(acct.getUser());\n        }\n    }\n```\n\n##### 执行结果\n![result](/images/mybatis1.png)\n\n---\n\n### 场景(多对一)\n\n需要实现：\n- 查询用户时，可以同时查询出用户下的所有账户信息\n\n##### 修改实体类\n我们修改User实体类，让主表包含从表的集合引用\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\n\npublic class User implements Serializable {\n    private Integer id;\n    private String userName;\n    private Date birthday;\n    private String sex;\n    private String address;\n\n    private List<Account> accounts;\n\n    public List<Account> getAccounts() {\n        return accounts;\n    }\n\n    public void setAccounts(List<Account> accounts) {\n        this.accounts = accounts;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public Date getBirthday() {\n        return birthday;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", userName='\" + userName + '\\'' +\n                \", birthday=\" + birthday +\n                \", sex='\" + sex + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n```\n\n##### 修改配置文件\n\nUser接口类我们不做修改，直接用原来的查询所有用户的方法即可，我们只需要改动映射配置文件。\n修改IUserMapper.xml内容如下：\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace里面要配置mapper接口的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserMapper\">\n    <!--配置列名和实体类属性对应关系 type属性不区分大小写-->\n    <resultMap id=\"userMap\" type=\"com.loonycoder.domain.User\">\n        <!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名-->\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n    </resultMap>\n    <!--定义User的resultMap-->\n    <resultMap id=\"userAccountMap\" type=\"user\">\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <!--配置user对象中accounts集合的映射-->\n        <!--ofType指的是集合的泛型-->\n        <collection property=\"accounts\" ofType=\"account\">\n            <id property=\"id\" column=\"aid\"></id>\n            <result property=\"uid\" column=\"uid\"></result>\n            <result property=\"money\" column=\"money\"></result>\n        </collection>\n    </resultMap>\n    <!--id要保持和方法名一致-->\n    <!--resultType指定返回值类型，如果是List类型 配置List的泛型即可-->\n    <!--此处使用左外连接查询-->\n    <select id=\"selectAll\" resultMap=\"userAccountMap\">\n        select * from user u left outer join account a on u.id = a.uid;\n    </select>\n\n    <insert id=\"saveUser\" parameterType=\"com.loonycoder.domain.User\">\n        insert into user (username,sex,birthday,address) values (#{userName},#{sex},#{birthday},#{address});\n    </insert>\n\n    <delete id=\"deleteUser\" parameterType=\"java.lang.Integer\">\n        delete from user where id = #{uid};\n    </delete>\n\n    <update id=\"updateUser\" parameterType=\"com.loonycoder.domain.User\">\n        update user set username = #{userName},sex = #{sex},birthday = #{birthday},address = #{address} where id = #{id};\n    </update>\n    \n    <select id=\"selectUserByCondition\" resultMap=\"userMap\" parameterType=\"user\">\n          select * from user\n          <where>\n            <if test=\"sex != null and sex != '' \">\n                and sex = #{sex}\n            </if>\n          </where>\n\n    </select>\n</mapper>\n```\n\n##### 新建测试类执行\n```bash\n    @Test\n    public void selectTest() throws Exception{\n\n        //5.使用代理对象执行方法\n        List<User> users= userDao.selectAll();\n        for (User user: users) {\n            System.out.println(\"每个用户下账户的信息：\");\n            System.out.println(user);\n            System.out.println(user.getAccounts());\n        }\n\n    }\n```\n\n##### 执行结果\n![result](/images/mybatis2.png)\n\n---\n\n### 场景(多对多)\n用户和角色\n一个用户有多个角色\n一个角色有多个用户\n需要实现：\n- 当我们查询用户时，可以同时得到用户的角色信息\n- 当我们查询角色时，可以同时得到角色所属的用户信息\n\n##### 新建角色表和中间表\n建表语句：\n```bash\nDROP TABLE IF EXISTS `role`;\n\nCREATE TABLE `role` (\n  `ID` int(11) NOT NULL COMMENT '编号',\n  `ROLE_NAME` varchar(30) default NULL COMMENT '角色名称',\n  `ROLE_DESC` varchar(60) default NULL COMMENT '角色描述',\n  PRIMARY KEY  (`ID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\ninsert  into `role`(`ID`,`ROLE_NAME`,`ROLE_DESC`) values (1,'董事长','管理整个公司'),(2,'总裁','管理整个公司'),(3,'部门经理','管理某个部门');\n\n\n\n\n\nDROP TABLE IF EXISTS `user_role`;\n\nCREATE TABLE `user_role` (\n  `UID` int(11) NOT NULL COMMENT '用户编号',\n  `RID` int(11) NOT NULL COMMENT '角色编号',\n  PRIMARY KEY  (`UID`,`RID`),\n  KEY `FK_Reference_10` (`RID`),\n  CONSTRAINT `FK_Reference_10` FOREIGN KEY (`RID`) REFERENCES `role` (`ID`),\n  CONSTRAINT `FK_Reference_9` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\ninsert  into `user_role`(`UID`,`RID`) values (1,1),(3,1),(3,2);\n\n```\n\n##### 新建角色实体类\n此处注意也要让用户和角色体现出多对多关系：需要各自包含对方的一个集合引用。\n\n新建角色实体类：\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\n\npublic class Role implements Serializable {\n    private Integer roleId;\n    private String roleName;\n    private String roleDesc;\n\n    public Integer getRoleId() {\n        return roleId;\n    }\n\n    public void setRoleId(Integer roleId) {\n        this.roleId = roleId;\n    }\n\n    public String getRoleName() {\n        return roleName;\n    }\n\n    public void setRoleName(String roleName) {\n        this.roleName = roleName;\n    }\n\n    public String getRoleDesc() {\n        return roleDesc;\n    }\n\n    public void setRoleDesc(String roleDesc) {\n        this.roleDesc = roleDesc;\n    }\n\n    @Override\n    public String toString() {\n        return \"Role{\" +\n                \"roleId=\" + roleId +\n                \", roleName='\" + roleName + '\\'' +\n                \", roleDesc='\" + roleDesc + '\\'' +\n                '}';\n    }\n}\n\n```\n\n##### 新建实体类接口\n新建RoleMapper接口类：\n```bash\npackage com.loonycoder.dao;\n\nimport com.loonycoder.domain.Role;\n\nimport java.util.List;\n\npublic interface IRoleMapper {\n\n\n    /**\n     * 查询所有角色信息\n     * @return\n     */\n    public List<Role> selectAll();\n}\n\n```\n\n##### 新建角色实体配置文件\n一、新建IRoleMapper.xml\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.loonycoder.dao.IRoleMapper\">\n    <!--定义role表的resultMap-->\n    <resultMap id=\"roleMap\" type=\"role\">\n        <id property=\"roleId\" column=\"rid\"></id>\n        <result property=\"roleName\" column=\"role_name\"></result>\n        <result property=\"roleDesc\" column=\"role_desc\"></result>\n        <collection property=\"users\" ofType=\"user\">\n            <id property=\"id\" column=\"id\"></id>\n            <result property=\"userName\" column=\"username\"></result>\n            <result property=\"address\" column=\"address\"></result>\n            <result property=\"sex\" column=\"sex\"></result>\n            <result property=\"birthday\" column=\"birthday\"></result>\n        </collection>\n    </resultMap>\n\n    <!--查询所有角色信息-->\n    <!--使用两次左外连接查询-->\n    <select id=\"selectAll\" resultMap=\"roleMap\">\n        select u.*,r.id as rid,r.role_name,r.role_desc from role r\n        left outer join user_role ur on r.id = ur.rid\n        left outer join user u on u.id = ur.uid\n    </select>\n</mapper>\n\n```\n\n二、在SqlMapConfig.xml中添加映射配置\n```bash\n<!--配置映射文件（mapper类的映射文件）-->\n    <mappers>\n        <mapper resource=\"com/loonycoder/dao/IUserMapper.xml\" />\n        <mapper resource=\"com/loonycoder/dao/IAccountMapper.xml\" />\n        <mapper resource=\"com/loonycoder/dao/IRoleMapper.xml\" />\n        <!--<mapper class=\"com.loonycoder.dao.IUserMapper\" />-->\n    </mappers>\n```\n\n##### 新建测试类执行\n\n```bash\n    @Test\n    public void selectRoleAll(){\n        List<Role> roles = roleMapper.selectAll();\n        for (Role role:roles) {\n            System.out.println(\"每个角色的用户信息：\");\n            System.out.println(role);\n            System.out.println(role.getUsers());\n        }\n    }\n```\n\n##### 执行结果\n![result](/images/mybatis3.png)\n\n---\n\n##### 根据用户查询角色\n\n同理，我们修改用户实体类，添加多对多的关系映射：一个用户具备多个角色\n```bash\npackage com.loonycoder.domain;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\n\npublic class User implements Serializable {\n    private Integer id;\n    private String userName;\n    private Date birthday;\n    private String sex;\n    private String address;\n\n\n//    多对多关系映射：一个用户具备多个角色\n    private List<Role> roles;\n\n    public List<Role> getRoles() {\n        return roles;\n    }\n\n    public void setRoles(List<Role> roles) {\n        this.roles = roles;\n    }\n\n    private List<Account> accounts;\n\n    public List<Account> getAccounts() {\n        return accounts;\n    }\n\n    public void setAccounts(List<Account> accounts) {\n        this.accounts = accounts;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public Date getBirthday() {\n        return birthday;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", userName='\" + userName + '\\'' +\n                \", birthday=\" + birthday +\n                \", sex='\" + sex + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n```\n\n其次，修改用户实体映射配置文件。\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace里面要配置mapper接口的全限定类名-->\n<mapper namespace=\"com.loonycoder.dao.IUserMapper\">\n    <!--配置列名和实体类属性对应关系 type属性不区分大小写-->\n    <resultMap id=\"userMap\" type=\"com.loonycoder.domain.User\">\n        <!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名-->\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n    </resultMap>\n    <!--定义User的resultMap-->\n    <resultMap id=\"userAccountMap\" type=\"user\">\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <!--配置user对象中accounts集合的映射-->\n        <!--ofType指的是集合的泛型-->\n        <collection property=\"accounts\" ofType=\"account\">\n            <id property=\"id\" column=\"aid\"></id>\n            <result property=\"uid\" column=\"uid\"></result>\n            <result property=\"money\" column=\"money\"></result>\n        </collection>\n    </resultMap>\n    \n    <!--配置user的userRoleMap-->\n    <resultMap id=\"userRoleMap\" type=\"user\">\n        <id property=\"id\" column=\"id\"></id>\n        <result property=\"userName\" column=\"username\"></result>\n        <result property=\"sex\" column=\"sex\"></result>\n        <result property=\"address\" column=\"address\"></result>\n        <result property=\"birthday\" column=\"birthday\"></result>\n        <collection property=\"roles\" ofType=\"role\">\n            <id property=\"roleId\" column=\"rid\"></id>\n            <result property=\"roleName\" column=\"role_name\"></result>\n            <result property=\"roleDesc\" column=\"role_desc\"></result>\n        </collection>\n    </resultMap>\n    <!--id要保持和方法名一致-->\n    <!--resultType指定返回值类型，如果是List类型 配置List的泛型即可-->\n    <!--此处使用左外连接查询-->\n    <select id=\"selectAll\" resultMap=\"userAccountMap\">\n        select * from user u left outer join account a on u.id = a.uid;\n    </select>\n\n    <select id=\"selectUserRoleAll\" resultMap=\"userRoleMap\">\n        select u.*,r.id as rid,r.role_name,r.role_desc from user u\n        left outer join user_role ur on u.id = ur.uid\n        left outer join role r on r.id = ur.rid\n    </select>\n\n    <insert id=\"saveUser\" parameterType=\"com.loonycoder.domain.User\">\n        insert into user (username,sex,birthday,address) values (#{userName},#{sex},#{birthday},#{address});\n    </insert>\n\n    <delete id=\"deleteUser\" parameterType=\"java.lang.Integer\">\n        delete from user where id = #{uid};\n    </delete>\n\n    <update id=\"updateUser\" parameterType=\"com.loonycoder.domain.User\">\n        update user set username = #{userName},sex = #{sex},birthday = #{birthday},address = #{address} where id = #{id};\n    </update>\n    \n    <select id=\"selectUserByCondition\" resultMap=\"userMap\" parameterType=\"user\">\n          select * from user\n          <where>\n            <if test=\"sex != null and sex != '' \">\n                and sex = #{sex}\n            </if>\n          </where>\n\n    </select>\n</mapper>\n```\n\n在UserMapper接口中添加查询方法：\n```bash\n/**\n     * 查询用户及用户下所有的角色信息\n     * @return\n     */\n    public List<User> selectUserRoleAll();\n```\n\n新建测试方法：\n```bash\n    @Test\n    public void selectUserRoleAll(){\n        List<User> users = userDao.selectUserRoleAll();\n        for (User user:users) {\n            System.out.println(\"每个用户的角色信息：\");\n            System.out.println(user);\n            System.out.println(user.getRoles());\n        }\n    }\n```\n\n执行结果：\n![result](/images/mybatis4.png)\n","slug":"Mybatis-3","published":1,"updated":"2020-02-12T19:13:34.854Z","_id":"ck6jmftg20000sgs6bses2hfq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"场景-一对多\"><a href=\"#场景-一对多\" class=\"headerlink\" title=\"场景(一对多)\"></a>场景(一对多)</h3><p>用户和账户<br>一个用户可以有多个账户<br>一个账户只能属于一个用户（多个账户也可以属于同一个用户）</p>\n<p>需要实现：<br>查询账户时，可以查询到归属的用户信息。</p>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><h5 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h5><p>建立用户表和账户表：让用户表和账户表之间具备一对多的关系（需要在账户表中添加外键）<br>建表语句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE IF EXISTS `user`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  `username` varchar(32) NOT NULL COMMENT <span class=\"string\">'用户名称'</span>,</span><br><span class=\"line\">  `birthday` datetime default NULL COMMENT <span class=\"string\">'生日'</span>,</span><br><span class=\"line\">  `sex` char(1) default NULL COMMENT <span class=\"string\">'性别'</span>,</span><br><span class=\"line\">  `address` varchar(256) default NULL COMMENT <span class=\"string\">'地址'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,<span class=\"string\">'张三'</span>,<span class=\"string\">'2018-02-27 17:47:08'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'北京'</span>),(2,<span class=\"string\">'李四'</span>,<span class=\"string\">'2018-03-02 15:09:37'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'深圳'</span>),(3,<span class=\"string\">'王五'</span>,<span class=\"string\">'2018-03-04 11:34:34'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'上海'</span>),(4,<span class=\"string\">'赵六'</span>,<span class=\"string\">'2018-03-04 12:04:06'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'成都'</span>),(4,<span class=\"string\">'刘七'</span>,<span class=\"string\">'2018-03-07 17:37:26'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'西安'</span>),(48,<span class=\"string\">'孙八'</span>,<span class=\"string\">'2018-03-08 11:44:00'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'杭州'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `account`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `account` (</span><br><span class=\"line\">  `ID` int(11) NOT NULL COMMENT <span class=\"string\">'编号'</span>,</span><br><span class=\"line\">  `UID` int(11) default NULL COMMENT <span class=\"string\">'用户编号'</span>,</span><br><span class=\"line\">  `MONEY` double default NULL COMMENT <span class=\"string\">'金额'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`ID`),</span><br><span class=\"line\">  KEY `FK_Reference_8` (`UID`),</span><br><span class=\"line\">  CONSTRAINT `FK_Reference_8` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `account`(`ID`,`UID`,`MONEY`) values (1,1,1000),(2,3,1000),(3,5,2000);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"建实体类\"><a href=\"#建实体类\" class=\"headerlink\" title=\"建实体类\"></a>建实体类</h5><p>用户实体类和账户实体类：让用户和账户的实体类能体现出一对多的关系<br>由于我们之前新建过用户的实体类，所以我们在这里只新建一个账户实体类即可，和用户实体类一样放在com.loonycoder.domain包下<br>此处在从表实体类中引用主表的对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Account implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private Integer uid;</span><br><span class=\"line\">    private Double money;</span><br><span class=\"line\"></span><br><span class=\"line\">    //从表实体应该包含一个主表实体的对象引用</span><br><span class=\"line\">    private User user;</span><br><span class=\"line\"></span><br><span class=\"line\">    public User <span class=\"function\"><span class=\"title\">getUser</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUser(User user) &#123;</span><br><span class=\"line\">        this.user = user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getUid</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> uid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUid(Integer uid) &#123;</span><br><span class=\"line\">        this.uid = uid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Double <span class=\"function\"><span class=\"title\">getMoney</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setMoney(Double money) &#123;</span><br><span class=\"line\">        this.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"Account&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", uid=\"</span> + uid +</span><br><span class=\"line\">                <span class=\"string\">\", money=\"</span> + money +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来我们新建一个Account的Mapper接口类，并提供查询所有账户的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.Account;</span><br><span class=\"line\">import com.loonycoder.domain.AccountUser;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IAccountMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有账户</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    List&lt;Account&gt; selectAll();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有账户，并且包含账户对应的用户下的姓名和地址信息</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    List&lt;AccountUser&gt; selectAccountUser();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><p>用户的配置文件和账户的配置文件<br>用户的配置文件用之前的就可以了，我们在此只新建账户的配置文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IAccountMapper\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--定义封装account和user的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"accountUserMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"account\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"aid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"uid\"</span> column=<span class=\"string\">\"uid\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"money\"</span> column=<span class=\"string\">\"money\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;!--一对一的关系映射，配置封装user的内容--&gt;</span><br><span class=\"line\">        &lt;association property=<span class=\"string\">\"user\"</span> column=<span class=\"string\">\"uid\"</span> javaType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/association&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"accountUserMap\"</span>&gt;</span><br><span class=\"line\">        select u.*,a.id as aid,a.uid,a.money from account a,user u <span class=\"built_in\">where</span> u.id = a.uid;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们还需要修改一下SqlMapConfig.xml中的别名和mapper映射配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--mybatis的主配置文件--&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--引用外部配置文件配置数据源信息，下面的取值部分需要用<span class=\"variable\">$&#123;&#125;</span>方式取值--&gt;</span><br><span class=\"line\">    &lt;properties resource=<span class=\"string\">\"jdbcConfig.properties\"</span>&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\">    &lt;!--配置别名 <span class=\"built_in\">type</span>属性指定实体类，<span class=\"built_in\">alias</span>指定别名--&gt;</span><br><span class=\"line\">    &lt;typeAliases &gt;</span><br><span class=\"line\">        &lt;!--package标签可以指定具体到某个包下所有类都使用别名，默认别名是类的名字，不区分大小写--&gt;</span><br><span class=\"line\">        &lt;package name=<span class=\"string\">\"com.loonycoder.domain\"</span>&gt;&lt;/package&gt;</span><br><span class=\"line\">        &lt;!--&lt;typeAlias <span class=\"built_in\">type</span>=<span class=\"string\">\"com.loonycoder.domain.User\"</span> <span class=\"built_in\">alias</span>=<span class=\"string\">\"user\"</span>&gt;&lt;/typeAlias&gt;--&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">    &lt;!--配置环境--&gt;</span><br><span class=\"line\">    &lt;environments default=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">        &lt;environment id=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">            &lt;!--配置事务--&gt;</span><br><span class=\"line\">            &lt;transactionManager <span class=\"built_in\">type</span>=<span class=\"string\">\"JDBC\"</span>&gt;&lt;/transactionManager&gt;</span><br><span class=\"line\">            &lt;!--配置数据源（连接池）--&gt;</span><br><span class=\"line\">            &lt;dataSource <span class=\"built_in\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"driver\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.driver&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"url\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.url&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.username&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"password\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.password&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IUserMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IAccountMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;!--&lt;mapper class=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span> /&gt;--&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建测试类执行\"><a href=\"#新建测试类执行\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">selectAllAccount</span></span>()&#123;</span><br><span class=\"line\">    List&lt;Account&gt; accts = accountMapper.selectAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Account acct : accts) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个账户下的用户信息\"</span>);</span><br><span class=\"line\">        System.out.println(acct);</span><br><span class=\"line\">        System.out.println(acct.getUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><img src=\"/images/mybatis1.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"场景-多对一\"><a href=\"#场景-多对一\" class=\"headerlink\" title=\"场景(多对一)\"></a>场景(多对一)</h3><p>需要实现：</p>\n<ul>\n<li>查询用户时，可以同时查询出用户下的所有账户信息</li>\n</ul>\n<h5 id=\"修改实体类\"><a href=\"#修改实体类\" class=\"headerlink\" title=\"修改实体类\"></a>修改实体类</h5><p>我们修改User实体类，让主表包含从表的集合引用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String userName;</span><br><span class=\"line\">    private Date birthday;</span><br><span class=\"line\">    private String sex;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Account&gt; accounts;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Account&gt; <span class=\"function\"><span class=\"title\">getAccounts</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAccounts(List&lt;Account&gt; accounts) &#123;</span><br><span class=\"line\">        this.accounts = accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getUserName</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUserName(String userName) &#123;</span><br><span class=\"line\">        this.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Date <span class=\"function\"><span class=\"title\">getBirthday</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBirthday(Date birthday) &#123;</span><br><span class=\"line\">        this.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getSex</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setSex(String sex) &#123;</span><br><span class=\"line\">        this.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getAddress</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAddress(String address) &#123;</span><br><span class=\"line\">        this.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", userName='\"</span> + userName + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", birthday=\" + birthday +</span></span><br><span class=\"line\"><span class=\"string\">                \", sex='</span><span class=\"string\">\" + sex + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                \"</span>, address=<span class=\"string\">'\" + address + '</span>\\<span class=\"string\">''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h5><p>User接口类我们不做修改，直接用原来的查询所有用户的方法即可，我们只需要改动映射配置文件。<br>修改IUserMapper.xml内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--配置列名和实体类属性对应关系 <span class=\"built_in\">type</span>属性不区分大小写--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        &lt;!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名--&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--定义User的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userAccountMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;!--配置user对象中accounts集合的映射--&gt;</span><br><span class=\"line\">        &lt;!--ofType指的是集合的泛型--&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"accounts\"</span> ofType=<span class=\"string\">\"account\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"aid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"uid\"</span> column=<span class=\"string\">\"uid\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"money\"</span> column=<span class=\"string\">\"money\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class=\"line\">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class=\"line\">    &lt;!--此处使用左外连接查询--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"userAccountMap\"</span>&gt;</span><br><span class=\"line\">        select * from user u left outer join account a on u.id = a.uid;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;insert id=<span class=\"string\">\"saveUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        insert into user (username,sex,birthday,address) values (<span class=\"comment\">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;delete id=<span class=\"string\">\"deleteUser\"</span> parameterType=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span><br><span class=\"line\">        delete from user <span class=\"built_in\">where</span> id = <span class=\"comment\">#&#123;uid&#125;;</span></span><br><span class=\"line\">    &lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;update id=<span class=\"string\">\"updateUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        update user <span class=\"built_in\">set</span> username = <span class=\"comment\">#&#123;userName&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class=\"line\">    &lt;/update&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectUserByCondition\"</span> resultMap=<span class=\"string\">\"userMap\"</span> parameterType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">          select * from user</span><br><span class=\"line\">          &lt;<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\">            &lt;<span class=\"keyword\">if</span> <span class=\"built_in\">test</span>=<span class=\"string\">\"sex != null and sex != '' \"</span>&gt;</span><br><span class=\"line\">                and sex = <span class=\"comment\">#&#123;sex&#125;</span></span><br><span class=\"line\">            &lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">          &lt;/<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建测试类执行-1\"><a href=\"#新建测试类执行-1\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void selectTest() throws Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //5.使用代理对象执行方法</span><br><span class=\"line\">    List&lt;User&gt; users= userDao.selectAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user: users) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个用户下账户的信息：\"</span>);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        System.out.println(user.getAccounts());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果-1\"><a href=\"#执行结果-1\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><img src=\"/images/mybatis2.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"场景-多对多\"><a href=\"#场景-多对多\" class=\"headerlink\" title=\"场景(多对多)\"></a>场景(多对多)</h3><p>用户和角色<br>一个用户有多个角色<br>一个角色有多个用户<br>需要实现：</p>\n<ul>\n<li>当我们查询用户时，可以同时得到用户的角色信息</li>\n<li>当我们查询角色时，可以同时得到角色所属的用户信息</li>\n</ul>\n<h5 id=\"新建角色表和中间表\"><a href=\"#新建角色表和中间表\" class=\"headerlink\" title=\"新建角色表和中间表\"></a>新建角色表和中间表</h5><p>建表语句：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE IF EXISTS `role`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `role` (</span><br><span class=\"line\">  `ID` int(11) NOT NULL COMMENT <span class=\"string\">'编号'</span>,</span><br><span class=\"line\">  `ROLE_NAME` varchar(30) default NULL COMMENT <span class=\"string\">'角色名称'</span>,</span><br><span class=\"line\">  `ROLE_DESC` varchar(60) default NULL COMMENT <span class=\"string\">'角色描述'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`ID`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `role`(`ID`,`ROLE_NAME`,`ROLE_DESC`) values (1,<span class=\"string\">'董事长'</span>,<span class=\"string\">'管理整个公司'</span>),(2,<span class=\"string\">'总裁'</span>,<span class=\"string\">'管理整个公司'</span>),(3,<span class=\"string\">'部门经理'</span>,<span class=\"string\">'管理某个部门'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `user_role`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `user_role` (</span><br><span class=\"line\">  `UID` int(11) NOT NULL COMMENT <span class=\"string\">'用户编号'</span>,</span><br><span class=\"line\">  `RID` int(11) NOT NULL COMMENT <span class=\"string\">'角色编号'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`UID`,`RID`),</span><br><span class=\"line\">  KEY `FK_Reference_10` (`RID`),</span><br><span class=\"line\">  CONSTRAINT `FK_Reference_10` FOREIGN KEY (`RID`) REFERENCES `role` (`ID`),</span><br><span class=\"line\">  CONSTRAINT `FK_Reference_9` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `user_role`(`UID`,`RID`) values (1,1),(3,1),(3,2);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建角色实体类\"><a href=\"#新建角色实体类\" class=\"headerlink\" title=\"新建角色实体类\"></a>新建角色实体类</h5><p>此处注意也要让用户和角色体现出多对多关系：需要各自包含对方的一个集合引用。</p>\n<p>新建角色实体类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Role implements Serializable &#123;</span><br><span class=\"line\">    private Integer roleId;</span><br><span class=\"line\">    private String roleName;</span><br><span class=\"line\">    private String roleDesc;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getRoleId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roleId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoleId(Integer roleId) &#123;</span><br><span class=\"line\">        this.roleId = roleId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getRoleName</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roleName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoleName(String roleName) &#123;</span><br><span class=\"line\">        this.roleName = roleName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getRoleDesc</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roleDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoleDesc(String roleDesc) &#123;</span><br><span class=\"line\">        this.roleDesc = roleDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"Role&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"roleId=\"</span> + roleId +</span><br><span class=\"line\">                <span class=\"string\">\", roleName='\"</span> + roleName + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", roleDesc='</span><span class=\"string\">\" + roleDesc + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                '&#125;';</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建实体类接口\"><a href=\"#新建实体类接口\" class=\"headerlink\" title=\"新建实体类接口\"></a>新建实体类接口</h5><p>新建RoleMapper接口类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.Role;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IRoleMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有角色信息</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;Role&gt; selectAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建角色实体配置文件\"><a href=\"#新建角色实体配置文件\" class=\"headerlink\" title=\"新建角色实体配置文件\"></a>新建角色实体配置文件</h5><p>一、新建IRoleMapper.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IRoleMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--定义role表的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"roleMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"role\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"roleId\"</span> column=<span class=\"string\">\"rid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"roleName\"</span> column=<span class=\"string\">\"role_name\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"roleDesc\"</span> column=<span class=\"string\">\"role_desc\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"users\"</span> ofType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--查询所有角色信息--&gt;</span><br><span class=\"line\">    &lt;!--使用两次左外连接查询--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"roleMap\"</span>&gt;</span><br><span class=\"line\">        select u.*,r.id as rid,r.role_name,r.role_desc from role r</span><br><span class=\"line\">        left outer join user_role ur on r.id = ur.rid</span><br><span class=\"line\">        left outer join user u on u.id = ur.uid</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<p>二、在SqlMapConfig.xml中添加映射配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IUserMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IAccountMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IRoleMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;!--&lt;mapper class=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span> /&gt;--&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建测试类执行-2\"><a href=\"#新建测试类执行-2\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">selectRoleAll</span></span>()&#123;</span><br><span class=\"line\">    List&lt;Role&gt; roles = roleMapper.selectAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Role role:roles) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个角色的用户信息：\"</span>);</span><br><span class=\"line\">        System.out.println(role);</span><br><span class=\"line\">        System.out.println(role.getUsers());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果-2\"><a href=\"#执行结果-2\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><img src=\"/images/mybatis3.png\" alt=\"result\"></p>\n<hr>\n<h5 id=\"根据用户查询角色\"><a href=\"#根据用户查询角色\" class=\"headerlink\" title=\"根据用户查询角色\"></a>根据用户查询角色</h5><p>同理，我们修改用户实体类，添加多对多的关系映射：一个用户具备多个角色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String userName;</span><br><span class=\"line\">    private Date birthday;</span><br><span class=\"line\">    private String sex;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//    多对多关系映射：一个用户具备多个角色</span><br><span class=\"line\">    private List&lt;Role&gt; roles;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Role&gt; <span class=\"function\"><span class=\"title\">getRoles</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoles(List&lt;Role&gt; roles) &#123;</span><br><span class=\"line\">        this.roles = roles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Account&gt; accounts;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Account&gt; <span class=\"function\"><span class=\"title\">getAccounts</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAccounts(List&lt;Account&gt; accounts) &#123;</span><br><span class=\"line\">        this.accounts = accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getUserName</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUserName(String userName) &#123;</span><br><span class=\"line\">        this.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Date <span class=\"function\"><span class=\"title\">getBirthday</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBirthday(Date birthday) &#123;</span><br><span class=\"line\">        this.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getSex</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setSex(String sex) &#123;</span><br><span class=\"line\">        this.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getAddress</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAddress(String address) &#123;</span><br><span class=\"line\">        this.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", userName='\"</span> + userName + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", birthday=\" + birthday +</span></span><br><span class=\"line\"><span class=\"string\">                \", sex='</span><span class=\"string\">\" + sex + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                \"</span>, address=<span class=\"string\">'\" + address + '</span>\\<span class=\"string\">''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其次，修改用户实体映射配置文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--配置列名和实体类属性对应关系 <span class=\"built_in\">type</span>属性不区分大小写--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        &lt;!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名--&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--定义User的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userAccountMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;!--配置user对象中accounts集合的映射--&gt;</span><br><span class=\"line\">        &lt;!--ofType指的是集合的泛型--&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"accounts\"</span> ofType=<span class=\"string\">\"account\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"aid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"uid\"</span> column=<span class=\"string\">\"uid\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"money\"</span> column=<span class=\"string\">\"money\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!--配置user的userRoleMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userRoleMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"roles\"</span> ofType=<span class=\"string\">\"role\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"roleId\"</span> column=<span class=\"string\">\"rid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"roleName\"</span> column=<span class=\"string\">\"role_name\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"roleDesc\"</span> column=<span class=\"string\">\"role_desc\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class=\"line\">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class=\"line\">    &lt;!--此处使用左外连接查询--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"userAccountMap\"</span>&gt;</span><br><span class=\"line\">        select * from user u left outer join account a on u.id = a.uid;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectUserRoleAll\"</span> resultMap=<span class=\"string\">\"userRoleMap\"</span>&gt;</span><br><span class=\"line\">        select u.*,r.id as rid,r.role_name,r.role_desc from user u</span><br><span class=\"line\">        left outer join user_role ur on u.id = ur.uid</span><br><span class=\"line\">        left outer join role r on r.id = ur.rid</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;insert id=<span class=\"string\">\"saveUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        insert into user (username,sex,birthday,address) values (<span class=\"comment\">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;delete id=<span class=\"string\">\"deleteUser\"</span> parameterType=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span><br><span class=\"line\">        delete from user <span class=\"built_in\">where</span> id = <span class=\"comment\">#&#123;uid&#125;;</span></span><br><span class=\"line\">    &lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;update id=<span class=\"string\">\"updateUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        update user <span class=\"built_in\">set</span> username = <span class=\"comment\">#&#123;userName&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class=\"line\">    &lt;/update&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectUserByCondition\"</span> resultMap=<span class=\"string\">\"userMap\"</span> parameterType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">          select * from user</span><br><span class=\"line\">          &lt;<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\">            &lt;<span class=\"keyword\">if</span> <span class=\"built_in\">test</span>=<span class=\"string\">\"sex != null and sex != '' \"</span>&gt;</span><br><span class=\"line\">                and sex = <span class=\"comment\">#&#123;sex&#125;</span></span><br><span class=\"line\">            &lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">          &lt;/<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在UserMapper接口中添加查询方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * 查询用户及用户下所有的角色信息</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;User&gt; selectUserRoleAll();</span><br></pre></td></tr></table></figure>\n\n<p>新建测试方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">selectUserRoleAll</span></span>()&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = userDao.selectUserRoleAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user:users) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个用户的角色信息：\"</span>);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        System.out.println(user.getRoles());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：<br><img src=\"/images/mybatis4.png\" alt=\"result\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"场景-一对多\"><a href=\"#场景-一对多\" class=\"headerlink\" title=\"场景(一对多)\"></a>场景(一对多)</h3><p>用户和账户<br>一个用户可以有多个账户<br>一个账户只能属于一个用户（多个账户也可以属于同一个用户）</p>\n<p>需要实现：<br>查询账户时，可以查询到归属的用户信息。</p>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><h5 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h5><p>建立用户表和账户表：让用户表和账户表之间具备一对多的关系（需要在账户表中添加外键）<br>建表语句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE IF EXISTS `user`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  `username` varchar(32) NOT NULL COMMENT <span class=\"string\">'用户名称'</span>,</span><br><span class=\"line\">  `birthday` datetime default NULL COMMENT <span class=\"string\">'生日'</span>,</span><br><span class=\"line\">  `sex` char(1) default NULL COMMENT <span class=\"string\">'性别'</span>,</span><br><span class=\"line\">  `address` varchar(256) default NULL COMMENT <span class=\"string\">'地址'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,<span class=\"string\">'张三'</span>,<span class=\"string\">'2018-02-27 17:47:08'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'北京'</span>),(2,<span class=\"string\">'李四'</span>,<span class=\"string\">'2018-03-02 15:09:37'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'深圳'</span>),(3,<span class=\"string\">'王五'</span>,<span class=\"string\">'2018-03-04 11:34:34'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'上海'</span>),(4,<span class=\"string\">'赵六'</span>,<span class=\"string\">'2018-03-04 12:04:06'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'成都'</span>),(4,<span class=\"string\">'刘七'</span>,<span class=\"string\">'2018-03-07 17:37:26'</span>,<span class=\"string\">'男'</span>,<span class=\"string\">'西安'</span>),(48,<span class=\"string\">'孙八'</span>,<span class=\"string\">'2018-03-08 11:44:00'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'杭州'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `account`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `account` (</span><br><span class=\"line\">  `ID` int(11) NOT NULL COMMENT <span class=\"string\">'编号'</span>,</span><br><span class=\"line\">  `UID` int(11) default NULL COMMENT <span class=\"string\">'用户编号'</span>,</span><br><span class=\"line\">  `MONEY` double default NULL COMMENT <span class=\"string\">'金额'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`ID`),</span><br><span class=\"line\">  KEY `FK_Reference_8` (`UID`),</span><br><span class=\"line\">  CONSTRAINT `FK_Reference_8` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `account`(`ID`,`UID`,`MONEY`) values (1,1,1000),(2,3,1000),(3,5,2000);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"建实体类\"><a href=\"#建实体类\" class=\"headerlink\" title=\"建实体类\"></a>建实体类</h5><p>用户实体类和账户实体类：让用户和账户的实体类能体现出一对多的关系<br>由于我们之前新建过用户的实体类，所以我们在这里只新建一个账户实体类即可，和用户实体类一样放在com.loonycoder.domain包下<br>此处在从表实体类中引用主表的对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Account implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private Integer uid;</span><br><span class=\"line\">    private Double money;</span><br><span class=\"line\"></span><br><span class=\"line\">    //从表实体应该包含一个主表实体的对象引用</span><br><span class=\"line\">    private User user;</span><br><span class=\"line\"></span><br><span class=\"line\">    public User <span class=\"function\"><span class=\"title\">getUser</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUser(User user) &#123;</span><br><span class=\"line\">        this.user = user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getUid</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> uid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUid(Integer uid) &#123;</span><br><span class=\"line\">        this.uid = uid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Double <span class=\"function\"><span class=\"title\">getMoney</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setMoney(Double money) &#123;</span><br><span class=\"line\">        this.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"Account&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", uid=\"</span> + uid +</span><br><span class=\"line\">                <span class=\"string\">\", money=\"</span> + money +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来我们新建一个Account的Mapper接口类，并提供查询所有账户的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.Account;</span><br><span class=\"line\">import com.loonycoder.domain.AccountUser;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IAccountMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有账户</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    List&lt;Account&gt; selectAll();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有账户，并且包含账户对应的用户下的姓名和地址信息</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    List&lt;AccountUser&gt; selectAccountUser();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><p>用户的配置文件和账户的配置文件<br>用户的配置文件用之前的就可以了，我们在此只新建账户的配置文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IAccountMapper\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--定义封装account和user的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"accountUserMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"account\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"aid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"uid\"</span> column=<span class=\"string\">\"uid\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"money\"</span> column=<span class=\"string\">\"money\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;!--一对一的关系映射，配置封装user的内容--&gt;</span><br><span class=\"line\">        &lt;association property=<span class=\"string\">\"user\"</span> column=<span class=\"string\">\"uid\"</span> javaType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/association&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"accountUserMap\"</span>&gt;</span><br><span class=\"line\">        select u.*,a.id as aid,a.uid,a.money from account a,user u <span class=\"built_in\">where</span> u.id = a.uid;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们还需要修改一下SqlMapConfig.xml中的别名和mapper映射配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--mybatis的主配置文件--&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--引用外部配置文件配置数据源信息，下面的取值部分需要用<span class=\"variable\">$&#123;&#125;</span>方式取值--&gt;</span><br><span class=\"line\">    &lt;properties resource=<span class=\"string\">\"jdbcConfig.properties\"</span>&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\">    &lt;!--配置别名 <span class=\"built_in\">type</span>属性指定实体类，<span class=\"built_in\">alias</span>指定别名--&gt;</span><br><span class=\"line\">    &lt;typeAliases &gt;</span><br><span class=\"line\">        &lt;!--package标签可以指定具体到某个包下所有类都使用别名，默认别名是类的名字，不区分大小写--&gt;</span><br><span class=\"line\">        &lt;package name=<span class=\"string\">\"com.loonycoder.domain\"</span>&gt;&lt;/package&gt;</span><br><span class=\"line\">        &lt;!--&lt;typeAlias <span class=\"built_in\">type</span>=<span class=\"string\">\"com.loonycoder.domain.User\"</span> <span class=\"built_in\">alias</span>=<span class=\"string\">\"user\"</span>&gt;&lt;/typeAlias&gt;--&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">    &lt;!--配置环境--&gt;</span><br><span class=\"line\">    &lt;environments default=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">        &lt;environment id=<span class=\"string\">\"mysql\"</span>&gt;</span><br><span class=\"line\">            &lt;!--配置事务--&gt;</span><br><span class=\"line\">            &lt;transactionManager <span class=\"built_in\">type</span>=<span class=\"string\">\"JDBC\"</span>&gt;&lt;/transactionManager&gt;</span><br><span class=\"line\">            &lt;!--配置数据源（连接池）--&gt;</span><br><span class=\"line\">            &lt;dataSource <span class=\"built_in\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"driver\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.driver&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"url\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.url&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.username&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">                &lt;property name=<span class=\"string\">\"password\"</span> value=<span class=\"string\">\"<span class=\"variable\">$&#123;jdbc.password&#125;</span>\"</span> /&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IUserMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IAccountMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;!--&lt;mapper class=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span> /&gt;--&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建测试类执行\"><a href=\"#新建测试类执行\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">selectAllAccount</span></span>()&#123;</span><br><span class=\"line\">    List&lt;Account&gt; accts = accountMapper.selectAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Account acct : accts) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个账户下的用户信息\"</span>);</span><br><span class=\"line\">        System.out.println(acct);</span><br><span class=\"line\">        System.out.println(acct.getUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><img src=\"/images/mybatis1.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"场景-多对一\"><a href=\"#场景-多对一\" class=\"headerlink\" title=\"场景(多对一)\"></a>场景(多对一)</h3><p>需要实现：</p>\n<ul>\n<li>查询用户时，可以同时查询出用户下的所有账户信息</li>\n</ul>\n<h5 id=\"修改实体类\"><a href=\"#修改实体类\" class=\"headerlink\" title=\"修改实体类\"></a>修改实体类</h5><p>我们修改User实体类，让主表包含从表的集合引用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String userName;</span><br><span class=\"line\">    private Date birthday;</span><br><span class=\"line\">    private String sex;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Account&gt; accounts;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Account&gt; <span class=\"function\"><span class=\"title\">getAccounts</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAccounts(List&lt;Account&gt; accounts) &#123;</span><br><span class=\"line\">        this.accounts = accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getUserName</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUserName(String userName) &#123;</span><br><span class=\"line\">        this.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Date <span class=\"function\"><span class=\"title\">getBirthday</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBirthday(Date birthday) &#123;</span><br><span class=\"line\">        this.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getSex</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setSex(String sex) &#123;</span><br><span class=\"line\">        this.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getAddress</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAddress(String address) &#123;</span><br><span class=\"line\">        this.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", userName='\"</span> + userName + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", birthday=\" + birthday +</span></span><br><span class=\"line\"><span class=\"string\">                \", sex='</span><span class=\"string\">\" + sex + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                \"</span>, address=<span class=\"string\">'\" + address + '</span>\\<span class=\"string\">''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h5><p>User接口类我们不做修改，直接用原来的查询所有用户的方法即可，我们只需要改动映射配置文件。<br>修改IUserMapper.xml内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--配置列名和实体类属性对应关系 <span class=\"built_in\">type</span>属性不区分大小写--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        &lt;!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名--&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--定义User的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userAccountMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;!--配置user对象中accounts集合的映射--&gt;</span><br><span class=\"line\">        &lt;!--ofType指的是集合的泛型--&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"accounts\"</span> ofType=<span class=\"string\">\"account\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"aid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"uid\"</span> column=<span class=\"string\">\"uid\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"money\"</span> column=<span class=\"string\">\"money\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class=\"line\">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class=\"line\">    &lt;!--此处使用左外连接查询--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"userAccountMap\"</span>&gt;</span><br><span class=\"line\">        select * from user u left outer join account a on u.id = a.uid;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;insert id=<span class=\"string\">\"saveUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        insert into user (username,sex,birthday,address) values (<span class=\"comment\">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;delete id=<span class=\"string\">\"deleteUser\"</span> parameterType=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span><br><span class=\"line\">        delete from user <span class=\"built_in\">where</span> id = <span class=\"comment\">#&#123;uid&#125;;</span></span><br><span class=\"line\">    &lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;update id=<span class=\"string\">\"updateUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        update user <span class=\"built_in\">set</span> username = <span class=\"comment\">#&#123;userName&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class=\"line\">    &lt;/update&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectUserByCondition\"</span> resultMap=<span class=\"string\">\"userMap\"</span> parameterType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">          select * from user</span><br><span class=\"line\">          &lt;<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\">            &lt;<span class=\"keyword\">if</span> <span class=\"built_in\">test</span>=<span class=\"string\">\"sex != null and sex != '' \"</span>&gt;</span><br><span class=\"line\">                and sex = <span class=\"comment\">#&#123;sex&#125;</span></span><br><span class=\"line\">            &lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">          &lt;/<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建测试类执行-1\"><a href=\"#新建测试类执行-1\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void selectTest() throws Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //5.使用代理对象执行方法</span><br><span class=\"line\">    List&lt;User&gt; users= userDao.selectAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user: users) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个用户下账户的信息：\"</span>);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        System.out.println(user.getAccounts());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果-1\"><a href=\"#执行结果-1\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><img src=\"/images/mybatis2.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"场景-多对多\"><a href=\"#场景-多对多\" class=\"headerlink\" title=\"场景(多对多)\"></a>场景(多对多)</h3><p>用户和角色<br>一个用户有多个角色<br>一个角色有多个用户<br>需要实现：</p>\n<ul>\n<li>当我们查询用户时，可以同时得到用户的角色信息</li>\n<li>当我们查询角色时，可以同时得到角色所属的用户信息</li>\n</ul>\n<h5 id=\"新建角色表和中间表\"><a href=\"#新建角色表和中间表\" class=\"headerlink\" title=\"新建角色表和中间表\"></a>新建角色表和中间表</h5><p>建表语句：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE IF EXISTS `role`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `role` (</span><br><span class=\"line\">  `ID` int(11) NOT NULL COMMENT <span class=\"string\">'编号'</span>,</span><br><span class=\"line\">  `ROLE_NAME` varchar(30) default NULL COMMENT <span class=\"string\">'角色名称'</span>,</span><br><span class=\"line\">  `ROLE_DESC` varchar(60) default NULL COMMENT <span class=\"string\">'角色描述'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`ID`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `role`(`ID`,`ROLE_NAME`,`ROLE_DESC`) values (1,<span class=\"string\">'董事长'</span>,<span class=\"string\">'管理整个公司'</span>),(2,<span class=\"string\">'总裁'</span>,<span class=\"string\">'管理整个公司'</span>),(3,<span class=\"string\">'部门经理'</span>,<span class=\"string\">'管理某个部门'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `user_role`;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `user_role` (</span><br><span class=\"line\">  `UID` int(11) NOT NULL COMMENT <span class=\"string\">'用户编号'</span>,</span><br><span class=\"line\">  `RID` int(11) NOT NULL COMMENT <span class=\"string\">'角色编号'</span>,</span><br><span class=\"line\">  PRIMARY KEY  (`UID`,`RID`),</span><br><span class=\"line\">  KEY `FK_Reference_10` (`RID`),</span><br><span class=\"line\">  CONSTRAINT `FK_Reference_10` FOREIGN KEY (`RID`) REFERENCES `role` (`ID`),</span><br><span class=\"line\">  CONSTRAINT `FK_Reference_9` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">insert  into `user_role`(`UID`,`RID`) values (1,1),(3,1),(3,2);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建角色实体类\"><a href=\"#新建角色实体类\" class=\"headerlink\" title=\"新建角色实体类\"></a>新建角色实体类</h5><p>此处注意也要让用户和角色体现出多对多关系：需要各自包含对方的一个集合引用。</p>\n<p>新建角色实体类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Role implements Serializable &#123;</span><br><span class=\"line\">    private Integer roleId;</span><br><span class=\"line\">    private String roleName;</span><br><span class=\"line\">    private String roleDesc;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getRoleId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roleId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoleId(Integer roleId) &#123;</span><br><span class=\"line\">        this.roleId = roleId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getRoleName</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roleName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoleName(String roleName) &#123;</span><br><span class=\"line\">        this.roleName = roleName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getRoleDesc</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roleDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoleDesc(String roleDesc) &#123;</span><br><span class=\"line\">        this.roleDesc = roleDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"Role&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"roleId=\"</span> + roleId +</span><br><span class=\"line\">                <span class=\"string\">\", roleName='\"</span> + roleName + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", roleDesc='</span><span class=\"string\">\" + roleDesc + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                '&#125;';</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建实体类接口\"><a href=\"#新建实体类接口\" class=\"headerlink\" title=\"新建实体类接口\"></a>新建实体类接口</h5><p>新建RoleMapper接口类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.loonycoder.domain.Role;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface IRoleMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有角色信息</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;Role&gt; selectAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建角色实体配置文件\"><a href=\"#新建角色实体配置文件\" class=\"headerlink\" title=\"新建角色实体配置文件\"></a>新建角色实体配置文件</h5><p>一、新建IRoleMapper.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IRoleMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--定义role表的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"roleMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"role\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"roleId\"</span> column=<span class=\"string\">\"rid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"roleName\"</span> column=<span class=\"string\">\"role_name\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"roleDesc\"</span> column=<span class=\"string\">\"role_desc\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"users\"</span> ofType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--查询所有角色信息--&gt;</span><br><span class=\"line\">    &lt;!--使用两次左外连接查询--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"roleMap\"</span>&gt;</span><br><span class=\"line\">        select u.*,r.id as rid,r.role_name,r.role_desc from role r</span><br><span class=\"line\">        left outer join user_role ur on r.id = ur.rid</span><br><span class=\"line\">        left outer join user u on u.id = ur.uid</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<p>二、在SqlMapConfig.xml中添加映射配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IUserMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IAccountMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;mapper resource=<span class=\"string\">\"com/loonycoder/dao/IRoleMapper.xml\"</span> /&gt;</span><br><span class=\"line\">        &lt;!--&lt;mapper class=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span> /&gt;--&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新建测试类执行-2\"><a href=\"#新建测试类执行-2\" class=\"headerlink\" title=\"新建测试类执行\"></a>新建测试类执行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">selectRoleAll</span></span>()&#123;</span><br><span class=\"line\">    List&lt;Role&gt; roles = roleMapper.selectAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Role role:roles) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个角色的用户信息：\"</span>);</span><br><span class=\"line\">        System.out.println(role);</span><br><span class=\"line\">        System.out.println(role.getUsers());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果-2\"><a href=\"#执行结果-2\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><img src=\"/images/mybatis3.png\" alt=\"result\"></p>\n<hr>\n<h5 id=\"根据用户查询角色\"><a href=\"#根据用户查询角色\" class=\"headerlink\" title=\"根据用户查询角色\"></a>根据用户查询角色</h5><p>同理，我们修改用户实体类，添加多对多的关系映射：一个用户具备多个角色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.loonycoder.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String userName;</span><br><span class=\"line\">    private Date birthday;</span><br><span class=\"line\">    private String sex;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//    多对多关系映射：一个用户具备多个角色</span><br><span class=\"line\">    private List&lt;Role&gt; roles;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Role&gt; <span class=\"function\"><span class=\"title\">getRoles</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> roles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setRoles(List&lt;Role&gt; roles) &#123;</span><br><span class=\"line\">        this.roles = roles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Account&gt; accounts;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Account&gt; <span class=\"function\"><span class=\"title\">getAccounts</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAccounts(List&lt;Account&gt; accounts) &#123;</span><br><span class=\"line\">        this.accounts = accounts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getUserName</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setUserName(String userName) &#123;</span><br><span class=\"line\">        this.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Date <span class=\"function\"><span class=\"title\">getBirthday</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBirthday(Date birthday) &#123;</span><br><span class=\"line\">        this.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getSex</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setSex(String sex) &#123;</span><br><span class=\"line\">        this.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getAddress</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAddress(String address) &#123;</span><br><span class=\"line\">        this.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", userName='\"</span> + userName + <span class=\"string\">'\\'</span><span class=\"string\">' +</span></span><br><span class=\"line\"><span class=\"string\">                \", birthday=\" + birthday +</span></span><br><span class=\"line\"><span class=\"string\">                \", sex='</span><span class=\"string\">\" + sex + '\\'' +</span></span><br><span class=\"line\"><span class=\"string\">                \"</span>, address=<span class=\"string\">'\" + address + '</span>\\<span class=\"string\">''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其次，修改用户实体映射配置文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.loonycoder.dao.IUserMapper\"</span>&gt;</span><br><span class=\"line\">    &lt;!--配置列名和实体类属性对应关系 <span class=\"built_in\">type</span>属性不区分大小写--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        &lt;!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名--&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--定义User的resultMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userAccountMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;!--配置user对象中accounts集合的映射--&gt;</span><br><span class=\"line\">        &lt;!--ofType指的是集合的泛型--&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"accounts\"</span> ofType=<span class=\"string\">\"account\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"aid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"uid\"</span> column=<span class=\"string\">\"uid\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"money\"</span> column=<span class=\"string\">\"money\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!--配置user的userRoleMap--&gt;</span><br><span class=\"line\">    &lt;resultMap id=<span class=\"string\">\"userRoleMap\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">        &lt;id property=<span class=\"string\">\"id\"</span> column=<span class=\"string\">\"id\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"userName\"</span> column=<span class=\"string\">\"username\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"sex\"</span> column=<span class=\"string\">\"sex\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"address\"</span> column=<span class=\"string\">\"address\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=<span class=\"string\">\"birthday\"</span> column=<span class=\"string\">\"birthday\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;collection property=<span class=\"string\">\"roles\"</span> ofType=<span class=\"string\">\"role\"</span>&gt;</span><br><span class=\"line\">            &lt;id property=<span class=\"string\">\"roleId\"</span> column=<span class=\"string\">\"rid\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"roleName\"</span> column=<span class=\"string\">\"role_name\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">            &lt;result property=<span class=\"string\">\"roleDesc\"</span> column=<span class=\"string\">\"role_desc\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;/collection&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class=\"line\">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class=\"line\">    &lt;!--此处使用左外连接查询--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectAll\"</span> resultMap=<span class=\"string\">\"userAccountMap\"</span>&gt;</span><br><span class=\"line\">        select * from user u left outer join account a on u.id = a.uid;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectUserRoleAll\"</span> resultMap=<span class=\"string\">\"userRoleMap\"</span>&gt;</span><br><span class=\"line\">        select u.*,r.id as rid,r.role_name,r.role_desc from user u</span><br><span class=\"line\">        left outer join user_role ur on u.id = ur.uid</span><br><span class=\"line\">        left outer join role r on r.id = ur.rid</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;insert id=<span class=\"string\">\"saveUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        insert into user (username,sex,birthday,address) values (<span class=\"comment\">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;delete id=<span class=\"string\">\"deleteUser\"</span> parameterType=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span><br><span class=\"line\">        delete from user <span class=\"built_in\">where</span> id = <span class=\"comment\">#&#123;uid&#125;;</span></span><br><span class=\"line\">    &lt;/delete&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;update id=<span class=\"string\">\"updateUser\"</span> parameterType=<span class=\"string\">\"com.loonycoder.domain.User\"</span>&gt;</span><br><span class=\"line\">        update user <span class=\"built_in\">set</span> username = <span class=\"comment\">#&#123;userName&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class=\"line\">    &lt;/update&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"selectUserByCondition\"</span> resultMap=<span class=\"string\">\"userMap\"</span> parameterType=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">          select * from user</span><br><span class=\"line\">          &lt;<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\">            &lt;<span class=\"keyword\">if</span> <span class=\"built_in\">test</span>=<span class=\"string\">\"sex != null and sex != '' \"</span>&gt;</span><br><span class=\"line\">                and sex = <span class=\"comment\">#&#123;sex&#125;</span></span><br><span class=\"line\">            &lt;/<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">          &lt;/<span class=\"built_in\">where</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在UserMapper接口中添加查询方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * 查询用户及用户下所有的角色信息</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span></span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;User&gt; selectUserRoleAll();</span><br></pre></td></tr></table></figure>\n\n<p>新建测试方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void <span class=\"function\"><span class=\"title\">selectUserRoleAll</span></span>()&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = userDao.selectUserRoleAll();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user:users) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个用户的角色信息：\"</span>);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        System.out.println(user.getRoles());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：<br><img src=\"/images/mybatis4.png\" alt=\"result\"></p>\n"},{"title":"高性能的HTTP服务器————Nginx","date":"2020-01-08T16:00:00.000Z","_content":"\n![nginx](/images/nginx.jpg)\nNginx是一款高性能HTTP服务器、反向代理服务器及电子邮件（IMAP、POP3）代理服务器，官方测试nginx能够支持5万并发连接。\n**Nginx应用场景：**\n1、http服务器。Nginx是一个http服务器，可以独立提供http服务。可以做网页静态服务器。\n2、虚拟主机。可以实现在一台服务器虚拟出多个网站。\n3、反向代理，负载均衡。当网站的并发量过大需要配置服务器集群时可以使用Nginx做反向代理。并且多台服务器可以平均分摊负载。\n\n### 写在前面\n#### 本文章默认使用的软件：\n- CentOS 7\n- Nginx-1.12.2\n- JDK 8.0\n- Tomcat 8\n\n#### 开发工具：\n- VMware fusion\n- SecureCRT\n\n### 安装Nginx\n\n#### 环境准备\n1、安装gcc的环境\n```bash\nyum install gcc-c++\n```\n2、PCRE（perl库，包括perl兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式）\n```bash\nyum install -y pcre pcre-devel\n```\n3、Zlib（zlib提供了很多压缩和解压的方式，nginx使用http包的内容进行gzip）\n```bash\nyum install -y zlib zlib-devel\n```\n4、OpenSSL（一个强大的安全套接字层密码库，为nginx支持的https(即在SSL协议上传输http)协议服务）\n```bash\nyum install -y openssl openssl-devel\n```\n\n#### 安装\n在本地电脑下载nginx的压缩包（我这里是nginx-1.12.2.tar.gz），然后打开SecureCRT连接服务器，使用命令gz将本地的文件上传到Linux服务器上。\n> 注：如果在SecureCRT上输入gz显示command not found，是因为Linux虚拟机上没有安装lrsz服务。\n执行：\n```bash\nyum -y indtall lrzsz\n```\n然后可以输入rz命令选择要上传的文件。默认上传到当前路径上。\n\n**1、解压**\n```bash\ntar zxvf nginx-1.12.2.tar.gz\n```\n**2、创建Makefile文件，执行命令**\n```bash\n[root@localhost ~]# cd nginx-1.12.2\n[root@localhost nginx-1.12.2]# ./configure\n```\n![nginx](/images/nginx1.png)\n完成后可以看到Makefile文件：\n![nginx](/images/nginx2.png)\n**拓展**\nMakefile是一种配置文件，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译…。Makefile就像一个Shell脚本一样。\n\n**3、编译**\n执行命令：\n```bash\n[root@localhost nginx-1.12.2]# make\n```\n\n**4、安装**\n执行命令：\n```bash\n[root@localhost nginx-1.12.2]# make install\n```\n到此，Nginx安装已经完成。\n\n---\n\n### Nginx启动与访问\n上面我本编译安装的Nginx其实默认被安装在CentOS7系统的/usr/local/nginx目录。\n![nginx](/images/nginx3.png)\n#### 启动Nginx\n```bash\n[root@localhost nginx]# cd sbin\n[root@localhost sbin]# ./nginx\n```\n此时已经启动成功Nginx，可以直接在浏览器上输入虚拟机IP（可通过ip addr命令查看），即可访问到Nginx欢迎界面，如果显示未连接，可以：\n1、先使用本机的终端工具ping虚拟机IP地址看是否成功\n```bash\nping ip\n```\n如果ping成功，请看下一步，如果失败，请检查虚拟机是否联网。\n2、关闭CentOS7的防火墙，开放80端口\n```bash\n[root@localhost sbin]# systemctl stop firewalld.service #停止firewall\n[root@localhost sbin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost sbin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n```\n一般情况下就能访问到了：\n![nginx](/images/nginx4.png)\n\n#### 查看Nginx进程\n```bash\n[root@localhost sbin]# ps aux|grep nginx\n```\n\n#### 关闭Nginx\n```bash\n[root@localhost sbin]# ./nginx -s stop\n```\n或者\n```bash\n[root@localhost sbin]# ./nginx -s quit\n```\n\n#### 重启Nginx\n```bash\n[root@localhost sbin]# ./nginx -s reload\n```\n\n#### 检查Nginx配置文件是否正确\n```bash\n[root@localhost sbin]# ./nginx -t\n```\n\n---\n\n### 部署静态网站\n经过上面的操作，我们已经正常启动了Nginx，那么如何将我们的静态项目部署到服务器的Nginx上呢？\n为了模拟操作，我这里只部署一个index.html网页为例：\n\n1、**上传静态网站**\n```bash\n# 回到根目录下\n[root@localhost sbin]# cd ../\n\n# 创建文件夹`my`，视为我们的项目文件夹\n[root@localhost nginx]# mkdir my\n\n# 在文件夹`my`下创建一个`index.html`网页\n[root@localhost nginx]# cd my\n[root@localhost my]# vi index.html\n```\n写入\n```bash\n<html>\n\n<head>\n<title>Hello</title>\n</head>\n<body>\n\n<h2>Hello Nginx!</h2>\n</body>\n</html>\n```\n\n2、**修改Nginx的配置文件**\n修改/usr/local/nginx/conf/nginx.conf文件：\n```bash\n[root@localhost my]# cd ../conf\n[root@localhost conf]# vi nginx.conf\n```\n在http {}这个节点下新创建一个server {}节点：\n```bash\nserver {\n    listen 81;\n    server_name localhost;\n    location / {\n        root my;\n        index index.html;\n    }\n}\n```\n如此，我们已经将81端口绑定了/nginx文件夹下的名称为my的项目。重启Nginx，访问：192.168.148.132:81即可以访问到我们刚才新创建的网页：index.html。\n\n#### 绑定域名\n**域名**是由一串用“.”分隔的字符逐层的Internet上某一台计算机或计算机组的名称，用于在数据传输时表示计算机的电子方位。域名是一个IP地址的“面具”。域名的目的是便于记忆和沟通的一组服务器的地址。域名按照**域名系统DNS**的规则流程组成，在DNS中注册的任何名称都是域名。域名用于各种网络环境和应用程序特定的命名和寻址目的。通常，域名表示互联网协议（IP）资源。\n一个域名对应一个IP地址，一个IP地址可以被多个域名绑定。\n为了模拟，我们可以在本地hosts文件中配置域名和IP映射关系，这样就不用走DNS服务器了。\n因为hosts文件内容不能直接修改，需要把hosts文件拷贝出来然后修改后再替换进去就行了(我这里使用的MacOS系统)。\n\n1、**修改hosts**\n```bash\ncp /private/etc/hosts ~/Desktop/\nvi ~/Desktop/hosts\n```\n添加：\n```bash\n192.168.148.132 www.loonycoder.com\n```\n然后替换原来的\n```bash\ncp ~/Desktop/hosts /private/etc/\n```\n\n2、**修改Nginx配置文件**\n```bash\n[root@localhost conf]# vi /usr/local/nginx/conf/nginx.conf\n```\n为了模拟效果，我们可以先把之前新增的server {}节点81端口改为80端口：\n```bash\nserver {\n    listen 80;\n    server_name localhost;\n    location / {\n        root my;\n        index index.html;\n    }\n}\n```\n重启Nginx：\n```bash\n[root@localhost conf]# cd ../sbin\n[root@localhost sbin]# ./nginx -s stop\n[root@localhost sbin]# ./nginx\n```\n访问192.168.148.132发现还是Nginx的Welcome页面，因为nginx.conf默认配置的80端口就是指向Nginx欢迎页，且默认的server_name就是localhost。那么想实现不同的域名访问不同的资源且还必须是80端口，就需要绑定域名：\n修改nginx.conf\n```bash\nserver {\n    listen 80;\n    server_name www.loonycoder.com;\n    location / {\n        root my;\n        index index.html;\n    }\n}\n```\n如上，很简单，只需要把server_name改为我们要绑定的域名地址就好了，然后重启Nginx，在浏览器上访问<www.loonycoder.com>就展示我们之前创建的index.html，而输入192.168.148.132访问的还是Nginx的欢迎页，这就实现了域名的绑定。多个域名绑定同一个IP地址，但是不同的域名指向了不同的资源地址。\n\n---\n\n### Nginx反向代理\n> 什么是反向代理？\n反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n> 正向代理\n![nginx](/images/nginx5.png)\n**正向代理**，主要针对客户端。当用户通过PC向Internet发送请求时，可以通过一个代理服务器来统一处理请求并转发给Internet，比如一个教室的所有学生机都需要通过老师的教师机才能实现联网，那么这个教师机就相当于一个代理服务器，负责将PC的网络请求转发给Internet，然后Internet将相应的数据再通过代理服务器转发给不同的PC。\n\n> 反向代理\n![nginx](/images/nginx6.png)\n**反向代理**的过程则刚好相反，主要针对服务器。当用户通过网络请求不同的资源，而这些资源被分布在不同的服务器上，那么不同的请求就应该指向对应不同的服务器，那么就需要一个中介：反向代理服务器。通过反向代理服务器将不同的资源请求信息发送给不同的服务器，然后服务器将不同的信心都返回给反向代理服务器，最后通过反向代理服务器将这些结果信息展示在Internet上。\n\n#### 配置反向代理\n这里我们以一个非常实用的案例来演示如何配置Nginx的反向代理实现不同的域名访问不同的页面。\n1、在服务器上安装JDK8和Tomcat8\n通过rz命令将本地的JDK和Tomcat安装包上传到服务器。因为Tomcat解压即可用，我们这里记录一下如何安装JDK：\n```bash\n# 解压\ntar zxvf jdk-8u191-linux-x64.tar.gz\n\n# 配置JDK环境\nvi /etc/profile\n```\n在profile文件的结尾处添加如下环境配置：\n```bash\nexport JAVA_HOME=/root/jdk1.8.0_191    \nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n:wq!保存并退出，输入命令：\n```bash\n[root@localhost ~]# source /etc/profile\n```\n\n更新配置。然后输入java -version显示则说明JDK配置成功。\n解压Tomcat，在其bin目录下执行命令./startup.sh启动Tomcat服务器，然后我们再浏览器上访问：<http://192.168.148.132:8080/>显示Tomcat的欢迎页面则配置成功。\n\n2、拷贝项目到Tomcat服务器下\n为了模拟，我们在tomcat/webapps/ROOT/下创建一个index.html网页：\n```bash\n[root@localhost ROOT]# vi index.html\n```\n并写入：\n```bash\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<h2>Hello Tomcat!</h2>\n</body>\n</html>\n```\n\n保存并退出，再次访问<http://192.168.148.132:8080/>发现展示的即是我们刚创建的页面\n![nginx](/images/nginx7.png)\n\n3、配置反向代理\n之前讲了**反向代理**的概念，那么很实用的一个例子就是，当我们想在购买的阿里云服务器上部署两个项目，一个项目是用Nginx部署的静态网站（占用80端口），另一个项目部署在Tomcat服务器上（占用8080端口）。\n这时，我们固然是可以通过：ip:8080来访问我们的Web项目的，但是请求路径上显示了端口好久显得很别扭，为此，我们通过Nginx的反向代理就能解决：\n- 3.1在本地配置一个二级域名映射\n修改本机的hosts文件，添加：\n```bash\n192.168.148.132 site.loonycoder.com\n```\n这时我们访问<site.loonycoder.com>默认进入nginx的欢迎页，这是正确的。\n注意：此时的<site.loonycoder.com>是<loonycoder.com>的一个二级子域名。\n\n- 3.2 修改服务器Nginx的配置文件，添加如下配置\n```bash\nupstream site {\n        server 192.168.148.132:8080;\n}\nserver {\n        listen 80;\n        server_name site.loonycoder.com;\n        location / {\n            proxy_pass http://site;\n            index index.html;\n        }\n}\n```\n注意，其中server {}节点下的proxy_pass表示反向代理的地址，其中http://site这个site其实是指向上面upstream site {}节点的site名称，因此要保持两者名称一致。但实际上我们不采用这种方式也能实现反向代理：\n```bash\n# upstream site {\n#         server 192.168.148.132:8080;\n# }\nserver {\n        listen 80;\n        server_name site.loonycoder.com;\n        location / {\n            # proxy_pass http://site;\n            proxy_pass http://192.168.148.132:8080;\n            index index.html;\n        }\n}\n```\n\n两者的区别就是第一种方式通过指向的方式可以配置更多，必须实现**负载均衡**就需要在upstream site {}节点下配置。\n\n---\n\n### Nginx配置负载均衡\n> 什么是负载均衡？\n**负载均衡（Load Balance）**，其意思就是分摊到多个操作单元上进行执行，从而共同完成工作任务。\n**负载均衡** 是建立在现有网络结构上，提供一种廉价有效透明的方法扩展网络设备和服务器的带宽，增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。\n1.**模拟负载均衡**，我们可以提供多个Tomcat服务器，采用不同的端口区分。\n为了模拟**负载均衡**效果，可以copy 2份虚拟机上的Tomcat服务器，命名为tomcat-2，tomcat-3:\n```bash\n[root@localhost ~]# cp ~/apache-tomcat-8.5.33 ~/tomcat-2\n[root@localhost ~]# cp ~/apache-tomcat-8.5.33 ~/tomcat-3\n```\n修改端口号分别为8180，8280。我们主要修改/tomcat/conf/server.xml配置文件中的<Server port=\"8005\"和<Connector port=\"8080\"这两个节点的端口\n```bash\n# 修改tomcat-2服务器的`/conf/server.xml`参数\n<Server port=\"8006\" shutdown=\"SHUTDOWN\">\n        <Connector port=\"8180\" protocol=\"HTTP/1.1\"  \n\n# 修改tomcat-3服务器的`/conf/server.xml`参数\n<Server port=\"8007\" shutdown=\"SHUTDOWN\">\n        <Connector port=\"8280\" protocol=\"HTTP/1.1\"\n```\n如上，我们在虚拟机上配置了三个Tomcat服务器，分别使用8080，8180，8280端口。\n\n2.**配置负载均衡**\n修改Nginx下的配置文件\n```bash\n[root@localhost ~]# vi /usr/local/nginx/conf/nginx.conf\n```\n修改之前配置的upstream site {}节点：\n```bash\nupstream site {\n     server 192.168.148.132:8080;\n     server 192.168.148.132:8180;\n     server 192.168.148.132:8280;\n}\nserver {\n    listen 80;\n    server_name site.loonycoder.com;\n    location / {\n        proxy_pass http://site;\n        index index.html;\n    }\n}\n```\n这样我们就给Nginx配置了3台服务器，都指向了site.loonycoder.com这个域名地址，那么访问这个地址时同时会访问这三台服务器，也就是三台服务器平均分摊访问压力。\n为了更好的实现效果，我们可以依次修改tomcat-2和tomcat-3服务器的/webapps/ROOT/index.html网页显示数据，更容易区分每次访问的是哪台服务器。\n然后运行这三个Tomcat服务器，在浏览器上访问：site.loonycoder.com，多次刷新页面，每次访问的都是不同的页面，且依次是配置负载均衡的三台服务器次序。\n如果你想让某个服务器承担更大的压力，可以为其设置权重：\n```bash\nupstream site {\n     server 192.168.148.132:8080;\n     server 192.168.148.132:8180 weight=2;\n     server 192.168.148.132:8280;\n}\n```","source":"_posts/nginx.md","raw":"---\ntitle: 高性能的HTTP服务器————Nginx\ncategories:\n    - Nginx\n    \ndate: 2020-01-09\ntags:\n\t- HTTP服务器\n\n---\n\n![nginx](/images/nginx.jpg)\nNginx是一款高性能HTTP服务器、反向代理服务器及电子邮件（IMAP、POP3）代理服务器，官方测试nginx能够支持5万并发连接。\n**Nginx应用场景：**\n1、http服务器。Nginx是一个http服务器，可以独立提供http服务。可以做网页静态服务器。\n2、虚拟主机。可以实现在一台服务器虚拟出多个网站。\n3、反向代理，负载均衡。当网站的并发量过大需要配置服务器集群时可以使用Nginx做反向代理。并且多台服务器可以平均分摊负载。\n\n### 写在前面\n#### 本文章默认使用的软件：\n- CentOS 7\n- Nginx-1.12.2\n- JDK 8.0\n- Tomcat 8\n\n#### 开发工具：\n- VMware fusion\n- SecureCRT\n\n### 安装Nginx\n\n#### 环境准备\n1、安装gcc的环境\n```bash\nyum install gcc-c++\n```\n2、PCRE（perl库，包括perl兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式）\n```bash\nyum install -y pcre pcre-devel\n```\n3、Zlib（zlib提供了很多压缩和解压的方式，nginx使用http包的内容进行gzip）\n```bash\nyum install -y zlib zlib-devel\n```\n4、OpenSSL（一个强大的安全套接字层密码库，为nginx支持的https(即在SSL协议上传输http)协议服务）\n```bash\nyum install -y openssl openssl-devel\n```\n\n#### 安装\n在本地电脑下载nginx的压缩包（我这里是nginx-1.12.2.tar.gz），然后打开SecureCRT连接服务器，使用命令gz将本地的文件上传到Linux服务器上。\n> 注：如果在SecureCRT上输入gz显示command not found，是因为Linux虚拟机上没有安装lrsz服务。\n执行：\n```bash\nyum -y indtall lrzsz\n```\n然后可以输入rz命令选择要上传的文件。默认上传到当前路径上。\n\n**1、解压**\n```bash\ntar zxvf nginx-1.12.2.tar.gz\n```\n**2、创建Makefile文件，执行命令**\n```bash\n[root@localhost ~]# cd nginx-1.12.2\n[root@localhost nginx-1.12.2]# ./configure\n```\n![nginx](/images/nginx1.png)\n完成后可以看到Makefile文件：\n![nginx](/images/nginx2.png)\n**拓展**\nMakefile是一种配置文件，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译…。Makefile就像一个Shell脚本一样。\n\n**3、编译**\n执行命令：\n```bash\n[root@localhost nginx-1.12.2]# make\n```\n\n**4、安装**\n执行命令：\n```bash\n[root@localhost nginx-1.12.2]# make install\n```\n到此，Nginx安装已经完成。\n\n---\n\n### Nginx启动与访问\n上面我本编译安装的Nginx其实默认被安装在CentOS7系统的/usr/local/nginx目录。\n![nginx](/images/nginx3.png)\n#### 启动Nginx\n```bash\n[root@localhost nginx]# cd sbin\n[root@localhost sbin]# ./nginx\n```\n此时已经启动成功Nginx，可以直接在浏览器上输入虚拟机IP（可通过ip addr命令查看），即可访问到Nginx欢迎界面，如果显示未连接，可以：\n1、先使用本机的终端工具ping虚拟机IP地址看是否成功\n```bash\nping ip\n```\n如果ping成功，请看下一步，如果失败，请检查虚拟机是否联网。\n2、关闭CentOS7的防火墙，开放80端口\n```bash\n[root@localhost sbin]# systemctl stop firewalld.service #停止firewall\n[root@localhost sbin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost sbin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n```\n一般情况下就能访问到了：\n![nginx](/images/nginx4.png)\n\n#### 查看Nginx进程\n```bash\n[root@localhost sbin]# ps aux|grep nginx\n```\n\n#### 关闭Nginx\n```bash\n[root@localhost sbin]# ./nginx -s stop\n```\n或者\n```bash\n[root@localhost sbin]# ./nginx -s quit\n```\n\n#### 重启Nginx\n```bash\n[root@localhost sbin]# ./nginx -s reload\n```\n\n#### 检查Nginx配置文件是否正确\n```bash\n[root@localhost sbin]# ./nginx -t\n```\n\n---\n\n### 部署静态网站\n经过上面的操作，我们已经正常启动了Nginx，那么如何将我们的静态项目部署到服务器的Nginx上呢？\n为了模拟操作，我这里只部署一个index.html网页为例：\n\n1、**上传静态网站**\n```bash\n# 回到根目录下\n[root@localhost sbin]# cd ../\n\n# 创建文件夹`my`，视为我们的项目文件夹\n[root@localhost nginx]# mkdir my\n\n# 在文件夹`my`下创建一个`index.html`网页\n[root@localhost nginx]# cd my\n[root@localhost my]# vi index.html\n```\n写入\n```bash\n<html>\n\n<head>\n<title>Hello</title>\n</head>\n<body>\n\n<h2>Hello Nginx!</h2>\n</body>\n</html>\n```\n\n2、**修改Nginx的配置文件**\n修改/usr/local/nginx/conf/nginx.conf文件：\n```bash\n[root@localhost my]# cd ../conf\n[root@localhost conf]# vi nginx.conf\n```\n在http {}这个节点下新创建一个server {}节点：\n```bash\nserver {\n    listen 81;\n    server_name localhost;\n    location / {\n        root my;\n        index index.html;\n    }\n}\n```\n如此，我们已经将81端口绑定了/nginx文件夹下的名称为my的项目。重启Nginx，访问：192.168.148.132:81即可以访问到我们刚才新创建的网页：index.html。\n\n#### 绑定域名\n**域名**是由一串用“.”分隔的字符逐层的Internet上某一台计算机或计算机组的名称，用于在数据传输时表示计算机的电子方位。域名是一个IP地址的“面具”。域名的目的是便于记忆和沟通的一组服务器的地址。域名按照**域名系统DNS**的规则流程组成，在DNS中注册的任何名称都是域名。域名用于各种网络环境和应用程序特定的命名和寻址目的。通常，域名表示互联网协议（IP）资源。\n一个域名对应一个IP地址，一个IP地址可以被多个域名绑定。\n为了模拟，我们可以在本地hosts文件中配置域名和IP映射关系，这样就不用走DNS服务器了。\n因为hosts文件内容不能直接修改，需要把hosts文件拷贝出来然后修改后再替换进去就行了(我这里使用的MacOS系统)。\n\n1、**修改hosts**\n```bash\ncp /private/etc/hosts ~/Desktop/\nvi ~/Desktop/hosts\n```\n添加：\n```bash\n192.168.148.132 www.loonycoder.com\n```\n然后替换原来的\n```bash\ncp ~/Desktop/hosts /private/etc/\n```\n\n2、**修改Nginx配置文件**\n```bash\n[root@localhost conf]# vi /usr/local/nginx/conf/nginx.conf\n```\n为了模拟效果，我们可以先把之前新增的server {}节点81端口改为80端口：\n```bash\nserver {\n    listen 80;\n    server_name localhost;\n    location / {\n        root my;\n        index index.html;\n    }\n}\n```\n重启Nginx：\n```bash\n[root@localhost conf]# cd ../sbin\n[root@localhost sbin]# ./nginx -s stop\n[root@localhost sbin]# ./nginx\n```\n访问192.168.148.132发现还是Nginx的Welcome页面，因为nginx.conf默认配置的80端口就是指向Nginx欢迎页，且默认的server_name就是localhost。那么想实现不同的域名访问不同的资源且还必须是80端口，就需要绑定域名：\n修改nginx.conf\n```bash\nserver {\n    listen 80;\n    server_name www.loonycoder.com;\n    location / {\n        root my;\n        index index.html;\n    }\n}\n```\n如上，很简单，只需要把server_name改为我们要绑定的域名地址就好了，然后重启Nginx，在浏览器上访问<www.loonycoder.com>就展示我们之前创建的index.html，而输入192.168.148.132访问的还是Nginx的欢迎页，这就实现了域名的绑定。多个域名绑定同一个IP地址，但是不同的域名指向了不同的资源地址。\n\n---\n\n### Nginx反向代理\n> 什么是反向代理？\n反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n> 正向代理\n![nginx](/images/nginx5.png)\n**正向代理**，主要针对客户端。当用户通过PC向Internet发送请求时，可以通过一个代理服务器来统一处理请求并转发给Internet，比如一个教室的所有学生机都需要通过老师的教师机才能实现联网，那么这个教师机就相当于一个代理服务器，负责将PC的网络请求转发给Internet，然后Internet将相应的数据再通过代理服务器转发给不同的PC。\n\n> 反向代理\n![nginx](/images/nginx6.png)\n**反向代理**的过程则刚好相反，主要针对服务器。当用户通过网络请求不同的资源，而这些资源被分布在不同的服务器上，那么不同的请求就应该指向对应不同的服务器，那么就需要一个中介：反向代理服务器。通过反向代理服务器将不同的资源请求信息发送给不同的服务器，然后服务器将不同的信心都返回给反向代理服务器，最后通过反向代理服务器将这些结果信息展示在Internet上。\n\n#### 配置反向代理\n这里我们以一个非常实用的案例来演示如何配置Nginx的反向代理实现不同的域名访问不同的页面。\n1、在服务器上安装JDK8和Tomcat8\n通过rz命令将本地的JDK和Tomcat安装包上传到服务器。因为Tomcat解压即可用，我们这里记录一下如何安装JDK：\n```bash\n# 解压\ntar zxvf jdk-8u191-linux-x64.tar.gz\n\n# 配置JDK环境\nvi /etc/profile\n```\n在profile文件的结尾处添加如下环境配置：\n```bash\nexport JAVA_HOME=/root/jdk1.8.0_191    \nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n:wq!保存并退出，输入命令：\n```bash\n[root@localhost ~]# source /etc/profile\n```\n\n更新配置。然后输入java -version显示则说明JDK配置成功。\n解压Tomcat，在其bin目录下执行命令./startup.sh启动Tomcat服务器，然后我们再浏览器上访问：<http://192.168.148.132:8080/>显示Tomcat的欢迎页面则配置成功。\n\n2、拷贝项目到Tomcat服务器下\n为了模拟，我们在tomcat/webapps/ROOT/下创建一个index.html网页：\n```bash\n[root@localhost ROOT]# vi index.html\n```\n并写入：\n```bash\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<h2>Hello Tomcat!</h2>\n</body>\n</html>\n```\n\n保存并退出，再次访问<http://192.168.148.132:8080/>发现展示的即是我们刚创建的页面\n![nginx](/images/nginx7.png)\n\n3、配置反向代理\n之前讲了**反向代理**的概念，那么很实用的一个例子就是，当我们想在购买的阿里云服务器上部署两个项目，一个项目是用Nginx部署的静态网站（占用80端口），另一个项目部署在Tomcat服务器上（占用8080端口）。\n这时，我们固然是可以通过：ip:8080来访问我们的Web项目的，但是请求路径上显示了端口好久显得很别扭，为此，我们通过Nginx的反向代理就能解决：\n- 3.1在本地配置一个二级域名映射\n修改本机的hosts文件，添加：\n```bash\n192.168.148.132 site.loonycoder.com\n```\n这时我们访问<site.loonycoder.com>默认进入nginx的欢迎页，这是正确的。\n注意：此时的<site.loonycoder.com>是<loonycoder.com>的一个二级子域名。\n\n- 3.2 修改服务器Nginx的配置文件，添加如下配置\n```bash\nupstream site {\n        server 192.168.148.132:8080;\n}\nserver {\n        listen 80;\n        server_name site.loonycoder.com;\n        location / {\n            proxy_pass http://site;\n            index index.html;\n        }\n}\n```\n注意，其中server {}节点下的proxy_pass表示反向代理的地址，其中http://site这个site其实是指向上面upstream site {}节点的site名称，因此要保持两者名称一致。但实际上我们不采用这种方式也能实现反向代理：\n```bash\n# upstream site {\n#         server 192.168.148.132:8080;\n# }\nserver {\n        listen 80;\n        server_name site.loonycoder.com;\n        location / {\n            # proxy_pass http://site;\n            proxy_pass http://192.168.148.132:8080;\n            index index.html;\n        }\n}\n```\n\n两者的区别就是第一种方式通过指向的方式可以配置更多，必须实现**负载均衡**就需要在upstream site {}节点下配置。\n\n---\n\n### Nginx配置负载均衡\n> 什么是负载均衡？\n**负载均衡（Load Balance）**，其意思就是分摊到多个操作单元上进行执行，从而共同完成工作任务。\n**负载均衡** 是建立在现有网络结构上，提供一种廉价有效透明的方法扩展网络设备和服务器的带宽，增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。\n1.**模拟负载均衡**，我们可以提供多个Tomcat服务器，采用不同的端口区分。\n为了模拟**负载均衡**效果，可以copy 2份虚拟机上的Tomcat服务器，命名为tomcat-2，tomcat-3:\n```bash\n[root@localhost ~]# cp ~/apache-tomcat-8.5.33 ~/tomcat-2\n[root@localhost ~]# cp ~/apache-tomcat-8.5.33 ~/tomcat-3\n```\n修改端口号分别为8180，8280。我们主要修改/tomcat/conf/server.xml配置文件中的<Server port=\"8005\"和<Connector port=\"8080\"这两个节点的端口\n```bash\n# 修改tomcat-2服务器的`/conf/server.xml`参数\n<Server port=\"8006\" shutdown=\"SHUTDOWN\">\n        <Connector port=\"8180\" protocol=\"HTTP/1.1\"  \n\n# 修改tomcat-3服务器的`/conf/server.xml`参数\n<Server port=\"8007\" shutdown=\"SHUTDOWN\">\n        <Connector port=\"8280\" protocol=\"HTTP/1.1\"\n```\n如上，我们在虚拟机上配置了三个Tomcat服务器，分别使用8080，8180，8280端口。\n\n2.**配置负载均衡**\n修改Nginx下的配置文件\n```bash\n[root@localhost ~]# vi /usr/local/nginx/conf/nginx.conf\n```\n修改之前配置的upstream site {}节点：\n```bash\nupstream site {\n     server 192.168.148.132:8080;\n     server 192.168.148.132:8180;\n     server 192.168.148.132:8280;\n}\nserver {\n    listen 80;\n    server_name site.loonycoder.com;\n    location / {\n        proxy_pass http://site;\n        index index.html;\n    }\n}\n```\n这样我们就给Nginx配置了3台服务器，都指向了site.loonycoder.com这个域名地址，那么访问这个地址时同时会访问这三台服务器，也就是三台服务器平均分摊访问压力。\n为了更好的实现效果，我们可以依次修改tomcat-2和tomcat-3服务器的/webapps/ROOT/index.html网页显示数据，更容易区分每次访问的是哪台服务器。\n然后运行这三个Tomcat服务器，在浏览器上访问：site.loonycoder.com，多次刷新页面，每次访问的都是不同的页面，且依次是配置负载均衡的三台服务器次序。\n如果你想让某个服务器承担更大的压力，可以为其设置权重：\n```bash\nupstream site {\n     server 192.168.148.132:8080;\n     server 192.168.148.132:8180 weight=2;\n     server 192.168.148.132:8280;\n}\n```","slug":"nginx","published":1,"updated":"2020-02-13T10:36:40.046Z","_id":"ck6kiel0d0000eys6hx1edm7a","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/nginx.jpg\" alt=\"nginx\"><br>Nginx是一款高性能HTTP服务器、反向代理服务器及电子邮件（IMAP、POP3）代理服务器，官方测试nginx能够支持5万并发连接。<br><strong>Nginx应用场景：</strong><br>1、http服务器。Nginx是一个http服务器，可以独立提供http服务。可以做网页静态服务器。<br>2、虚拟主机。可以实现在一台服务器虚拟出多个网站。<br>3、反向代理，负载均衡。当网站的并发量过大需要配置服务器集群时可以使用Nginx做反向代理。并且多台服务器可以平均分摊负载。</p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><h4 id=\"本文章默认使用的软件：\"><a href=\"#本文章默认使用的软件：\" class=\"headerlink\" title=\"本文章默认使用的软件：\"></a>本文章默认使用的软件：</h4><ul>\n<li>CentOS 7</li>\n<li>Nginx-1.12.2</li>\n<li>JDK 8.0</li>\n<li>Tomcat 8</li>\n</ul>\n<h4 id=\"开发工具：\"><a href=\"#开发工具：\" class=\"headerlink\" title=\"开发工具：\"></a>开发工具：</h4><ul>\n<li>VMware fusion</li>\n<li>SecureCRT</li>\n</ul>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><h4 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h4><p>1、安装gcc的环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure>\n<p>2、PCRE（perl库，包括perl兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<p>3、Zlib（zlib提供了很多压缩和解压的方式，nginx使用http包的内容进行gzip）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>\n<p>4、OpenSSL（一个强大的安全套接字层密码库，为nginx支持的https(即在SSL协议上传输http)协议服务）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>在本地电脑下载nginx的压缩包（我这里是nginx-1.12.2.tar.gz），然后打开SecureCRT连接服务器，使用命令gz将本地的文件上传到Linux服务器上。</p>\n<blockquote>\n<p>注：如果在SecureCRT上输入gz显示command not found，是因为Linux虚拟机上没有安装lrsz服务。<br>执行：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y indtall lrzsz</span><br></pre></td></tr></table></figure>\n<p>然后可以输入rz命令选择要上传的文件。默认上传到当前路径上。</p>\n<p><strong>1、解压</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>\n<p><strong>2、创建Makefile文件，执行命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd nginx-1.12.2</span></span><br><span class=\"line\">[root@localhost nginx-1.12.2]<span class=\"comment\"># ./configure</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/nginx1.png\" alt=\"nginx\"><br>完成后可以看到Makefile文件：<br><img src=\"/images/nginx2.png\" alt=\"nginx\"><br><strong>拓展</strong><br>Makefile是一种配置文件，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译…。Makefile就像一个Shell脚本一样。</p>\n<p><strong>3、编译</strong><br>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.12.2]<span class=\"comment\"># make</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4、安装</strong><br>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.12.2]<span class=\"comment\"># make install</span></span><br></pre></td></tr></table></figure>\n<p>到此，Nginx安装已经完成。</p>\n<hr>\n<h3 id=\"Nginx启动与访问\"><a href=\"#Nginx启动与访问\" class=\"headerlink\" title=\"Nginx启动与访问\"></a>Nginx启动与访问</h3><p>上面我本编译安装的Nginx其实默认被安装在CentOS7系统的/usr/local/nginx目录。<br><img src=\"/images/nginx3.png\" alt=\"nginx\"></p>\n<h4 id=\"启动Nginx\"><a href=\"#启动Nginx\" class=\"headerlink\" title=\"启动Nginx\"></a>启动Nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># cd sbin</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx</span></span><br></pre></td></tr></table></figure>\n<p>此时已经启动成功Nginx，可以直接在浏览器上输入虚拟机IP（可通过ip addr命令查看），即可访问到Nginx欢迎界面，如果显示未连接，可以：<br>1、先使用本机的终端工具ping虚拟机IP地址看是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping ip</span><br></pre></td></tr></table></figure>\n<p>如果ping成功，请看下一步，如果失败，请检查虚拟机是否联网。<br>2、关闭CentOS7的防火墙，开放80端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># systemctl stop firewalld.service #停止firewall</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># systemctl disable firewalld.service #禁止firewall开机启动</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下就能访问到了：<br><img src=\"/images/nginx4.png\" alt=\"nginx\"></p>\n<h4 id=\"查看Nginx进程\"><a href=\"#查看Nginx进程\" class=\"headerlink\" title=\"查看Nginx进程\"></a>查看Nginx进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ps aux|grep nginx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关闭Nginx\"><a href=\"#关闭Nginx\" class=\"headerlink\" title=\"关闭Nginx\"></a>关闭Nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s stop</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s quit</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启Nginx\"><a href=\"#重启Nginx\" class=\"headerlink\" title=\"重启Nginx\"></a>重启Nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查Nginx配置文件是否正确\"><a href=\"#检查Nginx配置文件是否正确\" class=\"headerlink\" title=\"检查Nginx配置文件是否正确\"></a>检查Nginx配置文件是否正确</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -t</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"部署静态网站\"><a href=\"#部署静态网站\" class=\"headerlink\" title=\"部署静态网站\"></a>部署静态网站</h3><p>经过上面的操作，我们已经正常启动了Nginx，那么如何将我们的静态项目部署到服务器的Nginx上呢？<br>为了模拟操作，我这里只部署一个index.html网页为例：</p>\n<p>1、<strong>上传静态网站</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 回到根目录下</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># cd ../</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件夹`my`，视为我们的项目文件夹</span></span><br><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># mkdir my</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在文件夹`my`下创建一个`index.html`网页</span></span><br><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># cd my</span></span><br><span class=\"line\">[root@localhost my]<span class=\"comment\"># vi index.html</span></span><br></pre></td></tr></table></figure>\n<p>写入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;Hello Nginx!&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2、<strong>修改Nginx的配置文件</strong><br>修改/usr/local/nginx/conf/nginx.conf文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost my]<span class=\"comment\"># cd ../conf</span></span><br><span class=\"line\">[root@localhost conf]<span class=\"comment\"># vi nginx.conf</span></span><br></pre></td></tr></table></figure>\n<p>在http {}这个节点下新创建一个server {}节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root my;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此，我们已经将81端口绑定了/nginx文件夹下的名称为my的项目。重启Nginx，访问：192.168.148.132:81即可以访问到我们刚才新创建的网页：index.html。</p>\n<h4 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h4><p><strong>域名</strong>是由一串用“.”分隔的字符逐层的Internet上某一台计算机或计算机组的名称，用于在数据传输时表示计算机的电子方位。域名是一个IP地址的“面具”。域名的目的是便于记忆和沟通的一组服务器的地址。域名按照<strong>域名系统DNS</strong>的规则流程组成，在DNS中注册的任何名称都是域名。域名用于各种网络环境和应用程序特定的命名和寻址目的。通常，域名表示互联网协议（IP）资源。<br>一个域名对应一个IP地址，一个IP地址可以被多个域名绑定。<br>为了模拟，我们可以在本地hosts文件中配置域名和IP映射关系，这样就不用走DNS服务器了。<br>因为hosts文件内容不能直接修改，需要把hosts文件拷贝出来然后修改后再替换进去就行了(我这里使用的MacOS系统)。</p>\n<p>1、<strong>修改hosts</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /private/etc/hosts ~/Desktop/</span><br><span class=\"line\">vi ~/Desktop/hosts</span><br></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.148.132 www.loonycoder.com</span><br></pre></td></tr></table></figure>\n<p>然后替换原来的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/Desktop/hosts /private/etc/</span><br></pre></td></tr></table></figure>\n\n<p>2、<strong>修改Nginx配置文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost conf]<span class=\"comment\"># vi /usr/local/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure>\n<p>为了模拟效果，我们可以先把之前新增的server {}节点81端口改为80端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root my;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost conf]<span class=\"comment\"># cd ../sbin</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s stop</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx</span></span><br></pre></td></tr></table></figure>\n<p>访问192.168.148.132发现还是Nginx的Welcome页面，因为nginx.conf默认配置的80端口就是指向Nginx欢迎页，且默认的server_name就是localhost。那么想实现不同的域名访问不同的资源且还必须是80端口，就需要绑定域名：<br>修改nginx.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.loonycoder.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root my;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上，很简单，只需要把server_name改为我们要绑定的域名地址就好了，然后重启Nginx，在浏览器上访问&lt;<a href=\"http://www.loonycoder.com&gt;就展示我们之前创建的index.html，而输入192.168.148.132访问的还是Nginx的欢迎页，这就实现了域名的绑定。多个域名绑定同一个IP地址，但是不同的域名指向了不同的资源地址。\" target=\"_blank\" rel=\"noopener\">www.loonycoder.com&gt;就展示我们之前创建的index.html，而输入192.168.148.132访问的还是Nginx的欢迎页，这就实现了域名的绑定。多个域名绑定同一个IP地址，但是不同的域名指向了不同的资源地址。</a></p>\n<hr>\n<h3 id=\"Nginx反向代理\"><a href=\"#Nginx反向代理\" class=\"headerlink\" title=\"Nginx反向代理\"></a>Nginx反向代理</h3><blockquote>\n<p>什么是反向代理？<br>反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n</blockquote>\n<blockquote>\n<p>正向代理<br><img src=\"/images/nginx5.png\" alt=\"nginx\"><br><strong>正向代理</strong>，主要针对客户端。当用户通过PC向Internet发送请求时，可以通过一个代理服务器来统一处理请求并转发给Internet，比如一个教室的所有学生机都需要通过老师的教师机才能实现联网，那么这个教师机就相当于一个代理服务器，负责将PC的网络请求转发给Internet，然后Internet将相应的数据再通过代理服务器转发给不同的PC。</p>\n</blockquote>\n<blockquote>\n<p>反向代理<br><img src=\"/images/nginx6.png\" alt=\"nginx\"><br><strong>反向代理</strong>的过程则刚好相反，主要针对服务器。当用户通过网络请求不同的资源，而这些资源被分布在不同的服务器上，那么不同的请求就应该指向对应不同的服务器，那么就需要一个中介：反向代理服务器。通过反向代理服务器将不同的资源请求信息发送给不同的服务器，然后服务器将不同的信心都返回给反向代理服务器，最后通过反向代理服务器将这些结果信息展示在Internet上。</p>\n</blockquote>\n<h4 id=\"配置反向代理\"><a href=\"#配置反向代理\" class=\"headerlink\" title=\"配置反向代理\"></a>配置反向代理</h4><p>这里我们以一个非常实用的案例来演示如何配置Nginx的反向代理实现不同的域名访问不同的页面。<br>1、在服务器上安装JDK8和Tomcat8<br>通过rz命令将本地的JDK和Tomcat安装包上传到服务器。因为Tomcat解压即可用，我们这里记录一下如何安装JDK：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf jdk-8u191-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置JDK环境</span></span><br><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在profile文件的结尾处添加如下环境配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/root/jdk1.8.0_191    </span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/jre/lib/rt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n<p>:wq!保存并退出，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># source /etc/profile</span></span><br></pre></td></tr></table></figure>\n\n<p>更新配置。然后输入java -version显示则说明JDK配置成功。<br>解压Tomcat，在其bin目录下执行命令./startup.sh启动Tomcat服务器，然后我们再浏览器上访问：<a href=\"http://192.168.148.132:8080/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132:8080/</a>显示Tomcat的欢迎页面则配置成功。</p>\n<p>2、拷贝项目到Tomcat服务器下<br>为了模拟，我们在tomcat/webapps/ROOT/下创建一个index.html网页：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ROOT]<span class=\"comment\"># vi index.html</span></span><br></pre></td></tr></table></figure>\n<p>并写入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h2&gt;Hello Tomcat!&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出，再次访问<a href=\"http://192.168.148.132:8080/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132:8080/</a>发现展示的即是我们刚创建的页面<br><img src=\"/images/nginx7.png\" alt=\"nginx\"></p>\n<p>3、配置反向代理<br>之前讲了<strong>反向代理</strong>的概念，那么很实用的一个例子就是，当我们想在购买的阿里云服务器上部署两个项目，一个项目是用Nginx部署的静态网站（占用80端口），另一个项目部署在Tomcat服务器上（占用8080端口）。<br>这时，我们固然是可以通过：ip:8080来访问我们的Web项目的，但是请求路径上显示了端口好久显得很别扭，为此，我们通过Nginx的反向代理就能解决：</p>\n<ul>\n<li><p>3.1在本地配置一个二级域名映射<br>修改本机的hosts文件，添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.148.132 site.loonycoder.com</span><br></pre></td></tr></table></figure>\n<p>这时我们访问&lt;site.loonycoder.com&gt;默认进入nginx的欢迎页，这是正确的。<br>注意：此时的&lt;site.loonycoder.com&gt;是&lt;loonycoder.com&gt;的一个二级子域名。</p>\n</li>\n<li><p>3.2 修改服务器Nginx的配置文件，添加如下配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream site &#123;</span><br><span class=\"line\">        server 192.168.148.132:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name site.loonycoder.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://site;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，其中server {}节点下的proxy_pass表示反向代理的地址，其中<a href=\"http://site这个site其实是指向上面upstream\" target=\"_blank\" rel=\"noopener\">http://site这个site其实是指向上面upstream</a> site {}节点的site名称，因此要保持两者名称一致。但实际上我们不采用这种方式也能实现反向代理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># upstream site &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#         server 192.168.148.132:8080;</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name site.loonycoder.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"comment\"># proxy_pass http://site;</span></span><br><span class=\"line\">            proxy_pass http://192.168.148.132:8080;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>两者的区别就是第一种方式通过指向的方式可以配置更多，必须实现<strong>负载均衡</strong>就需要在upstream site {}节点下配置。</p>\n<hr>\n<h3 id=\"Nginx配置负载均衡\"><a href=\"#Nginx配置负载均衡\" class=\"headerlink\" title=\"Nginx配置负载均衡\"></a>Nginx配置负载均衡</h3><blockquote>\n<p>什么是负载均衡？<br><strong>负载均衡（Load Balance）</strong>，其意思就是分摊到多个操作单元上进行执行，从而共同完成工作任务。<br><strong>负载均衡</strong> 是建立在现有网络结构上，提供一种廉价有效透明的方法扩展网络设备和服务器的带宽，增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。<br>1.<strong>模拟负载均衡</strong>，我们可以提供多个Tomcat服务器，采用不同的端口区分。<br>为了模拟<strong>负载均衡</strong>效果，可以copy 2份虚拟机上的Tomcat服务器，命名为tomcat-2，tomcat-3:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp ~/apache-tomcat-8.5.33 ~/tomcat-2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp ~/apache-tomcat-8.5.33 ~/tomcat-3</span></span><br></pre></td></tr></table></figure>\n<p>修改端口号分别为8180，8280。我们主要修改/tomcat/conf/server.xml配置文件中的&lt;Server port=”8005”和&lt;Connector port=”8080”这两个节点的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改tomcat-2服务器的`/conf/server.xml`参数</span></span><br><span class=\"line\">&lt;Server port=<span class=\"string\">\"8006\"</span> shutdown=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span><br><span class=\"line\">        &lt;Connector port=<span class=\"string\">\"8180\"</span> protocol=<span class=\"string\">\"HTTP/1.1\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改tomcat-3服务器的`/conf/server.xml`参数</span></span><br><span class=\"line\">&lt;Server port=<span class=\"string\">\"8007\"</span> shutdown=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span><br><span class=\"line\">        &lt;Connector port=<span class=\"string\">\"8280\"</span> protocol=<span class=\"string\">\"HTTP/1.1\"</span></span><br></pre></td></tr></table></figure>\n<p>如上，我们在虚拟机上配置了三个Tomcat服务器，分别使用8080，8180，8280端口。</p>\n<p>2.<strong>配置负载均衡</strong><br>修改Nginx下的配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /usr/local/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure>\n<p>修改之前配置的upstream site {}节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream site &#123;</span><br><span class=\"line\">     server 192.168.148.132:8080;</span><br><span class=\"line\">     server 192.168.148.132:8180;</span><br><span class=\"line\">     server 192.168.148.132:8280;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name site.loonycoder.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://site;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就给Nginx配置了3台服务器，都指向了site.loonycoder.com这个域名地址，那么访问这个地址时同时会访问这三台服务器，也就是三台服务器平均分摊访问压力。<br>为了更好的实现效果，我们可以依次修改tomcat-2和tomcat-3服务器的/webapps/ROOT/index.html网页显示数据，更容易区分每次访问的是哪台服务器。<br>然后运行这三个Tomcat服务器，在浏览器上访问：site.loonycoder.com，多次刷新页面，每次访问的都是不同的页面，且依次是配置负载均衡的三台服务器次序。<br>如果你想让某个服务器承担更大的压力，可以为其设置权重：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream site &#123;</span><br><span class=\"line\">     server 192.168.148.132:8080;</span><br><span class=\"line\">     server 192.168.148.132:8180 weight=2;</span><br><span class=\"line\">     server 192.168.148.132:8280;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/nginx.jpg\" alt=\"nginx\"><br>Nginx是一款高性能HTTP服务器、反向代理服务器及电子邮件（IMAP、POP3）代理服务器，官方测试nginx能够支持5万并发连接。<br><strong>Nginx应用场景：</strong><br>1、http服务器。Nginx是一个http服务器，可以独立提供http服务。可以做网页静态服务器。<br>2、虚拟主机。可以实现在一台服务器虚拟出多个网站。<br>3、反向代理，负载均衡。当网站的并发量过大需要配置服务器集群时可以使用Nginx做反向代理。并且多台服务器可以平均分摊负载。</p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><h4 id=\"本文章默认使用的软件：\"><a href=\"#本文章默认使用的软件：\" class=\"headerlink\" title=\"本文章默认使用的软件：\"></a>本文章默认使用的软件：</h4><ul>\n<li>CentOS 7</li>\n<li>Nginx-1.12.2</li>\n<li>JDK 8.0</li>\n<li>Tomcat 8</li>\n</ul>\n<h4 id=\"开发工具：\"><a href=\"#开发工具：\" class=\"headerlink\" title=\"开发工具：\"></a>开发工具：</h4><ul>\n<li>VMware fusion</li>\n<li>SecureCRT</li>\n</ul>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><h4 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h4><p>1、安装gcc的环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure>\n<p>2、PCRE（perl库，包括perl兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<p>3、Zlib（zlib提供了很多压缩和解压的方式，nginx使用http包的内容进行gzip）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>\n<p>4、OpenSSL（一个强大的安全套接字层密码库，为nginx支持的https(即在SSL协议上传输http)协议服务）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>在本地电脑下载nginx的压缩包（我这里是nginx-1.12.2.tar.gz），然后打开SecureCRT连接服务器，使用命令gz将本地的文件上传到Linux服务器上。</p>\n<blockquote>\n<p>注：如果在SecureCRT上输入gz显示command not found，是因为Linux虚拟机上没有安装lrsz服务。<br>执行：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y indtall lrzsz</span><br></pre></td></tr></table></figure>\n<p>然后可以输入rz命令选择要上传的文件。默认上传到当前路径上。</p>\n<p><strong>1、解压</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>\n<p><strong>2、创建Makefile文件，执行命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd nginx-1.12.2</span></span><br><span class=\"line\">[root@localhost nginx-1.12.2]<span class=\"comment\"># ./configure</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/nginx1.png\" alt=\"nginx\"><br>完成后可以看到Makefile文件：<br><img src=\"/images/nginx2.png\" alt=\"nginx\"><br><strong>拓展</strong><br>Makefile是一种配置文件，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译…。Makefile就像一个Shell脚本一样。</p>\n<p><strong>3、编译</strong><br>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.12.2]<span class=\"comment\"># make</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4、安装</strong><br>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx-1.12.2]<span class=\"comment\"># make install</span></span><br></pre></td></tr></table></figure>\n<p>到此，Nginx安装已经完成。</p>\n<hr>\n<h3 id=\"Nginx启动与访问\"><a href=\"#Nginx启动与访问\" class=\"headerlink\" title=\"Nginx启动与访问\"></a>Nginx启动与访问</h3><p>上面我本编译安装的Nginx其实默认被安装在CentOS7系统的/usr/local/nginx目录。<br><img src=\"/images/nginx3.png\" alt=\"nginx\"></p>\n<h4 id=\"启动Nginx\"><a href=\"#启动Nginx\" class=\"headerlink\" title=\"启动Nginx\"></a>启动Nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># cd sbin</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx</span></span><br></pre></td></tr></table></figure>\n<p>此时已经启动成功Nginx，可以直接在浏览器上输入虚拟机IP（可通过ip addr命令查看），即可访问到Nginx欢迎界面，如果显示未连接，可以：<br>1、先使用本机的终端工具ping虚拟机IP地址看是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping ip</span><br></pre></td></tr></table></figure>\n<p>如果ping成功，请看下一步，如果失败，请检查虚拟机是否联网。<br>2、关闭CentOS7的防火墙，开放80端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># systemctl stop firewalld.service #停止firewall</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># systemctl disable firewalld.service #禁止firewall开机启动</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下就能访问到了：<br><img src=\"/images/nginx4.png\" alt=\"nginx\"></p>\n<h4 id=\"查看Nginx进程\"><a href=\"#查看Nginx进程\" class=\"headerlink\" title=\"查看Nginx进程\"></a>查看Nginx进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ps aux|grep nginx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关闭Nginx\"><a href=\"#关闭Nginx\" class=\"headerlink\" title=\"关闭Nginx\"></a>关闭Nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s stop</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s quit</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启Nginx\"><a href=\"#重启Nginx\" class=\"headerlink\" title=\"重启Nginx\"></a>重启Nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查Nginx配置文件是否正确\"><a href=\"#检查Nginx配置文件是否正确\" class=\"headerlink\" title=\"检查Nginx配置文件是否正确\"></a>检查Nginx配置文件是否正确</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -t</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"部署静态网站\"><a href=\"#部署静态网站\" class=\"headerlink\" title=\"部署静态网站\"></a>部署静态网站</h3><p>经过上面的操作，我们已经正常启动了Nginx，那么如何将我们的静态项目部署到服务器的Nginx上呢？<br>为了模拟操作，我这里只部署一个index.html网页为例：</p>\n<p>1、<strong>上传静态网站</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 回到根目录下</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># cd ../</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件夹`my`，视为我们的项目文件夹</span></span><br><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># mkdir my</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在文件夹`my`下创建一个`index.html`网页</span></span><br><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># cd my</span></span><br><span class=\"line\">[root@localhost my]<span class=\"comment\"># vi index.html</span></span><br></pre></td></tr></table></figure>\n<p>写入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;Hello Nginx!&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2、<strong>修改Nginx的配置文件</strong><br>修改/usr/local/nginx/conf/nginx.conf文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost my]<span class=\"comment\"># cd ../conf</span></span><br><span class=\"line\">[root@localhost conf]<span class=\"comment\"># vi nginx.conf</span></span><br></pre></td></tr></table></figure>\n<p>在http {}这个节点下新创建一个server {}节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root my;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此，我们已经将81端口绑定了/nginx文件夹下的名称为my的项目。重启Nginx，访问：192.168.148.132:81即可以访问到我们刚才新创建的网页：index.html。</p>\n<h4 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h4><p><strong>域名</strong>是由一串用“.”分隔的字符逐层的Internet上某一台计算机或计算机组的名称，用于在数据传输时表示计算机的电子方位。域名是一个IP地址的“面具”。域名的目的是便于记忆和沟通的一组服务器的地址。域名按照<strong>域名系统DNS</strong>的规则流程组成，在DNS中注册的任何名称都是域名。域名用于各种网络环境和应用程序特定的命名和寻址目的。通常，域名表示互联网协议（IP）资源。<br>一个域名对应一个IP地址，一个IP地址可以被多个域名绑定。<br>为了模拟，我们可以在本地hosts文件中配置域名和IP映射关系，这样就不用走DNS服务器了。<br>因为hosts文件内容不能直接修改，需要把hosts文件拷贝出来然后修改后再替换进去就行了(我这里使用的MacOS系统)。</p>\n<p>1、<strong>修改hosts</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /private/etc/hosts ~/Desktop/</span><br><span class=\"line\">vi ~/Desktop/hosts</span><br></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.148.132 www.loonycoder.com</span><br></pre></td></tr></table></figure>\n<p>然后替换原来的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/Desktop/hosts /private/etc/</span><br></pre></td></tr></table></figure>\n\n<p>2、<strong>修改Nginx配置文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost conf]<span class=\"comment\"># vi /usr/local/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure>\n<p>为了模拟效果，我们可以先把之前新增的server {}节点81端口改为80端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root my;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost conf]<span class=\"comment\"># cd ../sbin</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s stop</span></span><br><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx</span></span><br></pre></td></tr></table></figure>\n<p>访问192.168.148.132发现还是Nginx的Welcome页面，因为nginx.conf默认配置的80端口就是指向Nginx欢迎页，且默认的server_name就是localhost。那么想实现不同的域名访问不同的资源且还必须是80端口，就需要绑定域名：<br>修改nginx.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.loonycoder.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root my;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上，很简单，只需要把server_name改为我们要绑定的域名地址就好了，然后重启Nginx，在浏览器上访问&lt;<a href=\"http://www.loonycoder.com&gt;就展示我们之前创建的index.html，而输入192.168.148.132访问的还是Nginx的欢迎页，这就实现了域名的绑定。多个域名绑定同一个IP地址，但是不同的域名指向了不同的资源地址。\" target=\"_blank\" rel=\"noopener\">www.loonycoder.com&gt;就展示我们之前创建的index.html，而输入192.168.148.132访问的还是Nginx的欢迎页，这就实现了域名的绑定。多个域名绑定同一个IP地址，但是不同的域名指向了不同的资源地址。</a></p>\n<hr>\n<h3 id=\"Nginx反向代理\"><a href=\"#Nginx反向代理\" class=\"headerlink\" title=\"Nginx反向代理\"></a>Nginx反向代理</h3><blockquote>\n<p>什么是反向代理？<br>反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n</blockquote>\n<blockquote>\n<p>正向代理<br><img src=\"/images/nginx5.png\" alt=\"nginx\"><br><strong>正向代理</strong>，主要针对客户端。当用户通过PC向Internet发送请求时，可以通过一个代理服务器来统一处理请求并转发给Internet，比如一个教室的所有学生机都需要通过老师的教师机才能实现联网，那么这个教师机就相当于一个代理服务器，负责将PC的网络请求转发给Internet，然后Internet将相应的数据再通过代理服务器转发给不同的PC。</p>\n</blockquote>\n<blockquote>\n<p>反向代理<br><img src=\"/images/nginx6.png\" alt=\"nginx\"><br><strong>反向代理</strong>的过程则刚好相反，主要针对服务器。当用户通过网络请求不同的资源，而这些资源被分布在不同的服务器上，那么不同的请求就应该指向对应不同的服务器，那么就需要一个中介：反向代理服务器。通过反向代理服务器将不同的资源请求信息发送给不同的服务器，然后服务器将不同的信心都返回给反向代理服务器，最后通过反向代理服务器将这些结果信息展示在Internet上。</p>\n</blockquote>\n<h4 id=\"配置反向代理\"><a href=\"#配置反向代理\" class=\"headerlink\" title=\"配置反向代理\"></a>配置反向代理</h4><p>这里我们以一个非常实用的案例来演示如何配置Nginx的反向代理实现不同的域名访问不同的页面。<br>1、在服务器上安装JDK8和Tomcat8<br>通过rz命令将本地的JDK和Tomcat安装包上传到服务器。因为Tomcat解压即可用，我们这里记录一下如何安装JDK：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf jdk-8u191-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置JDK环境</span></span><br><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在profile文件的结尾处添加如下环境配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/root/jdk1.8.0_191    </span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/jre/lib/rt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n<p>:wq!保存并退出，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># source /etc/profile</span></span><br></pre></td></tr></table></figure>\n\n<p>更新配置。然后输入java -version显示则说明JDK配置成功。<br>解压Tomcat，在其bin目录下执行命令./startup.sh启动Tomcat服务器，然后我们再浏览器上访问：<a href=\"http://192.168.148.132:8080/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132:8080/</a>显示Tomcat的欢迎页面则配置成功。</p>\n<p>2、拷贝项目到Tomcat服务器下<br>为了模拟，我们在tomcat/webapps/ROOT/下创建一个index.html网页：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ROOT]<span class=\"comment\"># vi index.html</span></span><br></pre></td></tr></table></figure>\n<p>并写入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h2&gt;Hello Tomcat!&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出，再次访问<a href=\"http://192.168.148.132:8080/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132:8080/</a>发现展示的即是我们刚创建的页面<br><img src=\"/images/nginx7.png\" alt=\"nginx\"></p>\n<p>3、配置反向代理<br>之前讲了<strong>反向代理</strong>的概念，那么很实用的一个例子就是，当我们想在购买的阿里云服务器上部署两个项目，一个项目是用Nginx部署的静态网站（占用80端口），另一个项目部署在Tomcat服务器上（占用8080端口）。<br>这时，我们固然是可以通过：ip:8080来访问我们的Web项目的，但是请求路径上显示了端口好久显得很别扭，为此，我们通过Nginx的反向代理就能解决：</p>\n<ul>\n<li><p>3.1在本地配置一个二级域名映射<br>修改本机的hosts文件，添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.148.132 site.loonycoder.com</span><br></pre></td></tr></table></figure>\n<p>这时我们访问&lt;site.loonycoder.com&gt;默认进入nginx的欢迎页，这是正确的。<br>注意：此时的&lt;site.loonycoder.com&gt;是&lt;loonycoder.com&gt;的一个二级子域名。</p>\n</li>\n<li><p>3.2 修改服务器Nginx的配置文件，添加如下配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream site &#123;</span><br><span class=\"line\">        server 192.168.148.132:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name site.loonycoder.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://site;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，其中server {}节点下的proxy_pass表示反向代理的地址，其中<a href=\"http://site这个site其实是指向上面upstream\" target=\"_blank\" rel=\"noopener\">http://site这个site其实是指向上面upstream</a> site {}节点的site名称，因此要保持两者名称一致。但实际上我们不采用这种方式也能实现反向代理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># upstream site &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#         server 192.168.148.132:8080;</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name site.loonycoder.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            <span class=\"comment\"># proxy_pass http://site;</span></span><br><span class=\"line\">            proxy_pass http://192.168.148.132:8080;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>两者的区别就是第一种方式通过指向的方式可以配置更多，必须实现<strong>负载均衡</strong>就需要在upstream site {}节点下配置。</p>\n<hr>\n<h3 id=\"Nginx配置负载均衡\"><a href=\"#Nginx配置负载均衡\" class=\"headerlink\" title=\"Nginx配置负载均衡\"></a>Nginx配置负载均衡</h3><blockquote>\n<p>什么是负载均衡？<br><strong>负载均衡（Load Balance）</strong>，其意思就是分摊到多个操作单元上进行执行，从而共同完成工作任务。<br><strong>负载均衡</strong> 是建立在现有网络结构上，提供一种廉价有效透明的方法扩展网络设备和服务器的带宽，增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。<br>1.<strong>模拟负载均衡</strong>，我们可以提供多个Tomcat服务器，采用不同的端口区分。<br>为了模拟<strong>负载均衡</strong>效果，可以copy 2份虚拟机上的Tomcat服务器，命名为tomcat-2，tomcat-3:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp ~/apache-tomcat-8.5.33 ~/tomcat-2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp ~/apache-tomcat-8.5.33 ~/tomcat-3</span></span><br></pre></td></tr></table></figure>\n<p>修改端口号分别为8180，8280。我们主要修改/tomcat/conf/server.xml配置文件中的&lt;Server port=”8005”和&lt;Connector port=”8080”这两个节点的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改tomcat-2服务器的`/conf/server.xml`参数</span></span><br><span class=\"line\">&lt;Server port=<span class=\"string\">\"8006\"</span> shutdown=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span><br><span class=\"line\">        &lt;Connector port=<span class=\"string\">\"8180\"</span> protocol=<span class=\"string\">\"HTTP/1.1\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改tomcat-3服务器的`/conf/server.xml`参数</span></span><br><span class=\"line\">&lt;Server port=<span class=\"string\">\"8007\"</span> shutdown=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span><br><span class=\"line\">        &lt;Connector port=<span class=\"string\">\"8280\"</span> protocol=<span class=\"string\">\"HTTP/1.1\"</span></span><br></pre></td></tr></table></figure>\n<p>如上，我们在虚拟机上配置了三个Tomcat服务器，分别使用8080，8180，8280端口。</p>\n<p>2.<strong>配置负载均衡</strong><br>修改Nginx下的配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /usr/local/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure>\n<p>修改之前配置的upstream site {}节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream site &#123;</span><br><span class=\"line\">     server 192.168.148.132:8080;</span><br><span class=\"line\">     server 192.168.148.132:8180;</span><br><span class=\"line\">     server 192.168.148.132:8280;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name site.loonycoder.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://site;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就给Nginx配置了3台服务器，都指向了site.loonycoder.com这个域名地址，那么访问这个地址时同时会访问这三台服务器，也就是三台服务器平均分摊访问压力。<br>为了更好的实现效果，我们可以依次修改tomcat-2和tomcat-3服务器的/webapps/ROOT/index.html网页显示数据，更容易区分每次访问的是哪台服务器。<br>然后运行这三个Tomcat服务器，在浏览器上访问：site.loonycoder.com，多次刷新页面，每次访问的都是不同的页面，且依次是配置负载均衡的三台服务器次序。<br>如果你想让某个服务器承担更大的压力，可以为其设置权重：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream site &#123;</span><br><span class=\"line\">     server 192.168.148.132:8080;</span><br><span class=\"line\">     server 192.168.148.132:8180 weight=2;</span><br><span class=\"line\">     server 192.168.148.132:8280;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"容器化部署神器——Docker","date":"2020-01-10T16:00:00.000Z","_content":"\n![docker](/images/docker1.jpg)\n**Docker**是一种容器技术，它的存在就是为了解决容器技术本身的复杂性。Docker容器拥有很高的性能，同时同一台宿主机中可以运行更多的容器，是用户尽可能的充分利用系统资源。\n\n#### 概念\n> 1.什么是虚拟化？\n在计算机中，虚拟化（Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及储存等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，是用户可以比原来的组态更好的方式来应用这些资源。这些资源的新虚拟部分是不受现有资源的架设方式、地域或物理组态所限制。\n\n- 全虚拟化架构\n虚拟机的监视器（hypervisor）是类似于用户的应用程序运行在主机的OS之上，如VMware的workstation，这种虚拟化产品提供了虚拟的硬件。\n\n> 2.容器技术\n容器和管理程序虚拟化（hypervisor virtualization, HV）不同，管理程序虚拟化通过中间层将一台或多台独立的机器虚拟运行在物理硬件之上，而**容器**是直接运行在操作系统内核之上的用户空间。因此，容器虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。\n\n**限制**\n1、由于“客居”与操作系统，容器只能运行与底层主机相同或相似的操作系统，比如在Ubuntu服务中运行CentOS，但无法运行Windows。\n2、相对于彻底隔离的管理程序虚拟化，容器被认为是不安全的。\n最新的容器技术引入了OpenVZ、Solaris Zones以及Linux容器（LXC）。使用这些新技术，容器不再仅仅是一个单纯的运行环境。在自己的权限类内，容器更像一个完整宿主机。和传统虚拟化及半虚拟化想比，容器不需要模拟层（emulation layer）和管理层（hypervisor layer），而使用操作系统的系统调用接口。\n\n#### Docker特点\n1、上手快\n2、用户可以很容易的把自己的程序Docker化。Docker依赖于“写时复制”（copy-on-write）模型，开箱即用。\n快速高效的开发声明周期\n\n#### Docker组件\n\n##### Docker客户端和服务器\nDocker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或守护进程发出请求，服务器或守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。\n![docker](/images/docker2.png)\n\n##### Docker镜像\n**镜像** 是构建Docker的基石。用户及基于镜像来运行自己的容器。镜像也是Docker声明周期中的“构建”部分。奖项是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。\n\n##### Registry 注册中心\nDocker用Registry来保存用户构建的镜像。Registry分为共有和私有两种。Docker公司运营公共的Registry叫做Docker Hub。\n\n##### Docker容器\nDocker可以帮助你构建和部署容器，你只需要把你的程序打包放进容器即可。容器是基于镜像启动的，容器找那个可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中构建和打包阶段，而容器则是启动或执行阶段。容器基于镜像启动。\n![docker](/images/docker3.png)\n\n#### Docker的安装与启动\n前提：本例中使用了CentOS7作为服务器\n通过以下命令在线在CentOS7中安装Docker：\n```bash\nyum install docker\n```\n![docker](/images/docker4.png)\n\n**查看Docker版本**\n```bash\n[root@localhost ~]# docker -v\nDocker version 1.13.1, build 8633870/1.13.1\n```\n\n#### 启动与停止Docker\nsystemctl命令是系统服务管理器指令，它是service和chkconfig两个命令组合。\n\n1.启动Docker\n```bash\nsystemctl start docker\n```\n2.停止Docker\n```bash\nsystemctl stop docker\n```\n3.重启Docker\n```bash\nsystemctl restart docker\n```\n4.查看Docker状态\n```bash\nsystemctl status docker\n```\n5.开机启动Docker\n```bash\nsystemctl enable docker\n```\n6.查看Docker概要信息\n```bash\ndocker info\n```\n7.查看Docker帮助文档\n```bash\ndocker -help\n```\n\n#### Docker镜像操作\nDocker镜像由文件系统堆叠而成（是一种文件的储存形式）。最低端是一个文件引导系统，即bootfs。实际上，当一个容器启动后，它将会被移动到内存中，而引导文件系统则会被卸载，以留出更多的内存供磁盘镜像使用。Docker容器启动是需要一些文件的，而这些文件就可以被称为Docker镜像。\n![docker](/images/docker5.png)\n\n1、列出镜像\n```bash\n[root@localhost ~]# docker images\n```\n![docker](/images/docker6.png)\n\n- REPOSITORY: 镜像所在的仓库名称\n- TAG： 镜像标签\n- IMAGE ID：镜像ID\n- CREATED：镜像的创建日期（不是获取该镜像的日期）\n- SIZE：镜像大小\n\n这些镜像都储存在Docker宿主机的/var/lib/docker目录下。\n\n2、搜索镜像\n```bash\n[root@localhost ~]# docker search 镜像名称\n```\n![docker](/images/docker7.png)\n\n3、从Docker Hub拉取镜像\n去Docker Hub官网查找所需的Docker镜像：<https://hub.docker.com/explore/> ，然后通过以下命令在线pull：\n```bash\n[root@localhost ~]# docker pull 镜像名称\n[root@localhost ~]# docker pull 镜像名称:版本\n```\n因为官方提供的Docker镜像加速服务很慢，我们可以配置ustc的镜像。输入以下命令配置ustc镜像：\n```bash\n[root@localhost ~]# vi /etc/docker/daemon.json\n```\n没有就创建，向其中写入：\n```bash\n{\n        \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n}\n```\n重启Docker服务：\n```bash\n[root@localhost ~]# systemctl restart docker\n```\n\n4、删除镜像\n删除指定镜像\n```bash\n[root@localhost ~]# docker rmi $IMAGE_ID  #这个$IMAGE_ID数值可以根据`docker images`命令查看\n```\n删除所有镜像\n```bash\n[root@localhost ~]# docker rmi `docker images -q`\n```\n\n#### Docker容器操作\n1.查看正在运行的容器\n```bash\n[root@localhost ~]# docker ps\n```\n2.查看所有的容器（启动过的历史容器）\n```bash\n[root@localhost ~]# docker ps -a\n```\n3.查看最后一次运行的容器\n```bash\n[root@localhost ~]# docker ps -|\n```\n4.查看停止的容器\n```bash\n[root@localhost ~]# docker ps -f status=exited\n```\n5.删除容器\n删除指定容器：\n```bash\n[root@localhost ~]# docker rm $CONTAINER_ID/NAME\n```\n删除所有容器：\n```bash\n[root@localhost ~]# docker rm `docker ps -a -q`\n```\n\n#### 创建和启动容器\n\n**创建容器常用的参数说明**\n1.创建容器命令：docker run\n2.-i: 表示运行容器\n3.-t: 表示容器启动后会进入其命令行，加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。\n4.—name: 为创建的容器命名\n5.-v: 表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上修改，然后共享到容器上。\n6.-d: 在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。\n7.-p： 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。\n\n##### 交互式容器\n创建一个交互式容器并取名为mycentos5:\n```bash\nroot@localhost ~]# docker run -it --name=mycentos5 centos:7 /bin/bash\n[root@53f33e279914 /]#\n```\n此时我们可以新建一个连接，通过docker ps命令看到刚才创建的容器正在启动中：\n![docker](/images/docker8.png)\n通过exit命令可以退出当前容器：\n```bash\n[root@53f33e279914 /]# exit\nexit\n[root@localhost ~]#\n```\n此时再通过docker ps命令查看刚才启动的容器也停止了。\n\n##### 守护式容器\n输入以下命令创建一个名字为mycentos6的容器：\n```bash\n[root@localhost ~]# docker run -di --name=mycentos6 centos:7\n```\n创建后这个容器会在后台运行，而不是直接进入到这个容器中。可以通过docker ps命令查看。\n登录守护式容器：\n```bash\n[root@localhost ~]# docker exec -it mycentos6 /bin/bash\n```\n可以通过exit命令退出，但是容器不会停止。\n\n##### 停止和启动容器\n停止正在运行的容器\n```bash\n[root@localhost ~]# docker stop 容器名称\n```\n启动已运行过的容器：\n```bash\n[root@localhost ~]# docker start 容器名称\n```\n\n#### 其他操作\n\n##### 文件拷贝\n将文件拷贝到容器内可以用如下命令：\n```bash\n[root@localhost ~]# docker cp 需要拷贝的文件或目录 容器名称:容器目录\n```\n将文件从容器中拷贝出来\n```bash\n[root@localhost ~]# docker cp 容器名称:容器目录 需要拷贝的文件或目录\n```\n##### 目录挂载\n在创建容器的时候，将宿主机的目录和容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而影响容器。格式为：\n```bash\n[root@localhost ~]# docker run -di -v 宿主机目录:容器目录\n```\n##### 查看容器\n```bash\n[root@localhost ~]# docker inspect mycentos5\n```\n\n**部署应用**\n\n#### MySQL部署\n1.拉取MySQL镜像\n```bash\n[root@localhost ~]# docker pull mysql:5.7\n```\n2.创建MySQL容器\n```bash\n[root@localhost ~]# docker run -di --name docker_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n如上我们创建一个名称为docker_mysql的MySQL5.7版本的守护式容器，且配置MySQL登录密码是root。\n- -p 代表端口映射，格式为 宿主机映射端口:容器运行端口\n- -e 代表添加环境变量， MYSQL_ROOT_PASSWORD是root用户的登录密码\n3.进入MySQL容器，登录MySQL\n```bash\n[root@localhost ~]# docker exec -it docker_mysql /bin/bash\n```\n登录MySQL\n```bash\nmysql -u root -p\n```\n4.远程连接MySQL\n![docker](/images/docker9.png)\n\n#### Tomcat部署\n1.拉取Tomcat-8 && JDK-8 镜像\n```bash\n[root@localhost ~]# docker pull tomcat:8-jre8\n```\n2.部署Web应用\n为了更好的演示Docker部署Tomcat的使用方式，我们可以先将需要部署的web项目发送到服务器的某个路径下，我这里在/root/目录下创建了/root/site/目录作为项目的根目录，在其中创建index.html文件并写入：\n```bash\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<h2>Hello Docker-Tomcat!</h2>\n</body>\n</html>\n```\n3.创建Tomcat容器\n```bash\n[root@localhost ~]# docker run -di --name=docker_tomcat -p 9000:8080 -v /root/site/:/usr/local/tomcat/webapps/ROOT --privileged=true tomcat:8-jre8\n```\n以上就创建一个Tomcat容器，其容器名称Wiedocker_tomcat，-di表示是一个守护式容器；-p 9000:8080表示此容器端口映射为9000->8080，即对外的端口是9000，映射到容器里Tomcat服务器的端口8080，--privileged是以root权限运行。\n![docker](/images/docker10.png)\n通过命令看到，当我们启动了容器，其中的Tomcat服务器也自动启动了。当然对于部署Nginx或MySQL的Docker容器，当启动容器时都会启动对应的服务。\n**注意**\n上面我们指定了宿主机的/root/site/目录映射到docker_tomcat容器的/usr/local/tomcat/webapps/ROOT目录，为什么是这个目录呢？\nDocker虚拟化，它会在内部虚拟一个操作系统，是在其宿主机内核上的一层空间，所有有一定的目录结构，我们可以通过docker exec -it docker_tomcat /bin/bash命令进入到docker_tomcat容器内部，通过ls命令查看目录会发现其Tomcat服务器确实安装在docker_tomcat容器的/usr/local/tomcat目录下。\n最后，我们在浏览器上访问：<http://192.168.148.132:9000/>，即发现页面展示了我们刚才在/root/site/目录下创建的index.html网页：\n![docker](/images/docker11.png)\n所以，如果你想要修改容器中Tomcat的端口号，直接进入容器的/usr/local/tomcat/conf/server.xml自改即可。\n\n#### Nginx部署\n1.拉取Nginx镜像\n```bash\ndocker pull nginx\n```\n2.创建Nginx容器\n```bash\ndocker run -di --name=docker_nginx -p 80:80 nginx\n```\n测试\n![docker](/images/docker12.png)\n在浏览器上访问：<http://192.168.148.132/>可以进入到Nginx的欢迎页。\n\n#### 其他\n以上我们介绍了MySQL、Tomcat、Nginx容器的创建，对于其他的服务，如Redis等操作基本相同，不再阐述。\n\n#### 备份与迁移\n1.容器保存为镜像\n可以通过以下命令将我们已创建（配置好的）容器打包为镜像，这样我们以后就能用该镜像再次创建新的容器了：\n```bash\ndocker commit docker_tomcat my_tomcat\n```\ndocker_tomcat是容器名称；my_tomcat是新的镜像名称。\n2.镜像备份\n通过以下命令可以将镜像打包为tar文件：\n```bash\ndocker save -o my_tomcat.tar my_tomcat\n```\n-o输出到的文件\n3.镜像恢复与备份\n当我们删除了docker_tomcat镜像后，可以通过以下命令将刚才打包备份的.tar镜像文件恢复成一个Docker镜像：\n```bash\ndocker load -i my_tomcat.tar\n```\n-i输入的文件。\n\n","source":"_posts/docker.md","raw":"---\ntitle: 容器化部署神器——Docker\ncategories:\n    - Docker\n    \ndate: 2020-01-11\ntags:\n\t- DevOps\n    - 服务器\n---\n\n![docker](/images/docker1.jpg)\n**Docker**是一种容器技术，它的存在就是为了解决容器技术本身的复杂性。Docker容器拥有很高的性能，同时同一台宿主机中可以运行更多的容器，是用户尽可能的充分利用系统资源。\n\n#### 概念\n> 1.什么是虚拟化？\n在计算机中，虚拟化（Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及储存等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，是用户可以比原来的组态更好的方式来应用这些资源。这些资源的新虚拟部分是不受现有资源的架设方式、地域或物理组态所限制。\n\n- 全虚拟化架构\n虚拟机的监视器（hypervisor）是类似于用户的应用程序运行在主机的OS之上，如VMware的workstation，这种虚拟化产品提供了虚拟的硬件。\n\n> 2.容器技术\n容器和管理程序虚拟化（hypervisor virtualization, HV）不同，管理程序虚拟化通过中间层将一台或多台独立的机器虚拟运行在物理硬件之上，而**容器**是直接运行在操作系统内核之上的用户空间。因此，容器虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。\n\n**限制**\n1、由于“客居”与操作系统，容器只能运行与底层主机相同或相似的操作系统，比如在Ubuntu服务中运行CentOS，但无法运行Windows。\n2、相对于彻底隔离的管理程序虚拟化，容器被认为是不安全的。\n最新的容器技术引入了OpenVZ、Solaris Zones以及Linux容器（LXC）。使用这些新技术，容器不再仅仅是一个单纯的运行环境。在自己的权限类内，容器更像一个完整宿主机。和传统虚拟化及半虚拟化想比，容器不需要模拟层（emulation layer）和管理层（hypervisor layer），而使用操作系统的系统调用接口。\n\n#### Docker特点\n1、上手快\n2、用户可以很容易的把自己的程序Docker化。Docker依赖于“写时复制”（copy-on-write）模型，开箱即用。\n快速高效的开发声明周期\n\n#### Docker组件\n\n##### Docker客户端和服务器\nDocker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或守护进程发出请求，服务器或守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。\n![docker](/images/docker2.png)\n\n##### Docker镜像\n**镜像** 是构建Docker的基石。用户及基于镜像来运行自己的容器。镜像也是Docker声明周期中的“构建”部分。奖项是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。\n\n##### Registry 注册中心\nDocker用Registry来保存用户构建的镜像。Registry分为共有和私有两种。Docker公司运营公共的Registry叫做Docker Hub。\n\n##### Docker容器\nDocker可以帮助你构建和部署容器，你只需要把你的程序打包放进容器即可。容器是基于镜像启动的，容器找那个可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中构建和打包阶段，而容器则是启动或执行阶段。容器基于镜像启动。\n![docker](/images/docker3.png)\n\n#### Docker的安装与启动\n前提：本例中使用了CentOS7作为服务器\n通过以下命令在线在CentOS7中安装Docker：\n```bash\nyum install docker\n```\n![docker](/images/docker4.png)\n\n**查看Docker版本**\n```bash\n[root@localhost ~]# docker -v\nDocker version 1.13.1, build 8633870/1.13.1\n```\n\n#### 启动与停止Docker\nsystemctl命令是系统服务管理器指令，它是service和chkconfig两个命令组合。\n\n1.启动Docker\n```bash\nsystemctl start docker\n```\n2.停止Docker\n```bash\nsystemctl stop docker\n```\n3.重启Docker\n```bash\nsystemctl restart docker\n```\n4.查看Docker状态\n```bash\nsystemctl status docker\n```\n5.开机启动Docker\n```bash\nsystemctl enable docker\n```\n6.查看Docker概要信息\n```bash\ndocker info\n```\n7.查看Docker帮助文档\n```bash\ndocker -help\n```\n\n#### Docker镜像操作\nDocker镜像由文件系统堆叠而成（是一种文件的储存形式）。最低端是一个文件引导系统，即bootfs。实际上，当一个容器启动后，它将会被移动到内存中，而引导文件系统则会被卸载，以留出更多的内存供磁盘镜像使用。Docker容器启动是需要一些文件的，而这些文件就可以被称为Docker镜像。\n![docker](/images/docker5.png)\n\n1、列出镜像\n```bash\n[root@localhost ~]# docker images\n```\n![docker](/images/docker6.png)\n\n- REPOSITORY: 镜像所在的仓库名称\n- TAG： 镜像标签\n- IMAGE ID：镜像ID\n- CREATED：镜像的创建日期（不是获取该镜像的日期）\n- SIZE：镜像大小\n\n这些镜像都储存在Docker宿主机的/var/lib/docker目录下。\n\n2、搜索镜像\n```bash\n[root@localhost ~]# docker search 镜像名称\n```\n![docker](/images/docker7.png)\n\n3、从Docker Hub拉取镜像\n去Docker Hub官网查找所需的Docker镜像：<https://hub.docker.com/explore/> ，然后通过以下命令在线pull：\n```bash\n[root@localhost ~]# docker pull 镜像名称\n[root@localhost ~]# docker pull 镜像名称:版本\n```\n因为官方提供的Docker镜像加速服务很慢，我们可以配置ustc的镜像。输入以下命令配置ustc镜像：\n```bash\n[root@localhost ~]# vi /etc/docker/daemon.json\n```\n没有就创建，向其中写入：\n```bash\n{\n        \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n}\n```\n重启Docker服务：\n```bash\n[root@localhost ~]# systemctl restart docker\n```\n\n4、删除镜像\n删除指定镜像\n```bash\n[root@localhost ~]# docker rmi $IMAGE_ID  #这个$IMAGE_ID数值可以根据`docker images`命令查看\n```\n删除所有镜像\n```bash\n[root@localhost ~]# docker rmi `docker images -q`\n```\n\n#### Docker容器操作\n1.查看正在运行的容器\n```bash\n[root@localhost ~]# docker ps\n```\n2.查看所有的容器（启动过的历史容器）\n```bash\n[root@localhost ~]# docker ps -a\n```\n3.查看最后一次运行的容器\n```bash\n[root@localhost ~]# docker ps -|\n```\n4.查看停止的容器\n```bash\n[root@localhost ~]# docker ps -f status=exited\n```\n5.删除容器\n删除指定容器：\n```bash\n[root@localhost ~]# docker rm $CONTAINER_ID/NAME\n```\n删除所有容器：\n```bash\n[root@localhost ~]# docker rm `docker ps -a -q`\n```\n\n#### 创建和启动容器\n\n**创建容器常用的参数说明**\n1.创建容器命令：docker run\n2.-i: 表示运行容器\n3.-t: 表示容器启动后会进入其命令行，加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。\n4.—name: 为创建的容器命名\n5.-v: 表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上修改，然后共享到容器上。\n6.-d: 在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。\n7.-p： 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。\n\n##### 交互式容器\n创建一个交互式容器并取名为mycentos5:\n```bash\nroot@localhost ~]# docker run -it --name=mycentos5 centos:7 /bin/bash\n[root@53f33e279914 /]#\n```\n此时我们可以新建一个连接，通过docker ps命令看到刚才创建的容器正在启动中：\n![docker](/images/docker8.png)\n通过exit命令可以退出当前容器：\n```bash\n[root@53f33e279914 /]# exit\nexit\n[root@localhost ~]#\n```\n此时再通过docker ps命令查看刚才启动的容器也停止了。\n\n##### 守护式容器\n输入以下命令创建一个名字为mycentos6的容器：\n```bash\n[root@localhost ~]# docker run -di --name=mycentos6 centos:7\n```\n创建后这个容器会在后台运行，而不是直接进入到这个容器中。可以通过docker ps命令查看。\n登录守护式容器：\n```bash\n[root@localhost ~]# docker exec -it mycentos6 /bin/bash\n```\n可以通过exit命令退出，但是容器不会停止。\n\n##### 停止和启动容器\n停止正在运行的容器\n```bash\n[root@localhost ~]# docker stop 容器名称\n```\n启动已运行过的容器：\n```bash\n[root@localhost ~]# docker start 容器名称\n```\n\n#### 其他操作\n\n##### 文件拷贝\n将文件拷贝到容器内可以用如下命令：\n```bash\n[root@localhost ~]# docker cp 需要拷贝的文件或目录 容器名称:容器目录\n```\n将文件从容器中拷贝出来\n```bash\n[root@localhost ~]# docker cp 容器名称:容器目录 需要拷贝的文件或目录\n```\n##### 目录挂载\n在创建容器的时候，将宿主机的目录和容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而影响容器。格式为：\n```bash\n[root@localhost ~]# docker run -di -v 宿主机目录:容器目录\n```\n##### 查看容器\n```bash\n[root@localhost ~]# docker inspect mycentos5\n```\n\n**部署应用**\n\n#### MySQL部署\n1.拉取MySQL镜像\n```bash\n[root@localhost ~]# docker pull mysql:5.7\n```\n2.创建MySQL容器\n```bash\n[root@localhost ~]# docker run -di --name docker_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n如上我们创建一个名称为docker_mysql的MySQL5.7版本的守护式容器，且配置MySQL登录密码是root。\n- -p 代表端口映射，格式为 宿主机映射端口:容器运行端口\n- -e 代表添加环境变量， MYSQL_ROOT_PASSWORD是root用户的登录密码\n3.进入MySQL容器，登录MySQL\n```bash\n[root@localhost ~]# docker exec -it docker_mysql /bin/bash\n```\n登录MySQL\n```bash\nmysql -u root -p\n```\n4.远程连接MySQL\n![docker](/images/docker9.png)\n\n#### Tomcat部署\n1.拉取Tomcat-8 && JDK-8 镜像\n```bash\n[root@localhost ~]# docker pull tomcat:8-jre8\n```\n2.部署Web应用\n为了更好的演示Docker部署Tomcat的使用方式，我们可以先将需要部署的web项目发送到服务器的某个路径下，我这里在/root/目录下创建了/root/site/目录作为项目的根目录，在其中创建index.html文件并写入：\n```bash\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<h2>Hello Docker-Tomcat!</h2>\n</body>\n</html>\n```\n3.创建Tomcat容器\n```bash\n[root@localhost ~]# docker run -di --name=docker_tomcat -p 9000:8080 -v /root/site/:/usr/local/tomcat/webapps/ROOT --privileged=true tomcat:8-jre8\n```\n以上就创建一个Tomcat容器，其容器名称Wiedocker_tomcat，-di表示是一个守护式容器；-p 9000:8080表示此容器端口映射为9000->8080，即对外的端口是9000，映射到容器里Tomcat服务器的端口8080，--privileged是以root权限运行。\n![docker](/images/docker10.png)\n通过命令看到，当我们启动了容器，其中的Tomcat服务器也自动启动了。当然对于部署Nginx或MySQL的Docker容器，当启动容器时都会启动对应的服务。\n**注意**\n上面我们指定了宿主机的/root/site/目录映射到docker_tomcat容器的/usr/local/tomcat/webapps/ROOT目录，为什么是这个目录呢？\nDocker虚拟化，它会在内部虚拟一个操作系统，是在其宿主机内核上的一层空间，所有有一定的目录结构，我们可以通过docker exec -it docker_tomcat /bin/bash命令进入到docker_tomcat容器内部，通过ls命令查看目录会发现其Tomcat服务器确实安装在docker_tomcat容器的/usr/local/tomcat目录下。\n最后，我们在浏览器上访问：<http://192.168.148.132:9000/>，即发现页面展示了我们刚才在/root/site/目录下创建的index.html网页：\n![docker](/images/docker11.png)\n所以，如果你想要修改容器中Tomcat的端口号，直接进入容器的/usr/local/tomcat/conf/server.xml自改即可。\n\n#### Nginx部署\n1.拉取Nginx镜像\n```bash\ndocker pull nginx\n```\n2.创建Nginx容器\n```bash\ndocker run -di --name=docker_nginx -p 80:80 nginx\n```\n测试\n![docker](/images/docker12.png)\n在浏览器上访问：<http://192.168.148.132/>可以进入到Nginx的欢迎页。\n\n#### 其他\n以上我们介绍了MySQL、Tomcat、Nginx容器的创建，对于其他的服务，如Redis等操作基本相同，不再阐述。\n\n#### 备份与迁移\n1.容器保存为镜像\n可以通过以下命令将我们已创建（配置好的）容器打包为镜像，这样我们以后就能用该镜像再次创建新的容器了：\n```bash\ndocker commit docker_tomcat my_tomcat\n```\ndocker_tomcat是容器名称；my_tomcat是新的镜像名称。\n2.镜像备份\n通过以下命令可以将镜像打包为tar文件：\n```bash\ndocker save -o my_tomcat.tar my_tomcat\n```\n-o输出到的文件\n3.镜像恢复与备份\n当我们删除了docker_tomcat镜像后，可以通过以下命令将刚才打包备份的.tar镜像文件恢复成一个Docker镜像：\n```bash\ndocker load -i my_tomcat.tar\n```\n-i输入的文件。\n\n","slug":"docker","published":1,"updated":"2020-02-13T13:16:34.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6kroww40000k5s67wajeknm","content":"<p><img src=\"/images/docker1.jpg\" alt=\"docker\"><br><strong>Docker</strong>是一种容器技术，它的存在就是为了解决容器技术本身的复杂性。Docker容器拥有很高的性能，同时同一台宿主机中可以运行更多的容器，是用户尽可能的充分利用系统资源。</p>\n<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><blockquote>\n<p>1.什么是虚拟化？<br>在计算机中，虚拟化（Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及储存等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，是用户可以比原来的组态更好的方式来应用这些资源。这些资源的新虚拟部分是不受现有资源的架设方式、地域或物理组态所限制。</p>\n</blockquote>\n<ul>\n<li>全虚拟化架构<br>虚拟机的监视器（hypervisor）是类似于用户的应用程序运行在主机的OS之上，如VMware的workstation，这种虚拟化产品提供了虚拟的硬件。</li>\n</ul>\n<blockquote>\n<p>2.容器技术<br>容器和管理程序虚拟化（hypervisor virtualization, HV）不同，管理程序虚拟化通过中间层将一台或多台独立的机器虚拟运行在物理硬件之上，而<strong>容器</strong>是直接运行在操作系统内核之上的用户空间。因此，容器虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。</p>\n</blockquote>\n<p><strong>限制</strong><br>1、由于“客居”与操作系统，容器只能运行与底层主机相同或相似的操作系统，比如在Ubuntu服务中运行CentOS，但无法运行Windows。<br>2、相对于彻底隔离的管理程序虚拟化，容器被认为是不安全的。<br>最新的容器技术引入了OpenVZ、Solaris Zones以及Linux容器（LXC）。使用这些新技术，容器不再仅仅是一个单纯的运行环境。在自己的权限类内，容器更像一个完整宿主机。和传统虚拟化及半虚拟化想比，容器不需要模拟层（emulation layer）和管理层（hypervisor layer），而使用操作系统的系统调用接口。</p>\n<h4 id=\"Docker特点\"><a href=\"#Docker特点\" class=\"headerlink\" title=\"Docker特点\"></a>Docker特点</h4><p>1、上手快<br>2、用户可以很容易的把自己的程序Docker化。Docker依赖于“写时复制”（copy-on-write）模型，开箱即用。<br>快速高效的开发声明周期</p>\n<h4 id=\"Docker组件\"><a href=\"#Docker组件\" class=\"headerlink\" title=\"Docker组件\"></a>Docker组件</h4><h5 id=\"Docker客户端和服务器\"><a href=\"#Docker客户端和服务器\" class=\"headerlink\" title=\"Docker客户端和服务器\"></a>Docker客户端和服务器</h5><p>Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或守护进程发出请求，服务器或守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。<br><img src=\"/images/docker2.png\" alt=\"docker\"></p>\n<h5 id=\"Docker镜像\"><a href=\"#Docker镜像\" class=\"headerlink\" title=\"Docker镜像\"></a>Docker镜像</h5><p><strong>镜像</strong> 是构建Docker的基石。用户及基于镜像来运行自己的容器。镜像也是Docker声明周期中的“构建”部分。奖项是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。</p>\n<h5 id=\"Registry-注册中心\"><a href=\"#Registry-注册中心\" class=\"headerlink\" title=\"Registry 注册中心\"></a>Registry 注册中心</h5><p>Docker用Registry来保存用户构建的镜像。Registry分为共有和私有两种。Docker公司运营公共的Registry叫做Docker Hub。</p>\n<h5 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h5><p>Docker可以帮助你构建和部署容器，你只需要把你的程序打包放进容器即可。容器是基于镜像启动的，容器找那个可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中构建和打包阶段，而容器则是启动或执行阶段。容器基于镜像启动。<br><img src=\"/images/docker3.png\" alt=\"docker\"></p>\n<h4 id=\"Docker的安装与启动\"><a href=\"#Docker的安装与启动\" class=\"headerlink\" title=\"Docker的安装与启动\"></a>Docker的安装与启动</h4><p>前提：本例中使用了CentOS7作为服务器<br>通过以下命令在线在CentOS7中安装Docker：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/docker4.png\" alt=\"docker\"></p>\n<p><strong>查看Docker版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker -v</span></span><br><span class=\"line\">Docker version 1.13.1, build 8633870/1.13.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动与停止Docker\"><a href=\"#启动与停止Docker\" class=\"headerlink\" title=\"启动与停止Docker\"></a>启动与停止Docker</h4><p>systemctl命令是系统服务管理器指令，它是service和chkconfig两个命令组合。</p>\n<p>1.启动Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>2.停止Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker</span><br></pre></td></tr></table></figure>\n<p>3.重启Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>4.查看Docker状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker</span><br></pre></td></tr></table></figure>\n<p>5.开机启动Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n<p>6.查看Docker概要信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n<p>7.查看Docker帮助文档</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker镜像操作\"><a href=\"#Docker镜像操作\" class=\"headerlink\" title=\"Docker镜像操作\"></a>Docker镜像操作</h4><p>Docker镜像由文件系统堆叠而成（是一种文件的储存形式）。最低端是一个文件引导系统，即bootfs。实际上，当一个容器启动后，它将会被移动到内存中，而引导文件系统则会被卸载，以留出更多的内存供磁盘镜像使用。Docker容器启动是需要一些文件的，而这些文件就可以被称为Docker镜像。<br><img src=\"/images/docker5.png\" alt=\"docker\"></p>\n<p>1、列出镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker images</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/docker6.png\" alt=\"docker\"></p>\n<ul>\n<li>REPOSITORY: 镜像所在的仓库名称</li>\n<li>TAG： 镜像标签</li>\n<li>IMAGE ID：镜像ID</li>\n<li>CREATED：镜像的创建日期（不是获取该镜像的日期）</li>\n<li>SIZE：镜像大小</li>\n</ul>\n<p>这些镜像都储存在Docker宿主机的/var/lib/docker目录下。</p>\n<p>2、搜索镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker search 镜像名称</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/docker7.png\" alt=\"docker\"></p>\n<p>3、从Docker Hub拉取镜像<br>去Docker Hub官网查找所需的Docker镜像：<a href=\"https://hub.docker.com/explore/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/explore/</a> ，然后通过以下命令在线pull：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull 镜像名称</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull 镜像名称:版本</span></span><br></pre></td></tr></table></figure>\n<p>因为官方提供的Docker镜像加速服务很慢，我们可以配置ustc的镜像。输入以下命令配置ustc镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/docker/daemon.json</span></span><br></pre></td></tr></table></figure>\n<p>没有就创建，向其中写入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://docker.mirrors.ustc.edu.cn\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Docker服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n\n<p>4、删除镜像<br>删除指定镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rmi $IMAGE_ID  #这个$IMAGE_ID数值可以根据`docker images`命令查看</span></span><br></pre></td></tr></table></figure>\n<p>删除所有镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rmi `docker images -q`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker容器操作\"><a href=\"#Docker容器操作\" class=\"headerlink\" title=\"Docker容器操作\"></a>Docker容器操作</h4><p>1.查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps</span></span><br></pre></td></tr></table></figure>\n<p>2.查看所有的容器（启动过的历史容器）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps -a</span></span><br></pre></td></tr></table></figure>\n<p>3.查看最后一次运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps -|</span></span><br></pre></td></tr></table></figure>\n<p>4.查看停止的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps -f status=exited</span></span><br></pre></td></tr></table></figure>\n<p>5.删除容器<br>删除指定容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rm $CONTAINER_ID/NAME</span></span><br></pre></td></tr></table></figure>\n<p>删除所有容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rm `docker ps -a -q`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建和启动容器\"><a href=\"#创建和启动容器\" class=\"headerlink\" title=\"创建和启动容器\"></a>创建和启动容器</h4><p><strong>创建容器常用的参数说明</strong><br>1.创建容器命令：docker run<br>2.-i: 表示运行容器<br>3.-t: 表示容器启动后会进入其命令行，加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。<br>4.—name: 为创建的容器命名<br>5.-v: 表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上修改，然后共享到容器上。<br>6.-d: 在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。<br>7.-p： 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。</p>\n<h5 id=\"交互式容器\"><a href=\"#交互式容器\" class=\"headerlink\" title=\"交互式容器\"></a>交互式容器</h5><p>创建一个交互式容器并取名为mycentos5:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost ~]<span class=\"comment\"># docker run -it --name=mycentos5 centos:7 /bin/bash</span></span><br><span class=\"line\">[root@53f33e279914 /]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>此时我们可以新建一个连接，通过docker ps命令看到刚才创建的容器正在启动中：<br><img src=\"/images/docker8.png\" alt=\"docker\"><br>通过exit命令可以退出当前容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@53f33e279914 /]<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>此时再通过docker ps命令查看刚才启动的容器也停止了。</p>\n<h5 id=\"守护式容器\"><a href=\"#守护式容器\" class=\"headerlink\" title=\"守护式容器\"></a>守护式容器</h5><p>输入以下命令创建一个名字为mycentos6的容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di --name=mycentos6 centos:7</span></span><br></pre></td></tr></table></figure>\n<p>创建后这个容器会在后台运行，而不是直接进入到这个容器中。可以通过docker ps命令查看。<br>登录守护式容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker exec -it mycentos6 /bin/bash</span></span><br></pre></td></tr></table></figure>\n<p>可以通过exit命令退出，但是容器不会停止。</p>\n<h5 id=\"停止和启动容器\"><a href=\"#停止和启动容器\" class=\"headerlink\" title=\"停止和启动容器\"></a>停止和启动容器</h5><p>停止正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker stop 容器名称</span></span><br></pre></td></tr></table></figure>\n<p>启动已运行过的容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker start 容器名称</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h4><h5 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h5><p>将文件拷贝到容器内可以用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker cp 需要拷贝的文件或目录 容器名称:容器目录</span></span><br></pre></td></tr></table></figure>\n<p>将文件从容器中拷贝出来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker cp 容器名称:容器目录 需要拷贝的文件或目录</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"目录挂载\"><a href=\"#目录挂载\" class=\"headerlink\" title=\"目录挂载\"></a>目录挂载</h5><p>在创建容器的时候，将宿主机的目录和容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而影响容器。格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di -v 宿主机目录:容器目录</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker inspect mycentos5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>部署应用</strong></p>\n<h4 id=\"MySQL部署\"><a href=\"#MySQL部署\" class=\"headerlink\" title=\"MySQL部署\"></a>MySQL部署</h4><p>1.拉取MySQL镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull mysql:5.7</span></span><br></pre></td></tr></table></figure>\n<p>2.创建MySQL容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di --name docker_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span></span><br></pre></td></tr></table></figure>\n<p>如上我们创建一个名称为docker_mysql的MySQL5.7版本的守护式容器，且配置MySQL登录密码是root。</p>\n<ul>\n<li>-p 代表端口映射，格式为 宿主机映射端口:容器运行端口</li>\n<li>-e 代表添加环境变量， MYSQL_ROOT_PASSWORD是root用户的登录密码</li>\n</ul>\n<p>3.进入MySQL容器，登录MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker exec -it docker_mysql /bin/bash</span></span><br></pre></td></tr></table></figure>\n<p>登录MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>4.远程连接MySQL<br><img src=\"/images/docker9.png\" alt=\"docker\"></p>\n<h4 id=\"Tomcat部署\"><a href=\"#Tomcat部署\" class=\"headerlink\" title=\"Tomcat部署\"></a>Tomcat部署</h4><p>1.拉取Tomcat-8 &amp;&amp; JDK-8 镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull tomcat:8-jre8</span></span><br></pre></td></tr></table></figure>\n<p>2.部署Web应用<br>为了更好的演示Docker部署Tomcat的使用方式，我们可以先将需要部署的web项目发送到服务器的某个路径下，我这里在/root/目录下创建了/root/site/目录作为项目的根目录，在其中创建index.html文件并写入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h2&gt;Hello Docker-Tomcat!&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>3.创建Tomcat容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di --name=docker_tomcat -p 9000:8080 -v /root/site/:/usr/local/tomcat/webapps/ROOT --privileged=true tomcat:8-jre8</span></span><br></pre></td></tr></table></figure>\n<p>以上就创建一个Tomcat容器，其容器名称Wiedocker_tomcat，-di表示是一个守护式容器；-p 9000:8080表示此容器端口映射为9000-&gt;8080，即对外的端口是9000，映射到容器里Tomcat服务器的端口8080，–privileged是以root权限运行。<br><img src=\"/images/docker10.png\" alt=\"docker\"><br>通过命令看到，当我们启动了容器，其中的Tomcat服务器也自动启动了。当然对于部署Nginx或MySQL的Docker容器，当启动容器时都会启动对应的服务。<br><strong>注意</strong><br>上面我们指定了宿主机的/root/site/目录映射到docker_tomcat容器的/usr/local/tomcat/webapps/ROOT目录，为什么是这个目录呢？<br>Docker虚拟化，它会在内部虚拟一个操作系统，是在其宿主机内核上的一层空间，所有有一定的目录结构，我们可以通过docker exec -it docker_tomcat /bin/bash命令进入到docker_tomcat容器内部，通过ls命令查看目录会发现其Tomcat服务器确实安装在docker_tomcat容器的/usr/local/tomcat目录下。<br>最后，我们在浏览器上访问：<a href=\"http://192.168.148.132:9000/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132:9000/</a>，即发现页面展示了我们刚才在/root/site/目录下创建的index.html网页：<br><img src=\"/images/docker11.png\" alt=\"docker\"><br>所以，如果你想要修改容器中Tomcat的端口号，直接进入容器的/usr/local/tomcat/conf/server.xml自改即可。</p>\n<h4 id=\"Nginx部署\"><a href=\"#Nginx部署\" class=\"headerlink\" title=\"Nginx部署\"></a>Nginx部署</h4><p>1.拉取Nginx镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n<p>2.创建Nginx容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di --name=docker_nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure>\n<p>测试<br><img src=\"/images/docker12.png\" alt=\"docker\"><br>在浏览器上访问：<a href=\"http://192.168.148.132/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132/</a>可以进入到Nginx的欢迎页。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>以上我们介绍了MySQL、Tomcat、Nginx容器的创建，对于其他的服务，如Redis等操作基本相同，不再阐述。</p>\n<h4 id=\"备份与迁移\"><a href=\"#备份与迁移\" class=\"headerlink\" title=\"备份与迁移\"></a>备份与迁移</h4><p>1.容器保存为镜像<br>可以通过以下命令将我们已创建（配置好的）容器打包为镜像，这样我们以后就能用该镜像再次创建新的容器了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit docker_tomcat my_tomcat</span><br></pre></td></tr></table></figure>\n<p>docker_tomcat是容器名称；my_tomcat是新的镜像名称。<br>2.镜像备份<br>通过以下命令可以将镜像打包为tar文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o my_tomcat.tar my_tomcat</span><br></pre></td></tr></table></figure>\n<p>-o输出到的文件<br>3.镜像恢复与备份<br>当我们删除了docker_tomcat镜像后，可以通过以下命令将刚才打包备份的.tar镜像文件恢复成一个Docker镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i my_tomcat.tar</span><br></pre></td></tr></table></figure>\n<p>-i输入的文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/docker1.jpg\" alt=\"docker\"><br><strong>Docker</strong>是一种容器技术，它的存在就是为了解决容器技术本身的复杂性。Docker容器拥有很高的性能，同时同一台宿主机中可以运行更多的容器，是用户尽可能的充分利用系统资源。</p>\n<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><blockquote>\n<p>1.什么是虚拟化？<br>在计算机中，虚拟化（Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及储存等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，是用户可以比原来的组态更好的方式来应用这些资源。这些资源的新虚拟部分是不受现有资源的架设方式、地域或物理组态所限制。</p>\n</blockquote>\n<ul>\n<li>全虚拟化架构<br>虚拟机的监视器（hypervisor）是类似于用户的应用程序运行在主机的OS之上，如VMware的workstation，这种虚拟化产品提供了虚拟的硬件。</li>\n</ul>\n<blockquote>\n<p>2.容器技术<br>容器和管理程序虚拟化（hypervisor virtualization, HV）不同，管理程序虚拟化通过中间层将一台或多台独立的机器虚拟运行在物理硬件之上，而<strong>容器</strong>是直接运行在操作系统内核之上的用户空间。因此，容器虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。</p>\n</blockquote>\n<p><strong>限制</strong><br>1、由于“客居”与操作系统，容器只能运行与底层主机相同或相似的操作系统，比如在Ubuntu服务中运行CentOS，但无法运行Windows。<br>2、相对于彻底隔离的管理程序虚拟化，容器被认为是不安全的。<br>最新的容器技术引入了OpenVZ、Solaris Zones以及Linux容器（LXC）。使用这些新技术，容器不再仅仅是一个单纯的运行环境。在自己的权限类内，容器更像一个完整宿主机。和传统虚拟化及半虚拟化想比，容器不需要模拟层（emulation layer）和管理层（hypervisor layer），而使用操作系统的系统调用接口。</p>\n<h4 id=\"Docker特点\"><a href=\"#Docker特点\" class=\"headerlink\" title=\"Docker特点\"></a>Docker特点</h4><p>1、上手快<br>2、用户可以很容易的把自己的程序Docker化。Docker依赖于“写时复制”（copy-on-write）模型，开箱即用。<br>快速高效的开发声明周期</p>\n<h4 id=\"Docker组件\"><a href=\"#Docker组件\" class=\"headerlink\" title=\"Docker组件\"></a>Docker组件</h4><h5 id=\"Docker客户端和服务器\"><a href=\"#Docker客户端和服务器\" class=\"headerlink\" title=\"Docker客户端和服务器\"></a>Docker客户端和服务器</h5><p>Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或守护进程发出请求，服务器或守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。<br><img src=\"/images/docker2.png\" alt=\"docker\"></p>\n<h5 id=\"Docker镜像\"><a href=\"#Docker镜像\" class=\"headerlink\" title=\"Docker镜像\"></a>Docker镜像</h5><p><strong>镜像</strong> 是构建Docker的基石。用户及基于镜像来运行自己的容器。镜像也是Docker声明周期中的“构建”部分。奖项是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。</p>\n<h5 id=\"Registry-注册中心\"><a href=\"#Registry-注册中心\" class=\"headerlink\" title=\"Registry 注册中心\"></a>Registry 注册中心</h5><p>Docker用Registry来保存用户构建的镜像。Registry分为共有和私有两种。Docker公司运营公共的Registry叫做Docker Hub。</p>\n<h5 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h5><p>Docker可以帮助你构建和部署容器，你只需要把你的程序打包放进容器即可。容器是基于镜像启动的，容器找那个可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中构建和打包阶段，而容器则是启动或执行阶段。容器基于镜像启动。<br><img src=\"/images/docker3.png\" alt=\"docker\"></p>\n<h4 id=\"Docker的安装与启动\"><a href=\"#Docker的安装与启动\" class=\"headerlink\" title=\"Docker的安装与启动\"></a>Docker的安装与启动</h4><p>前提：本例中使用了CentOS7作为服务器<br>通过以下命令在线在CentOS7中安装Docker：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/docker4.png\" alt=\"docker\"></p>\n<p><strong>查看Docker版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker -v</span></span><br><span class=\"line\">Docker version 1.13.1, build 8633870/1.13.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动与停止Docker\"><a href=\"#启动与停止Docker\" class=\"headerlink\" title=\"启动与停止Docker\"></a>启动与停止Docker</h4><p>systemctl命令是系统服务管理器指令，它是service和chkconfig两个命令组合。</p>\n<p>1.启动Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>2.停止Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker</span><br></pre></td></tr></table></figure>\n<p>3.重启Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>4.查看Docker状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker</span><br></pre></td></tr></table></figure>\n<p>5.开机启动Docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n<p>6.查看Docker概要信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n<p>7.查看Docker帮助文档</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker镜像操作\"><a href=\"#Docker镜像操作\" class=\"headerlink\" title=\"Docker镜像操作\"></a>Docker镜像操作</h4><p>Docker镜像由文件系统堆叠而成（是一种文件的储存形式）。最低端是一个文件引导系统，即bootfs。实际上，当一个容器启动后，它将会被移动到内存中，而引导文件系统则会被卸载，以留出更多的内存供磁盘镜像使用。Docker容器启动是需要一些文件的，而这些文件就可以被称为Docker镜像。<br><img src=\"/images/docker5.png\" alt=\"docker\"></p>\n<p>1、列出镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker images</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/docker6.png\" alt=\"docker\"></p>\n<ul>\n<li>REPOSITORY: 镜像所在的仓库名称</li>\n<li>TAG： 镜像标签</li>\n<li>IMAGE ID：镜像ID</li>\n<li>CREATED：镜像的创建日期（不是获取该镜像的日期）</li>\n<li>SIZE：镜像大小</li>\n</ul>\n<p>这些镜像都储存在Docker宿主机的/var/lib/docker目录下。</p>\n<p>2、搜索镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker search 镜像名称</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/docker7.png\" alt=\"docker\"></p>\n<p>3、从Docker Hub拉取镜像<br>去Docker Hub官网查找所需的Docker镜像：<a href=\"https://hub.docker.com/explore/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/explore/</a> ，然后通过以下命令在线pull：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull 镜像名称</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull 镜像名称:版本</span></span><br></pre></td></tr></table></figure>\n<p>因为官方提供的Docker镜像加速服务很慢，我们可以配置ustc的镜像。输入以下命令配置ustc镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/docker/daemon.json</span></span><br></pre></td></tr></table></figure>\n<p>没有就创建，向其中写入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://docker.mirrors.ustc.edu.cn\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Docker服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n\n<p>4、删除镜像<br>删除指定镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rmi $IMAGE_ID  #这个$IMAGE_ID数值可以根据`docker images`命令查看</span></span><br></pre></td></tr></table></figure>\n<p>删除所有镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rmi `docker images -q`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker容器操作\"><a href=\"#Docker容器操作\" class=\"headerlink\" title=\"Docker容器操作\"></a>Docker容器操作</h4><p>1.查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps</span></span><br></pre></td></tr></table></figure>\n<p>2.查看所有的容器（启动过的历史容器）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps -a</span></span><br></pre></td></tr></table></figure>\n<p>3.查看最后一次运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps -|</span></span><br></pre></td></tr></table></figure>\n<p>4.查看停止的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker ps -f status=exited</span></span><br></pre></td></tr></table></figure>\n<p>5.删除容器<br>删除指定容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rm $CONTAINER_ID/NAME</span></span><br></pre></td></tr></table></figure>\n<p>删除所有容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker rm `docker ps -a -q`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建和启动容器\"><a href=\"#创建和启动容器\" class=\"headerlink\" title=\"创建和启动容器\"></a>创建和启动容器</h4><p><strong>创建容器常用的参数说明</strong><br>1.创建容器命令：docker run<br>2.-i: 表示运行容器<br>3.-t: 表示容器启动后会进入其命令行，加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。<br>4.—name: 为创建的容器命名<br>5.-v: 表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上修改，然后共享到容器上。<br>6.-d: 在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。<br>7.-p： 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。</p>\n<h5 id=\"交互式容器\"><a href=\"#交互式容器\" class=\"headerlink\" title=\"交互式容器\"></a>交互式容器</h5><p>创建一个交互式容器并取名为mycentos5:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost ~]<span class=\"comment\"># docker run -it --name=mycentos5 centos:7 /bin/bash</span></span><br><span class=\"line\">[root@53f33e279914 /]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>此时我们可以新建一个连接，通过docker ps命令看到刚才创建的容器正在启动中：<br><img src=\"/images/docker8.png\" alt=\"docker\"><br>通过exit命令可以退出当前容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@53f33e279914 /]<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>此时再通过docker ps命令查看刚才启动的容器也停止了。</p>\n<h5 id=\"守护式容器\"><a href=\"#守护式容器\" class=\"headerlink\" title=\"守护式容器\"></a>守护式容器</h5><p>输入以下命令创建一个名字为mycentos6的容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di --name=mycentos6 centos:7</span></span><br></pre></td></tr></table></figure>\n<p>创建后这个容器会在后台运行，而不是直接进入到这个容器中。可以通过docker ps命令查看。<br>登录守护式容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker exec -it mycentos6 /bin/bash</span></span><br></pre></td></tr></table></figure>\n<p>可以通过exit命令退出，但是容器不会停止。</p>\n<h5 id=\"停止和启动容器\"><a href=\"#停止和启动容器\" class=\"headerlink\" title=\"停止和启动容器\"></a>停止和启动容器</h5><p>停止正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker stop 容器名称</span></span><br></pre></td></tr></table></figure>\n<p>启动已运行过的容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker start 容器名称</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h4><h5 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h5><p>将文件拷贝到容器内可以用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker cp 需要拷贝的文件或目录 容器名称:容器目录</span></span><br></pre></td></tr></table></figure>\n<p>将文件从容器中拷贝出来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker cp 容器名称:容器目录 需要拷贝的文件或目录</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"目录挂载\"><a href=\"#目录挂载\" class=\"headerlink\" title=\"目录挂载\"></a>目录挂载</h5><p>在创建容器的时候，将宿主机的目录和容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而影响容器。格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di -v 宿主机目录:容器目录</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker inspect mycentos5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>部署应用</strong></p>\n<h4 id=\"MySQL部署\"><a href=\"#MySQL部署\" class=\"headerlink\" title=\"MySQL部署\"></a>MySQL部署</h4><p>1.拉取MySQL镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull mysql:5.7</span></span><br></pre></td></tr></table></figure>\n<p>2.创建MySQL容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di --name docker_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span></span><br></pre></td></tr></table></figure>\n<p>如上我们创建一个名称为docker_mysql的MySQL5.7版本的守护式容器，且配置MySQL登录密码是root。</p>\n<ul>\n<li>-p 代表端口映射，格式为 宿主机映射端口:容器运行端口</li>\n<li>-e 代表添加环境变量， MYSQL_ROOT_PASSWORD是root用户的登录密码</li>\n</ul>\n<p>3.进入MySQL容器，登录MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker exec -it docker_mysql /bin/bash</span></span><br></pre></td></tr></table></figure>\n<p>登录MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>4.远程连接MySQL<br><img src=\"/images/docker9.png\" alt=\"docker\"></p>\n<h4 id=\"Tomcat部署\"><a href=\"#Tomcat部署\" class=\"headerlink\" title=\"Tomcat部署\"></a>Tomcat部署</h4><p>1.拉取Tomcat-8 &amp;&amp; JDK-8 镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker pull tomcat:8-jre8</span></span><br></pre></td></tr></table></figure>\n<p>2.部署Web应用<br>为了更好的演示Docker部署Tomcat的使用方式，我们可以先将需要部署的web项目发送到服务器的某个路径下，我这里在/root/目录下创建了/root/site/目录作为项目的根目录，在其中创建index.html文件并写入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h2&gt;Hello Docker-Tomcat!&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>3.创建Tomcat容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run -di --name=docker_tomcat -p 9000:8080 -v /root/site/:/usr/local/tomcat/webapps/ROOT --privileged=true tomcat:8-jre8</span></span><br></pre></td></tr></table></figure>\n<p>以上就创建一个Tomcat容器，其容器名称Wiedocker_tomcat，-di表示是一个守护式容器；-p 9000:8080表示此容器端口映射为9000-&gt;8080，即对外的端口是9000，映射到容器里Tomcat服务器的端口8080，–privileged是以root权限运行。<br><img src=\"/images/docker10.png\" alt=\"docker\"><br>通过命令看到，当我们启动了容器，其中的Tomcat服务器也自动启动了。当然对于部署Nginx或MySQL的Docker容器，当启动容器时都会启动对应的服务。<br><strong>注意</strong><br>上面我们指定了宿主机的/root/site/目录映射到docker_tomcat容器的/usr/local/tomcat/webapps/ROOT目录，为什么是这个目录呢？<br>Docker虚拟化，它会在内部虚拟一个操作系统，是在其宿主机内核上的一层空间，所有有一定的目录结构，我们可以通过docker exec -it docker_tomcat /bin/bash命令进入到docker_tomcat容器内部，通过ls命令查看目录会发现其Tomcat服务器确实安装在docker_tomcat容器的/usr/local/tomcat目录下。<br>最后，我们在浏览器上访问：<a href=\"http://192.168.148.132:9000/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132:9000/</a>，即发现页面展示了我们刚才在/root/site/目录下创建的index.html网页：<br><img src=\"/images/docker11.png\" alt=\"docker\"><br>所以，如果你想要修改容器中Tomcat的端口号，直接进入容器的/usr/local/tomcat/conf/server.xml自改即可。</p>\n<h4 id=\"Nginx部署\"><a href=\"#Nginx部署\" class=\"headerlink\" title=\"Nginx部署\"></a>Nginx部署</h4><p>1.拉取Nginx镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n<p>2.创建Nginx容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di --name=docker_nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure>\n<p>测试<br><img src=\"/images/docker12.png\" alt=\"docker\"><br>在浏览器上访问：<a href=\"http://192.168.148.132/\" target=\"_blank\" rel=\"noopener\">http://192.168.148.132/</a>可以进入到Nginx的欢迎页。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>以上我们介绍了MySQL、Tomcat、Nginx容器的创建，对于其他的服务，如Redis等操作基本相同，不再阐述。</p>\n<h4 id=\"备份与迁移\"><a href=\"#备份与迁移\" class=\"headerlink\" title=\"备份与迁移\"></a>备份与迁移</h4><p>1.容器保存为镜像<br>可以通过以下命令将我们已创建（配置好的）容器打包为镜像，这样我们以后就能用该镜像再次创建新的容器了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit docker_tomcat my_tomcat</span><br></pre></td></tr></table></figure>\n<p>docker_tomcat是容器名称；my_tomcat是新的镜像名称。<br>2.镜像备份<br>通过以下命令可以将镜像打包为tar文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o my_tomcat.tar my_tomcat</span><br></pre></td></tr></table></figure>\n<p>-o输出到的文件<br>3.镜像恢复与备份<br>当我们删除了docker_tomcat镜像后，可以通过以下命令将刚才打包备份的.tar镜像文件恢复成一个Docker镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i my_tomcat.tar</span><br></pre></td></tr></table></figure>\n<p>-i输入的文件。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck529vsji0000be6kcklmdvfk","category_id":"ck4seojjv0001h7s67lt40541","_id":"ck529vsjz0003be6k8im7aw69"},{"post_id":"ck529vslf0004be6k1b8954cs","category_id":"ck4seojjv0001h7s67lt40541","_id":"ck529vslj0007be6k1tf2dsnz"},{"post_id":"ck57xfme50000d36kef11hpp8","category_id":"ck57xfmeb0001d36kf2xdg6sh","_id":"ck57xfmee0004d36keddvfi4r"},{"post_id":"ck6i13ob40000jns6gz7mgozn","category_id":"ck6i12sa90000iws60f4bhmz8","_id":"ck6i13ob80003jns61y0aex7i"},{"post_id":"ck6i8hlnq0000tks60gd499cg","category_id":"ck51vzg8z0001f96k47kf92dq","_id":"ck6i8hlo70004tks6g8hr1fuk"},{"post_id":"ck6i8hlo10001tks69xdqdx5y","category_id":"ck51vzg8z0001f96k47kf92dq","_id":"ck6i8hlo70005tks6ckfrfmld"},{"post_id":"ck6ivxamv0000n8s6a1re1k3g","category_id":"ck51vzg8z0001f96k47kf92dq","_id":"ck6ivxan40002n8s6fejxh2u8"},{"post_id":"ck6iw57kg0000ozs63qqa3d4k","category_id":"ck51vzg8z0001f96k47kf92dq","_id":"ck6iw57km0002ozs6hgu11g6s"},{"post_id":"ck6jadwgy0000gus642mv2prr","category_id":"ck6i12sa90000iws60f4bhmz8","_id":"ck6jadwh50003gus64dfw89q2"},{"post_id":"ck6jmftg20000sgs6bses2hfq","category_id":"ck6i12sa90000iws60f4bhmz8","_id":"ck6jmftg80003sgs650fgd9qq"},{"post_id":"ck6kiel0d0000eys6hx1edm7a","category_id":"ck6kiel0p0001eys69rx74l14","_id":"ck6kiel0t0004eys660f1f6bu"},{"post_id":"ck6kroww40000k5s67wajeknm","category_id":"ck6krowwc0001k5s65d5lar0s","_id":"ck6krowwh0004k5s6aqg5deu3"}],"PostTag":[{"post_id":"ck529vsji0000be6kcklmdvfk","tag_id":"ck4seojjz0002h7s6bxv01y3n","_id":"ck529vsjy0001be6kdzhm5rpk"},{"post_id":"ck529vsji0000be6kcklmdvfk","tag_id":"ck4seojk00003h7s637qb86df","_id":"ck529vsjz0002be6kex3a9tsz"},{"post_id":"ck529vslf0004be6k1b8954cs","tag_id":"ck4seojjz0002h7s6bxv01y3n","_id":"ck529vslj0005be6kbbx466m5"},{"post_id":"ck529vslf0004be6k1b8954cs","tag_id":"ck4seojk00003h7s637qb86df","_id":"ck529vslj0006be6k43oceteu"},{"post_id":"ck57xfme50000d36kef11hpp8","tag_id":"ck57xfmed0002d36kggnc3bah","_id":"ck57xfmee0005d36k12xrbyke"},{"post_id":"ck57xfme50000d36kef11hpp8","tag_id":"ck57xfmed0003d36k6cp5g1f1","_id":"ck57xfmee0006d36k3ljh2ce4"},{"post_id":"ck6i13ob40000jns6gz7mgozn","tag_id":"ck4seojjz0002h7s6bxv01y3n","_id":"ck6i13ob80001jns6frj4d6cq"},{"post_id":"ck6i13ob40000jns6gz7mgozn","tag_id":"ck57yd84k0000vh6kfacxhvgv","_id":"ck6i13ob80002jns65e4w3oyk"},{"post_id":"ck6i8hlnq0000tks60gd499cg","tag_id":"ck51vzg930002f96kfcljd45q","_id":"ck6i8hlo40002tks6a0uw8cds"},{"post_id":"ck6i8hlo10001tks69xdqdx5y","tag_id":"ck51vzg930002f96kfcljd45q","_id":"ck6i8hlo60003tks60vcfdy4c"},{"post_id":"ck6ivxamv0000n8s6a1re1k3g","tag_id":"ck51vzg930002f96kfcljd45q","_id":"ck6ivxan40001n8s6abwbb6mg"},{"post_id":"ck6iw57kg0000ozs63qqa3d4k","tag_id":"ck51vzg930002f96kfcljd45q","_id":"ck6iw57kl0001ozs65q61g6dt"},{"post_id":"ck6jadwgy0000gus642mv2prr","tag_id":"ck4seojjz0002h7s6bxv01y3n","_id":"ck6jadwh40001gus6gu71e7go"},{"post_id":"ck6jadwgy0000gus642mv2prr","tag_id":"ck57yd84k0000vh6kfacxhvgv","_id":"ck6jadwh50002gus6cbrz8fgt"},{"post_id":"ck6jmftg20000sgs6bses2hfq","tag_id":"ck4seojjz0002h7s6bxv01y3n","_id":"ck6jmftg70001sgs6ar41dpj3"},{"post_id":"ck6jmftg20000sgs6bses2hfq","tag_id":"ck57yd84k0000vh6kfacxhvgv","_id":"ck6jmftg80002sgs609ya82om"},{"post_id":"ck6kiel0d0000eys6hx1edm7a","tag_id":"ck6kiel0s0002eys6ao227v4j","_id":"ck6kiel0t0003eys621wo5jv6"},{"post_id":"ck6kroww40000k5s67wajeknm","tag_id":"ck6krowwf0002k5s67sdh2lny","_id":"ck6krowwg0003k5s65pjh1ds4"}],"Tag":[{"name":"web","_id":"ck4kwhov60000za6k3rpv13rx"},{"name":"hexo","_id":"ck4kwhov80001za6kgavbczb7"},{"name":"github","_id":"ck4kwhov80002za6kcdm2fyj7"},{"name":"Java","_id":"ck4seojjz0002h7s6bxv01y3n"},{"name":"Java基础","_id":"ck4seojk00003h7s637qb86df"},{"name":"Java框架","_id":"ck4xxfhf70001fs6k2pxr3lbr"},{"name":"前端框架","_id":"ck51vzg930002f96kfcljd45q"},{"name":"框架","_id":"ck57xfmed0002d36kggnc3bah"},{"name":"权限框架","_id":"ck57xfmed0003d36k6cp5g1f1"},{"name":"Java框架 - 数据库","_id":"ck57yd84k0000vh6kfacxhvgv"},{"name":"HTTP服务器","_id":"ck6kiel0s0002eys6ao227v4j"},{"name":"DevOps - 服务器","_id":"ck6krowwf0002k5s67sdh2lny"}]}}