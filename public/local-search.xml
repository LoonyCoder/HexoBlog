<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>杂记</title>
    <link href="/2020/02/14/interview/"/>
    <url>/2020/02/14/interview/</url>
    
    <content type="html"><![CDATA[<p>近些日子在拉勾网上看到了史上最难Java题，顺便答了一下，结果10道题错了6道，表示十分遗憾。后愤然去网上搜集各种资料，果然还是太年轻，于此记录以告诫自己，学无止境！</p><h3 id="Apache-Dubbo的默认集群容错方案"><a href="#Apache-Dubbo的默认集群容错方案" class="headerlink" title="Apache Dubbo的默认集群容错方案"></a>Apache Dubbo的默认集群容错方案</h3><p>A、Failover Cluster<br>B、Failfast Cluster<br>C、Failsafe Cluster<br>D、Failback Cluster</p><p><strong>答案：A</strong></p><p><strong>解析：</strong><br>Dubbo提供了随机、轮询、最少调用优先等多种负载均衡策略，提供对zk等多种注册中心等支持，能够自动完成服务的注册与发现。Dubbo提供可视化的管理后台，方便对服务状态进行监控和管理。dubbo的数据通信默认使用netty来实现，拥有非常不错的性能。Dubbo默认的容错方案是Failover Cluster，即：失败自动切换，当出现失败，重试其它服务器。</p><p>除此之外，还提供以下其他容错方式：</p><ul><li>Failfast Cluster<br>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li><li>Failsafe Cluster<br>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li><li>Failback Cluster<br>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li><li>Forking Cluster<br>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=”2” 来设置最大并行数。</li><li>Broadcast Cluster<br>广播调用所有提供者，逐个调用，任意一台报错则报错 。通常用于通知所有提供者更新缓存或日志等本地资源信息。</li></ul><hr><h3 id="下面关于Kafka说法错误的是"><a href="#下面关于Kafka说法错误的是" class="headerlink" title="下面关于Kafka说法错误的是:"></a>下面关于Kafka说法错误的是:</h3><p>A、消息是按照topic进行划分的，一个topic就是一个queue，一个topic可以有多个消费方，当生产方在某个topic发出一条消息后，所有订阅了这个topic的消费方都可以接受到这条消息<br>B、kafka为每个topic维护了多个partition分区，能保证一个topic的消息消费有序<br>C、所有的消息读写都是在主partition中进行，其他副本分区只会从主分区复制数据<br>D、消息的发送有三种方式：同步、异步、以及oneway，异步为默认方式</p><p><strong>答案：B、D</strong></p><p><strong>解析：</strong><br><img src="/images/kafka1.png" srcset="/img/loading.gif" alt="kafka"><br><img src="/images/kafka2.png" srcset="/img/loading.gif" alt="kafka"><br>Kafka只保证一个分区内的消息有序，<strong>不能保证一个topic的不同分区之间的消息有序。</strong><br>为了保证较高的处理效率，所有的消息读写都是在主patition中进行，其他副本分区只会从主分区复制数据。Kafka会在Zookeeper上针对每个Topic维护一个称为ISR(in-sync replica)，就是已同步的副本集。如果某个主分区不可用了，Kafka就会从ISR集合中选择一个副本作为新的主分区。<br>消息的发送有三种方式：同步、异步以及oneway。<strong>同步模式下后台线程中发送消息时同步获取结果，这也是默认模式。</strong><br>异步的模式允许生产者批量发送数据，可以极大的提高性能，但是会增加丢失数据的风险。oneway模式只发送消息不需要返回发送结果，消息可靠性最低，但是低延迟、高吞吐，适用于对可靠性要求不高的场景。</p><hr><h3 id="下面关于排序算法的描述正确的是"><a href="#下面关于排序算法的描述正确的是" class="headerlink" title="下面关于排序算法的描述正确的是:"></a>下面关于排序算法的描述正确的是:</h3><p>A、冒泡排序和插入排序都是稳定的排序算法<br>B、如果数组已经按照顺序排好序，使用插入排序，时间复杂度是O(n)<br>C、快速排序每次选择最大值座位基准值能够加入排序过程<br>D、快速排序最好情况的时间复杂度是O(nlogn)</p><p><strong>答案：A、B、D</strong></p><p><strong>解析：</strong><br>快速排序时间复杂度：<br>1、 最优情况：被选出来的基准值都是当前子数组的中间数。<br>不断地把一个规模为 n 的问题分解成规模为 n/2 的问题，一直分解到规模大小为 1。如果 n 等于 2，只需要分一次;如果 n 等于 4，需要分 2 次，以此类推，对于规模为 n 的问题，一共要进行 log(n) 次的切分。<br>把规模大小为 n 的问题分解成 n/2 的两个子问题时，和基准值进行了 n-1 次比较，复杂度就是 O(n)。<br>因此，在最优情况下，快速排序的复杂度是 O(nlogn)。</p><p>2、最坏情况：基准值选择了子数组里的最大或者最小值<br>每次都把子数组分成了两个更小的子数组，其中一个的长度为 1，另外一个的长度只比原子数组少 1，这样就需要n次的切分。<br>因此，算法复杂度为 O(n²)。</p><hr><h3 id="以下有关JVM的说法正确的是"><a href="#以下有关JVM的说法正确的是" class="headerlink" title="以下有关JVM的说法正确的是:"></a>以下有关JVM的说法正确的是:</h3><p>A、程序计数器是一个比较小的内存区域，用于指示当前线程所执行的字节码执行到了第几行，是线程隔离的。<br>B、虚拟机栈描述的是Java方法执行的内存模型，用于存储局部变量，操作数栈，动态链接，方法出口等信息，是线程隔离的。<br>C、方法区用于存储JVM加载的类信息、常量、静态变量、以及编译器编译后的代码等数据，是线程共享的。<br>D、堆被所有线程共享，目的是为了存放对象实例，几乎所有的对象实例都在这里分配。当堆内存没有可用空间时，会抛出OOM异常</p><p><strong>答案：A、B、C、D</strong></p><p><strong>解析：</strong><br><strong>虚拟机栈</strong> 也叫方法栈，是线程私有的，线程在执行每个方法时都会同时创建一个栈帧，用来存储局部变量表、操作栈、动态链接、方法出口等信息。调用方法时执行入栈，方法返回时执行出栈。<br><strong>本地方法栈</strong> 与虚拟机栈类似，也是用来保存线程执行方法时的信息，不同的是，执行java方法使用虚拟机栈，而执行native方法使用本地方法栈。<br><strong>程序计数器</strong> 保存着当前线程所执行的字节码位置，每个线程工作时都有一个独立的计数器。程序计数器为执行java方法服务，执行native方法时，程序计数器为空。<br>栈、本地方法栈、程序计数器这三个部分都是线程独占的。<br><strong>堆</strong> 是JVM管理的内存中最大的一块，堆被所有线程共享，目的是为了存放对象实例，几乎所有的对象实例都在这里分配。当堆内存没有可用的空间时，会抛出OOM异常。根据对象存活的周期不同，jvm把堆内存进行分代管理，由垃圾回收器来进行对象的回收管理。<br>方法区 也是各个线程共享的内存区域，又叫非堆区。用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，JDK7中的永久代和JDK8中的Metaspace都是方法区的一种实现。</p><hr><h3 id="关于TCP的关闭过程，说法正确的是"><a href="#关于TCP的关闭过程，说法正确的是" class="headerlink" title="关于TCP的关闭过程，说法正确的是:"></a>关于TCP的关闭过程，说法正确的是:</h3><p>A、处于TIME_WAIT状态的连接等待2MSL后真正关闭连接<br>B、对一个established状态的TCP连接，在调用shutdown函数之前调用close接口，可以让主动调用的一方进入半关闭状态<br>C、主动发送FIN消息的连接端，收到对方回应ack之前不能发只能收，在收到对方回复ack之后不能发也不能收，进入CLOSING状态<br>D、虽然TCP是可靠传输，但在已经成功建立连接的TCP连接上，也可能存在报文丢失</p><p><strong>答案：A、D</strong></p><p><strong>解析：</strong><br><img src="/images/tcp1.png" srcset="/img/loading.gif" alt="TCP"><br>A、等待2倍最大报文段生存时间之后在关闭链接，原因有两个：</p><ul><li>一、保证TCP协议的全双工连接能够可靠关闭</li><li>二、保证这次连接的重复数据段从网络中消失，防止端口被重用时可能产生数据混淆</li></ul><p>B、shutdown可以使TCP半双工，但是如果之前调用了close，则直接关闭了socket</p><p>C、收到了ack之后的状态，也是不能发只能收，进入FIN_WAIT_2<br>通信中client和server两端的链接都是ESTABLISHED状态，然后client先主动发起了关闭链接请求，client向server发送了一个fin包，表示client端已经没有数据要发送了，然后client进入了FIN_WAIT_1状态。<br>server端收到fin后，返回ack，然后进入CLOSE_WAIT状态。此时server属于半关闭状态，因为此时client向server方向已经不会发送数据了，可是server向client端可能还有数据要发送。<br>当server端数据发送完毕后，server端会向client端发送fin，表示server端也没有数据要发送了，此时server进入LAST_ACK状态，就等待client的应答就可以关闭链接了。<br>client端收到server端的fin后，回复ack，然后进入TIME_WAIT状态。TIME_WAIT状态下需要等待2倍的最大报文段生存时间，来保证链接的可靠关闭。之后才会进入CLOSED关闭状态。而server端收到ack后直接就进入CLOSED状态。</p><p>D、由于TCP的下层网络（IP）可能出现丢失、重复或失序的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。</p><hr><h3 id="关于B-树比B树更适合做索引，以下说法正确的是"><a href="#关于B-树比B树更适合做索引，以下说法正确的是" class="headerlink" title="关于B+树比B树更适合做索引，以下说法正确的是:"></a>关于B+树比B树更适合做索引，以下说法正确的是:</h3><p>A、叶节点之间有指针相连，B+树更适合范围检索<br>B、非叶节点只保存关键字和指针，同样大小非叶节点，B+树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低<br>C、B+树的查询效率比较稳定。任何关键字的查找必须走一条从根节点到叶节点的路。所有关键字查询的路径长度相同，效率相当<br>D、非叶节点上，增加了指向同一层下一个非叶节点的指针，将节点的最低利用率从1/2提高到2/3</p><p><strong>答案：A、B、C</strong></p><p><strong>解析：</strong><br>B+树更适合索引系统，原因有：<br>1、由于叶节点之间有指针相连，B+树更适合范围检索;<br>2、由于非叶节点只保存关键字和指针，同样大小非叶节点，B+树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低;<br>3、B+树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，效率相当。</p><hr><h3 id="以下关于Netty说法，正确的是"><a href="#以下关于Netty说法，正确的是" class="headerlink" title="以下关于Netty说法，正确的是:"></a>以下关于Netty说法，正确的是:</h3><p>A、Netty线程模型采用”服务端监听线程”和”IO线程”分离的方式<br>B、通常情况下在NIO非阻塞模式下，Netty为每个Channel分配一个EventLoop，并且它的整个生命周期的时间都由这个EventLoop来处理<br>C、一个EventLoop可以绑定多个Channel<br>D、一般接收消息时，由pipeline处理完成会把消息提交到业务线程池进行处理</p><p><strong>答案：A、B、C、D</strong></p><p><strong>解析：</strong><br>Netty线程模型采用“服务端监听线程”和“IO线程”分离的方式，boss线程组负责监听事件，创建socket并绑定到Worker线程组。<br>Worker线程组负责IO处理。线程组由EventLoopGroup实现，其中包含了多个EventLoop事件处理器，每个EventLoop包含一个处理线程。<br>通常情况下在NIO非阻塞模式下，Netty为每个Channel分配一个EventLoop，并且它的整个生命周期中的事件都由这个EventLoop来处理。<br>一个EventLoop可以绑定多个Channel。<br>EventLoop的处理模型，Netty4中Channel的读写事件都是由Worker线程来处理。<br>请求处理中最主要的就是ChannelPipeline，其中包含了一组ChannelHandler。<br>这些Handler组成了责任链模式，依次对Channel中的消息进行处理。<br>一般接收消息时，由pipeline处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成task，提交回Channel对应的EventLoop来写回返回值。</p><h3 id="Mybatis在执行SQL时，正确的调用顺序是"><a href="#Mybatis在执行SQL时，正确的调用顺序是" class="headerlink" title="Mybatis在执行SQL时，正确的调用顺序是:"></a>Mybatis在执行SQL时，正确的调用顺序是:</h3><p>①SqlSessionFactory<br>②SqlSession<br>③StatementHandler<br>④ParameterHandler<br>⑤ResultSetHandler<br>⑥Executor<br>⑦TypeHandler</p><p>A、①②③④⑤⑥⑦<br>B、①②⑥③④⑦⑤<br>C、①②④③⑦⑥⑤<br>D、①②③⑦④⑥⑤</p><p><strong>答案：B</strong></p><p><strong>解析：</strong><br><img src="/images/mybatisflow.png" srcset="/img/loading.gif" alt="mybatisflow"><br>在执行sql时，首先会从SqlSessionFactory中创建一个新的SqlSession。<br>sql语句是通过sqlSession中的Executor来执行，Executor根据SqlSession传递的参数执行query()方法，然后创建一个StatementHandler对象，将必要的参数传递给StatementHandler，由StatementHandler来完成对数据库的查询。<br>StatementHandler调用ParameterHandler的setParameters方法，把用户传递的参数转换成JDBC Statement所需要的参数， 调用原生JDBC来执行语句。<br>最后由ResultSetHandler的handleResultSets方法对JDBC返回的ResultSet结果集转换成对象集，并逐级返回结果，完成一次sql语句执行。</p><hr><h3 id="以下关于向线程池提交任务，正确的步骤是"><a href="#以下关于向线程池提交任务，正确的步骤是" class="headerlink" title="以下关于向线程池提交任务，正确的步骤是:"></a>以下关于向线程池提交任务，正确的步骤是:</h3><p>①判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务<br>②判断线程池中的线程数是否大于设置的核心线程数，创建核心线程执行任务<br>③判断缓冲队列是否满了，如果没满，放入队列等待执行<br>④执行拒绝策略</p><p>A、②①③④<br>B、②③①④<br>C、①②③④<br>D、①③②④</p><p><strong>答案：B</strong></p><p><strong>解析：</strong><br><img src="/images/thread.png" srcset="/img/loading.gif" alt="thread"><br>我们看看向线程池提交任务时的执行顺序。<br>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。<br>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。<br>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。<br>如果已经达到了最大线程数，则执行指定的拒绝策略。</p><hr><h3 id="以下关于类的加载机制错误的是"><a href="#以下关于类的加载机制错误的是" class="headerlink" title="以下关于类的加载机制错误的是:"></a>以下关于类的加载机制错误的是:</h3><p>A、类的加载指的是将编译好的class类文件中的字节码读入到内存中，将其放在堆内并创建对应的Class对象<br>B、加载是文件到内存的过程。通过类的完全限定名查找类字节码文件，并利用字节码文件创建一个Class对象<br>C、准备阶段是进行内存分配。为类变量也就是类中由static修饰的变量分配内存，并且设置初始值是0或者null，而不是代码中设置的具体值<br>D、解析主要是解析字段、接口、方法。主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。</p><p><strong>答案：A</strong></p><p><strong>解析：</strong><br><img src="/images/classloader.png" srcset="/img/loading.gif" alt="classloader"><br>类的加载指的是将编译好的class类文件中的字节码读入到内存中，将其放在方法区内并创建对应的Class对象。<br>类的加载分为加载、链接、初始化，其中链接又包括验证、准备、解析三步。<br>看到图中上半部分深绿色，我们逐个分析：<br>加载是文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个Class对象<br>验证是对类文件内容验证。目的在于确保Class文件符合当前虚拟机要求，不会危害虚拟机自身安全。主要包括四种：<br>文件格式验证，元数据验证，字节码验证，符号引用验证。<br>准备阶段是进行内存分配。为类变量也就是类中由static修饰的变量分配内存，并且设置初始值，这里要注意，初始值是0或者null，而不是代码中设置的具体值，代码中设置的值是在初始化阶段完成的。另外这里也不包含用final修饰的静态变量，因为final在编译的时候就会分配了。<br>解析主要是解析字段、接口、方法。主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。<br>最后是初始化：主要完成静态块执行与静态变量的赋值。这是类加载最后阶段，若被加载类的父类没有初始化，则先对父类进行初始化。<br>只有对类主动使用时，才会进行初始化，初始化的触发条件包括创建类的实例的时候、访问类的静态方法或者静态变量的时候、Class.forName()反射类的时候、或者某个子类被初始化的时候。</p>]]></content>
    
    
    <categories>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java - 面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring、SpringMVC、Mybatis整合之工程搭建</title>
    <link href="/2019/01/28/ssm/"/>
    <url>/2019/01/28/ssm/</url>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>源码地址：<a href="https://github.com/LoonyCoder/ssm" target="_blank" rel="noopener">SSM整合</a></p><hr><p>在目前的企业级Java应用中，Spring框架是必须的。Struts2框架与Spring的整合问题日益凸显，而Spring MVC作为新一代的MVC框架，因其可以与Spring框架无缝整合的特性收到了越来越多的欢迎。Hibernate框架在面对需要存储过程或者复杂SQL时显得力不从心，不能提供高效的数据库控制。而Mybatis框架作为持久层的框架，虽然需要自己编写SQL语句，但是其对高并发高响应的支持，以及对动态SQL和动态绑定的支持使其脱颖而出。</p><p>因此SSM框架（Spring + Spring MVC +Mybatis）逐渐取代了之前广泛使用的SSH框架（Spring + Struts2 + Hibernate），成为了目前使用最多的框架。</p><p>本文使用IDEA，利用Maven管理项目，整合SSM框架搭建论文管理系统，实现简单的增、删、改、查功能。步骤详细，讲解丰富，适合新手入门。</p><hr><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li>Mac OS 10.15</li><li>IntelliJ IDEA Ultimate 20183</li><li>Apache-tomcat-7</li><li>JDK 1.8.0_121</li><li>MySQL 5.7</li><li>Maven 3.3.9</li></ul><hr><h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><p>最终完成的工程结构：</p><p><img src="/images/ssm/ssm1.png" srcset="/img/loading.gif" alt="ssm"><br>下面开始详细的讲解项目的开发过程。</p><hr><h3 id="IDEA-Maven搭建项目骨架"><a href="#IDEA-Maven搭建项目骨架" class="headerlink" title="IDEA+Maven搭建项目骨架"></a>IDEA+Maven搭建项目骨架</h3><h4 id="新建Maven项目："><a href="#新建Maven项目：" class="headerlink" title="新建Maven项目："></a>新建Maven项目：</h4><p>点击File -&gt; New -&gt; Project -&gt; Maven -&gt; 勾选 Create from archetype -&gt; 选择 maven-archetype-webapp (<strong>注意：此处不要错选成上面的cocoom-22-archetype-webapp</strong>) </p><p><img src="/images/ssm/ssm2.png" srcset="/img/loading.gif" alt="ssm"></p><p><img src="/images/ssm/ssm3.png" srcset="/img/loading.gif" alt="ssm"></p><p>在弹出的new project 选项卡中填写GroupId和Artifactid，其中GroupID是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构，ArtifactID是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。对于入门练习，这两项可以随意填写。</p><p><img src="/images/ssm/ssm4.png" srcset="/img/loading.gif" alt="ssm"></p><p>之后点击next 选择Maven版本（其中IDEA 专业版自带Maven，也可以选择自己下载的maven）。之后填写项目名称和项目地址，完成后点击Finish，完成项目骨架的创建。 </p><p><img src="/images/ssm/ssm5.png" srcset="/img/loading.gif" alt="ssm"></p><p>点击finish开始创建工程。</p><h4 id="在新建的项目中添加所需要的文件-文件夹"><a href="#在新建的项目中添加所需要的文件-文件夹" class="headerlink" title="在新建的项目中添加所需要的文件/文件夹"></a>在新建的项目中添加所需要的文件/文件夹</h4><p>创建之后的项目如图所示，我们需要在这之上新建一些目录。<br>首先在项目的根目录下新建target文件夹，系统自动将其设置为”Excluded”</p><p><img src="/images/ssm/ssm6.png" srcset="/img/loading.gif" alt="ssm"></p><p>在src/main目录下新建Directory：”java”和”resource”，此时查看下java包是否蓝色的，如果是灰色的，单击右键，并将其设置为”Source Root”（即：此项目默认的代码文件源目录）<br>查看”resource”目录是否带有四个横线，如果没有，同样的方式设置成”Resources Boot”<br><img src="/images/ssm/ssm7.png" srcset="/img/loading.gif" alt="ssm"></p><p>在刚才新建的java文件下新建”com.loonycoder”包，再在com包下新建四个包，分别命名为：pojo、service、dao、controller。</p><p><img src="/images/ssm/ssm8.png" srcset="/img/loading.gif" alt="ssm"></p><p>上面新建的四个包：pojo、service、dao、controller，其所存放的分别是：</p><ul><li>pojo: 存放自定义的java类。如：paper类，user类，book类等，每个类的属性设为private，并提供public属性的getter/setter方法让外界访问</li><li>service：定义接口，包含系统所提供的功能。（之后还会在service包下再新建impl包）。</li><li>dao：定义接口，包含与数据库进行交互的功能。</li><li>controller：控制器，负责接收页面请求，转发和处理。<br>在resource包下新建Directory：”mapper”（用于存放xxxMapper.xml文件）和”spring”（用于存放spring-xxx.xml配置文件），新建文件：”jdbc.properties”（mysql数据库配置文件）,”log4j.properties”（日志输出配置文件）,”mybatis-config.xml”（mybatis框架配置文件）。 </li></ul><p>然后，在web-inf目录下新建”jsp”包，存放xxx.jsp显示界面。<br>补充之后的项目目录如下图所示，至此项目骨架搭建完毕，开始写代码实现增删改查功能。<br><img src="/images/ssm/ssm9.png" srcset="/img/loading.gif" alt="ssm"></p><h4 id="在pom-xml中引入相关依赖"><a href="#在pom-xml中引入相关依赖" class="headerlink" title="在pom.xml中引入相关依赖"></a>在pom.xml中引入相关依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.loonycoder&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;ssm&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;loonycoder ssm&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project’s website --&gt;</span><br><span class="line">  &lt;url&gt;www.loonycoder.com&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;spring.version&gt;5.0.3.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;mybatis.version&gt;3.4.4&lt;/mybatis.version&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 单元测试 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">      &lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第一部分：Spring 配置--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring core --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring DAO --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring mvc --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;spring.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第二部分：Servlet web --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;2.9.4&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第三部分：数据库和mybatis --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库连接池 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- MyBatis --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;<span class="variable">$&#123;mybatis.version&#125;</span>&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mybatis-spring整合包 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第四部分：日志 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 实现slf4j接口并整合 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">      &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;ssm&lt;/finalName&gt;</span><br><span class="line">    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html<span class="comment">#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">    &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;<span class="built_in">source</span>&gt;6&lt;/<span class="built_in">source</span>&gt;</span><br><span class="line">          &lt;target&gt;6&lt;/target&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">-- Table structure <span class="keyword">for</span> `paper`</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `paper`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `paper` (</span><br><span class="line"></span><br><span class="line">`paper_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'paperID'</span>,</span><br><span class="line"></span><br><span class="line">`name` varchar(100) NOT NULL COMMENT <span class="string">'paper名称'</span>,</span><br><span class="line"></span><br><span class="line">`number` int(11) NOT NULL COMMENT <span class="string">'paper数量'</span>,</span><br><span class="line"></span><br><span class="line">`detail` varchar(200) NOT NULL COMMENT <span class="string">'paper描述'</span>,</span><br><span class="line"></span><br><span class="line">PRIMARY KEY (`paper_id`)</span><br><span class="line"></span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT=<span class="string">'paper表'</span>;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">-- Records of paper</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">INSERT INTO `paper` VALUES (<span class="string">'1'</span>, <span class="string">'loonycoder1'</span>, <span class="string">'5'</span>, <span class="string">'望月1'</span>);</span><br><span class="line"></span><br><span class="line">INSERT INTO `paper` VALUES (<span class="string">'2'</span>, <span class="string">'loonycoder2'</span>, <span class="string">'8'</span>, <span class="string">'望月2'</span>);</span><br><span class="line"></span><br><span class="line">INSERT INTO `paper` VALUES (<span class="string">'3'</span>, <span class="string">'loonycoder3'</span>, <span class="string">'10'</span>, <span class="string">'望月3'</span>);</span><br></pre></td></tr></table></figure><h4 id="新建Pojo实体类和接口"><a href="#新建Pojo实体类和接口" class="headerlink" title="新建Pojo实体类和接口"></a>新建Pojo实体类和接口</h4><blockquote><p>1.在pojo包中新建Paper.java</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.pojo;</span><br><span class="line"></span><br><span class="line">public class Paper &#123;</span><br><span class="line">    private long paperId;</span><br><span class="line"></span><br><span class="line">    private String paperName;</span><br><span class="line"></span><br><span class="line">    private int paperNum;</span><br><span class="line"></span><br><span class="line">    private String paperDetail;</span><br><span class="line"></span><br><span class="line">    public long <span class="function"><span class="title">getPaperId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> paperId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaperId(long paperId) &#123;</span><br><span class="line">        this.paperId = paperId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getPaperName</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> paperName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaperName(String paperName) &#123;</span><br><span class="line">        this.paperName = paperName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getPaperNum</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> paperNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaperNum(int paperNum) &#123;</span><br><span class="line">        this.paperNum = paperNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getPaperDetail</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> paperDetail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaperDetail(String paperDetail) &#123;</span><br><span class="line">        this.paperDetail = paperDetail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.在service包中新建接口 IPaperService.java：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.service;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.pojo.Paper;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IPaperService &#123;</span><br><span class="line">    int addPaper(Paper paper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int deletePaperById(long id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int updatePaper(Paper paper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Paper queryById(long id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Paper&gt; queryAllPaper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.在service下新建impl包，提供接口实现类 PaperServiceImpl.java</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.service.impl;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.dao.IPaperDao;</span><br><span class="line">import com.loonycoder.pojo.Paper;</span><br><span class="line">import com.loonycoder.service.IPaperService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class IPaperServiceImpl implements IPaperService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IPaperDao paperDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int addPaper(Paper paper) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> paperDao.addPaper(paper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int deletePaperById(long id) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> paperDao.deletePaperById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public int updatePaper(Paper paper) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> paperDao.updatePaper(paper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public Paper queryById(long id) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> paperDao.queryById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public List&lt;Paper&gt; <span class="function"><span class="title">queryAllPaper</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> paperDao.queryAllPaper();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.在dao包下面提供dao层接口 IPaperDao.java</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.dao;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.pojo.Paper;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IPaperDao &#123;</span><br><span class="line">    int addPaper(Paper paper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int deletePaperById(long id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int updatePaper(Paper paper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Paper queryById(long id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Paper&gt; queryAllPaper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.在controller包中新建 PaperController.java</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.controller;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.pojo.Paper;</span><br><span class="line">import com.loonycoder.service.IPaperService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(<span class="string">"/paper"</span>)</span><br><span class="line">public class PaperController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IPaperService paperService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/allPaper"</span>)</span><br><span class="line"></span><br><span class="line">    public String list(Model model) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Paper&gt; list = paperService.queryAllPaper();</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="string">"allPaper"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"toAddPaper"</span>)</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">toAddPaper</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="string">"addPaper"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/addPaper"</span>)</span><br><span class="line"></span><br><span class="line">    public String addPaper(Paper paper) &#123;</span><br><span class="line"></span><br><span class="line">        paperService.addPaper(paper);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="string">"redirect:/paper/allPaper"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/del/&#123;paperId&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    public String deletePaper(@PathVariable(<span class="string">"paperId"</span>) Long id) &#123;</span><br><span class="line"></span><br><span class="line">        paperService.deletePaperById(id);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="string">"redirect:/paper/allPaper"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"toUpdatePaper"</span>)</span><br><span class="line"></span><br><span class="line">    public String toUpdatePaper(Model model, Long id) &#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"paper"</span>, paperService.queryById(id));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="string">"updatePaper"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/updatePaper"</span>)</span><br><span class="line"></span><br><span class="line">    public String updatePaper(Model model, Paper paper) &#123;</span><br><span class="line"></span><br><span class="line">        paperService.updatePaper(paper);</span><br><span class="line"></span><br><span class="line">        paper = paperService.queryById(paper.getPaperId());</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"paper"</span>, paper);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="string">"redirect:/paper/allPaper"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完善所有配置文件"><a href="#完善所有配置文件" class="headerlink" title="完善所有配置文件"></a>完善所有配置文件</h4><blockquote><p>1.在resource/mapper包下新建 PaperMapper.xml（mybatis框架mapper代理开发配置文件）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"></span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"com.loonycoder.dao.IPaperDao"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap <span class="built_in">type</span>=<span class="string">"Paper"</span> id=<span class="string">"paperResultMap"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;id property=<span class="string">"paperId"</span> column=<span class="string">"paper_id"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;result property=<span class="string">"paperName"</span> column=<span class="string">"name"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;result property=<span class="string">"paperNum"</span> column=<span class="string">"number"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;result property=<span class="string">"paperDetail"</span> column=<span class="string">"detail"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"addPaper"</span> parameterType=<span class="string">"Paper"</span>&gt;</span><br><span class="line"></span><br><span class="line">INSERT INTO paper(paper_id,name,number,detail) VALUE (<span class="comment">#&#123;paperId&#125;,#&#123;paperName&#125;, #&#123;paperNum&#125;, #&#123;paperDetail&#125;)</span></span><br><span class="line"></span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;delete id=<span class="string">"deletePaperById"</span> parameterType=<span class="string">"long"</span>&gt;</span><br><span class="line"></span><br><span class="line">DELETE FROM paper WHERE paper_id=<span class="comment">#&#123;paperID&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"updatePaper"</span> parameterType=<span class="string">"Paper"</span>&gt;</span><br><span class="line"></span><br><span class="line">UPDATE paper</span><br><span class="line"></span><br><span class="line">SET NAME = <span class="comment">#&#123;paperName&#125;,NUMBER = #&#123;paperNum&#125;,detail = #&#123;paperDetail&#125;</span></span><br><span class="line"></span><br><span class="line">WHERE paper_id = <span class="comment">#&#123;paperId&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;/update&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"queryById"</span> resultType=<span class="string">"Paper"</span> parameterType=<span class="string">"long"</span>&gt;</span><br><span class="line"></span><br><span class="line">SELECT paper_id,name,number,detail</span><br><span class="line"></span><br><span class="line">FROM paper</span><br><span class="line"></span><br><span class="line">WHERE paper_id=<span class="comment">#&#123;paperId&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"queryAllPaper"</span> resultMap=<span class="string">"paperResultMap"</span>&gt;</span><br><span class="line"></span><br><span class="line">SELECT paper_id,name,number,detail</span><br><span class="line"></span><br><span class="line">FROM paper</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.在resource/spring包下分别新建配置文件：spring-dao.xml , spring-mvc.xml , spring-service.xml</p></blockquote><p><font style="color: red"><strong>spring-dao.xml</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line"></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line"></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置整合mybatis过程 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 1.配置数据库相关参数properties的属性：<span class="variable">$&#123;url&#125;</span> --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 2.数据库连接池 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置连接池属性 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driver&#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.url&#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"user"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.username&#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- c3p0连接池的私有属性 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"30"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"minPoolSize"</span> value=<span class="string">"10"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 关闭连接后不自动commit --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"autoCommitOnClose"</span> value=<span class="string">"false"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 获取连接超时时间 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"checkoutTimeout"</span> value=<span class="string">"10000"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 当获取连接失败重试次数 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"acquireRetryAttempts"</span> value=<span class="string">"2"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"sqlSessionFactory"</span> class=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 扫描pojo包 使用别名 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"typeAliasesPackage"</span> value=<span class="string">"com.loonycoder.pojo"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"mapperLocations"</span> value=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"sqlSessionFactoryBeanName"</span> value=<span class="string">"sqlSessionFactory"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line">        &lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.loonycoder.dao"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><font style="color: red"><strong>spring-mvc.xml</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line"></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line"></span><br><span class="line">       xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line"></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置SpringMVC --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 1.开启SpringMVC注解模式 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 简化配置：</span><br><span class="line"></span><br><span class="line">    (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter</span><br><span class="line"></span><br><span class="line">    (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 2.静态资源默认servlet配置</span><br><span class="line"></span><br><span class="line">    (1)加入对静态资源的处理：js,gif,png</span><br><span class="line"></span><br><span class="line">    (2)允许使用<span class="string">"/"</span>做整体映射</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"viewClass"</span> value=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.扫描web相关的bean --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=<span class="string">"com.loonycoder.controller"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><font style="color: red"><strong>spring-service.xml</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line"></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line"></span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line"></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=<span class="string">"com.loonycoder.service"</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置事务管理器 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line"></span><br><span class="line">          class=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置基于注解的声明式事务 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><blockquote><p>3.在resource包下添加mybatis-config.xml</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line"></span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置全局属性 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;settings&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;setting name=<span class="string">"useGeneratedKeys"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用列别名替换列名 默认:<span class="literal">true</span> --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;setting name=<span class="string">"useColumnLabel"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 开启驼峰命名转换:Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;setting name=<span class="string">"mapUnderscoreToCamelCase"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p>4.在resource包下添加log4j.properties和jdbc.properties</p></blockquote><p><font style="color: red"><b>jdbc.properties<b></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line"><span class="comment"># 以下部分修改成你自己的数据库信息即可</span></span><br><span class="line">jdbc.url=jdbc:mysql://127.0.0.1:3306/ssm?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8</span><br><span class="line"></span><br><span class="line">jdbc.username=root</span><br><span class="line"></span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><p><font style="color: red"><b>log4j.properties<b></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=ERROR, stdout</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><blockquote><p>5.修改web.xml文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"></span><br><span class="line">        <span class="string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;web-app xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line"></span><br><span class="line">         version=<span class="string">"3.1"</span> metadata-complete=<span class="string">"true"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置springMVC需要加载的配置文件</span><br><span class="line"></span><br><span class="line">    spring-dao.xml,spring-service.xml,spring-mvc.xml</span><br><span class="line"></span><br><span class="line">    Mybatis - &gt; spring -&gt; springmvc</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line"></span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line"></span><br><span class="line">      &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 默认匹配所有的请求 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;filter&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter-class&gt;</span><br><span class="line"></span><br><span class="line">      org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line"></span><br><span class="line">    &lt;/filter-class&gt;</span><br><span class="line"></span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line"></span><br><span class="line">      &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line"></span><br><span class="line">      &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h4 id="添加相关页面"><a href="#添加相关页面" class="headerlink" title="添加相关页面"></a>添加相关页面</h4><p>所有页面我都写好了，大家直接用我的页面即可，如果觉得不美观，可自行改造~</p><blockquote><p>1.修改index.jsp</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>  prefix=<span class="string">"fmt"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    pageContext.setAttribute(<span class="string">"path"</span>, request.getContextPath());</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line"></span><br><span class="line">        a &#123;</span><br><span class="line"></span><br><span class="line">            text-decoration: none;</span><br><span class="line"></span><br><span class="line">            color: black;</span><br><span class="line"></span><br><span class="line">            font-size: 18px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        h3 &#123;</span><br><span class="line"></span><br><span class="line">            width: 180px;</span><br><span class="line"></span><br><span class="line">            height: 38px;</span><br><span class="line"></span><br><span class="line">            margin: 100px auto;</span><br><span class="line"></span><br><span class="line">            text-align: center;</span><br><span class="line"></span><br><span class="line">            line-height: 38px;</span><br><span class="line"></span><br><span class="line">            background: deepskyblue;</span><br><span class="line"></span><br><span class="line">            border-radius: 4px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body onload=<span class="string">"fun()"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h1 align=<span class="string">"center"</span>&gt;</span><br><span class="line"></span><br><span class="line">                    基于SSM框架的管理系统：简单实现增、删、改、查。</span><br><span class="line"></span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=<span class="string">"<span class="variable">$&#123;path &#125;</span>/paper/allPaper"</span>&gt;点击进入管理页面&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.在jsp包下添加三个页面：allPaper.jsp/addPaper.jsp/updatePaper.jsp</p></blockquote><p><font style="color: red"><b>allPaper.jsp<b></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line"></span><br><span class="line">Created by IntelliJ IDEA.</span><br><span class="line"></span><br><span class="line">User: lenovo</span><br><span class="line"></span><br><span class="line">Date: 2018/4/6</span><br><span class="line"></span><br><span class="line">Time: 16:57</span><br><span class="line"></span><br><span class="line">To change this template use File | Settings | File Templates.</span><br><span class="line"></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% String appPath = request.getContextPath(); %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;Paper列表&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h1&gt;</span><br><span class="line"></span><br><span class="line">                    基于SSM框架的管理系统：简单实现增、删、改、查。</span><br><span class="line"></span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h1&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;small&gt;论文列表 —— 显示所有论文&lt;/small&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-4 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;a class=<span class="string">"btn btn-primary"</span> href=<span class="string">"<span class="variable">$&#123;path&#125;</span>/paper/toAddPaper"</span>&gt;新增&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;table class=<span class="string">"table table-hover table-striped"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;thead&gt;</span><br><span class="line"></span><br><span class="line">                &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;th&gt;论文编号&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;th&gt;论文名字&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;th&gt;论文数量&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;th&gt;论文详情&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">                &lt;c:forEach var=<span class="string">"paper"</span> items=<span class="string">"<span class="variable">$&#123;requestScope.get('list')&#125;</span>"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;td&gt;<span class="variable">$&#123;paper.paperId&#125;</span>&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;td&gt;<span class="variable">$&#123;paper.paperName&#125;</span>&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;td&gt;<span class="variable">$&#123;paper.paperNum&#125;</span>&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;td&gt;<span class="variable">$&#123;paper.paperDetail&#125;</span>&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;td&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;a href=<span class="string">"<span class="variable">$&#123;path&#125;</span>/paper/toUpdatePaper?id=<span class="variable">$&#123;paper.paperId&#125;</span>"</span>&gt;更改&lt;/a&gt; |</span><br><span class="line"></span><br><span class="line">                            &lt;a href=<span class="string">"&lt;%=appPath%&gt;/paper/del/<span class="variable">$&#123;paper.paperId&#125;</span>"</span>&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><font style="color: red"><b>addPaper.jsp<b></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line"></span><br><span class="line">Created by IntelliJ IDEA.</span><br><span class="line"></span><br><span class="line">User: lenovo</span><br><span class="line"></span><br><span class="line">Date: 2018/4/7</span><br><span class="line"></span><br><span class="line">Time: 16:45</span><br><span class="line"></span><br><span class="line">To change this template use File | Settings | File Templates.</span><br><span class="line"></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    String path = request.getContextPath();</span><br><span class="line"></span><br><span class="line">    String basePath = request.getScheme() + <span class="string">"://"</span></span><br><span class="line"></span><br><span class="line">            + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span><br><span class="line"></span><br><span class="line">            + path + <span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;新增论文&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h1&gt;</span><br><span class="line"></span><br><span class="line">                    基于SSM框架的管理系统：简单实现增、删、改、查。</span><br><span class="line"></span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h1&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;small&gt;新增论文&lt;/small&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">""</span> name=<span class="string">"userForm"</span>&gt;</span><br><span class="line"></span><br><span class="line">        论文名称：&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"paperName"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        论文数量：&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"paperNum"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        论文详情：&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"paperDetail"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"添加"</span> onclick=<span class="string">"addPaper()"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">addPaper</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">            var form = document.forms[0];</span><br><span class="line"></span><br><span class="line">            form.action = <span class="string">"&lt;%=basePath %&gt;paper/addPaper"</span>;</span><br><span class="line"></span><br><span class="line">            form.method = <span class="string">"post"</span>;</span><br><span class="line"></span><br><span class="line">            form.submit();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><font style="color: red"><b>updatePaper.jsp<b></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    String path = request.getContextPath();</span><br><span class="line"></span><br><span class="line">    String basePath = request.getScheme() + <span class="string">"://"</span></span><br><span class="line"></span><br><span class="line">            + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span><br><span class="line"></span><br><span class="line">            + path + <span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;修改论文&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h1&gt;</span><br><span class="line"></span><br><span class="line">                    基于SSM框架的管理系统：简单实现增、删、改、查。</span><br><span class="line"></span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h1&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;small&gt;修改论文&lt;/small&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">""</span> name=<span class="string">"userForm"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"paperId"</span> value=<span class="string">"<span class="variable">$&#123;paper.paperId&#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        论文名称：&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"paperName"</span> value=<span class="string">"<span class="variable">$&#123;paper.paperName&#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        论文数量：&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"paperNum"</span> value=<span class="string">"<span class="variable">$&#123;paper.paperNum&#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        论文详情：&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"paperDetail"</span> value=<span class="string">"<span class="variable">$&#123;paper.paperDetail &#125;</span>"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"提交"</span> onclick=<span class="string">"updatePaper()"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">updatePaper</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">            var form = document.forms[0];</span><br><span class="line"></span><br><span class="line">            form.action = <span class="string">"&lt;%=basePath %&gt;paper/updatePaper"</span>;</span><br><span class="line"></span><br><span class="line">            form.method = <span class="string">"post"</span>;</span><br><span class="line"></span><br><span class="line">            form.submit();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h4><p>以上所有工程搭建完毕之后，我们开始配置Tomcat</p><p><img src="/images/ssm/ssm10.png" srcset="/img/loading.gif" alt="ssm"><br><img src="/images/ssm/ssm11.png" srcset="/img/loading.gif" alt="ssm"><br><img src="/images/ssm/ssm12.png" srcset="/img/loading.gif" alt="ssm"><br><img src="/images/ssm/ssm13.png" srcset="/img/loading.gif" alt="ssm"><br><img src="/images/ssm/ssm14.png" srcset="/img/loading.gif" alt="ssm"></p><hr><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>配置好tomcat之后，我们启动tomcat访问我们的页面，如图：<br><img src="/images/ssm/ssm15.png" srcset="/img/loading.gif" alt="ssm"></p><p>我们测试下增删改查的功能，点击进入管理页面：<br><img src="/images/ssm/ssm16.png" srcset="/img/loading.gif" alt="ssm"></p><p>好了我们进行一下新增操作：<br><img src="/images/ssm/ssm17.png" srcset="/img/loading.gif" alt="ssm"><br><img src="/images/ssm/ssm18.png" srcset="/img/loading.gif" alt="ssm"></p><p>修改操作：<br><img src="/images/ssm/ssm19.png" srcset="/img/loading.gif" alt="ssm"><br><img src="/images/ssm/ssm20.png" srcset="/img/loading.gif" alt="ssm"></p><p>最后测试一下删除操作：<br><img src="/images/ssm/ssm20.png" srcset="/img/loading.gif" alt="ssm"></p><p>到目前为止我们已经完成了Spring、SpringMVC、Mybatis的整合，并且实现了简单的增删改查功能。</p>]]></content>
    
    
    <categories>
      
      <category>SSM框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java - SSM框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式消息中间件Kafka——Kafka的高可用</title>
    <link href="/2019/01/18/kafka-3/"/>
    <url>/2019/01/18/kafka-3/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/kafka-logo.png" srcset="/img/loading.gif" alt="kafka"></p><h3 id="高可用的由来"><a href="#高可用的由来" class="headerlink" title="高可用的由来"></a>高可用的由来</h3><h4 id="为何需要Replication"><a href="#为何需要Replication" class="headerlink" title="为何需要Replication"></a>为何需要Replication</h4><p>在Kafka在0.8以前的版本中，是没有Replication的，一旦某一个Broker宕机，则其上所有的Partition数据都不可被消费，这与Kafka数据持久性及Delivery Guarantee的设计目标相悖。同时Producer都不能再将数据存于这些Partition中。</p><p>　　如果Producer使用同步模式则Producer会在尝试重新发送message.send.max.retries（默认值为3）次后抛出Exception，用户可以选择停止发送后续数据也可选择继续选择发送。而前者会造成数据的阻塞，后者会造成本应发往该Broker的数据的丢失。</p><p>　　如果Producer使用异步模式，则Producer会尝试重新发送message.send.max.retries（默认值为3）次后记录该异常并继续发送后续数据，这会造成数据丢失并且用户只能通过日志发现该问题。同时，Kafka的Producer并未对异步模式提供callback接口。</p><p>　　由此可见，在没有Replication的情况下，一旦某机器宕机或者某个Broker停止工作则会造成整个系统的可用性降低。随着集群规模的增加，整个集群中出现该类异常的几率大大增加，因此对于生产系统而言Replication机制的引入非常重要。</p><h4 id="Leader-Election"><a href="#Leader-Election" class="headerlink" title="Leader Election"></a>Leader Election</h4><p> 引入Replication之后，同一个Partition可能会有多个Replica，而这时需要在这些Replication之间选出一个Leader，Producer和Consumer只与这个Leader交互，其它Replica作为Follower从Leader中复制数据。</p><p>因为需要保证同一个Partition的多个Replica之间的数据一致性（其中一个宕机后其它Replica必须要能继续服务并且即不能造成数据重复也不能造成数据丢失）。如果没有一个Leader，所有Replica都可同时读/写数据，那就需要保证多个Replica之间互相（N×N条通路）同步数据，数据的一致性和有序性非常难保证，大大增加了Replication实现的复杂性，同时也增加了出现异常的几率。而引入Leader后，只有Leader负责数据读写，Follower只向Leader顺序Fetch数据（N条通路），系统更加简单且高效。</p><hr><h3 id="Kafka-HA设计解析"><a href="#Kafka-HA设计解析" class="headerlink" title="Kafka HA设计解析"></a>Kafka HA设计解析</h3><h4 id="如何将所有Replica均匀分布到整个集群"><a href="#如何将所有Replica均匀分布到整个集群" class="headerlink" title="如何将所有Replica均匀分布到整个集群"></a>如何将所有Replica均匀分布到整个集群</h4><p>为了更好的做负载均衡，Kafka尽量将所有的Partition均匀分配到整个集群上。一个典型的部署方式是一个Topic的Partition数量大于Broker的数量。同时为了提高Kafka的容错能力，也需要将同一个Partition的Replica尽量分散到不同的机器。实际上，如果所有的Replica都在同一个Broker上，那一旦该Broker宕机，该Partition的所有Replica都无法工作，也就达不到HA的效果。同时，如果某个Broker宕机了，需要保证它上面的负载可以被均匀的分配到其它幸存的所有Broker上。</p><p>Kafka分配Replica的算法如下：</p><ol><li><p>将所有Broker（假设共n个Broker）和待分配的Partition排序</p></li><li><p>将第i个Partition分配到第（i mod n）个Broker上</p></li><li><p>将第i个Partition的第j个Replica分配到第（(i + j) mode n）个Broker上</p></li></ol><h4 id="Data-Replication（副本策略）"><a href="#Data-Replication（副本策略）" class="headerlink" title="Data Replication（副本策略）"></a>Data Replication（副本策略）</h4><p>Kafka的高可靠性的保障来源于其健壮的副本（replication）策略。</p><h5 id="消息传递同步策略"><a href="#消息传递同步策略" class="headerlink" title="消息传递同步策略"></a>消息传递同步策略</h5><p>Producer在发布消息到某个Partition时，先通过ZooKeeper找到该Partition的Leader，然后无论该Topic的Replication Factor为多少，Producer只将该消息发送到该Partition的Leader。Leader会将该消息写入其本地Log。每个Follower都从Leader pull数据。这种方式上，Follower存储的数据顺序与Leader保持一致。Follower在收到该消息并写入其Log后，向Leader发送ACK。一旦Leader收到了ISR中的所有Replica的ACK，该消息就被认为已经commit了，Leader将增加HW并且向Producer发送ACK。</p><p>为了提高性能，每个Follower在接收到数据后就立马向Leader发送ACK，而非等到数据写入Log中。因此，对于已经commit的消息，Kafka只能保证它被存于多个Replica的内存中，而不能保证它们被持久化到磁盘中，也就不能完全保证异常发生后该条消息一定能被Consumer消费。</p><p>Consumer读消息也是从Leader读取，只有被commit过的消息才会暴露给Consumer。</p><p>Kafka Replication的数据流如下图所示：</p><p><img src="/images/kafka9.png" srcset="/img/loading.gif" alt="kafka"></p><h5 id="ACK前需要保证有多少个备份"><a href="#ACK前需要保证有多少个备份" class="headerlink" title="ACK前需要保证有多少个备份"></a>ACK前需要保证有多少个备份</h5><p>对于Kafka而言，定义一个Broker是否“活着”包含两个条件：</p><ul><li>一是它必须维护与ZooKeeper的session（这个通过ZooKeeper的Heartbeat机制来实现）。</li><li>二是Follower必须能够及时将Leader的消息复制过来，不能“落后太多”。<br>Leader会跟踪与其保持同步的Replica列表，该列表称为ISR（即in-sync Replica）。如果一个Follower宕机，或者落后太多，Leader将把它从ISR中移除。这里所描述的“落后太多”指Follower复制的消息落后于Leader后的条数超过预定值（该值可在$KAFKA_HOME/config/server.properties中通过replica.lag.max.messages配置，其默认值是4000）或者Follower超过一定时间（该值可在$KAFKA_HOME/config/server.properties中通过replica.lag.time.max.ms来配置，其默认值是10000）未向Leader发送fetch请求。</li></ul><p>Kafka的复制机制既不是完全的同步复制，也不是单纯的异步复制。事实上，完全同步复制要求所有能工作的Follower都复制完，这条消息才会被认为commit，这种复制方式极大的影响了吞吐率（高吞吐率是Kafka非常重要的一个特性）。而异步复制方式下，Follower异步的从Leader复制数据，数据只要被Leader写入log就被认为已经commit，这种情况下如果Follower都复制完都落后于Leader，而如果Leader突然宕机，则会丢失数据。而Kafka的这种使用ISR的方式则很好的均衡了确保数据不丢失以及吞吐率。Follower可以批量的从Leader复制数据，这样极大的提高复制性能（批量写磁盘），极大减少了Follower与Leader的差距。</p><p>需要说明的是，Kafka只解决fail/recover，不处理“Byzantine”（“拜占庭”）问题。一条消息只有被ISR里的所有Follower都从Leader复制过去才会被认为已提交。这样就避免了部分数据被写进了Leader，还没来得及被任何Follower复制就宕机了，而造成数据丢失（Consumer无法消费这些数据）。而对于Producer而言，它可以选择是否等待消息commit，这可以通过request.required.acks来设置。这种机制确保了只要ISR有一个或以上的Follower，一条被commit的消息就不会丢失。</p><h5 id="Leader-Election算法"><a href="#Leader-Election算法" class="headerlink" title="Leader Election算法"></a>Leader Election算法</h5><p>Leader选举本质上是一个分布式锁，有两种方式实现基于ZooKeeper的分布式锁：</p><ul><li>节点名称唯一性：多个客户端创建一个节点，只有成功创建节点的客户端才能获得锁</li><li>临时顺序节点：所有客户端在某个目录下创建自己的临时顺序节点，只有序号最小的才获得锁</li></ul><p>一种非常常用的选举leader的方式是“Majority Vote”（“少数服从多数”），但Kafka并未采用这种方式。这种模式下，如果我们有2f+1个Replica（包含Leader和Follower），那在commit之前必须保证有f+1个Replica复制完消息，为了保证正确选出新的Leader，fail的Replica不能超过f个。因为在剩下的任意f+1个Replica里，至少有一个Replica包含有最新的所有消息。这种方式有个很大的优势，系统的latency只取决于最快的几个Broker，而非最慢那个。Majority Vote也有一些劣势，为了保证Leader Election的正常进行，它所能容忍的fail的follower个数比较少。如果要容忍1个follower挂掉，必须要有3个以上的Replica，如果要容忍2个Follower挂掉，必须要有5个以上的Replica。也就是说，在生产环境下为了保证较高的容错程度，必须要有大量的Replica，而大量的Replica又会在大数据量下导致性能的急剧下降。这就是这种算法更多用在ZooKeeper这种共享集群配置的系统中而很少在需要存储大量数据的系统中使用的原因。例如HDFS的HA Feature是基于majority-vote-based journal，但是它的数据存储并没有使用这种方式。</p><p>Kafka在ZooKeeper中动态维护了一个ISR（in-sync replicas），这个ISR里的所有Replica都跟上了leader，只有ISR里的成员才有被选为Leader的可能。在这种模式下，对于f+1个Replica，一个Partition能在保证不丢失已经commit的消息的前提下容忍f个Replica的失败。在大多数使用场景中，这种模式是非常有利的。事实上，为了容忍f个Replica的失败，Majority Vote和ISR在commit前需要等待的Replica数量是一样的，但是ISR需要的总的Replica的个数几乎是Majority Vote的一半。</p><p>虽然Majority Vote与ISR相比有不需等待最慢的Broker这一优势，但是Kafka作者认为Kafka可以通过Producer选择是否被commit阻塞来改善这一问题，并且节省下来的Replica和磁盘使得ISR模式仍然值得。</p><h5 id="如何处理所有Replica都不工作"><a href="#如何处理所有Replica都不工作" class="headerlink" title="如何处理所有Replica都不工作"></a>如何处理所有Replica都不工作</h5><p>在ISR中至少有一个follower时，Kafka可以确保已经commit的数据不丢失，但如果某个Partition的所有Replica都宕机了，就无法保证数据不丢失了。这种情况下有两种可行的方案：</p><ol><li><p>等待ISR中的任一个Replica“活”过来，并且选它作为Leader</p></li><li><p>选择第一个“活”过来的Replica（不一定是ISR中的）作为Leader</p></li></ol><p>这就需要在可用性和一致性当中作出一个简单的折衷。如果一定要等待ISR中的Replica“活”过来，那不可用的时间就可能会相对较长。而且如果ISR中的所有Replica都无法“活”过来了，或者数据都丢失了，这个Partition将永远不可用。选择第一个“活”过来的Replica作为Leader，而这个Replica不是ISR中的Replica，那即使它并不保证已经包含了所有已commit的消息，它也会成为Leader而作为consumer的数据源（前文有说明，所有读写都由Leader完成）。Kafka0.8.x使用了第二种方式。根据Kafka的文档，在以后的版本中，Kafka支持用户通过配置选择这两种方式中的一种，从而根据不同的使用场景选择高可用性还是强一致性。</p><h5 id="选举Leader"><a href="#选举Leader" class="headerlink" title="选举Leader"></a>选举Leader</h5><p>最简单最直观的方案是，所有Follower都在ZooKeeper上设置一个Watch，一旦Leader宕机，其对应的ephemeral znode会自动删除，此时所有Follower都尝试创建该节点，而创建成功者（ZooKeeper保证只有一个能创建成功）即是新的Leader，其它Replica即为Follower。</p><p>但是该方法会有3个问题：</p><ol><li><p>split-brain 这是由ZooKeeper的特性引起的，虽然ZooKeeper能保证所有Watch按顺序触发，但并不能保证同一时刻所有Replica“看”到的状态是一样的，这就可能造成不同Replica的响应不一致</p></li><li><p>herd effect 如果宕机的那个Broker上的Partition比较多，会造成多个Watch被触发，造成集群内大量的调整</p></li><li><p>ZooKeeper负载过重 每个Replica都要为此在ZooKeeper上注册一个Watch，当集群规模增加到几千个Partition时ZooKeeper负载会过重。</p></li></ol><p>Kafka 0.8.x的Leader Election方案解决了上述问题，它在所有broker中选出一个controller，所有Partition的Leader选举都由controller决定。controller会将Leader的改变直接通过RPC的方式（比ZooKeeper Queue的方式更高效）通知需为为此作为响应的Broker。同时controller也负责增删Topic以及Replica的重新分配。</p><hr><h3 id="HA相关ZooKeeper结构"><a href="#HA相关ZooKeeper结构" class="headerlink" title="HA相关ZooKeeper结构"></a>HA相关ZooKeeper结构</h3><p><img src="/images/kafka10.png" srcset="/img/loading.gif" alt="kafka"></p><h4 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h4><p>该目录下znode只有在有相关操作时才会存在，操作结束时会将其删除</p><p>/admin/reassign_partitions用于将一些Partition分配到不同的broker集合上。对于每个待重新分配的Partition，Kafka会在该znode上存储其所有的Replica和相应的Broker id。该znode由管理进程创建并且一旦重新分配成功它将会被自动移除。</p><h4 id="broker"><a href="#broker" class="headerlink" title="broker"></a>broker</h4><p>即/brokers/ids/[brokerId]）存储“活着”的broker信息。</p><p>topic注册信息（/brokers/topics/[topic]），存储该topic的所有partition的所有replica所在的broker id，第一个replica即为preferred replica，对一个给定的partition，它在同一个broker上最多只有一个replica,因此broker id可作为replica id。</p><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><p>/controller -&gt; int (broker id of the controller)存储当前controller的信息</p><p>/controller_epoch -&gt; int (epoch)直接以整数形式存储controller epoch，而非像其它znode一样以JSON字符串形式存储。</p><h3 id="producer发布消息"><a href="#producer发布消息" class="headerlink" title="producer发布消息"></a>producer发布消息</h3><h4 id="写入方式"><a href="#写入方式" class="headerlink" title="写入方式"></a>写入方式</h4><p>producer 采用 push 模式将消息发布到 broker，每条消息都被 append 到 patition 中，属于顺序写磁盘（顺序写磁盘效率比随机写内存要高，保障 kafka 吞吐率）。</p><h4 id="消息路由"><a href="#消息路由" class="headerlink" title="消息路由"></a>消息路由</h4><p>producer 发送消息到 broker 时，会根据分区算法选择将其存储到哪一个 partition。其路由机制为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、 指定了 patition，则直接使用；</span><br><span class="line">2、 未指定 patition 但指定 key，通过对 key 的 value 进行<span class="built_in">hash</span> 选出一个 patition</span><br><span class="line">3、 patition 和 key 都未指定，使用轮询选出一个 patition。</span><br></pre></td></tr></table></figure><h4 id="写入流程"><a href="#写入流程" class="headerlink" title="写入流程"></a>写入流程</h4><p>producer 写入消息序列图如下所示：</p><p><img src="/images/kafka11.png" srcset="/img/loading.gif" alt="kafka"><br>流程说明：</p><blockquote><p>1、 producer 先从 zookeeper 的 “/brokers/…/state” 节点找到该 partition 的 leader<br>2、 producer 将消息发送给该 leader<br>3、 leader 将消息写入本地 log<br>4、 followers 从 leader pull 消息，写入本地 log 后 leader 发送 ACK<br>5、 leader 收到所有 ISR 中的 replica 的 ACK 后，增加 HW（high watermark，最后 commit 的 offset） 并向 producer 发送 ACK</p></blockquote><hr><h3 id="broker保存消息"><a href="#broker保存消息" class="headerlink" title="broker保存消息"></a>broker保存消息</h3><h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>物理上把 topic 分成一个或多个 patition（对应 server.properties 中的 num.partitions=3 配置），每个 patition 物理上对应一个文件夹（该文件夹存储该 patition 的所有消息和索引文件），如下：</p><p><img src="/images/kafka12.png" srcset="/img/loading.gif" alt="kafka"></p><h4 id="存储策略"><a href="#存储策略" class="headerlink" title="存储策略"></a>存储策略</h4><p>无论消息是否被消费，kafka 都会保留所有消息。有两种策略可以删除旧数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、 基于时间：log.retention.hours=168 </span><br><span class="line">2、 基于大小：log.retention.bytes=1073741824</span><br></pre></td></tr></table></figure><hr><h3 id="Topic的创建和删除"><a href="#Topic的创建和删除" class="headerlink" title="Topic的创建和删除"></a>Topic的创建和删除</h3><h4 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h4><p>创建 topic 的序列图如下所示：<br><img src="/images/kafka13.png" srcset="/img/loading.gif" alt="kafka"></p><p>流程说明：</p><blockquote><p>1、 controller 在 ZooKeeper 的 /brokers/topics 节点上注册 watcher，当 topic 被创建，则 controller 会通过 watch 得到该 topic 的 partition/replica 分配。<br>2、 controller从 /brokers/ids 读取当前所有可用的 broker 列表，对于 set_p 中的每一个 partition：<br>     2.1、 从分配给该 partition 的所有 replica（称为AR）中任选一个可用的 broker 作为新的 leader，并将AR设置为新的 ISR<br>     2.2、 将新的 leader 和 ISR 写入 /brokers/topics/[topic]/partitions/[partition]/state<br>3、 controller 通过 RPC 向相关的 broker 发送 LeaderAndISRRequest。</p></blockquote><h4 id="删除topic"><a href="#删除topic" class="headerlink" title="删除topic"></a>删除topic</h4><p>删除 topic 的序列图如下所示：<br><img src="/images/kafka14.png" srcset="/img/loading.gif" alt="kafka"></p><p>流程说明：</p><blockquote><p>1、 controller 在 zooKeeper 的 /brokers/topics 节点上注册 watcher，当 topic 被删除，则 controller 会通过 watch 得到该 topic 的 partition/replica 分配。<br>2、 若 delete.topic.enable=false，结束；否则 controller 注册在 /admin/delete_topics 上的 watch 被 fire，controller 通过回调向对应的 broker 发送 StopReplicaRequest。</p></blockquote><h3 id="broker-failover"><a href="#broker-failover" class="headerlink" title="broker failover"></a>broker failover</h3><p>kafka broker failover 序列图如下所示：<br><img src="/images/kafka15.png" srcset="/img/loading.gif" alt="kafka"></p><p>流程说明：</p><blockquote><p>1、 controller 在 zookeeper 的 /brokers/ids/[brokerId] 节点注册 Watcher，当 broker 宕机时 zookeeper 会 fire watch<br>2、 controller 从 /brokers/ids 节点读取可用broker<br>3、 controller决定set_p，该集合包含宕机 broker 上的所有 partition<br>4、 对 set_p 中的每一个 partition<br>    4.1、 从/brokers/topics/[topic]/partitions/[partition]/state 节点读取 ISR<br>    4.2、 决定新 leader<br>    4.3、 将新 leader、ISR、controller_epoch 和 leader_epoch 等信息写入 state 节点<br>5、 通过 RPC 向相关 broker 发送 leaderAndISRRequest 命令</p></blockquote><h3 id="controller-failover"><a href="#controller-failover" class="headerlink" title="controller failover"></a>controller failover</h3><p>当 controller 宕机时会触发 controller failover。每个 broker 都会在 zookeeper 的 “/controller” 节点注册 watcher，当 controller 宕机时 zookeeper 中的临时节点消失，所有存活的 broker 收到 fire 的通知，每个 broker 都尝试创建新的 controller path，只有一个竞选成功并当选为 controller。</p><p>当新的 controller 当选时，会触发 KafkaController.onControllerFailover 方法，在该方法中完成如下操作：</p><blockquote><p>1、 读取并增加 Controller Epoch。<br>2、 在 reassignedPartitions Patch(/admin/reassign_partitions) 上注册 watcher。<br>3、 在 preferredReplicaElection Path(/admin/preferred_replica_election) 上注册 watcher。<br>4、 通过 partitionStateMachine 在 broker Topics Patch(/brokers/topics) 上注册 watcher。<br>5、 若 delete.topic.enable=true（默认值是 false），则 partitionStateMachine 在 Delete Topic Patch(/admin/delete_topics) 上注册 watcher。<br>6、 通过 replicaStateMachine在 Broker Ids Patch(/brokers/ids)上注册Watch。<br>7、 初始化 ControllerContext 对象，设置当前所有 topic，“活”着的 broker 列表，所有 partition 的 leader 及 ISR等。<br>8、 启动 replicaStateMachine 和 partitionStateMachine。<br>9、 将 brokerState 状态设置为 RunningAsController。<br>10、 将每个 partition 的 Leadership 信息发送给所有“活”着的 broker。<br>11、 若 auto.leader.rebalance.enable=true（默认值是true），则启动 partition-rebalance 线程。<br>12、 若 delete.topic.enable=true 且Delete Topic Patch(/admin/delete_topics)中有值，则删除相应的Topic。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka - 消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式消息中间件Kafka——Kafka的架构</title>
    <link href="/2019/01/06/kafka-2/"/>
    <url>/2019/01/06/kafka-2/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/kafka-logo.png" srcset="/img/loading.gif" alt="kafka"></p><h3 id="Kafka的架构"><a href="#Kafka的架构" class="headerlink" title="Kafka的架构"></a>Kafka的架构</h3><p><img src="/images/kafka6.png" srcset="/img/loading.gif" alt="kafka"></p><p>如上图所示，一个典型的Kafka集群中包含若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。</p><h3 id="Topics和Partition"><a href="#Topics和Partition" class="headerlink" title="Topics和Partition"></a>Topics和Partition</h3><p>Topic在逻辑上可以被认为是一个queue，每条消费都必须指定它的Topic，可以简单理解为必须指明把这条消息放进哪个queue里。为了使得Kafka的吞吐率可以线性提高，物理上把Topic分成一个或多个Partition，每个Partition在物理上对应一个文件夹，该文件夹下存储这个Partition的所有消息和索引文件。创建一个topic时，同时可以指定分区数目，分区数越多，其吞吐量也越大，但是需要的资源也越多，同时也会导致更高的不可用性，kafka在接收到生产者发送的消息之后，会根据均衡策略将消息存储到不同的分区中。因为每条消息都被append到该Partition中，属于顺序写磁盘，因此效率非常高（经验证，顺序写磁盘效率比随机写内存还要高，这是Kafka高吞吐率的一个很重要的保证）。</p><p><img src="/images/kafka7.png" srcset="/img/loading.gif" alt="kafka"></p><p>对于传统的message queue而言，一般会删除已经被消费的消息，而Kafka集群会保留所有的消息，无论其被消费与否。当然，因为磁盘限制，不可能永久保留所有数据（实际上也没必要），因此Kafka提供两种策略删除旧数据。一是基于时间，二是基于Partition文件大小。例如可以通过配置$KAFKA_HOME/config/server.properties，让Kafka删除一周前的数据，也可在Partition文件超过1GB时删除旧数据，配置如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The minimum age of a log file to be eligible for deletion</span></span><br><span class="line">log.retention.hours=168</span><br><span class="line"><span class="comment"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</span></span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"><span class="comment"># The interval at which log segments are checked to see if they can be deleted according to the retention policies</span></span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"><span class="comment"># If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.</span></span><br><span class="line">log.cleaner.enable=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>因为Kafka读取特定消息的时间复杂度为O(1)，即与文件大小无关，所以这里删除过期文件与提高Kafka性能无关。选择怎样的删除策略只与磁盘以及具体的需求有关。另外，Kafka会为每一个Consumer Group保留一些metadata信息——当前消费的消息的position，也即offset。这个offset由Consumer控制。正常情况下Consumer会在消费完一条消息后递增该offset。当然，Consumer也可将offset设成一个较小的值，重新消费一些消息。因为offet由Consumer控制，所以Kafka broker是无状态的，它不需要标记哪些消息被哪些消费过，也不需要通过broker去保证同一个Consumer Group只有一个Consumer能消费某一条消息，因此也就不需要锁机制，这也为Kafka的高吞吐率提供了有力保障。</p><h3 id="Producer消息路由"><a href="#Producer消息路由" class="headerlink" title="Producer消息路由"></a>Producer消息路由</h3><p>Producer发送消息到broker时，会根据Paritition机制选择将其存储到哪一个Partition。如果Partition机制设置合理，所有消息可以均匀分布到不同的Partition里，这样就实现了负载均衡。如果一个Topic对应一个文件，那这个文件所在的机器I/O将会成为这个Topic的性能瓶颈，而有了Partition后，不同的消息可以并行写入不同broker的不同Partition里，极大的提高了吞吐率。可以在$KAFKA_HOME/config/server.properties中通过配置项num.partitions来指定新建Topic的默认Partition数量，也可在创建Topic时通过参数指定，同时也可以在Topic创建之后通过Kafka提供的工具修改。</p><p>在发送一条消息时，可以指定这条消息的key，Producer根据这个key和Partition机制来判断应该将这条消息发送到哪个Parition。Paritition机制可以通过指定Producer的paritition. class这一参数来指定，该class必须实现kafka.producer.Partitioner接口。</p><h3 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h3><p>使用Consumer high level API时，同一Topic的一条消息只能被同一个Consumer Group内的一个Consumer消费，但多个Consumer Group可同时消费这一消息。</p><p><img src="/images/kafka8.png" srcset="/img/loading.gif" alt="kafka"></p><p>这是Kafka用来实现一个Topic消息的广播（发给所有的Consumer）和单播（发给某一个Consumer）的手段。一个Topic可以对应多个Consumer Group。如果需要实现广播，只要每个Consumer有一个独立的Group就可以了。要实现单播只要所有的Consumer在同一个Group里。用Consumer Group还可以将Consumer进行自由的分组而不需要多次发送消息到不同的Topic。</p><p>实际上，Kafka的设计理念之一就是同时提供离线处理和实时处理。根据这一特性，可以使用Storm这种实时流处理系统对消息进行实时在线处理，同时使用Hadoop这种批处理系统进行离线处理，还可以同时将数据实时备份到另一个数据中心，只需要保证这三个操作所使用的Consumer属于不同的Consumer Group即可。</p><h3 id="Push-vs-Pull"><a href="#Push-vs-Pull" class="headerlink" title="Push vs Pull"></a>Push vs Pull</h3><p>作为一个消息系统，Kafka遵循了传统的方式，选择由Producer向broker push消息并由Consumer从broker pull消息。一些logging-centric system，比如Facebook的Scribe和Cloudera的Flume，采用push模式。事实上，push模式和pull模式各有优劣。</p><p>push模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。push模式的目标是尽可能以最快速度传递消息，但是这样很容易造成Consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据Consumer的消费能力以适当的速率消费消息。</p><p>对于Kafka而言，pull模式更合适。pull模式可简化broker的设计，Consumer可自主控制消费消息的速率，同时Consumer可以自己控制消费方式——即可批量消费也可逐条消费，同时还能选择不同的提交方式从而实现不同的传输语义。</p><h3 id="Kafka-delivery-guarantee"><a href="#Kafka-delivery-guarantee" class="headerlink" title="Kafka delivery guarantee"></a>Kafka delivery guarantee</h3><p>有这么几种可能的delivery guarantee：</p><blockquote><p>At most once 　　消息可能会丢，但绝不会重复传输<br>At least one 　　消息绝不会丢，但可能会重复传输<br>Exactly once 　　每条消息肯定会被传输一次且仅传输一次，很多时候这是用户所想要的。</p></blockquote><p>当Producer向broker发送消息时，一旦这条消息被commit，因数replication的存在，它就不会丢。但是如果Producer发送数据给broker后，遇到网络问题而造成通信中断，那Producer就无法判断该条消息是否已经commit。虽然Kafka无法确定网络故障期间发生了什么，但是Producer可以生成一种类似于主键的东西，发生故障时幂等性的重试多次，这样就做到了Exactly once。</p><p>接下来讨论的是消息从broker到Consumer的delivery guarantee语义。（仅针对Kafka consumer high level API）。Consumer在从broker读取消息后，可以选择commit，该操作会在Zookeeper中保存该Consumer在该Partition中读取的消息的offset。该Consumer下一次再读该Partition时会从下一条开始读取。如未commit，下一次读取的开始位置会跟上一次commit之后的开始位置相同。当然可以将Consumer设置为autocommit，即Consumer一旦读到数据立即自动commit。如果只讨论这一读取消息的过程，那Kafka是确保了Exactly once。但实际使用中应用程序并非在Consumer读取完数据就结束了，而是要进行进一步处理，而数据处理与commit的顺序在很大程度上决定了消息从broker和consumer的delivery guarantee semantic。</p><p><font style="color: red">Kafka默认保证At least once</font>，并且允许通过设置Producer异步提交来实现At most once。而Exactly once要求与外部存储系统协作，幸运的是Kafka提供的offset可以非常直接非常容易得使用这种方式。</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka - 消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式消息中间件Kafka——Kafka的简介</title>
    <link href="/2018/12/29/kafka-1/"/>
    <url>/2018/12/29/kafka-1/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/kafka-logo.png" srcset="/img/loading.gif" alt="kafka"></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p><p>主要应用场景是：日志收集系统和消息系统。</p><p>Kafka主要设计目标如下：</p><ul><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能。</li><li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输。</li><li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输。</li><li>同时支持离线数据处理和实时数据处理。</li><li>Scale out:支持在线水平扩展。</li></ul><h4 id="消息系统介绍"><a href="#消息系统介绍" class="headerlink" title="消息系统介绍"></a>消息系统介绍</h4><p>一个消息系统负责将数据从一个应用传递到另外一个应用，应用只需关注于数据，无需关注数据在两个或多个应用间是如何传递的。分布式消息传递基于可靠的消息队列，在客户端应用和消息系统之间异步传递消息。有两种主要的消息传递模式：<font style="color: red">点对点传递模式、发布-订阅模式</font>。大部分的消息系统选用发布-订阅模式。<font style="color: red">Kafka就是一种发布-订阅模式。</font></p><h4 id="点对点消息传递模式"><a href="#点对点消息传递模式" class="headerlink" title="点对点消息传递模式"></a>点对点消息传递模式</h4><p>在点对点消息系统中，消息持久化到一个队列中。此时，将有一个或多个消费者消费队列中的数据。但是一条消息只能被消费一次。当一个消费者消费了队列中的某条数据之后，该条数据则从消息队列中删除。该模式即使有多个消费者同时消费数据，也能保证数据处理的顺序。这种架构描述示意图如下：</p><p><img src="/images/kafka3.png" srcset="/img/loading.gif" alt="kafka"><br><font style="color: red">生产者发送一条消息到queue，只有一个消费者能收到。</font></p><h4 id="发布-订阅消息传递模式"><a href="#发布-订阅消息传递模式" class="headerlink" title="发布-订阅消息传递模式"></a>发布-订阅消息传递模式</h4><p>在发布-订阅消息系统中，消息被持久化到一个topic中。与点对点消息系统不同的是，消费者可以订阅一个或多个topic，消费者可以消费该topic中所有的数据，同一条数据可以被多个消费者消费，数据被消费后不会立马删除。在发布-订阅消息系统中，消息的生产者称为发布者，消费者称为订阅者。该模式的示例图如下：</p><p><img src="/images/kafka4.png" srcset="/img/loading.gif" alt="kafka"><br><font style="color: red">发布者发送到topic的消息，只有订阅了topic的订阅者才会收到消息。</font></p><hr><h3 id="Kafka的优点"><a href="#Kafka的优点" class="headerlink" title="Kafka的优点"></a>Kafka的优点</h3><h4 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h4><p>在项目启动之初来预测将来项目会碰到什么需求，是极其困难的。消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><h4 id="冗余-副本"><a href="#冗余-副本" class="headerlink" title="冗余(副本)"></a>冗余(副本)</h4><p>有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。</p><h4 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h4><p>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。扩展就像调大电力按钮一样简单。</p><h4 id="灵活性-amp-峰值处理能力"><a href="#灵活性-amp-峰值处理能力" class="headerlink" title="灵活性&amp;峰值处理能力"></a>灵活性&amp;峰值处理能力</h4><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p><h4 id="可恢复性"><a href="#可恢复性" class="headerlink" title="可恢复性"></a>可恢复性</h4><p>系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</p><h4 id="顺序保证"><a href="#顺序保证" class="headerlink" title="顺序保证"></a>顺序保证</h4><p>在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。Kafka保证一个Partition内的消息的有序性。</p><h4 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h4><p>在任何重要的系统中，都会有需要不同的处理时间的元素。例如，加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行———写入队列的处理会尽可能的快速。该缓冲有助于控制和优化数据流经过系统的速度。</p><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><p>很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p><h3 id="常用Message-Queue对比"><a href="#常用Message-Queue对比" class="headerlink" title="常用Message Queue对比"></a>常用Message Queue对比</h3><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p><h4 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h4><p>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZeroMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演这个服务器角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</p><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p><h4 id="Kafka-Jafka"><a href="#Kafka-Jafka" class="headerlink" title="Kafka/Jafka"></a>Kafka/Jafka</h4><p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。</p><h3 id="Kafka中的术语解释"><a href="#Kafka中的术语解释" class="headerlink" title="Kafka中的术语解释"></a>Kafka中的术语解释</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>在深入理解Kafka之前，先介绍一下Kafka中的术语。下图展示了Kafka的相关术语以及之间的关系：<br><img src="/images/kafka5.png" srcset="/img/loading.gif" alt="kafka"></p><p>上图中一个topic配置了3个partition。Partition1有两个offset：0和1。Partition2有4个offset。Partition3有1个offset。副本的id和副本所在的机器的id恰好相同。</p><p>如果一个topic的副本数为3，那么Kafka将在集群中为每个partition创建3个相同的副本。集群中的每个broker存储一个或多个partition。多个producer和consumer可同时生产和消费数据。</p><h4 id="broker"><a href="#broker" class="headerlink" title="broker"></a>broker</h4><p>Kafka 集群包含一个或多个服务器，服务器节点称为broker。</p><p>broker存储topic的数据。如果某topic有N个partition，集群有N个broker，那么每个broker存储该topic的一个partition。</p><p>如果某topic有N个partition，集群有(N+M)个broker，那么其中有N个broker存储该topic的一个partition，剩下的M个broker不存储该topic的partition数据。</p><p>如果某topic有N个partition，集群中broker数目少于N个，那么一个broker存储该topic的一个或多个partition。在实际生产环境中，尽量避免这种情况的发生，这种情况容易导致Kafka集群数据不均衡。</p><h4 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h4><p>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p><p>类似于数据库的表名</p><h4 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h4><p>topic中的数据分割为一个或多个partition。每个topic至少有一个partition。每个partition中的数据使用多个segment文件存储。partition中的数据是有序的，不同partition间的数据丢失了数据的顺序。如果topic有多个partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将partition数目设为1。</p><h4 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h4><p>生产者即数据的发布者，该角色将消息发布到Kafka的topic中。broker接收到生产者发送的消息后，broker将该消息<font style="color: red">追加</font>到当前用于追加数据的segment文件中。生产者发送的消息，存储到一个partition中，生产者也可以指定数据存储的partition。</p><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>消费者可以从broker中读取数据。消费者可以消费多个topic中的数据。</p><h4 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h4><p>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p><h4 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h4><p>每个partition有多个副本，其中有且仅有一个作为Leader，Leader是当前负责数据的读写的partition。</p><h4 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h4><p>Follower跟随Leader，所有写请求都通过Leader路由，数据变更会广播给所有Follower，Follower与Leader保持数据同步。如果Leader失效，则从Follower中选举出一个新的Leader。当Follower与Leader挂掉、卡住或者同步太慢，leader会把这个follower从“in sync replicas”（ISR）列表中删除，重新创建一个Follower。</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka - 消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息中间件ActiveMQ入门学习</title>
    <link href="/2018/12/22/ActiveMQ/"/>
    <url>/2018/12/22/ActiveMQ/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是消息中间件"><a href="#什么是消息中间件" class="headerlink" title="什么是消息中间件"></a>什么是消息中间件</h3><p><strong>什么是消息中间件？</strong><br>消息中间件利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。对于消息中间件，常见的角色有：Producer(生产者)、Consumer(消费者)。<br>常见的消息中间件产品有：</p><ul><li>ActiveMQ: Apache的一款完全支持JMS1.1和J2EE1.4规范的JMS Provider实现。</li><li>RabbitMQ: AMQP协议的领导实现，支持多种场景。</li><li>ZeroMQ: 号称史上最快的消息队列系统。</li><li>Kafka: Apache下的一个子项目，具有高吞吐的特点。</li></ul><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>本例中将ArtiveMQ部署在虚拟机Centos服务器上。</p><p><strong>搭建</strong></p><p>首先去下载ActiveMQ: <a href="http://activemq.apache.org" target="_blank" rel="noopener">官网地址</a></p><blockquote><ol><li>打开虚拟机上的CentOS服务器，打开SecureCRT连接上服务器。</li></ol></blockquote><blockquote><ol start="2"><li>输入命令：rz将本地下载的apache-activemq-bin.tar.gz文件上传到linux服务器上</li></ol></blockquote><p>输入以下命令解压文件并赋予权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--解压</span><br><span class="line">tar zxvf apache-activemq-5.15.6-bin.tar.gz</span><br><span class="line">--赋予可读可写可执行的权限</span><br><span class="line">chmod 777 apache-activemq-5.15.6</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> apache-activemq-5.15.6/bin</span><br><span class="line">--赋予权限</span><br><span class="line">chmod 755 activemq</span><br><span class="line"></span><br><span class="line">--启动activemq</span><br><span class="line">./activemq start</span><br></pre></td></tr></table></figure><p><strong>拓展</strong></p><p>chmod是Linux下设置文件权限的命令，后面的数字代表了不同用户组的权限，一般时三个数字：</p><ul><li>第一个数字表示文件所有者的权限</li><li>第二个数字表示与文件所有者同属于一个用户组的其他用户的权限</li><li>第三个数字表示其他用户组的权限<br>权限分为三种：读(r=4)、写(r=2)、执行(r=1)。综合起来：可读可执行(rx=5=4+1)、可读可写(rw=6=4+2)、可读可写可执行(rwx=7=4+2+1)。<br><img src="/images/active1.png" srcset="/img/loading.gif" alt="ActiveMQ"><br>在浏览器上访问ip:8161地址<br><img src="/images/active2.png" srcset="/img/loading.gif" alt="ActiveMQ"><br>8161端口是ActiveMQ默认的端口，点击Manage ActiveMQ broker，需要输入用户名密码：默认都是admin<br><img src="/images/active3.png" srcset="/img/loading.gif" alt="ActiveMQ"></li></ul><hr><h3 id="JMS入门"><a href="#JMS入门" class="headerlink" title="JMS入门"></a>JMS入门</h3><p>上面我们在服务器上部署了ActiveMQ，对应实际应用中肯定需要一个入口方式操作ActiveMQ，所以我们要学习：JMS（Java Messaging Service）。</p><p>JMS是Java平台上有关面向中间件的技术规范，它便于消息系统中的Java应用程序进行消息交换，并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。</p><p>JMS本身定义了一系列的接口规范，可以用其访问ActiveMQ发送消息服务。JMS定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接受一些不同形式的数据，提供现有消息格式的一些级别的兼容性：</p><ul><li>TextMessage – 一个字符串对象</li><li>MapMessage – 一套名称-值对</li><li>ObjectMessage – 一个序列化的Java对象</li><li>BytesMessage – 一个字节的数据流</li><li>StreamMessage – Java原始值的数据流</li></ul><h4 id="JMS消息传递类型"><a href="#JMS消息传递类型" class="headerlink" title="JMS消息传递类型"></a>JMS消息传递类型</h4><p>JMS有两种消息传递类型，适用于不同的情况，分别是：</p><ul><li>Producer–&gt;Consumer点对点模式：一个生产者对应一个消费者。</li><li>Producer–&gt;Consumer/Consumer发布订阅模式：一个生产者可对应多个消费者。</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>先在工程中导入activemq依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;activemq-client&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;5.13.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h5><p>点对点模式主要建立在一个队列上面，当连接一个队列的时候，发送端不需要知道接收端是否正在接收，可以直接向ActiveMQ发送消息，发送的消息将会先进入队列中，如果有接收端监听，则会发向接受端；如果没有接收端接收，则会保存在activeMQ服务器，直到接收端接收消息。点对点消息模式可以有多个发送端，多个接收端，但是一条消息，只会被一个接收端给接收到，那个接收端先连接上ActiveMQ，则会先接收到，而后来的接收端接收不到那条消息。</p><p>先在工程中导入activemq依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;activemq-client&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.13.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ol><li>创建QueueProducer.java 生产者类</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class QueueProducer &#123;</span><br><span class="line">    public static void main(String[] args) throws JMSException &#123;</span><br><span class="line">        //1、创建连接工厂</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(<span class="string">"tcp://192.168.148.128:61616"</span>);</span><br><span class="line"></span><br><span class="line">        //2、获取连接</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3、启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4、获取session（参数1：是否启动事务；参数2：消息确认模式）</span><br><span class="line">        //      AUTO_ACKNOWLEDGE = 1  自动确认</span><br><span class="line">        //      CLIENT_ACKNOWLEDGE = 2  客户端手动确认</span><br><span class="line">        //      DUPS_OK_ACKNOWLEDGE = 3  自动批量确认</span><br><span class="line">        //      SESSION_TRANSACTED = 0  事务提交并确认</span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5、创建消息队列对象</span><br><span class="line">        Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"></span><br><span class="line">        //6、创建消息生产者</span><br><span class="line">        MessageProducer producer = session.createProducer(queue);</span><br><span class="line"></span><br><span class="line">        //7、创建消息</span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">"ActiveMQ入门"</span>);</span><br><span class="line"></span><br><span class="line">        //8、发送消息</span><br><span class="line">        producer.send(textMessage);</span><br><span class="line"></span><br><span class="line">        //9、关闭资源</span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，步骤一中的连接地址根据自己的ActiveMQ服务器地址决定，但是<strong>61616是ActiveMQ默认端口</strong>，无需改变。这里我们创建了一个消息队列对象text-queue，并用TextMessage格式发送了一条消息：ActiveMQ入门。 如果我们理解运行着这个生产者类，在ActiveMQ控制台中会看到：<br><img src="/images/active4.png" srcset="/img/loading.gif" alt="ActiveMQ"></p><p>那么消费端是如何接受到这个消息的呢？</p><blockquote><ol start="2"><li>创建QueueConsumer.java 消费者类</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class QueueConsumer &#123;</span><br><span class="line">    public static void main(String[] args) throws JMSException, IOException &#123;</span><br><span class="line">        //1、创建连接工厂</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(<span class="string">"tcp://192.168.148.128:61616"</span>);</span><br><span class="line"></span><br><span class="line">        //2、获取连接</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3、启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4、获取session（参数1：是否启动事务；参数2：消息确认模式）</span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5、创建队列对象</span><br><span class="line">        Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"></span><br><span class="line">        //6、创建消息消费</span><br><span class="line">        MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"></span><br><span class="line">        //7、监听消息</span><br><span class="line">        consumer.setMessageListener(new <span class="function"><span class="title">MessageListener</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onMessage(Message message) &#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                try &#123;</span><br><span class="line">                    System.out.println(<span class="string">"接收到消息："</span> + textMessage.getText());</span><br><span class="line">                &#125; catch (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //8、等待键盘输入</span><br><span class="line">        System.in.read();</span><br><span class="line">        //9、关闭资源</span><br><span class="line">        consumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上一共9个步骤，步骤一中创建连接地址要结合自己的ActiveMQ服务器地址。前6个步骤都是和生产者创建步骤相同的，只有第7个步骤是独特的，因为消费端要实现监听生产端的消息，如果生产端有消息就会打印出来。<br>运行QueueConsumer即可得到刚才发送的消息：Active入门。<br>如果我们再次运行QueueConsumer消费端，则不会再得到消息，因为点对点模式只能有一个消费端接收消息，第二个消费端是接收不到消息的。</p><h5 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h5><blockquote><ol><li>创建生产者TopicProducer.java</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class TopicProducer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws JMSException &#123;</span><br><span class="line"></span><br><span class="line">        //1、创建连接工厂</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(<span class="string">"tcp://192.168.148.128:61616"</span>);</span><br><span class="line"></span><br><span class="line">        //2、获取连接</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3、启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4、获取session（参数1：是否启动事务；参数2：消息确认模式）</span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5、创建主题对象</span><br><span class="line">        Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line"></span><br><span class="line">        //6、创建消息生产者</span><br><span class="line">        MessageProducer producer = session.createProducer(topic);</span><br><span class="line"></span><br><span class="line">        //7、创建消息</span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">"ActiveMQ---&gt;发布订阅模式消息..."</span>);</span><br><span class="line"></span><br><span class="line">        //8、发送消息</span><br><span class="line">        producer.send(textMessage);</span><br><span class="line"></span><br><span class="line">        //9、关闭资源</span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与点对点模式不同之处在与，发布/订阅模式创建的是Topic主题对象，而点对点模式创建的是Queue队列对象</p><blockquote><ol start="2"><li>创建TopicConsumer.java 消费端</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class TopicConsumer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws JMSException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        //1、创建连接工厂</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(<span class="string">"tcp://192.168.148.128:61616"</span>);</span><br><span class="line"></span><br><span class="line">        //2、获取连接</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3、启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4、获取session（参数1：是否启动事务；参数2：消息确认模式）</span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5、创建主题对象</span><br><span class="line">        Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line"></span><br><span class="line">        //6、创建消息消费者</span><br><span class="line">        MessageConsumer consumer = session.createConsumer(topic);</span><br><span class="line"></span><br><span class="line">        //7、监听消息</span><br><span class="line">        consumer.setMessageListener(new <span class="function"><span class="title">MessageListener</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onMessage(Message message) &#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                try &#123;</span><br><span class="line">                    System.out.println(<span class="string">"接收到的消息："</span> + textMessage.getText());</span><br><span class="line">                &#125; catch (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //8、等待键盘输入</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">        //9、关闭资源</span><br><span class="line">        consumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行生产端和消费端，发现消费端并不显示消息；然后先运行消费端再运行生产端就打印出了消息：ActiveMQ—&gt;发布订阅模式消息。<br>原因就是发布/订阅模式和点对点模式是不同的，发布订阅模式可以允许多个接收端接收同一个生产端发布的消息；你可以理解为只有订阅了消息，才能发布消息。</p><h3 id="Spring整合JMS"><a href="#Spring整合JMS" class="headerlink" title="Spring整合JMS"></a>Spring整合JMS</h3><p>首先要在工程中导入spring-jms依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activemq-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.13.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="点对点模式-1"><a href="#点对点模式-1" class="headerlink" title="点对点模式"></a>点对点模式</h4><h5 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h5><p>这里生产端和服务端是两个不同的项目。</p><blockquote><ol><li>生产端jms-producer.xml</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=<span class="string">"cn.demo"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的JMS服务厂商提供 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"targetConnectionFactory"</span> class=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"brokerURL"</span> value=<span class="string">"tcp://192.168.148.128:61616"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"connectionFactory"</span> class=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span><br><span class="line">        &lt;!-- 目标ConnectionFactory对应真实可以产生JMS Connection的ConnectionFactory --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"targetConnectionFactory"</span> ref=<span class="string">"targetConnectionFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"jmsTemplate"</span> class=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span><br><span class="line">        &lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"connectionFactory"</span> ref=<span class="string">"connectionFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 这个是队列的目的地，点对点 文本信息 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"queueTextDestination"</span> class=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"queue_text"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>以上了配置和之前的直接在Java代码上的配置类似，多了一个jmsTemplate模板工具类的配置，如同Spring-Data-Solr中有一个solrTemplate工具类、Spring-Data-Redis有一个redisTemplate工具类。jmsTemplate模板工具类提供了很多API供开发者操作JMS。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>创建QueueProducer.java</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class QueueProducer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Destination queueTextDestination;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送文本消息</span><br><span class="line">     * @param text</span><br><span class="line">     */</span><br><span class="line">    public void sendTextMessage(final String text)&#123;</span><br><span class="line">        jmsTemplate.send(queueTextDestination, new <span class="function"><span class="title">MessageCreator</span></span>() &#123;</span><br><span class="line">            public Message createMessage(Session session) throws JMSException &#123;</span><br><span class="line">                <span class="built_in">return</span> session.createTextMessage(text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了要注入JmsTemplate模板类对象，还要注入Destination对象，之前我们是通过new Queue()来创建队列对象的，而spring整合jms后是在配置文件中配置的队列对象，</p><blockquote><ol start="2"><li>消费端</li></ol></blockquote><p>创建jms-consumer-queue.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的JMS服务厂商提供 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"targetConnectionFactory"</span> class=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"brokerURL"</span> value=<span class="string">"tcp://192.168.148.128:61616"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring用于真正的ConnectionFactory的ConnectionFactory --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"connectionFactory"</span> class=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span><br><span class="line">        &lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"targetConnectionFactory"</span> ref=<span class="string">"targetConnectionFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 这个是队列的目的地，点对点  文本信息 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"queueTextDestination"</span> class=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"queue_text"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 我的监听类 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"myMessageListener"</span> class=<span class="string">"cn.demo.MyMessageListener"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 消息监听容器 --&gt;</span><br><span class="line">    &lt;bean class=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"connectionFactory"</span> ref=<span class="string">"connectionFactory"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"destination"</span> ref=<span class="string">"queueTextDestination"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"messageListener"</span> ref=<span class="string">"myMessageListener"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>这里注入了自定义的消费端监听类MyMessageListener.java:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MyMessageListener implements MessageListener &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(Message message) &#123;</span><br><span class="line">        TextMessage textMessage = (TextMessage) message;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(<span class="string">"接收到的消息："</span> + textMessage.getText());</span><br><span class="line">        &#125; catch (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>在消费端工程中创建测试方法，启动监听</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations = <span class="string">"classpath:applicationContext-jms-consumer-queue.xml"</span>)</span><br><span class="line">public class TestQueueC &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void <span class="function"><span class="title">testQueue</span></span>()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>在生产端工程中创建测试方法，发送消息：</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations = <span class="string">"classpath:spring/applicationContext-jms-producer.xml"</span>)</span><br><span class="line">public class TestQueueP &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private QueueProducer queueProducer;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void <span class="function"><span class="title">testSend</span></span>() &#123;</span><br><span class="line">        queueProducer.sendTextMessage(<span class="string">"SpringJms-点对点"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动生产端，发送消息，在消费端立即点听到消息并打印出来。和之前JMS的案例是相同的。</p><h4 id="发布-订阅模式-1"><a href="#发布-订阅模式-1" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h4><blockquote><ol><li>在上面的jms-producer.xml中添加配置：</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这个是订阅模式  文本信息 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"topicTextDestination"</span> class=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span><br><span class="line">    &lt;constructor-arg value=<span class="string">"topic_text"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>创建TopicProducer.java</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TopicProducer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Destination topicTextDestination;</span><br><span class="line"></span><br><span class="line">    public void sendTextMessage(final String text)&#123;</span><br><span class="line">        jmsTemplate.send(topicTextDestination, new <span class="function"><span class="title">MessageCreator</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Message createMessage(Session session) throws JMSException &#123;</span><br><span class="line">                <span class="built_in">return</span> session.createTextMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>在上面消费端工程中创建jms-topic.xml</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 真正可以产生Connection的ConnectionFactory, 由对应的JMS服务厂商提供 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"targetConnectionFactory"</span> class=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"brokerURL"</span> value=<span class="string">"tcp://192.168.148.128:61616"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring用户管理真正的ConnectionFactory的ConnectionFactory --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"connectionFactory"</span> class=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span><br><span class="line">        &lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"targetConnectionFactory"</span> ref=<span class="string">"targetConnectionFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 这个是队列的目的地，点对点的文本信息 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"topicTextDestination"</span> class=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"topic_text"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 我的监听类 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"myMessageListener"</span> class=<span class="string">"cn.demo.MyMessageListener"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 消息监听容器 --&gt;</span><br><span class="line">    &lt;bean class=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"connectionFactory"</span> ref=<span class="string">"connectionFactory"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"destination"</span> ref=<span class="string">"topicTextDestination"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"messageListener"</span> ref=<span class="string">"myMessageListener"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>监听类还是之前的MyMessageListener.java。</p><blockquote><ol start="4"><li>在生产端创建测试类</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations = <span class="string">"classpath:spring/applicationContext-jms-producer.xml"</span>)</span><br><span class="line">public class TestTopicP &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TopicProducer topicProducer;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void <span class="function"><span class="title">sendTextQueue</span></span>()&#123;</span><br><span class="line">        topicProducer.sendTextMessage(<span class="string">"Spring JMS 发布订阅信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动消费端监听，并运行生产端发布消息，在消费端立即监听到消息并打印出来数据。</p><p>到此为止我们完成了基本的ActiveMQ入门学习。</p><p>思考：在上面我们使用ActiveMQ案例中明显就感觉到消息中间件的一大优势就是采用了一种与平台无关的数据交流方式，在分布式项目中用处很广，比如基本的增、删、改、查数据都可以通过ActiveMQ进行信息传递，ActiveMQ支持多种数据类型的传递。</p><p>这样我们就解决了分布式模板间的耦合关系，模块间的消息传递不再通过调用（高耦合）方式传递消息，而是通过ActiveMQ（低耦合）异步的发送消息。</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ActiveMQ - 消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2018/12/14/linux-1/"/>
    <url>/2018/12/14/linux-1/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/linux-logo.jpg" srcset="/img/loading.gif" alt="linux"></p><hr><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ shutdown -h now        立刻关机</span><br><span class="line">$ shutdown -h 5        5分钟后关机</span><br><span class="line">$ poweroff            立刻关机</span><br></pre></td></tr></table></figure><h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--<span class="built_in">help</span>命令</span><br><span class="line">$ shutdown --<span class="built_in">help</span>：</span><br><span class="line">$ ifconfig  --<span class="built_in">help</span>：查看网卡信息</span><br><span class="line"> </span><br><span class="line">--man命令（命令说明书） </span><br><span class="line">$ man shutdown</span><br><span class="line">--注意：man shutdown打开命令说明书之后，使用按键q退出</span><br></pre></td></tr></table></figure><hr><h3 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h3><h4 id="目录切换-cd"><a href="#目录切换-cd" class="headerlink" title="目录切换 cd"></a>目录切换 cd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--命令：<span class="built_in">cd</span> 目录</span><br><span class="line">$ <span class="built_in">cd</span> /        切换到根目录</span><br><span class="line">$ <span class="built_in">cd</span> /usr        切换到根目录下的usr目录</span><br><span class="line">$ <span class="built_in">cd</span> ../        切换到上一级目录 或者  <span class="built_in">cd</span> ..</span><br><span class="line">$ <span class="built_in">cd</span> ~        切换到home目录</span><br><span class="line">$ <span class="built_in">cd</span> -        切换到上次访问的目录</span><br></pre></td></tr></table></figure><h4 id="目录查看-ls-al"><a href="#目录查看-ls-al" class="headerlink" title="目录查看 ls [-al]"></a>目录查看 ls [-al]</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--命令：ls [-al]</span><br><span class="line">$ ls                查看当前目录下的所有目录和文件</span><br><span class="line">$ ls -a            查看当前目录下的所有目录和文件（包括隐藏的文件）</span><br><span class="line">$ ls -l 或 ll       列表查看当前目录下的所有目录和文件（列表查看，显示更多信息）</span><br><span class="line">$ ls /dir            查看指定目录下的所有目录和文件   如：ls /usr</span><br></pre></td></tr></table></figure><h4 id="目录操作-增删改查"><a href="#目录操作-增删改查" class="headerlink" title="目录操作 [增删改查]"></a>目录操作 [增删改查]</h4><h5 id="创建目录-增-mkdir"><a href="#创建目录-增-mkdir" class="headerlink" title="创建目录 [增] mkdir"></a>创建目录 [增] mkdir</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--命令：mkdir 目录</span><br><span class="line">$ mkdir xxx           在当前目录下创建一个名为xxx的目录</span><br><span class="line">$ mkdir /usr/xxx   在指定目录下创建一个名为xxx的目录</span><br></pre></td></tr></table></figure><h5 id="删除目录或文件-删-rm"><a href="#删除目录或文件-删-rm" class="headerlink" title="删除目录或文件 [删] rm"></a>删除目录或文件 [删] rm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--命令：rm [-rf] 目录</span><br><span class="line"></span><br><span class="line">删除文件：</span><br><span class="line">$ rm 文件        删除当前目录下的文件</span><br><span class="line">$ rm -f 文件    删除当前目录的的文件（不询问）</span><br><span class="line"></span><br><span class="line">删除目录：</span><br><span class="line">$ rm -r xxx  递归删除当前目录下的xxx目录</span><br><span class="line">$ rm -rf xxx  递归删除当前目录下的xxx目录（不询问）</span><br><span class="line"></span><br><span class="line">全部删除：</span><br><span class="line">$ rm -rf *    将当前目录下的所有目录和文件全部删除</span><br><span class="line">$ rm -rf /*    【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除</span><br><span class="line"></span><br><span class="line">注意：rm不仅可以删除目录，也可以删除其他文件或压缩包，为了方便大家的记忆，无论删除任何目录或文件，都直接使用 rm -rf 目录/文件/压缩包</span><br></pre></td></tr></table></figure><h5 id="目录修改-改-mv和cp"><a href="#目录修改-改-mv和cp" class="headerlink" title="目录修改 [改] mv和cp"></a>目录修改 [改] mv和cp</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一、重命名目录</span><br><span class="line">    命令：mv 当前目录  新目录</span><br><span class="line">    例如：mv xxx coder    将目录xxx改为coder</span><br><span class="line">    注意：mv的语法不仅可以对目录进行重命名而且也可以对各种文件，压缩包等进行重命名的操作</span><br><span class="line"></span><br><span class="line">二、剪切目录</span><br><span class="line">    命令：mv 目录名称 目录的新位置</span><br><span class="line">    示例：将/usr/tmp目录下的xxx目录剪切到 /usr目录下面     mv /usr/tmp/xxx /usr</span><br><span class="line">    注意：mv语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作</span><br><span class="line"></span><br><span class="line">三、拷贝目录</span><br><span class="line">    命令：cp -r 目录名称 目录拷贝的目标位置   -r代表递归</span><br><span class="line">    示例：将/usr/tmp目录下的xxx目录复制到 /usr目录下面     cp /usr/tmp/xxx  /usr</span><br><span class="line">    注意：cp命令不仅可以拷贝目录还可以拷贝文件，压缩包等，拷贝文件和压缩包时不用写-r递归</span><br></pre></td></tr></table></figure><h5 id="搜索目录-查-find"><a href="#搜索目录-查-find" class="headerlink" title="搜索目录 [查] find"></a>搜索目录 [查] find</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find 目录 参数 文件名称</span><br><span class="line">示例：find /usr/tmp -name <span class="string">'a*'</span>  查找/usr/tmp目录下的所有以a开头的目录或文件</span><br></pre></td></tr></table></figure><hr><h3 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h3><h4 id="文件操作-增删改查"><a href="#文件操作-增删改查" class="headerlink" title="文件操作 [增删改查]"></a>文件操作 [增删改查]</h4><h5 id="新建文件-增-touch"><a href="#新建文件-增-touch" class="headerlink" title="新建文件 [增] touch"></a>新建文件 [增] touch</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ touch 文件名</span><br><span class="line">示例：在当前目录创建一个名为aa.txt的文件 touch xxx.txt</span><br></pre></td></tr></table></figure><h5 id="删除文件-删-rm"><a href="#删除文件-删-rm" class="headerlink" title="删除文件 [删] rm"></a>删除文件 [删] rm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf 文件名</span><br></pre></td></tr></table></figure><h5 id="修改文件-改-vi-vim"><a href="#修改文件-改-vi-vim" class="headerlink" title="修改文件 [改] vi/vim"></a>修改文件 [改] vi/vim</h5><p><strong>[vi编辑器的3种模式]</strong><br>基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：</p><ul><li><p>命令行模式command mode）<br>控制屏幕光标的移动，字符、字或行的删除，查找，移动复制某区段及进入Insert mode下，或者到 last line mode。<br>  命令行模式下的常用命令：</p><pre><code>- 控制光标移动：↑，↓，j- 删除当前行：dd - 查找：/字符- 进入编辑模式：i o a- 进入底行模式：:</code></pre></li><li><p>编辑模式（Insert mode）<br>  只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。<br>  编辑模式下常用命令：</p><pre><code>- ESC 退出编辑模式到命令行模式；</code></pre></li><li><p>底行模式（last line mode）<br>  将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。<br>  底行模式下常用命令：</p><pre><code>- 退出编辑：   :q- 强制退出：   :q!- 保存并退出：  :wq</code></pre></li></ul><p><strong>打开文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi 文件名</span><br><span class="line">示例：打开当前目录下的xxx.txt文件  vi xxx.txt 或者 vim xxx.txt</span><br><span class="line">注意：使用vi编辑器打开文件后，并不能编辑，因为此时处于命令模式，点击键盘i/a/o进入编辑模式。</span><br></pre></td></tr></table></figure><p><strong>编辑文件</strong></p><p>使用vi编辑器打开文件后点击按键：i ，a或者o即可进入编辑模式。<br>i:在光标所在字符前开始插入<br>a:在光标所在字符后开始插入<br>o:在光标所在行的下面另起一新行插入</p><p><strong>保存或者取消编辑</strong></p><p>保存文件：<br>第一步：ESC  进入命令行模式<br>第二步：:     进入底行模式<br>第三步：wq     保存并退出编辑<br>取消编辑：</p><p>第一步：ESC  进入命令行模式<br>第二步：:     进入底行模式<br>第三步：q!     撤销本次修改并退出编辑</p><h5 id="文件的查看-查"><a href="#文件的查看-查" class="headerlink" title="文件的查看 [查]"></a>文件的查看 [查]</h5><p>文件的查看命令：cat/more/less/tail<br><strong>cat：看最后一屏</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：使用cat查看/etc/sudo.conf文件，只能显示最后一屏内容</span><br><span class="line">$ cat sudo.conf</span><br></pre></td></tr></table></figure><p><strong>more：百分比显示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：使用more查看/etc/sudo.conf文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q可以退出查看</span><br><span class="line">$ more sudo.conf</span><br></pre></td></tr></table></figure><p><strong>less：翻页查看</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：使用less查看/etc/sudo.conf文件，可以使用键盘上的PgUp和PgDn向上    和向下翻页，q结束查看</span><br><span class="line">$ less sudo.conf</span><br></pre></td></tr></table></figure><p><strong>tail：指定行数或者动态查看</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：使用tail -10 查看/etc/sudo.conf文件的后10行，Ctrl+C结束  </span><br><span class="line">$ tail -10 sudo.conf</span><br></pre></td></tr></table></figure><h4 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h4><p>rwx：r代表可读，w代表可写，x代表该文件是一个可执行文件，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。</p><p>示例：给xxx.txt文件权限改为可执行文件权限，xxx.txt文件的权限是-rw — —</p><p>第一位：-就代表是文件，d代表是文件夹<br>第一段（3位）：代表拥有者的权限<br>第二段（3位）：代表拥有者所在的组，组员的权限<br>第三段（最后3位）：代表的是其他用户的权限</p><p>421  421  421<br>rw-  —  —</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x xxx.txt</span><br><span class="line">或者采用8421法</span><br><span class="line">$ chmod 100 xxx.txt</span><br></pre></td></tr></table></figure><hr><h3 id="压缩文件操作"><a href="#压缩文件操作" class="headerlink" title="压缩文件操作"></a>压缩文件操作</h3><h4 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h4><p>Windows的压缩文件的扩展名  .zip/.rar<br>linux中的打包文件：xxx.tar<br>linux中的压缩文件：xxx.gz<br>linux中打包并压缩的文件：.tar.gz</p><p>Linux中的打包文件一般是以.tar结尾的，压缩的命令一般是以.gz结尾的。<br>而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">命令：tar -zcvf 打包压缩后的文件名 要打包的文件</span><br><span class="line">其中：z：调用gzip压缩命令进行压缩</span><br><span class="line">  c：打包文件</span><br><span class="line">  v：显示运行过程</span><br><span class="line">  f：指定文件名</span><br><span class="line">示例：打包并压缩/usr/tmp下的所有文件压缩后的压缩包指定名称为xxx.tar</span><br><span class="line">$ tar -zcvf xxx.tar xx.txt xxx.txt </span><br><span class="line">或</span><br><span class="line">$ tar -zcvf xx.tar *</span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令：tar [-zxvf] 压缩文件    </span><br><span class="line">其中：x：代表解压</span><br><span class="line">示例：将/usr/tmp下的xxx.tar解压到当前目录下</span><br><span class="line">$ tar -zxvf xxx.tar</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：将/usr/tmp 下的xx.tar解压到根目录/usr下</span><br><span class="line">$ tar -zxvf xx.tar -C /usr -C代表指定解压的位置</span><br></pre></td></tr></table></figure><hr><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>grep命令是一种强大的文本搜索工具<br>使用实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep sshd  查找指定ssh服务进程 </span><br><span class="line">$ ps -ef | grep sshd | grep -v grep 查找指定服务进程，排除grep本身 </span><br><span class="line">$ ps -ef | grep sshd -c 查找指定进程个数</span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find命令在目录结构中搜索文件，并对搜索结果执行指定的操作。<br>find 默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。<br>使用实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ find . -name <span class="string">"*.log"</span> -ls  在当前目录查找以.<span class="built_in">log</span>结尾的文件，并显示详细信息。 </span><br><span class="line">$ find /root/ -perm 600   查找/root/目录下权限为600的文件 </span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">"*.log"</span>  查找当目录，以.<span class="built_in">log</span>结尾的普通文件 </span><br><span class="line">$ find . -<span class="built_in">type</span> d | sort   查找当前所有目录并排序 </span><br><span class="line">$ find . -size +100M  查找当前目录大于100M的文件</span><br></pre></td></tr></table></figure><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><p>locate 让使用者可以很快速的搜寻某个路径。默认每天自动更新一次，所以使用locate 命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，<font style="color: red">先使用updatedb命令</font>，手动更新数据库。如果数据库中没有查询的数据，则会报出<font style="color: red">locate: can not stat () ‘/var/lib/mlocate/mlocate.db’: No such file or directory</font>该错误！updatedb即可！</p><p><strong><code>yum -y install mlocate</code>如果是精简版CentOS系统需要安装locate命令</strong><br>使用实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br><span class="line">$ locate /etc/sh 搜索etc目录下所有以sh开头的文件 </span><br><span class="line">$ locate <span class="built_in">pwd</span> 查找和<span class="built_in">pwd</span>相关的所有文件</span><br></pre></td></tr></table></figure><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。<br>使用实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whereis ls    将和ls文件相关的文件都查找出来</span><br></pre></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>which命令的作用是在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。<br>使用实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> <span class="built_in">pwd</span>  查找<span class="built_in">pwd</span>命令所在路径 </span><br><span class="line">$ <span class="built_in">which</span> java  查找path中java的路径</span><br></pre></td></tr></table></figure><hr><h3 id="su-sudo"><a href="#su-sudo" class="headerlink" title="su/sudo"></a>su/sudo</h3><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><p>su用于用户之间的切换。但是切换前的用户依然保持登录状态。如果是root 向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su <span class="built_in">test</span>:切换到<span class="built_in">test</span>用户，但是路径还是/root目录</span><br><span class="line">$ su - <span class="built_in">test</span> : 切换到<span class="built_in">test</span>用户，路径变成了/home/<span class="built_in">test</span></span><br><span class="line">$ su : 切换到root用户，但是路径还是原来的路径</span><br><span class="line">$ su - : 切换到root用户，并且路径是/root</span><br></pre></td></tr></table></figure><p>su不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。<br>退出返回之前的用户：exit</p><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><p>sudo是为所有想使用root权限的普通用户设计的。可以让普通用户具有临时使用root权限的权利。只需输入自己账户的密码即可。<br>进入sudo配置文件命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoer或者visudo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">案例：</span><br><span class="line">允许hadoop用户以root身份执行各种应用命令，需要输入hadoop用户的密码。</span><br><span class="line">$ hadoop  ALL=(ALL)   ALL </span><br><span class="line"> </span><br><span class="line">案例：</span><br><span class="line">只允许hadoop用户以root身份执行ls 、cat命令，并且执行时候免输入密码。 </span><br><span class="line">配置文件中： </span><br><span class="line">$ hadoop  ALL=NOPASSWD:  /bin/ls, /bin/cat</span><br></pre></td></tr></table></figure><hr><h3 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ service iptables status  --查看iptables服务的状态</span><br><span class="line">$ service iptables start  --开启iptables服务</span><br><span class="line">$ service iptables stop  --停止iptables服务</span><br><span class="line">$ service iptables restart  --重启iptables服务</span><br><span class="line">$ chkconfig iptables off  --关闭iptables服务的开机自启动</span><br><span class="line">$ chkconfig iptables on  --开启iptables服务的开机自启动</span><br></pre></td></tr></table></figure><hr><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@loonycoder ~]<span class="comment"># vi /etc/sysconfig/network</span></span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=loonycoder</span><br></pre></td></tr></table></figure><h4 id="IP-地址配置"><a href="#IP-地址配置" class="headerlink" title="IP 地址配置"></a>IP 地址配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@loonycoder ~]<span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br></pre></td></tr></table></figure><h4 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h4><p>/etc/hosts文件用于在通过主机名进行访问时做ip地址解析之用。所以，你想访问一个什么样的主机名，就需要把这个主机名和它对应的ip地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@loonycoder ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line"><span class="comment">#### 在最后加上</span></span><br><span class="line">192.168.0.1  node1</span><br><span class="line">192.168.0.2  node2</span><br><span class="line">192.168.0.3  node3</span><br></pre></td></tr></table></figure><hr><h3 id="定时任务指令crontab-配置"><a href="#定时任务指令crontab-配置" class="headerlink" title="定时任务指令crontab 配置"></a>定时任务指令crontab 配置</h3><p>crontab是Unix和Linux用于设置定时任务的指令。通过crontab命令，可以在固定间隔时间,执行指定的系统指令或shell脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。<br>crontab安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install crontabs</span><br></pre></td></tr></table></figure><p>服务操作说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service crond start   <span class="comment">## 启动服务 </span></span><br><span class="line">$ service crond stop    <span class="comment">## 关闭服务 </span></span><br><span class="line">$ service crond restart <span class="comment">## 重启服务</span></span><br></pre></td></tr></table></figure><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crontab [-u user] file</span><br><span class="line">$ crontab [-u user] [ -e | -l | -r ]</span><br></pre></td></tr></table></figure><p>参数说明：<br><strong>-u user</strong>：用来设定某个用户的crontab服务  </p><p><strong>file</strong>：file是命令文件的名字,表示将file做为crontab的任务列表文件<br>并载入crontab。</p><p><strong>-e</strong>：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前<br>用户的crontab文件。</p><p><strong>-l</strong>：显示某个用户的crontab文件内容。如果不指定用户，则表示显示当前<br>用户的crontab文件内容。</p><p><strong>-r</strong>：删除定时任务配置，从/var/spool/cron目录中删除某个用户的crontab<br>文件，如果不指定用户，则默认删除当前用户的crontab文件。</p><p>命令示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ crontab file [-u user] <span class="comment">## 用指定的文件替代目前的crontab</span></span><br><span class="line">$ crontab -l [-u user]  <span class="comment">## 列出用户目前的crontab</span></span><br><span class="line">$ crontab -e [-u user]  <span class="comment">## 编辑用户目前的crontab</span></span><br></pre></td></tr></table></figure><h4 id="配置说明、实例"><a href="#配置说明、实例" class="headerlink" title="配置说明、实例"></a>配置说明、实例</h4><p>命令：*   *    *   *   *   command  </p><p>解释：分  时  日  月  周  命令</p><p>第1列表示分钟1～59 每分钟用*或者 */1表示    </p><p>第2列表示小时0～23（0表示0点）</p><p>第3列表示日期1～31  </p><p>第4列表示月份1～12  </p><p>第5列标识号星期0～6（0表示星期天）  </p><p>第6列要运行的命令</p><p>配置实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先打开定时任务所在的文件：</span></span><br><span class="line">$ crontab -e</span><br><span class="line"> </span><br><span class="line"><span class="comment">#每分钟执行一次date命令 </span></span><br><span class="line">$ */1 * * * * date &gt;&gt; /root/date.txt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#每晚的21:30重启apache。 </span></span><br><span class="line">$ 30 21 * * * service httpd restart</span><br><span class="line"> </span><br><span class="line"><span class="comment">#每月1、10、22日的4 : 45重启apache。  </span></span><br><span class="line">$ 45 4 1,10,22 * * service httpd restart</span><br><span class="line"> </span><br><span class="line"><span class="comment">#每周六、周日的1 : 10重启apache。 </span></span><br><span class="line">$ 10 1 * * 6,0 service httpd restart</span><br><span class="line"> </span><br><span class="line"><span class="comment">#每天18 : 00至23 : 00之间每隔30分钟重启apache。</span></span><br><span class="line">$ 0,30   18-23    *   *   *   service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#晚上11点到早上7点之间，每隔一小时重启apache</span></span><br><span class="line">$ *  23-7/1    *   *   *   service httpd restart</span><br></pre></td></tr></table></figure><hr><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="查看当前目录：pwd"><a href="#查看当前目录：pwd" class="headerlink" title="查看当前目录：pwd"></a>查看当前目录：pwd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span>     <span class="comment">#查看当前目录路径</span></span><br></pre></td></tr></table></figure><h4 id="查看进程：ps-ef"><a href="#查看进程：ps-ef" class="headerlink" title="查看进程：ps -ef"></a>查看进程：ps -ef</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef  <span class="comment">#查看所有正在运行的进程</span></span><br></pre></td></tr></table></figure><h4 id="结束进程：kill"><a href="#结束进程：kill" class="headerlink" title="结束进程：kill"></a>结束进程：kill</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> pid 或者 <span class="built_in">kill</span> -9 pid <span class="comment">#(强制杀死进程)           #pid:进程号</span></span><br></pre></td></tr></table></figure><h4 id="网络通信命令："><a href="#网络通信命令：" class="headerlink" title="网络通信命令："></a>网络通信命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ifconfig：查看网卡信息</span></span><br><span class="line"></span><br><span class="line">$ ifconfig 或 ifconfig | more</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping：查看与某台机器的连接情况</span></span><br><span class="line"></span><br><span class="line">$ ping ip</span><br><span class="line"></span><br><span class="line">$ netstat -an：查看当前系统端口</span><br><span class="line"></span><br><span class="line">$ netstat -an</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索指定端口</span></span><br><span class="line"></span><br><span class="line">$ netstat -an | grep 8080</span><br></pre></td></tr></table></figure><h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ setup</span><br></pre></td></tr></table></figure><h4 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service network restart</span><br></pre></td></tr></table></figure><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su -用户名</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig iptables off</span><br><span class="line">或</span><br><span class="line">$ iptables -L;</span><br><span class="line">$ iptables -F;</span><br><span class="line">$ service iptables stop</span><br></pre></td></tr></table></figure><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 777</span><br></pre></td></tr></table></figure><h4 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ clear</span><br><span class="line">或者</span><br><span class="line">$ ctrl + l</span><br></pre></td></tr></table></figure><h4 id="vi模式下快捷键"><a href="#vi模式下快捷键" class="headerlink" title="vi模式下快捷键"></a>vi模式下快捷键</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">esc后:</span><br><span class="line">保存并退出快捷键：<span class="built_in">shift</span>+z+z</span><br><span class="line">光标跳到最后一行快捷键：<span class="built_in">shift</span>+g</span><br><span class="line">删除一行：dd</span><br><span class="line">复制一行内容：y+y</span><br><span class="line">粘贴复制的内容：p</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux - 服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis高可用解决方案总结</title>
    <link href="/2018/12/06/redis-2/"/>
    <url>/2018/12/06/redis-2/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/redis-logo.png" srcset="/img/loading.gif" alt="redis"><br>本文主要针对 Redis 常见的几种使用方式及其优缺点展开分析。</p><h3 id="常见使用方式"><a href="#常见使用方式" class="headerlink" title="常见使用方式"></a>常见使用方式</h3><p>Redis 的几种常见使用方式包括：</p><ul><li><p>Redis 单副本；</p></li><li><p>Redis 多副本（主从）；</p></li><li><p>Redis Sentinel（哨兵）；</p></li><li><p>Redis Cluster；</p></li><li><p>Redis 自研。</p></li></ul><hr><h3 id="各种使用方式的优缺点"><a href="#各种使用方式的优缺点" class="headerlink" title="各种使用方式的优缺点"></a>各种使用方式的优缺点</h3><h4 id="Redis-单副本"><a href="#Redis-单副本" class="headerlink" title="Redis 单副本"></a>Redis 单副本</h4><p>Redis 单副本，采用单个 Redis 节点部署架构，没有备用节点实时同步数据，不提供数据持久化和备份策略，适用于数据可靠性要求不高的纯缓存业务场景。<br><img src="/images/redis1.jpg" srcset="/img/loading.gif" alt="redis"><br><strong>优点</strong>：</p><p>架构简单，部署方便；</p><p>高性价比：缓存使用时无需备用节点（单实例可用性可以用 supervisor 或 crontab 保证），当然为了满足业务的高可用性，也可以牺牲一个备用节点，但同时刻只有一个实例对外提供服务；</p><p>高性能。</p><p><strong>缺点</strong>：</p><p>不保证数据的可靠性；</p><p>在缓存使用，进程重启后，数据丢失，即使有备用的节点解决高可用性，但是仍然不能解决缓存预热问题，因此不适用于数据可靠性要求高的业务；</p><p>高性能受限于单核 CPU 的处理能力（Redis 是单线程机制），CPU 为主要瓶颈，所以适合操作命令简单，排序、计算较少的场景。也可以考虑用 Memcached 替代。</p><h4 id="Redis-多副本（主从）"><a href="#Redis-多副本（主从）" class="headerlink" title="Redis 多副本（主从）"></a>Redis 多副本（主从）</h4><p>Redis 多副本，采用主从（replication）部署结构，相较于单副本而言最大的特点就是主从实例间数据实时同步，并且提供数据持久化和备份策略。主从实例部署在不同的物理服务器上，根据公司的基础环境配置，可以实现同时对外提供服务和读写分离策略。<br><img src="/images/redis2.jpg" srcset="/img/loading.gif" alt="redis"></p><p><strong>优点</strong>：</p><p>高可靠性：一方面，采用双机主备架构，能够在主库出现故障时自动进行主备切换，从库提升为主库提供服务，保证服务平稳运行；另一方面，开启数据持久化功能和配置合理的备份策略，能有效的解决数据误操作和数据异常丢失的问题；</p><p>读写分离策略：从节点可以扩展主库节点的读能力，有效应对大并发量的读操作。</p><p><strong>缺点</strong>：</p><p>故障恢复复杂，如果没有 RedisHA 系统（需要开发），当主库节点出现故障时，需要手动将一个从节点晋升为主节点，同时需要通知业务方变更配置，并且需要让其它从库节点去复制新主库节点，整个过程需要人为干预，比较繁琐；</p><p>主库的写能力受到单机的限制，可以考虑分片；</p><p>主库的存储能力受到单机的限制，可以考虑 Pika；</p><p>原生复制的弊端在早期的版本中也会比较突出，如：Redis 复制中断后，Slave 会发起 psync，此时如果同步不成功，则会进行全量同步，主库执行全量备份的同时可能会造成毫秒或秒级的卡顿；又由于 COW 机制，导致极端情况下的主库内存溢出，程序异常退出或宕机；主库节点生成备份文件导致服务器磁盘 IO 和 CPU（压缩）资源消耗；发送数 GB 大小的备份文件导致服务器出口带宽暴增，阻塞请求，建议升级到最新版本。</p><h4 id="Redis-多副本（主从）-1"><a href="#Redis-多副本（主从）-1" class="headerlink" title="Redis 多副本（主从）"></a>Redis 多副本（主从）</h4><p>Redis Sentinel 是社区版本推出的原生高可用解决方案，其部署架构主要包括两部分：Redis Sentinel 集群和 Redis 数据集群。</p><p>其中 Redis Sentinel 集群是由若干 Sentinel 节点组成的分布式集群，可以实现故障发现、故障自动转移、配置中心和客户端通知。Redis Sentinel 的节点数量要满足 2n+1（n&gt;=1）的奇数个。<br><img src="/images/redis3.jpg" srcset="/img/loading.gif" alt="redis"><br><img src="/images/redis4.jpg" srcset="/img/loading.gif" alt="redis"><br><strong>优点</strong>：</p><p>Redis Sentinel 集群部署简单；</p><p>能够解决 Redis 主从模式下的高可用切换问题；</p><p>很方便实现 Redis 数据节点的线形扩展，轻松突破 Redis 自身单线程瓶颈，可极大满足 Redis 大容量或高性能的业务需求；</p><p>可以实现一套 Sentinel 监控一组 Redis 数据节点或多组数据节点。</p><p><strong>缺点</strong>：</p><p>部署相对 Redis 主从模式要复杂一些，原理理解更繁琐；</p><p>资源浪费，Redis 数据节点中 slave 节点作为备份节点不提供服务；</p><p>Redis Sentinel 主要是针对 Redis 数据节点中的主节点的高可用切换，对 Redis 的数据节点做失败判定分为主观下线和客观下线两种，对于 Redis 的从节点有对节点做主观下线操作，并不执行故障转移。</p><p>不能解决读写分离问题，实现起来相对复杂。</p><p><strong>建议</strong>：</p><p>如果监控同一业务，可以选择一套 Sentinel 集群监控多组 Redis 数据节点的方案，反之选择一套 Sentinel 监控一组 Redis 数据节点的方案。</p><p>sentinel monitor配置中的建议设置成 Sentinel 节点的一半加 1，当 Sentinel 部署在多个 IDC 的时候，单个 IDC 部署的 Sentinel 数量不建议超过（Sentinel 数量 – quorum）。</p><p>合理设置参数，防止误切，控制切换灵敏度控制：</p><p>a. quorum</p><p>b. down-after-milliseconds 30000</p><p>c. failover-timeout 180000</p><p>d. maxclient</p><p>e. timeout</p><p>部署的各个节点服务器时间尽量要同步，否则日志的时序性会混乱。</p><p>Redis 建议使用 pipeline 和 multi-keys 操作，减少 RTT 次数，提高请求效率。</p><p>自行搞定配置中心（zookeeper），方便客户端对实例的链接访问。</p><h4 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h4><p>Redis Cluster 是社区版推出的 Redis 分布式集群解决方案，主要解决 Redis 分布式方面的需求，比如，当遇到单机内存，并发和流量等瓶颈的时候，Redis Cluster 能起到很好的负载均衡的目的。</p><p>Redis Cluster 集群节点最小配置 6 个节点以上（3 主 3 从），其中主节点提供读写操作，从节点作为备用节点，不提供请求，只作为故障转移使用。</p><p>Redis Cluster 采用虚拟槽分区，所有的键根据哈希函数映射到 0～16383 个整数槽内，每个节点负责维护一部分槽以及槽所印映射的键值数据。<br><img src="/images/redis5.jpg" srcset="/img/loading.gif" alt="redis"><br><strong>优点</strong>：</p><p>无中心架构；</p><p>数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布；</p><p>可扩展性：可线性扩展到 1000 多个节点，节点可动态添加或删除；</p><p>高可用性：部分节点不可用时，集群仍可用。通过增加 Slave 做 standby 数据副本，能够实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave 到 Master 的角色提升；</p><p>降低运维成本，提高系统的扩展性和可用性。</p><p><strong>缺点</strong>：</p><p>Client 实现复杂，驱动要求实现 Smart Client，缓存 slots mapping 信息并及时更新，提高了开发难度，客户端的不成熟影响业务的稳定性。目前仅 JedisCluster 相对成熟，异常处理部分还不完善，比如常见的“max redirect exception”。</p><p>节点会因为某些原因发生阻塞（阻塞时间大于 clutser-node-timeout），被判断下线，这种 failover 是没有必要的。</p><p>数据通过异步复制，不保证数据的强一致性。</p><p>多个业务使用同一套集群时，无法根据统计区分冷热数据，资源隔离性较差，容易出现相互影响的情况。</p><p>Slave 在集群中充当“冷备”，不能缓解读压力，当然可以通过 SDK 的合理设计来提高 Slave 资源的利用率。</p><p>Key 批量操作限制，如使用 mset、mget 目前只支持具有相同 slot 值的 Key 执行批量操作。对于映射为不同 slot 值的 Key 由于 Keys 不支持跨 slot 查询，所以执行 mset、mget、sunion 等操作支持不友好。</p><p>Key 事务操作支持有限，只支持多 key 在同一节点上的事务操作，当多个 Key 分布于不同的节点上时无法使用事务功能。</p><p>Key 作为数据分区的最小粒度，不能将一个很大的键值对象如 hash、list 等映射到不同的节点。</p><p>不支持多数据库空间，单机下的 redis 可以支持到 16 个数据库，集群模式下只能使用 1 个数据库空间，即 db 0。</p><p>复制结构只支持一层，从节点只能复制主节点，不支持嵌套树状复制结构。</p><p>避免产生 hot-key，导致主库节点成为系统的短板。</p><p>避免产生 big-key，导致网卡撑爆、慢查询等。</p><p>重试时间应该大于 cluster-node-time 时间。</p><p>Redis Cluster 不建议使用 pipeline 和 multi-keys 操作，减少 max redirect 产生的场景。</p><h4 id="Redis-自研"><a href="#Redis-自研" class="headerlink" title="Redis 自研"></a>Redis 自研</h4><p>Redis 自研的高可用解决方案，主要体现在配置中心、故障探测和 failover 的处理机制上，通常需要根据企业业务的实际线上环境来定制化。<br><img src="/images/redis6.jpg" srcset="/img/loading.gif" alt="redis"><br><img src="/images/redis7.jpg" srcset="/img/loading.gif" alt="redis"><br>优点：</p><p>高可靠性、高可用性；</p><p>自主可控性高；</p><p>贴切业务实际需求，可缩性好，兼容性好。</p><p>缺点：</p><p>实现复杂，开发成本高；</p><p>需要建立配套的周边设施，如监控，域名服务，存储元数据信息的数据库等；</p><p>维护成本高。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库 - Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis入门</title>
    <link href="/2018/11/28/redis-1/"/>
    <url>/2018/11/28/redis-1/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/redis-logo.png" srcset="/img/loading.gif" alt="redis"></p><h3 id="Redis-概述"><a href="#Redis-概述" class="headerlink" title="Redis 概述"></a>Redis 概述</h3><p>在我们日常的Java Web开发中，无不都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在高并发的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，磁盘读/写速度比较慢的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成成千上万次的读/写操作，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。</p><hr><h3 id="NoSQL-技术"><a href="#NoSQL-技术" class="headerlink" title="NoSQL 技术"></a>NoSQL 技术</h3><p>为了克服上述的问题，Java Web项目通常会引入NoSQL技术，这是一种<strong>基于内存的数据库</strong>，并且提供一定的持久化功能。</p><p><strong>Redis</strong>和<strong>MongoDB</strong>是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以<strong>支持每秒十几万此的读/写操作</strong>，其性能远超数据库，并且还<strong>支持集群、分布式、主从同步等</strong>配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还<strong>支持一定的事务能力</strong>，这保证了高并发的场景下数据的安全和一致性。</p><hr><h3 id="Redis-在-Java-Web-中的应用"><a href="#Redis-在-Java-Web-中的应用" class="headerlink" title="Redis 在 Java Web 中的应用"></a>Redis 在 Java Web 中的应用</h3><p>Redis 在 Java Web 主要有两个应用场景：</p><ul><li>存储 <strong>缓存</strong> 用的数据；</li><li>需要高速读/写的场合<strong>使用它快速读/写</strong>；</li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>在日常对数据库的访问中，读操作的次数远超写操作，比例大概在 <strong>1:9</strong> 到 <strong>3:7</strong>，所以需要读的可能性是比写的可能大得多的。当我们使用SQL语句去数据库进行读写操作时，数据库就会<strong>去磁盘把对应的数据索引取回来</strong>，这是一个相对较慢的过程。</p><p>如果我们把数据放在 Redis 中，也就是直接放在内存之中，让服务端<strong>直接去读取内存中的数据</strong>，那么这样速度明显就会快上不少，并且会极大减小数据库的压力，但是使用内存进行数据存储开销也是比较大的，限于成本的原因，一般我们<strong>只是使用 Redis 存储一些常用和主要的数据</strong>，比如用户登录的信息等。</p><p>一般而言在使用 Redis 进行存储的时候，我们需要从以下几个方面来考虑：</p><ul><li><strong>业务数据常用吗？命中率如何？</strong>如果命中率很低，就没有必要写入缓存；</li><li><strong>该业务数据是读操作多，还是写操作多？</strong>如果写操作多，频繁需要写入数据库，也没有必要使用缓存；</li><li><strong>业务数据大小如何？</strong>如果要存储几百兆字节的文件，会给缓存带来很大的压力，这样也没有必要；<br>在考虑了这些问题之后，如果觉得有必要使用缓存，那么就使用它！使用 Redis 作为缓存的读取逻辑如下图所示：<br><img src="/images/redis8.png" srcset="/img/loading.gif" alt="redis"><br>从上图我们可以知道以下两点：</li></ul><ol><li>当<strong>第一次读取数据的时候</strong>，读取 Redis 的数据就会失败，此时就会触发程序读取数据库，把数据读取出来，并且写入 Redis 中；</li><li>当<strong>第二次以及以后需要读取数据时</strong>，就会直接读取 Redis，读到数据后就结束了流程，这样速度就大大提高了。<br>从上面的分析可以知道，读操作的可能性是远大于写操作的，所以使用 Redis 来处理日常中需要经常读取的数据，速度提升是显而易见的，同时也降低了对数据库的依赖，使得数据库的压力大大减少。</li></ol><p>分析了读操作的逻辑，下面我们来看看<strong>写操作的流程</strong>：<br><img src="/images/redis9.png" srcset="/img/loading.gif" alt="redis"><br>从流程可以看出，更新或者写入的操作，需要多个 Redis 的操作，如果业务数据写次数远大于读次数那么就没有必要使用 Redis。</p><blockquote><p>关于使用内存存储数据，我知道谷歌好像就是<strong>把所有互联网的数据都存储在内存条</strong>的，所以才会有如此高质量、高效的搜索，但它毕竟是谷歌…</p></blockquote><h4 id="高速读-写的场合"><a href="#高速读-写的场合" class="headerlink" title="高速读/写的场合"></a>高速读/写的场合</h4><p>在如今的互联网中，越来越多的存在高并发的情况，比如天猫双11、抢红包、抢演唱会门票等，这些场合都是在某一个瞬间或者是某一个短暂的时刻有<strong>成千上万的请求</strong>到达服务器，如果单纯的使用数据库来进行处理，就算不崩，也会很慢的，<strong>轻则造成用户体验极差用户量流失，重则数据库瘫痪，服务宕机</strong>，而这样的场合都是不允许的！</p><p>所以我们需要使用 Redis 来应对这样的高并发需求的场合，我们先来看看一次<strong>请求操作的流程图</strong>：<br><img src="/images/redis10.png" srcset="/img/loading.gif" alt="redis"><br>我们来进一步阐述这个过程：</p><ol><li>当一个请求到达服务器时，只是把业务数据在 Redis 上进行读写，而没有对数据库进行任何的操作，这样就能大大提高读写的速度，从而满足<strong>高速响应的需求</strong>；</li><li>但是这些缓存的数据仍然需要持久化，也就是存入数据库之中，所以在一个请求操作完 Redis 的读/写之后，会去<strong>判断该高速读/写的业务是否结束</strong>，这个判断通常会在秒杀商品为0，红包金额为0时成立，如果不成立，则不会操作数据库；如果成立，则触发事件将 Redis 的缓存的数据以批量的形式<strong>一次性写入数据库</strong>，从而完成持久化的工作。</li></ol><hr><h3 id="Redis-的安装"><a href="#Redis-的安装" class="headerlink" title="Redis 的安装"></a>Redis 的安装</h3><blockquote><p>操作系统：CentOS 7<br>redis版本：5.0</p></blockquote><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-5.0.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/images/redis11.png" srcset="/img/loading.gif" alt="redis"></p><h4 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf redis-5.0.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/images/redis12.png" srcset="/img/loading.gif" alt="redis"><br>没有报错就代表解压成功！</p><h4 id="yum安装gcc依赖"><a href="#yum安装gcc依赖" class="headerlink" title="yum安装gcc依赖"></a>yum安装gcc依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc</span><br></pre></td></tr></table></figure><p>遇到选择，输入y即可</p><h4 id="编译-amp-安装"><a href="#编译-amp-安装" class="headerlink" title="编译&amp;安装"></a>编译&amp;安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> redis-5.0.0/</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><p>先切换到redis src目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> src/</span><br></pre></td></tr></table></figure><h4 id="直接启动redis"><a href="#直接启动redis" class="headerlink" title="直接启动redis"></a>直接启动redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./redis-server</span><br></pre></td></tr></table></figure><p><img src="/images/redis13.png" srcset="/img/loading.gif" alt="redis"><br>如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。<br>按 ctrl + c可以关闭窗口。</p><h4 id="以后台进程方式启动redis"><a href="#以后台进程方式启动redis" class="headerlink" title="以后台进程方式启动redis"></a>以后台进程方式启动redis</h4><h5 id="第一步：修改redis-conf文件"><a href="#第一步：修改redis-conf文件" class="headerlink" title="第一步：修改redis.conf文件"></a>第一步：修改redis.conf文件</h5><p>redis.conf文件就在redis目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> redis-5.0.0/</span><br><span class="line">$ vim redis.conf</span><br></pre></td></tr></table></figure><p>将<strong>daemonize no</strong>修改为<strong>daemonize yes</strong><br><img src="/images/redis14.png" srcset="/img/loading.gif" alt="redis"><br>配置允许所有ip都可以访问redis，将bind 127.0.0.1注释掉:<br><img src="/images/redis15.png" srcset="/img/loading.gif" alt="redis"><br>并且将protected-mode改为no<br><img src="/images/redis16.png" srcset="/img/loading.gif" alt="redis"></p><h5 id="第二步：指定redis-conf文件启动"><a href="#第二步：指定redis-conf文件启动" class="headerlink" title="第二步：指定redis.conf文件启动"></a>第二步：指定redis.conf文件启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./redis-server ~/redis-5.0.0/redis.conf</span><br></pre></td></tr></table></figure><p><img src="/images/redis17.png" srcset="/img/loading.gif" alt="redis"></p><h5 id="第三步：关闭redis进程"><a href="#第三步：关闭redis进程" class="headerlink" title="第三步：关闭redis进程"></a>第三步：关闭redis进程</h5><p>首先使用<code>ps -aux&brvbar;grep redis</code>查看redis进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -aux | grep redis</span><br></pre></td></tr></table></figure><p><img src="/images/redis18.png" srcset="/img/loading.gif" alt="redis"><br>使用kill命令杀死进程,并检查是否成功关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -9 2751</span><br></pre></td></tr></table></figure><h5 id="第四步：检查是否开启了所有ip访问："><a href="#第四步：检查是否开启了所有ip访问：" class="headerlink" title="第四步：检查是否开启了所有ip访问："></a>第四步：检查是否开启了所有ip访问：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef |grep redis</span><br></pre></td></tr></table></figure><p>如果端口号前面显示的是*则说明客户端可以访问了，如果是127.0.0.1，则需要重新配置了。</p><h4 id="设置redis开机自启动"><a href="#设置redis开机自启动" class="headerlink" title="设置redis开机自启动"></a>设置redis开机自启动</h4><h5 id="在-etc目录下新建redis目录"><a href="#在-etc目录下新建redis目录" class="headerlink" title="在/etc目录下新建redis目录"></a>在/etc目录下新建redis目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc</span><br><span class="line">$ mkdir redis</span><br></pre></td></tr></table></figure><h5 id="将-root-redis-5-0-0-redis-conf文件复制一份到-etc-redis目录下，并命名为6379-conf"><a href="#将-root-redis-5-0-0-redis-conf文件复制一份到-etc-redis目录下，并命名为6379-conf" class="headerlink" title="将/root/redis-5.0.0/redis.conf文件复制一份到/etc/redis目录下，并命名为6379.conf"></a>将/root/redis-5.0.0/redis.conf文件复制一份到/etc/redis目录下，并命名为6379.conf</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /root/redis-5.0.0/redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure><h5 id="将redis的启动脚本复制一份放到-etc-init-d目录下"><a href="#将redis的启动脚本复制一份放到-etc-init-d目录下" class="headerlink" title="将redis的启动脚本复制一份放到/etc/init.d目录下"></a>将redis的启动脚本复制一份放到/etc/init.d目录下</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /root/redis-5.0.0/utils/redis_init_script /etc/init.d/redisd</span><br></pre></td></tr></table></figure><h5 id="设置redis开机自启动-1"><a href="#设置redis开机自启动-1" class="headerlink" title="设置redis开机自启动"></a>设置redis开机自启动</h5><p>先切换到/etc/init.d目录下，然后执行自启命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig redisd on</span><br></pre></td></tr></table></figure><p>如果redisd不支持chkconfig，使用vim编辑redisd文件，在第一行加入如下两行注释，保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig:   2345 90 10</span></span><br><span class="line"><span class="comment"># description:  Redis is a persistent key-value database</span></span><br></pre></td></tr></table></figure><p>注释的意思是，redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。<br>再次执行开机自启命令，成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig redisd on</span><br></pre></td></tr></table></figure><h4 id="以服务的形式启动和关闭redis"><a href="#以服务的形式启动和关闭redis" class="headerlink" title="以服务的形式启动和关闭redis"></a>以服务的形式启动和关闭redis</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service redisd start</span><br></pre></td></tr></table></figure><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service redisd stop</span><br></pre></td></tr></table></figure><p><img src="/images/redis19.png" srcset="/img/loading.gif" alt="redis"></p><hr><h3 id="在-Java-中使用-Redis"><a href="#在-Java-中使用-Redis" class="headerlink" title="在 Java 中使用 Redis"></a>在 Java 中使用 Redis</h3><h4 id="第一步：添加-Jedis-依赖"><a href="#第一步：添加-Jedis-依赖" class="headerlink" title="第一步：添加 Jedis 依赖"></a>第一步：添加 Jedis 依赖</h4><p>想要在 Java 中使用 Redis 缓存，需要添加相关的Jar包依赖，打开Maven仓库的网站：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a> ，搜索Jedis：<br><img src="/images/redis20.png" srcset="/img/loading.gif" alt="redis"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>写个简单的性能测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">redisTester</span></span>() &#123;</span><br><span class="line">    Jedis jedis = new Jedis(<span class="string">"localhost"</span>, 6379, 100000);</span><br><span class="line">    int i = 0;</span><br><span class="line">    try &#123;</span><br><span class="line">        long start = System.currentTimeMillis();// 开始毫秒数</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            long end = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (end - start &gt;= 1000) &#123;// 当大于等于1000毫秒（相当于1秒）时，结束操作</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            jedis.set(<span class="string">"test"</span> + i, i + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;// 关闭连接</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    // 打印1秒内对Redis的操作次数</span><br><span class="line">    System.out.println(<span class="string">"redis每秒操作："</span> + i + <span class="string">"次"</span>);</span><br><span class="line">&#125;</span><br><span class="line">-----------测试结果-----------</span><br><span class="line">redis每秒操作：99776次</span><br></pre></td></tr></table></figure><h4 id="第二步：使用-Redis-连接池"><a href="#第二步：使用-Redis-连接池" class="headerlink" title="第二步：使用 Redis 连接池"></a>第二步：使用 Redis 连接池</h4><p>跟数据库连接池相同，Java Redis也同样提供了类<code>redis.clients.jedis.JedisPool</code>来管理我们的Reids连接池对象，并且我们可以使用<code>redis.clients.jedis.JedisPoolConfig</code>来对连接池进行配置，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JedisPoolConfig poolConfig = new JedisPoolConfig();</span><br><span class="line">// 最大空闲数</span><br><span class="line">poolConfig.setMaxIdle(50);</span><br><span class="line">// 最大连接数</span><br><span class="line">poolConfig.setMaxTotal(100);</span><br><span class="line">// 最大等待毫秒数</span><br><span class="line">poolConfig.setMaxWaitMillis(20000);</span><br><span class="line">// 使用配置创建连接池</span><br><span class="line">JedisPool pool = new JedisPool(poolConfig, <span class="string">"localhost"</span>);</span><br><span class="line">// 从连接池中获取单个连接</span><br><span class="line">Jedis jedis = pool.getResource();</span><br><span class="line">// 如果需要密码</span><br><span class="line">//jedis.auth(<span class="string">"password"</span>);</span><br></pre></td></tr></table></figure><p>Redis 只能支持六种数据类型（string/hash/list/set/zset/hyperloglog）的操作，但在 Java 中我们却通常以类对象为主，所以在需要 Redis 存储的五中数据类型与 Java 对象之间进行转换，如果自己编写一些工具类，比如一个角色对象的转换，还是比较容易的，但是涉及到许多对象的时候，这其中无论工作量还是工作难度都是很大的，所以总体来说，<strong>就操作对象而言，使用 Redis 还是挺难的</strong>，好在 Spring 对这些进行了封装和支持。</p><h4 id="第三步：在-Spring-中使用-Redis"><a href="#第三步：在-Spring-中使用-Redis" class="headerlink" title="第三步：在 Spring 中使用 Redis"></a>第三步：在 Spring 中使用 Redis</h4><p>上面说到了 Redis 无法操作对象的问题，无法在那些基础类型和 Java 对象之间方便的转换，但是在 Spring 中，这些问题都可以<strong>通过使用RedisTemplate</strong>得到解决！</p><p>想要达到这样的效果，除了 Jedis 包以外还需要在 Spring 引入 spring-data-redis 包：<a href="https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis</a><br><img src="/images/redis21.png" srcset="/img/loading.gif" alt="redis"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>(1) 第一步：使用Spring配置JedisPoolConfig对象</strong><br>大部分的情况下，我们还是会用到连接池的，于是先用 Spring 配置一个 JedisPoolConfig 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"poolConfig"</span> class=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span><br><span class="line">    &lt;!--最大空闲数--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"50"</span>/&gt;</span><br><span class="line">    &lt;!--最大连接数--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"maxTotal"</span> value=<span class="string">"100"</span>/&gt;</span><br><span class="line">    &lt;!--最大等待时间--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"maxWaitMillis"</span> value=<span class="string">"20000"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>(2) 第二步：为连接池配置工厂模型</strong><br>好了，我们现在配置好了连接池的相关属性，那么具体使用哪种工厂实现呢？在Spring Data Redis中有四种可供我们选择的工厂模型，它们分别是：</p><ul><li>JredisConnectionFactory</li><li>JedisConnectionFactory</li><li>LettuceConnectionFactory</li><li>SrpConnectionFactory<br>我们这里就简单配置成JedisConnectionFactory：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"connectionFactory"</span> class=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span><br><span class="line">    &lt;!--Redis服务地址--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"hostName"</span> value=<span class="string">"localhost"</span>/&gt;</span><br><span class="line">    &lt;!--端口号--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"port"</span> value=<span class="string">"6379"</span>/&gt;</span><br><span class="line">    &lt;!--如果有密码则需要配置密码--&gt;</span><br><span class="line">    &lt;!--&lt;property name=<span class="string">"password"</span> value=<span class="string">"password"</span>/&gt;--&gt;</span><br><span class="line">    &lt;!--连接池配置--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"poolConfig"</span> ref=<span class="string">"poolConfig"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>(3) 第三步：配置RedisTemplate</strong><br>普通的连接根本没有办法直接将对象直接存入 Redis 内存中，我们需要替代的方案：将对象序列化（可以简单的理解为继承Serializable接口）。我们可以把对象序列化之后存入Redis缓存中，然后在取出的时候又通过转换器，将序列化之后的对象反序列化回对象，这样就完成了我们的要求：<br><img src="/images/redis22.png" srcset="/img/loading.gif" alt="redis"><br>RedisTemplate可以帮助我们完成这份工作，它会找到对应的序列化器去转换Redis的键值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"redisTemplate"</span></span><br><span class="line">      class=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span></span><br><span class="line">      p:connection-factory-ref=<span class="string">"connectionFactory"</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>我从《JavaEE互联网轻量级框架整合开发》中了解到，这一步需要配置单独的序列化器去支撑这一步的工作，但是自己在测试当中，发现只要我们的Pojo类实现了Serializable接口，就不会出现问题，所以我直接省略掉了配置序列化器这一步。<br><strong>(4) 第四步：编写测试</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author: @loonycoder</span><br><span class="line"> * @create: 2018-11-28 下午 18:22:06</span><br><span class="line"> */</span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给该类一个服务类用于测试</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">service</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"学生名字为："</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"学生年龄为："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getAge</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写测试类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">    ApplicationContext context =</span><br><span class="line">            new ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    RedisTemplate redisTemplate = context.getBean(RedisTemplate.class);</span><br><span class="line">    Student student = new Student();</span><br><span class="line">    student.setName(<span class="string">"loonycoder"</span>);</span><br><span class="line">    student.setAge(24);</span><br><span class="line">    redisTemplate.opsForValue().<span class="built_in">set</span>(<span class="string">"student_1"</span>, student);</span><br><span class="line">    Student student1 = (Student) redisTemplate.opsForValue().get(<span class="string">"student_1"</span>);</span><br><span class="line">    student1.service();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/redis23.png" srcset="/img/loading.gif" alt="redis"></p><h4 id="第四步：在-SpringBoot-中使用-Redis"><a href="#第四步：在-SpringBoot-中使用-Redis" class="headerlink" title="第四步：在 SpringBoot 中使用 Redis"></a>第四步：在 SpringBoot 中使用 Redis</h4><p><strong>(1)在SpringBoot中添加Redis依赖：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Radis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>(2)添加配置文件：</strong><br>在SpringBoot中使用<code>.properties</code>或者<code>.yml</code>都可以，这里给出<code>.properties</code>的例子，因为自己的<code>.yml</code>文件看上去感觉乱糟糟的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># REDIS (RedisProperties)</span></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">spring.redis.database=0</span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line">spring.redis.port=6379</span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">spring.redis.password=</span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">spring.redis.pool.max-idle=8</span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">spring.redis.pool.min-idle=0</span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><p><strong>(3)测试访问：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@SpringBootTest()</span><br><span class="line">public class ApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void <span class="built_in">test</span>() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 保存字符串</span><br><span class="line">        stringRedisTemplate.opsForValue().<span class="built_in">set</span>(<span class="string">"loonycoder"</span>, <span class="string">"24"</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"24"</span>, stringRedisTemplate.opsForValue().get(<span class="string">"loonycoder"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面这段极为简单的测试案例演示了如何通过自动配置的<strong>StringRedisTemplate</strong>对象进行Redis的读写操作，该对象从命名中就可注意到支持的是String类型。原本是RedisTemplate&lt;K, V&gt;接口，StringRedisTemplate就相当于RedisTemplate&lt;String, String&gt;的实现。<br><strong>(4)存储对象：</strong><br>这一步跟上面使用Spring一样，只需要将Pojo类实现Serializable接口就可以了，这里直接贴测试代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@SpringBootTest()</span><br><span class="line">public class ApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void <span class="built_in">test</span>() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setName(<span class="string">"loonycoder"</span>);</span><br><span class="line">        user.setAge(24);</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().<span class="built_in">set</span>(<span class="string">"user_1"</span>, user);</span><br><span class="line">        User user1 = (User) redisTemplate.opsForValue().get(<span class="string">"user_1"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考文章：<br><a href="https://www.cnblogs.com/ityouknow/p/5748830.html" target="_blank" rel="noopener">https://www.cnblogs.com/ityouknow/p/5748830.html</a><br><a href="http://blog.didispace.com/springbootredis/" target="_blank" rel="noopener">http://blog.didispace.com/springbootredis/</a></p></blockquote><hr><h3 id="在Redis中操作集合"><a href="#在Redis中操作集合" class="headerlink" title="在Redis中操作集合"></a>在Redis中操作集合</h3><blockquote><p>引用文章：<a href="https://www.jianshu.com/p/29aaac3172b5" target="_blank" rel="noopener">https://www.jianshu.com/p/29aaac3172b5</a></p></blockquote><p>直接贴上两段简单的示例代码：</p><h4 id="在Redis中操作List"><a href="#在Redis中操作List" class="headerlink" title="在Redis中操作List"></a>在Redis中操作List</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// list数据类型适合于消息队列的场景:比如12306并发量太高，而同一时间段内只能处理指定数量的数据！必须满足先进先出的原则，其余数据处于等待</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">listPushResitTest</span></span>() &#123;</span><br><span class="line">    // leftPush依次由右边添加</span><br><span class="line">    stringRedisTemplate.opsForList().rightPush(<span class="string">"myList"</span>, <span class="string">"1"</span>);</span><br><span class="line">    stringRedisTemplate.opsForList().rightPush(<span class="string">"myList"</span>, <span class="string">"2"</span>);</span><br><span class="line">    stringRedisTemplate.opsForList().rightPush(<span class="string">"myList"</span>, <span class="string">"A"</span>);</span><br><span class="line">    stringRedisTemplate.opsForList().rightPush(<span class="string">"myList"</span>, <span class="string">"B"</span>);</span><br><span class="line">    // leftPush依次由左边添加</span><br><span class="line">    stringRedisTemplate.opsForList().leftPush(<span class="string">"myList"</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">listGetListResitTest</span></span>() &#123;</span><br><span class="line">    // 查询类别所有元素</span><br><span class="line">    List&lt;String&gt; listAll = stringRedisTemplate.opsForList().range(<span class="string">"myList"</span>, 0, -1);</span><br><span class="line">    logger.info(<span class="string">"list all &#123;&#125;"</span>, listAll);</span><br><span class="line">    // 查询前3个元素</span><br><span class="line">    List&lt;String&gt; list = stringRedisTemplate.opsForList().range(<span class="string">"myList"</span>, 0, 3);</span><br><span class="line">    logger.info(<span class="string">"list limit &#123;&#125;"</span>, list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">listRemoveOneResitTest</span></span>() &#123;</span><br><span class="line">    // 删除先进入的B元素</span><br><span class="line">    stringRedisTemplate.opsForList().remove(<span class="string">"myList"</span>, 1, <span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">listRemoveAllResitTest</span></span>() &#123;</span><br><span class="line">    // 删除所有A元素</span><br><span class="line">    stringRedisTemplate.opsForList().remove(<span class="string">"myList"</span>, 0, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在Redis中操作Hash"><a href="#在Redis中操作Hash" class="headerlink" title="在Redis中操作Hash"></a>在Redis中操作Hash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">hashPutResitTest</span></span>() &#123;</span><br><span class="line">    // map的key值相同，后添加的覆盖原有的</span><br><span class="line">    stringRedisTemplate.opsForHash().put(<span class="string">"banks:12600000"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">hashGetEntiresResitTest</span></span>() &#123;</span><br><span class="line">    // 获取map对象</span><br><span class="line">    Map&lt;Object, Object&gt; map = stringRedisTemplate.opsForHash().entries(<span class="string">"banks:12600000"</span>);</span><br><span class="line">    logger.info(<span class="string">"objects:&#123;&#125;"</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">hashGeDeleteResitTest</span></span>() &#123;</span><br><span class="line">    // 根据map的key删除这个元素</span><br><span class="line">    stringRedisTemplate.opsForHash().delete(<span class="string">"banks:12600000"</span>, <span class="string">"c"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">hashGetKeysResitTest</span></span>() &#123;</span><br><span class="line">    // 获得map的key集合</span><br><span class="line">    Set&lt;Object&gt; objects = stringRedisTemplate.opsForHash().keys(<span class="string">"banks:12600000"</span>);</span><br><span class="line">    logger.info(<span class="string">"objects:&#123;&#125;"</span>, objects);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">hashGetValueListResitTest</span></span>() &#123;</span><br><span class="line">    // 获得map的value列表</span><br><span class="line">    List&lt;Object&gt; objects = stringRedisTemplate.opsForHash().values(<span class="string">"banks:12600000"</span>);</span><br><span class="line">    logger.info(<span class="string">"objects:&#123;&#125;"</span>, objects);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">hashSize</span></span>() &#123; // 获取map对象大小</span><br><span class="line">    long size = stringRedisTemplate.opsForHash().size(<span class="string">"banks:12600000"</span>);</span><br><span class="line">    logger.info(<span class="string">"size:&#123;&#125;"</span>, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在网上看到了关于MySQL的性能测试，读写操作大概就<strong>每秒1000以下</strong>的样子，而且这还和引擎相关，所以可以看出Redis确实能在性能方面帮助许多。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库 - Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高性能的HTTP服务器——Nginx</title>
    <link href="/2018/11/21/nginx/"/>
    <url>/2018/11/21/nginx/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/nginx.jpg" srcset="/img/loading.gif" alt="nginx"><br>Nginx是一款高性能HTTP服务器、反向代理服务器及电子邮件（IMAP、POP3）代理服务器，官方测试nginx能够支持5万并发连接。<br><strong>Nginx应用场景：</strong><br>1、http服务器。Nginx是一个http服务器，可以独立提供http服务。可以做网页静态服务器。<br>2、虚拟主机。可以实现在一台服务器虚拟出多个网站。<br>3、反向代理，负载均衡。当网站的并发量过大需要配置服务器集群时可以使用Nginx做反向代理。并且多台服务器可以平均分摊负载。</p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><h4 id="本文章默认使用的软件："><a href="#本文章默认使用的软件：" class="headerlink" title="本文章默认使用的软件："></a>本文章默认使用的软件：</h4><ul><li>CentOS 7</li><li>Nginx-1.12.2</li><li>JDK 8.0</li><li>Tomcat 8</li></ul><h4 id="开发工具："><a href="#开发工具：" class="headerlink" title="开发工具："></a>开发工具：</h4><ul><li>VMware fusion</li><li>SecureCRT</li></ul><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>1、安装gcc的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p>2、PCRE（perl库，包括perl兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>3、Zlib（zlib提供了很多压缩和解压的方式，nginx使用http包的内容进行gzip）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><p>4、OpenSSL（一个强大的安全套接字层密码库，为nginx支持的https(即在SSL协议上传输http)协议服务）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在本地电脑下载nginx的压缩包（我这里是nginx-1.12.2.tar.gz），然后打开SecureCRT连接服务器，使用命令gz将本地的文件上传到Linux服务器上。</p><blockquote><p>注：如果在SecureCRT上输入gz显示command not found，是因为Linux虚拟机上没有安装lrsz服务。<br>执行：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y indtall lrzsz</span><br></pre></td></tr></table></figure><p>然后可以输入rz命令选择要上传的文件。默认上传到当前路径上。</p><p><strong>1、解压</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure><p><strong>2、创建Makefile文件，执行命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd nginx-1.12.2</span></span><br><span class="line">[root@localhost nginx-1.12.2]<span class="comment"># ./configure</span></span><br></pre></td></tr></table></figure><p><img src="/images/nginx1.png" srcset="/img/loading.gif" alt="nginx"><br>完成后可以看到Makefile文件：<br><img src="/images/nginx2.png" srcset="/img/loading.gif" alt="nginx"><br><strong>拓展</strong><br>Makefile是一种配置文件，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译…。Makefile就像一个Shell脚本一样。</p><p><strong>3、编译</strong><br>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]<span class="comment"># make</span></span><br></pre></td></tr></table></figure><p><strong>4、安装</strong><br>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]<span class="comment"># make install</span></span><br></pre></td></tr></table></figure><p>到此，Nginx安装已经完成。</p><hr><h3 id="Nginx启动与访问"><a href="#Nginx启动与访问" class="headerlink" title="Nginx启动与访问"></a>Nginx启动与访问</h3><p>上面我本编译安装的Nginx其实默认被安装在CentOS7系统的/usr/local/nginx目录。<br><img src="/images/nginx3.png" srcset="/img/loading.gif" alt="nginx"></p><h4 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]<span class="comment"># cd sbin</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ./nginx</span></span><br></pre></td></tr></table></figure><p>此时已经启动成功Nginx，可以直接在浏览器上输入虚拟机IP（可通过ip addr命令查看），即可访问到Nginx欢迎界面，如果显示未连接，可以：<br>1、先使用本机的终端工具ping虚拟机IP地址看是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping ip</span><br></pre></td></tr></table></figure><p>如果ping成功，请看下一步，如果失败，请检查虚拟机是否联网。<br>2、关闭CentOS7的防火墙，开放80端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># systemctl stop firewalld.service #停止firewall</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># systemctl disable firewalld.service #禁止firewall开机启动</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span></span><br></pre></td></tr></table></figure><p>一般情况下就能访问到了：<br><img src="/images/nginx4.png" srcset="/img/loading.gif" alt="nginx"></p><h4 id="查看Nginx进程"><a href="#查看Nginx进程" class="headerlink" title="查看Nginx进程"></a>查看Nginx进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ps aux|grep nginx</span></span><br></pre></td></tr></table></figure><h4 id="关闭Nginx"><a href="#关闭Nginx" class="headerlink" title="关闭Nginx"></a>关闭Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -s stop</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -s quit</span></span><br></pre></td></tr></table></figure><h4 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -s reload</span></span><br></pre></td></tr></table></figure><h4 id="检查Nginx配置文件是否正确"><a href="#检查Nginx配置文件是否正确" class="headerlink" title="检查Nginx配置文件是否正确"></a>检查Nginx配置文件是否正确</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -t</span></span><br></pre></td></tr></table></figure><hr><h3 id="部署静态网站"><a href="#部署静态网站" class="headerlink" title="部署静态网站"></a>部署静态网站</h3><p>经过上面的操作，我们已经正常启动了Nginx，那么如何将我们的静态项目部署到服务器的Nginx上呢？<br>为了模拟操作，我这里只部署一个index.html网页为例：</p><p>1、<strong>上传静态网站</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回到根目录下</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># cd ../</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹`my`，视为我们的项目文件夹</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># mkdir my</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件夹`my`下创建一个`index.html`网页</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># cd my</span></span><br><span class="line">[root@localhost my]<span class="comment"># vi index.html</span></span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Hello Nginx!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、<strong>修改Nginx的配置文件</strong><br>修改/usr/local/nginx/conf/nginx.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost my]<span class="comment"># cd ../conf</span></span><br><span class="line">[root@localhost conf]<span class="comment"># vi nginx.conf</span></span><br></pre></td></tr></table></figure><p>在http {}这个节点下新创建一个server {}节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 81;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root my;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，我们已经将81端口绑定了/nginx文件夹下的名称为my的项目。重启Nginx，访问：192.168.148.132:81即可以访问到我们刚才新创建的网页：index.html。</p><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p><strong>域名</strong>是由一串用“.”分隔的字符逐层的Internet上某一台计算机或计算机组的名称，用于在数据传输时表示计算机的电子方位。域名是一个IP地址的“面具”。域名的目的是便于记忆和沟通的一组服务器的地址。域名按照<strong>域名系统DNS</strong>的规则流程组成，在DNS中注册的任何名称都是域名。域名用于各种网络环境和应用程序特定的命名和寻址目的。通常，域名表示互联网协议（IP）资源。<br>一个域名对应一个IP地址，一个IP地址可以被多个域名绑定。<br>为了模拟，我们可以在本地hosts文件中配置域名和IP映射关系，这样就不用走DNS服务器了。<br>因为hosts文件内容不能直接修改，需要把hosts文件拷贝出来然后修改后再替换进去就行了(我这里使用的MacOS系统)。</p><p>1、<strong>修改hosts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /private/etc/hosts ~/Desktop/</span><br><span class="line">vi ~/Desktop/hosts</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.148.132 www.loonycoder.com</span><br></pre></td></tr></table></figure><p>然后替换原来的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/Desktop/hosts /private/etc/</span><br></pre></td></tr></table></figure><p>2、<strong>修改Nginx配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># vi /usr/local/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure><p>为了模拟效果，我们可以先把之前新增的server {}节点81端口改为80端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root my;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># cd ../sbin</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -s stop</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ./nginx</span></span><br></pre></td></tr></table></figure><p>访问192.168.148.132发现还是Nginx的Welcome页面，因为nginx.conf默认配置的80端口就是指向Nginx欢迎页，且默认的server_name就是localhost。那么想实现不同的域名访问不同的资源且还必须是80端口，就需要绑定域名：<br>修改nginx.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.loonycoder.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root my;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，很简单，只需要把server_name改为我们要绑定的域名地址就好了，然后重启Nginx，在浏览器上访问<a href="http://www.loonycoder.com" target="_blank" rel="noopener">http://www.loonycoder.com</a>就展示我们之前创建的index.html，而输入192.168.148.132访问的还是Nginx的欢迎页，这就实现了域名的绑定。多个域名绑定同一个IP地址，但是不同的域名指向了不同的资源地址。</p><hr><h3 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h3><blockquote><p>什么是反向代理？<br>反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p></blockquote><blockquote><p>正向代理<br><img src="/images/nginx5.png" srcset="/img/loading.gif" alt="nginx"><br><strong>正向代理</strong>，主要针对客户端。当用户通过PC向Internet发送请求时，可以通过一个代理服务器来统一处理请求并转发给Internet，比如一个教室的所有学生机都需要通过老师的教师机才能实现联网，那么这个教师机就相当于一个代理服务器，负责将PC的网络请求转发给Internet，然后Internet将相应的数据再通过代理服务器转发给不同的PC。</p></blockquote><blockquote><p>反向代理<br><img src="/images/nginx6.png" srcset="/img/loading.gif" alt="nginx"><br><strong>反向代理</strong>的过程则刚好相反，主要针对服务器。当用户通过网络请求不同的资源，而这些资源被分布在不同的服务器上，那么不同的请求就应该指向对应不同的服务器，那么就需要一个中介：反向代理服务器。通过反向代理服务器将不同的资源请求信息发送给不同的服务器，然后服务器将不同的信心都返回给反向代理服务器，最后通过反向代理服务器将这些结果信息展示在Internet上。</p></blockquote><h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><p>这里我们以一个非常实用的案例来演示如何配置Nginx的反向代理实现不同的域名访问不同的页面。<br>1、在服务器上安装JDK8和Tomcat8<br>通过rz命令将本地的JDK和Tomcat安装包上传到服务器。因为Tomcat解压即可用，我们这里记录一下如何安装JDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar zxvf jdk-8u191-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置JDK环境</span></span><br><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在profile文件的结尾处添加如下环境配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/jdk1.8.0_191    </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>:wq!保存并退出，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure><p>更新配置。然后输入java -version显示则说明JDK配置成功。<br>解压Tomcat，在其bin目录下执行命令./startup.sh启动Tomcat服务器，然后我们再浏览器上访问：<a href="http://192.168.148.132:8080/" target="_blank" rel="noopener">http://192.168.148.132:8080/</a>显示Tomcat的欢迎页面则配置成功。</p><p>2、拷贝项目到Tomcat服务器下<br>为了模拟，我们在tomcat/webapps/ROOT/下创建一个index.html网页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ROOT]<span class="comment"># vi index.html</span></span><br></pre></td></tr></table></figure><p>并写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello Tomcat!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>保存并退出，再次访问<a href="http://192.168.148.132:8080/" target="_blank" rel="noopener">http://192.168.148.132:8080/</a>发现展示的即是我们刚创建的页面<br><img src="/images/nginx7.png" srcset="/img/loading.gif" alt="nginx"></p><p>3、配置反向代理<br>之前讲了<strong>反向代理</strong>的概念，那么很实用的一个例子就是，当我们想在购买的阿里云服务器上部署两个项目，一个项目是用Nginx部署的静态网站（占用80端口），另一个项目部署在Tomcat服务器上（占用8080端口）。<br>这时，我们固然是可以通过：ip:8080来访问我们的Web项目的，但是请求路径上显示了端口好久显得很别扭，为此，我们通过Nginx的反向代理就能解决：</p><ul><li><p>3.1在本地配置一个二级域名映射<br>修改本机的hosts文件，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.148.132 site.loonycoder.com</span><br></pre></td></tr></table></figure><p>这时我们访问&lt;site.loonycoder.com&gt;默认进入nginx的欢迎页，这是正确的。<br>注意：此时的&lt;site.loonycoder.com&gt;是&lt;loonycoder.com&gt;的一个二级子域名。</p></li><li><p>3.2 修改服务器Nginx的配置文件，添加如下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream site &#123;</span><br><span class="line">        server 192.168.148.132:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name site.loonycoder.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://site;</span><br><span class="line">            index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，其中server {}节点下的proxy_pass表示反向代理的地址，其中<a href="http://site这个site其实是指向上面upstream" target="_blank" rel="noopener">http://site这个site其实是指向上面upstream</a> site {}节点的site名称，因此要保持两者名称一致。但实际上我们不采用这种方式也能实现反向代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># upstream site &#123;</span></span><br><span class="line"><span class="comment">#         server 192.168.148.132:8080;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name site.loonycoder.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment"># proxy_pass http://site;</span></span><br><span class="line">            proxy_pass http://192.168.148.132:8080;</span><br><span class="line">            index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>两者的区别就是第一种方式通过指向的方式可以配置更多，必须实现<strong>负载均衡</strong>就需要在upstream site {}节点下配置。</p><hr><h3 id="Nginx配置负载均衡"><a href="#Nginx配置负载均衡" class="headerlink" title="Nginx配置负载均衡"></a>Nginx配置负载均衡</h3><blockquote><p>什么是负载均衡？<br><strong>负载均衡（Load Balance）</strong>，其意思就是分摊到多个操作单元上进行执行，从而共同完成工作任务。<br><strong>负载均衡</strong> 是建立在现有网络结构上，提供一种廉价有效透明的方法扩展网络设备和服务器的带宽，增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。<br>1.<strong>模拟负载均衡</strong>，我们可以提供多个Tomcat服务器，采用不同的端口区分。<br>为了模拟<strong>负载均衡</strong>效果，可以copy 2份虚拟机上的Tomcat服务器，命名为tomcat-2，tomcat-3:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cp ~/apache-tomcat-8.5.33 ~/tomcat-2</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp ~/apache-tomcat-8.5.33 ~/tomcat-3</span></span><br></pre></td></tr></table></figure><p>修改端口号分别为8180，8280。我们主要修改/tomcat/conf/server.xml配置文件中的&lt;Server port=”8005”和&lt;Connector port=”8080”这两个节点的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改tomcat-2服务器的`/conf/server.xml`参数</span></span><br><span class="line">&lt;Server port=<span class="string">"8006"</span> shutdown=<span class="string">"SHUTDOWN"</span>&gt;</span><br><span class="line">        &lt;Connector port=<span class="string">"8180"</span> protocol=<span class="string">"HTTP/1.1"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改tomcat-3服务器的`/conf/server.xml`参数</span></span><br><span class="line">&lt;Server port=<span class="string">"8007"</span> shutdown=<span class="string">"SHUTDOWN"</span>&gt;</span><br><span class="line">        &lt;Connector port=<span class="string">"8280"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br></pre></td></tr></table></figure><p>如上，我们在虚拟机上配置了三个Tomcat服务器，分别使用8080，8180，8280端口。</p><p>2.<strong>配置负载均衡</strong><br>修改Nginx下的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi /usr/local/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure><p>修改之前配置的upstream site {}节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream site &#123;</span><br><span class="line">     server 192.168.148.132:8080;</span><br><span class="line">     server 192.168.148.132:8180;</span><br><span class="line">     server 192.168.148.132:8280;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name site.loonycoder.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://site;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就给Nginx配置了3台服务器，都指向了site.loonycoder.com这个域名地址，那么访问这个地址时同时会访问这三台服务器，也就是三台服务器平均分摊访问压力。<br>为了更好的实现效果，我们可以依次修改tomcat-2和tomcat-3服务器的/webapps/ROOT/index.html网页显示数据，更容易区分每次访问的是哪台服务器。<br>然后运行这三个Tomcat服务器，在浏览器上访问：site.loonycoder.com，多次刷新页面，每次访问的都是不同的页面，且依次是配置负载均衡的三台服务器次序。<br>如果你想让某个服务器承担更大的压力，可以为其设置权重：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream site &#123;</span><br><span class="line">     server 192.168.148.132:8080;</span><br><span class="line">     server 192.168.148.132:8180 weight=2;</span><br><span class="line">     server 192.168.148.132:8280;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器化部署神器——Docker</title>
    <link href="/2018/11/14/docker/"/>
    <url>/2018/11/14/docker/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/docker1.jpg" srcset="/img/loading.gif" alt="docker"><br><strong>Docker</strong>是一种容器技术，它的存在就是为了解决容器技术本身的复杂性。Docker容器拥有很高的性能，同时同一台宿主机中可以运行更多的容器，是用户尽可能的充分利用系统资源。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>1.什么是虚拟化？<br>在计算机中，虚拟化（Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及储存等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，是用户可以比原来的组态更好的方式来应用这些资源。这些资源的新虚拟部分是不受现有资源的架设方式、地域或物理组态所限制。</p></blockquote><ul><li>全虚拟化架构<br>虚拟机的监视器（hypervisor）是类似于用户的应用程序运行在主机的OS之上，如VMware的workstation，这种虚拟化产品提供了虚拟的硬件。</li></ul><blockquote><p>2.容器技术<br>容器和管理程序虚拟化（hypervisor virtualization, HV）不同，管理程序虚拟化通过中间层将一台或多台独立的机器虚拟运行在物理硬件之上，而<strong>容器</strong>是直接运行在操作系统内核之上的用户空间。因此，容器虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。</p></blockquote><p><strong>限制</strong><br>1、由于“客居”与操作系统，容器只能运行与底层主机相同或相似的操作系统，比如在Ubuntu服务中运行CentOS，但无法运行Windows。<br>2、相对于彻底隔离的管理程序虚拟化，容器被认为是不安全的。<br>最新的容器技术引入了OpenVZ、Solaris Zones以及Linux容器（LXC）。使用这些新技术，容器不再仅仅是一个单纯的运行环境。在自己的权限类内，容器更像一个完整宿主机。和传统虚拟化及半虚拟化想比，容器不需要模拟层（emulation layer）和管理层（hypervisor layer），而使用操作系统的系统调用接口。</p><h4 id="Docker特点"><a href="#Docker特点" class="headerlink" title="Docker特点"></a>Docker特点</h4><p>1、上手快<br>2、用户可以很容易的把自己的程序Docker化。Docker依赖于“写时复制”（copy-on-write）模型，开箱即用。<br>快速高效的开发声明周期</p><h4 id="Docker组件"><a href="#Docker组件" class="headerlink" title="Docker组件"></a>Docker组件</h4><h5 id="Docker客户端和服务器"><a href="#Docker客户端和服务器" class="headerlink" title="Docker客户端和服务器"></a>Docker客户端和服务器</h5><p>Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或守护进程发出请求，服务器或守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。<br><img src="/images/docker2.png" srcset="/img/loading.gif" alt="docker"></p><h5 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h5><p><strong>镜像</strong> 是构建Docker的基石。用户及基于镜像来运行自己的容器。镜像也是Docker声明周期中的“构建”部分。奖项是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。</p><h5 id="Registry-注册中心"><a href="#Registry-注册中心" class="headerlink" title="Registry 注册中心"></a>Registry 注册中心</h5><p>Docker用Registry来保存用户构建的镜像。Registry分为共有和私有两种。Docker公司运营公共的Registry叫做Docker Hub。</p><h5 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h5><p>Docker可以帮助你构建和部署容器，你只需要把你的程序打包放进容器即可。容器是基于镜像启动的，容器找那个可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中构建和打包阶段，而容器则是启动或执行阶段。容器基于镜像启动。<br><img src="/images/docker3.png" srcset="/img/loading.gif" alt="docker"></p><h4 id="Docker的安装与启动"><a href="#Docker的安装与启动" class="headerlink" title="Docker的安装与启动"></a>Docker的安装与启动</h4><p>前提：本例中使用了CentOS7作为服务器<br>通过以下命令在线在CentOS7中安装Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><p><img src="/images/docker4.png" srcset="/img/loading.gif" alt="docker"></p><p><strong>查看Docker版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker -v</span></span><br><span class="line">Docker version 1.13.1, build 8633870/1.13.1</span><br></pre></td></tr></table></figure><h4 id="启动与停止Docker"><a href="#启动与停止Docker" class="headerlink" title="启动与停止Docker"></a>启动与停止Docker</h4><p>systemctl命令是系统服务管理器指令，它是service和chkconfig两个命令组合。</p><p>1.启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>2.停止Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>3.重启Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>4.查看Docker状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>5.开机启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>6.查看Docker概要信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>7.查看Docker帮助文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h4 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h4><p>Docker镜像由文件系统堆叠而成（是一种文件的储存形式）。最低端是一个文件引导系统，即bootfs。实际上，当一个容器启动后，它将会被移动到内存中，而引导文件系统则会被卸载，以留出更多的内存供磁盘镜像使用。Docker容器启动是需要一些文件的，而这些文件就可以被称为Docker镜像。<br><img src="/images/docker5.png" srcset="/img/loading.gif" alt="docker"></p><p>1、列出镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br></pre></td></tr></table></figure><p><img src="/images/docker6.png" srcset="/img/loading.gif" alt="docker"></p><ul><li>REPOSITORY: 镜像所在的仓库名称</li><li>TAG： 镜像标签</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像的创建日期（不是获取该镜像的日期）</li><li>SIZE：镜像大小</li></ul><p>这些镜像都储存在Docker宿主机的/var/lib/docker目录下。</p><p>2、搜索镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker search 镜像名称</span></span><br></pre></td></tr></table></figure><p><img src="/images/docker7.png" srcset="/img/loading.gif" alt="docker"></p><p>3、从Docker Hub拉取镜像<br>去Docker Hub官网查找所需的Docker镜像：<a href="https://hub.docker.com/explore/" target="_blank" rel="noopener">https://hub.docker.com/explore/</a> ，然后通过以下命令在线pull：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker pull 镜像名称</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull 镜像名称:版本</span></span><br></pre></td></tr></table></figure><p>因为官方提供的Docker镜像加速服务很慢，我们可以配置ustc的镜像。输入以下命令配置ustc镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi /etc/docker/daemon.json</span></span><br></pre></td></tr></table></figure><p>没有就创建，向其中写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Docker服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>4、删除镜像<br>删除指定镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker rmi $IMAGE_ID  #这个$IMAGE_ID数值可以根据`docker images`命令查看</span></span><br></pre></td></tr></table></figure><p>删除所有镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker rmi `docker images -q`</span></span><br></pre></td></tr></table></figure><h4 id="Docker容器操作"><a href="#Docker容器操作" class="headerlink" title="Docker容器操作"></a>Docker容器操作</h4><p>1.查看正在运行的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br></pre></td></tr></table></figure><p>2.查看所有的容器（启动过的历史容器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps -a</span></span><br></pre></td></tr></table></figure><p>3.查看最后一次运行的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps -|</span></span><br></pre></td></tr></table></figure><p>4.查看停止的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps -f status=exited</span></span><br></pre></td></tr></table></figure><p>5.删除容器<br>删除指定容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker rm $CONTAINER_ID/NAME</span></span><br></pre></td></tr></table></figure><p>删除所有容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker rm `docker ps -a -q`</span></span><br></pre></td></tr></table></figure><h4 id="创建和启动容器"><a href="#创建和启动容器" class="headerlink" title="创建和启动容器"></a>创建和启动容器</h4><p><strong>创建容器常用的参数说明</strong><br>1.创建容器命令：docker run<br>2.-i: 表示运行容器<br>3.-t: 表示容器启动后会进入其命令行，加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。<br>4.—name: 为创建的容器命名<br>5.-v: 表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上修改，然后共享到容器上。<br>6.-d: 在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。<br>7.-p： 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。</p><h5 id="交互式容器"><a href="#交互式容器" class="headerlink" title="交互式容器"></a>交互式容器</h5><p>创建一个交互式容器并取名为mycentos5:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@localhost ~]<span class="comment"># docker run -it --name=mycentos5 centos:7 /bin/bash</span></span><br><span class="line">[root@53f33e279914 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>此时我们可以新建一个连接，通过docker ps命令看到刚才创建的容器正在启动中：<br><img src="/images/docker8.png" srcset="/img/loading.gif" alt="docker"><br>通过exit命令可以退出当前容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@53f33e279914 /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>此时再通过docker ps命令查看刚才启动的容器也停止了。</p><h5 id="守护式容器"><a href="#守护式容器" class="headerlink" title="守护式容器"></a>守护式容器</h5><p>输入以下命令创建一个名字为mycentos6的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -di --name=mycentos6 centos:7</span></span><br></pre></td></tr></table></figure><p>创建后这个容器会在后台运行，而不是直接进入到这个容器中。可以通过docker ps命令查看。<br>登录守护式容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker exec -it mycentos6 /bin/bash</span></span><br></pre></td></tr></table></figure><p>可以通过exit命令退出，但是容器不会停止。</p><h5 id="停止和启动容器"><a href="#停止和启动容器" class="headerlink" title="停止和启动容器"></a>停止和启动容器</h5><p>停止正在运行的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker stop 容器名称</span></span><br></pre></td></tr></table></figure><p>启动已运行过的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker start 容器名称</span></span><br></pre></td></tr></table></figure><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><h5 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h5><p>将文件拷贝到容器内可以用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker cp 需要拷贝的文件或目录 容器名称:容器目录</span></span><br></pre></td></tr></table></figure><p>将文件从容器中拷贝出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker cp 容器名称:容器目录 需要拷贝的文件或目录</span></span><br></pre></td></tr></table></figure><h5 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h5><p>在创建容器的时候，将宿主机的目录和容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而影响容器。格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -di -v 宿主机目录:容器目录</span></span><br></pre></td></tr></table></figure><h5 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker inspect mycentos5</span></span><br></pre></td></tr></table></figure><p><strong>部署应用</strong></p><h4 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h4><p>1.拉取MySQL镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker pull mysql:5.7</span></span><br></pre></td></tr></table></figure><p>2.创建MySQL容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -di --name docker_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span></span><br></pre></td></tr></table></figure><p>如上我们创建一个名称为docker_mysql的MySQL5.7版本的守护式容器，且配置MySQL登录密码是root。</p><ul><li>-p 代表端口映射，格式为 宿主机映射端口:容器运行端口</li><li>-e 代表添加环境变量， MYSQL_ROOT_PASSWORD是root用户的登录密码</li></ul><p>3.进入MySQL容器，登录MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker exec -it docker_mysql /bin/bash</span></span><br></pre></td></tr></table></figure><p>登录MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>4.远程连接MySQL<br><img src="/images/docker9.png" srcset="/img/loading.gif" alt="docker"></p><h4 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h4><p>1.拉取Tomcat-8 &amp;&amp; JDK-8 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker pull tomcat:8-jre8</span></span><br></pre></td></tr></table></figure><p>2.部署Web应用<br>为了更好的演示Docker部署Tomcat的使用方式，我们可以先将需要部署的web项目发送到服务器的某个路径下，我这里在/root/目录下创建了/root/site/目录作为项目的根目录，在其中创建index.html文件并写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello Docker-Tomcat!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3.创建Tomcat容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -di --name=docker_tomcat -p 9000:8080 -v /root/site/:/usr/local/tomcat/webapps/ROOT --privileged=true tomcat:8-jre8</span></span><br></pre></td></tr></table></figure><p>以上就创建一个Tomcat容器，其容器名称Wiedocker_tomcat，-di表示是一个守护式容器；-p 9000:8080表示此容器端口映射为9000-&gt;8080，即对外的端口是9000，映射到容器里Tomcat服务器的端口8080，–privileged是以root权限运行。<br><img src="/images/docker10.png" srcset="/img/loading.gif" alt="docker"><br>通过命令看到，当我们启动了容器，其中的Tomcat服务器也自动启动了。当然对于部署Nginx或MySQL的Docker容器，当启动容器时都会启动对应的服务。<br><strong>注意</strong><br>上面我们指定了宿主机的/root/site/目录映射到docker_tomcat容器的/usr/local/tomcat/webapps/ROOT目录，为什么是这个目录呢？<br>Docker虚拟化，它会在内部虚拟一个操作系统，是在其宿主机内核上的一层空间，所有有一定的目录结构，我们可以通过docker exec -it docker_tomcat /bin/bash命令进入到docker_tomcat容器内部，通过ls命令查看目录会发现其Tomcat服务器确实安装在docker_tomcat容器的/usr/local/tomcat目录下。<br>最后，我们在浏览器上访问：<a href="http://192.168.148.132:9000/" target="_blank" rel="noopener">http://192.168.148.132:9000/</a>，即发现页面展示了我们刚才在/root/site/目录下创建的index.html网页：<br><img src="/images/docker11.png" srcset="/img/loading.gif" alt="docker"><br>所以，如果你想要修改容器中Tomcat的端口号，直接进入容器的/usr/local/tomcat/conf/server.xml自改即可。</p><h4 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h4><p>1.拉取Nginx镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>2.创建Nginx容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=docker_nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>测试<br><img src="/images/docker12.png" srcset="/img/loading.gif" alt="docker"><br>在浏览器上访问：<a href="http://192.168.148.132/" target="_blank" rel="noopener">http://192.168.148.132/</a>可以进入到Nginx的欢迎页。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>以上我们介绍了MySQL、Tomcat、Nginx容器的创建，对于其他的服务，如Redis等操作基本相同，不再阐述。</p><h4 id="备份与迁移"><a href="#备份与迁移" class="headerlink" title="备份与迁移"></a>备份与迁移</h4><p>1.容器保存为镜像<br>可以通过以下命令将我们已创建（配置好的）容器打包为镜像，这样我们以后就能用该镜像再次创建新的容器了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit docker_tomcat my_tomcat</span><br></pre></td></tr></table></figure><p>docker_tomcat是容器名称；my_tomcat是新的镜像名称。<br>2.镜像备份<br>通过以下命令可以将镜像打包为tar文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o my_tomcat.tar my_tomcat</span><br></pre></td></tr></table></figure><p>-o输出到的文件<br>3.镜像恢复与备份<br>当我们删除了docker_tomcat镜像后，可以通过以下命令将刚才打包备份的.tar镜像文件恢复成一个Docker镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i my_tomcat.tar</span><br></pre></td></tr></table></figure><p>-i输入的文件。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DevOps - 服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架——深入理解AOP实现原理</title>
    <link href="/2018/11/07/Spring-3/"/>
    <url>/2018/11/07/Spring-3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>阅读这篇文章前，最好有代理模式的基础，以及了解关于Spring扩展点例如BeanPostProcessor和如何使用自定义标签集成Spring，这些文章在我的博客里都能找到。当然，也最好有使用AOP的经验，这篇文章不会讲解如何使用AOP。</p></blockquote><p><img src="/images/spring_logo.jpg" srcset="/img/loading.gif" alt="Spring"></p><h3 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h3><p>说到AOP，其实这是一个<strong>面向方面的编程思想</strong> ，它解决了OOP的一些弊端，例如我们需要为<strong>多个不具有继承关系的类引入一个公共行为</strong>， 比如说日志、权限验证、事务管理等等，我们需要将这些代码<strong>重复的添加</strong>到一系列的类中，将<strong>产生大量的重复代码</strong>，如果需要修改，将在每个类中去进行修改，<strong>不便于维护</strong>，代码的<strong>侵入性极高</strong>。所以就有了AOP这样面向方面编程的编程思想，其功能可以为每个需要的类<strong>加入共同的行为</strong>，如果需要修改，只需要修改切面中的代码，改一处等于改多处，并且便于编程，写一个切面类即可达到在每个类中加入重复代码的目的。</p><p>阅读此篇文章，你将了解Spring是<strong>如何实现AOP</strong>（前置通知、后置通知、环绕通知），由于Spring中的事务管理是基于AOP的功能来做的，所以你将更好的能理解Spring是如何将事务统一管理起来的。</p><hr><h3 id="自定义标签开启AOP"><a href="#自定义标签开启AOP" class="headerlink" title="自定义标签开启AOP"></a>自定义标签开启AOP</h3><p>只要用过AOP都知道，如果需要使用AOP，需要在配置文件中写这样一段配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy /&gt;</span><br></pre></td></tr></table></figure><p>只有写了这段配置才可以开启AOP功能，那么这个自定义标签又做了什么呢？在上一篇讲解自定义标签的文章中详细讲到了，此时我们需要关注其标签头aop去寻找对应的命名空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br></pre></td></tr></table></figure><p>全局搜索命名空间<code>&lt;http\://<a href="http://www.springframework.org/schema/aop" target="_blank" rel="noopener">www.springframework.org/schema/aop</a>&gt;</code>，注意http后加一个“\” ，可以找到<strong>spring.handlers</strong>文件中对应的handler类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler</span><br></pre></td></tr></table></figure><p>这样就找到了命名空间对应的handler：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class AopNamespaceHandler extends NamespaceHandlerSupport &#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * Register the &#123;@link BeanDefinitionParser BeanDefinitionParsers&#125; <span class="keyword">for</span> the</span><br><span class="line">   * <span class="string">'&#123;@code config&#125;'</span>, <span class="string">'&#123;@code spring-configured&#125;'</span>, <span class="string">'&#123;@code aspectj-autoproxy&#125;'</span></span><br><span class="line">   * and <span class="string">'&#123;@code scoped-proxy&#125;'</span> tags.</span><br><span class="line">   */</span><br><span class="line">  @Override</span><br><span class="line">  public void <span class="function"><span class="title">init</span></span>() &#123;</span><br><span class="line">    // In 2.0 XSD as well as <span class="keyword">in</span> 2.1 XSD.</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"config"</span>, new ConfigBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"aspectj-autoproxy"</span>, new AspectJAutoProxyBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionDecorator(<span class="string">"scoped-proxy"</span>, new ScopedProxyBeanDefinitionDecorator());</span><br><span class="line"></span><br><span class="line">    // Only <span class="keyword">in</span> 2.0 XSD: moved to context namespace as of 2.1</span><br><span class="line">    registerBeanDefinitionParser(<span class="string">"spring-configured"</span>, new SpringConfiguredBeanDefinitionParser());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到开头配置自定义标签，我们使用了<code>aspectj-autoproxy</code>这个Parser。在init方法中，我们找到<code>aspectj-autoproxy</code>对应的Parser是<code>AspectJAutoProxyBeanDefinitionParser</code>这个类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">//我们只关注解析的主方法，parse方法</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册一个类到IOC容器中</span><br><span class="line">    AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line">    extendBeanDefinition(element, parserContext);</span><br><span class="line">    <span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注册AnnotationAwareAspectJAutoProxyCreator"><a href="#注册AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="注册AnnotationAwareAspectJAutoProxyCreator"></a>注册AnnotationAwareAspectJAutoProxyCreator</h3><p><code>AnnotationAwareAspectJAutoProxyCreator</code>是实现AOP功能的主要类，我们先来看看这个类的结构：<br><img src="/images/spring-aop1.png" srcset="/img/loading.gif" alt="spring"><br>此类实现了<code>BeanPostProcessor</code>，稍后将关注其后置处理Bean的方法<strong>postProcessAfterInitialization</strong>，并且实现了<code>BeanFactorAware</code>接口，此类将取得并存有一个<code>BeanFactory</code>实例对象。<br>回到主线，关注注册此类的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAspectJAnnotationAutoProxyCreatorIfNecessary(</span><br><span class="line">    ParserContext parserContext, Element sourceElement) &#123;</span><br><span class="line">//将一个类作为Bean注册到IOC容器中</span><br><span class="line">    BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(</span><br><span class="line">        parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">    //处理proxy-target-class与expose-proxy属性</span><br><span class="line">    useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">    //注册组件并通知</span><br><span class="line">    registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，在注册这个类的过程中主要完成了3件事：</p><ol><li>注册<code>AnnotationAwareAspectJAutoProxyCreator：</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry,</span><br><span class="line">                                                                                  @Nullable Object <span class="built_in">source</span>) &#123;</span><br><span class="line">//将AnnotationAwareAspectJAutoProxyCreator这个类注册到IOC容器中</span><br><span class="line">    <span class="built_in">return</span> registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, <span class="built_in">source</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private static BeanDefinition registerOrEscalateApcAsRequired(Class&lt;?&gt; cls, BeanDefinitionRegistry registry,</span><br><span class="line">                                                              @Nullable Object <span class="built_in">source</span>) &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line"></span><br><span class="line">    //如果IOC容器中已经存在了此类型的Bean，则需要判断优先级</span><br><span class="line">    <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">        //获取此类的BeanDefinition信息</span><br><span class="line">        BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">        //如果此Bean的ClassName与AnnotationAwareAspectJAutoProxyCreator类的</span><br><span class="line">        //ClassName不同的话，判断优先级</span><br><span class="line">        <span class="keyword">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">            int currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">            int requiredPriority = findPriorityForClass(cls);</span><br><span class="line">            //如果已存在Bean优先级小于Creator的优先级</span><br><span class="line">            <span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">                //将ClassName替换成Creator</span><br><span class="line">                apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //不进行注册，因为已经注册了</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //如果到这里，说明IOC容器中没有配置对应Creator</span><br><span class="line">    //使用Crearir的Class构造一个BeanDefinition</span><br><span class="line">    RootBeanDefinition beanDefinition = new RootBeanDefinition(cls);</span><br><span class="line">    beanDefinition.setSource(<span class="built_in">source</span>);</span><br><span class="line">    //配置依赖属性order，将其设置为最高优先级</span><br><span class="line">    beanDefinition.getPropertyValues().add(<span class="string">"order"</span>, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    //将设置好属性的BeanDefinition注册进IOC容器中</span><br><span class="line">    registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">    <span class="built_in">return</span> beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>处理<strong>proxy-target-class</strong>与<strong>expose-proxy</strong>属性<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private static void useClassProxyingIfNecessary(BeanDefinitionRegistry registry, @Nullable Element sourceElement) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sourceElement != null) &#123;</span><br><span class="line">        boolean proxyTargetClass = Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));</span><br><span class="line">        //处理proxy-target-class属性</span><br><span class="line">        <span class="keyword">if</span> (proxyTargetClass) &#123;</span><br><span class="line">            AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean exposeProxy = Boolean.valueOf(sourceElement.getAttribute(EXPOSE_PROXY_ATTRIBUTE));</span><br><span class="line">        //处理expose-proxy属性</span><br><span class="line">        <span class="keyword">if</span> (exposeProxy) &#123;</span><br><span class="line">            AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中设置属性的过程：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void forceAutoProxyCreatorToUseClassProxying(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">        //根据之前注册的BeanName取出Creator</span><br><span class="line">        BeanDefinition definition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">        //将Creator的BeanDefinition的属性proxyTargetClass设置为<span class="literal">true</span></span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"proxyTargetClass"</span>, Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void forceAutoProxyCreatorToExposeProxy(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">        //根据之前注册的BeanName取出Creator</span><br><span class="line">        BeanDefinition definition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">        //将Creator的BeanDefinition的属性exposeProxy设置为<span class="literal">true</span></span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"exposeProxy"</span>, Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>proxy-target-class</strong>：在Spring的AOP中，默认的如果目标类实现了至少一个接口，将使用<strong>JDK动态代理</strong>实现AOP，否则使用<strong>CGLib动态代理</strong>实现AOP，如果希望AOP都使用CGLib实现，你就可以设置proxy-target-class属性为<strong>true</strong>，但要注意几个问题：</li></ul><p>1)<strong>无法对final的方法进行动态代理</strong>，原因很简单，CGLib使用继承实现，final方法无法重写，所以final的方法不能应用AOP。<br>2)需要配置CGLib的JAR包</p><ul><li><strong>expose-proxy</strong>：在讲解事务的那篇文章中有提到，如果一个类中的事务A方法调用了同一个类中的事务B方法，<strong>B方法将没有事务</strong>，这个道理在AOP中也是这样的，相同类下的不同方法互相调用，内部方法将无法被应用通知（无法进行AOP），此时你需要将<strong>expose-proxy属性设置为true</strong>，暴露一个代理类（此属性的原理在下面会有详细讲解），然后在A方法中需要调用B方法的话需要这样写：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Service&#123;</span><br><span class="line">    public void <span class="function"><span class="title">A</span></span>()&#123;</span><br><span class="line">        ((Service)AopContext.currentProxy()).B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">B</span></span>()&#123;</span><br><span class="line">    //<span class="keyword">do</span> something...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这样，B方法就算再A方法内也可以被AOP。其中<code>AopContext</code>是存放线程变量的类，形象的称之为<strong>AOP的上下文</strong>。</li></ul><hr><h3 id="实现AOP代理"><a href="#实现AOP代理" class="headerlink" title="实现AOP代理"></a>实现AOP代理</h3><h4 id="创建AOP代理"><a href="#创建AOP代理" class="headerlink" title="创建AOP代理"></a>创建AOP代理</h4><p>上面，自定义标签的配置完成了对<strong>Creator类的自动注册</strong>，我们可以知道，此类实现了<code>BeanPostProcessor</code>接口，将会在IOC容器初始化每个Bean时都调用此类的<strong>postProcessAfterInitialization</strong>方法，此方法即为AOP代理的入口，此方法在抽象父类<code>AbstractAutoProxyCreator</code>实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    <span class="keyword">if</span> (bean != null) &#123;</span><br><span class="line">        //先从缓存中获取Key，由要代理的Bean的Class与benaName组成</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        //判断是否是过早暴露的Bean，此概念在讲IOC解决循环依赖中有提到</span><br><span class="line">        //如果是过早暴露的Bean，则此时连依赖注入都没有完成，则不对其进行代理</span><br><span class="line">        //待其真正初始化之后再尝试代理</span><br><span class="line">        <span class="keyword">if</span> (!this.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">            //如果符合条件进行AOP代理</span><br><span class="line">            <span class="built_in">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">    //如果先前已经处理过的，不进行处理</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        <span class="built_in">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果此Bean已经被标记为无法代理，不进行处理</span><br><span class="line">    <span class="keyword">if</span> (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        <span class="built_in">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果Bean为AOP类的类型，或是需要跳过的类型，不进行处理</span><br><span class="line">    <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        //标记为不代理</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        <span class="built_in">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create proxy <span class="keyword">if</span> we have advice.</span><br><span class="line">    //寻找符合此Bean的增强方法（通知方法）</span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span><br><span class="line">    //如果寻找到的增强方法列表不为空，也就是不为DO_NOT_PROXY</span><br><span class="line">    <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        //标记为已代理</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        //根据找到的增强方法，对此Bean进行动态代理</span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">            bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">        this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        //将代理对象作为Bean返回给IOC容器</span><br><span class="line">        <span class="built_in">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">  //如果走到这里，说明代理失败，标记为代理失败</span><br><span class="line">    this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    <span class="built_in">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文章到了这里，就已经基本完成AOP的实现了，剩下我们需要关注的就是两件事：</p><ul><li>如何寻找符合Bean的增强器</li><li>如何对Bean创建动态代理</li></ul><h4 id="寻找所有的增强器"><a href="#寻找所有的增强器" class="headerlink" title="寻找所有的增强器"></a>寻找所有的增强器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">protected Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, @Nullable TargetSource targetSource) &#123;</span><br><span class="line">    //寻找适合的Advisor</span><br><span class="line">    List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">    <span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">return</span> DO_NOT_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个<code>Advisor</code>的概念，其中Advisor<strong>封装了切点信息与advise通知方法等等信息。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findEligibleAdvisors(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">    //寻找所有适用的Advisor</span><br><span class="line">    List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">    //从所有Advisor中选出适合被当前Bean使用的Advisor</span><br><span class="line">    List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">    extendAdvisors(eligibleAdvisors);</span><br><span class="line">    <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">        eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="寻找已存在的Advisor"><a href="#寻找已存在的Advisor" class="headerlink" title="寻找已存在的Advisor"></a>寻找已存在的Advisor</h5><p>首先，执行下面的方法寻找合适的<code>Advisor</code>（此方法在子类<code>Creator</code>中得到实现）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected List&lt;Advisor&gt; <span class="function"><span class="title">findCandidateAdvisors</span></span>() &#123;</span><br><span class="line">    // Add all the Spring advisors found according to superclass rules.</span><br><span class="line">    //首先调用父类findCandidateAdvisors的方法寻找在IOC容器中的Advisor类型的Bean</span><br><span class="line">    List&lt;Advisor&gt; advisors = super.findCandidateAdvisors();</span><br><span class="line">    // Build Advisors <span class="keyword">for</span> all AspectJ aspects <span class="keyword">in</span> the bean factory.</span><br><span class="line">    <span class="keyword">if</span> (this.aspectJAdvisorsBuilder != null) &#123;</span><br><span class="line">        //寻找注解的Advisor</span><br><span class="line">        advisors.addAll(this.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先调用父类的<strong>findCandidateAdvisors</strong>方法寻找所有的<code>Advisor</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; <span class="function"><span class="title">findCandidateAdvisors</span></span>() &#123;</span><br><span class="line">    Assert.state(this.advisorRetrievalHelper != null, <span class="string">"No BeanFactoryAdvisorRetrievalHelper available"</span>);</span><br><span class="line">    //委派Helper类去寻找</span><br><span class="line">    <span class="built_in">return</span> this.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Advisor&gt; <span class="function"><span class="title">findAdvisorBeans</span></span>() &#123;</span><br><span class="line">    // Determine list of advisor bean names, <span class="keyword">if</span> not cached already.</span><br><span class="line">    String[] advisorNames = null;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        //先从缓存中取</span><br><span class="line">        advisorNames = this.cachedAdvisorBeanNames;</span><br><span class="line">        //缓存中若没有再去IOC容器中取</span><br><span class="line">        <span class="keyword">if</span> (advisorNames == null) &#123;</span><br><span class="line">            // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">            // uninitialized to <span class="built_in">let</span> the auto-proxy creator apply to them!</span><br><span class="line">            //从IOC容器中寻找所有Advisor类型的BeanName</span><br><span class="line">            advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">                this.beanFactory, Advisor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">            //放入缓存</span><br><span class="line">            this.cachedAdvisorBeanNames = advisorNames;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //没有找到，返回空</span><br><span class="line">    <span class="keyword">if</span> (advisorNames.length == 0) &#123;</span><br><span class="line">        <span class="built_in">return</span> new LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Advisor&gt; advisors = new LinkedList&lt;&gt;();</span><br><span class="line">    //遍历上面得到的所有BeanName</span><br><span class="line">    <span class="keyword">for</span> (String name : advisorNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEligibleBean(name)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.beanFactory.isCurrentlyInCreation(name)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Skipping currently created advisor '"</span> + name + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //根据BeanName从IOC获取Bean实例并存入List中</span><br><span class="line">                    advisors.add(this.beanFactory.getBean(name, Advisor.class));</span><br><span class="line">                &#125;</span><br><span class="line">                //catch方法 略...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意此时仅仅是<strong>只获取IOC容器中那些Advisor类型的Bean作为Advisor</strong>，而在我们注解配置AOP的方式中并不是配置Advisor类的，下面会说到如何获取所有打了注解的切面，这里只是尝试去IOC容器中找是否存在这样的类，有的话也不会漏掉。</p><h5 id="寻找所有注解的Advisor"><a href="#寻找所有注解的Advisor" class="headerlink" title="寻找所有注解的Advisor"></a>寻找所有注解的Advisor</h5><p>现在我们拿到了部分的Advisor，回到我们主类<code>AnnotationAwareAspectJAutoProxyCreatorS</code>的<strong>findCandidateAdvisors</strong> 方法，此时将委派<code>BeanFactoryAspectJAdvisorsBuilder</code>类去执行<strong>buildAspectJAdvisors</strong>方法，将继续获取被注解了的Advisor：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected List&lt;Advisor&gt; <span class="function"><span class="title">findCandidateAdvisors</span></span>() &#123;</span><br><span class="line">    // Add all the Spring advisors found according to superclass rules.</span><br><span class="line">    List&lt;Advisor&gt; advisors = super.findCandidateAdvisors();</span><br><span class="line">    // Build Advisors <span class="keyword">for</span> all AspectJ aspects <span class="keyword">in</span> the bean factory.</span><br><span class="line">    <span class="keyword">if</span> (this.aspectJAdvisorsBuilder != null) &#123;</span><br><span class="line">        //委派BeanFactoryAspectJAdvisorsBuilder去寻找注解Advisor</span><br><span class="line">        advisors.addAll(this.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Advisor&gt; <span class="function"><span class="title">buildAspectJAdvisors</span></span>() &#123;</span><br><span class="line">    List&lt;String&gt; aspectNames = this.aspectBeanNames;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (aspectNames == null) &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            aspectNames = this.aspectBeanNames;</span><br><span class="line">            //双重加锁保证在并发情况下不会寻找两次</span><br><span class="line">            <span class="keyword">if</span> (aspectNames == null) &#123;</span><br><span class="line">                List&lt;Advisor&gt; advisors = new LinkedList&lt;&gt;();</span><br><span class="line">                aspectNames = new LinkedList&lt;&gt;();</span><br><span class="line">                //从IOC容器中获取所有的BeanName</span><br><span class="line">                String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">                    this.beanFactory, Object.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">                //遍历所有的BeanName</span><br><span class="line">                <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line">                        <span class="built_in">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // We must be careful not to instantiate beans eagerly as <span class="keyword">in</span> this <span class="keyword">case</span> they</span><br><span class="line">                    // would be cached by the Spring container but would not have been weaved.</span><br><span class="line">                    Class&lt;?&gt; beanType = this.beanFactory.getType(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (beanType == null) &#123;</span><br><span class="line">                        <span class="built_in">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //判断此时的Bean的类上是否打了@Aspect注解</span><br><span class="line">                    <span class="keyword">if</span> (this.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">                        //如果是，判断此类将是一个Advisor</span><br><span class="line">                        aspectNames.add(beanName);</span><br><span class="line">                        AspectMetadata amd = new AspectMetadata(beanType, beanName);</span><br><span class="line">                        //如果是单例，说明可以缓存下来</span><br><span class="line">                        <span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">                            //封装成一个对象</span><br><span class="line">                            MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                                new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName);</span><br><span class="line">                            //委派advisorFactory工厂针对以上封装信息创建Advisor</span><br><span class="line">                            List&lt;Advisor&gt; classAdvisors = this.advisorFactory.getAdvisors(factory);</span><br><span class="line">                            //如果是单例，缓存</span><br><span class="line">                            <span class="keyword">if</span> (this.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                                this.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">                            &#125;</span><br><span class="line">                            //如果不是，只缓存factory，待下一次进入取出缓存的factory</span><br><span class="line">                            //然后再用advisorFactory创建一次Advisor，省去寻找Bean与创建factory的麻烦</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                this.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">                            &#125;</span><br><span class="line">                            advisors.addAll(classAdvisors);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            // Per target or per this.</span><br><span class="line">                            <span class="keyword">if</span> (this.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                                throw new IllegalArgumentException(<span class="string">"Bean with name '"</span> + beanName +</span><br><span class="line">                                                                   <span class="string">"' is a singleton, but aspect instantiation model is not singleton"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                                new PrototypeAspectInstanceFactory(this.beanFactory, beanName);</span><br><span class="line">                            this.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">                            advisors.addAll(this.advisorFactory.getAdvisors(factory));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                this.aspectBeanNames = aspectNames;</span><br><span class="line">                <span class="built_in">return</span> advisors;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //如果走到这里，说明已经找过一遍了，这里从缓存获取信息</span><br><span class="line">    <span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Advisor&gt; advisors = new LinkedList&lt;&gt;();</span><br><span class="line">    //遍历所有缓存的切面名</span><br><span class="line">    <span class="keyword">for</span> (String aspectName : aspectNames) &#123;</span><br><span class="line">        //根据切面名从缓存拿Advisor</span><br><span class="line">        List&lt;Advisor&gt; cachedAdvisors = this.advisorsCache.get(aspectName);</span><br><span class="line">        //如果可以拿到，直接获取</span><br><span class="line">        <span class="keyword">if</span> (cachedAdvisors != null) &#123;</span><br><span class="line">            advisors.addAll(cachedAdvisors);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果拿不到，说明此时缓存的是factory</span><br><span class="line">        //根据factory使用advisorFactory创建Advisor</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName);</span><br><span class="line">            advisors.addAll(this.advisorFactory.getAdvisors(factory));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们已经<strong>完成了对所有Advisor的获取</strong>，这里值得关注的是工厂（<strong>advisorFactory</strong>）是<strong>如何创建Advisor</strong>的呢？进入<code>ReflectiveAspectJAdvisorFactory</code>类的<strong>getAdvisors</strong>方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;Advisor&gt; getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory) &#123;</span><br><span class="line">    //获取切面类类型</span><br><span class="line">    Class&lt;?&gt; aspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();</span><br><span class="line">    //获取切面Name</span><br><span class="line">    String aspectName = aspectInstanceFactory.getAspectMetadata().getAspectName();</span><br><span class="line">    //验证</span><br><span class="line">    validate(aspectClass);</span><br><span class="line"></span><br><span class="line">    // We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span><br><span class="line">    // so that it will only instantiate once.</span><br><span class="line">    MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory =</span><br><span class="line">        new LazySingletonAspectInstanceFactoryDecorator(aspectInstanceFactory);</span><br><span class="line"></span><br><span class="line">    List&lt;Advisor&gt; advisors = new LinkedList&lt;&gt;();</span><br><span class="line">    //遍历所有除了被打上@Pointcut注解的方法</span><br><span class="line">    <span class="keyword">for</span> (Method method : getAdvisorMethods(aspectClass)) &#123;</span><br><span class="line">        //在其每个方法中获取Advisor</span><br><span class="line">        Advisor advisor = getAdvisor(method, lazySingletonAspectInstanceFactory, advisors.size(), aspectName);</span><br><span class="line">        <span class="keyword">if</span> (advisor != null) &#123;</span><br><span class="line">            advisors.add(advisor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If it<span class="string">'s a per target aspect, emit the dummy instantiating aspect.</span></span><br><span class="line"><span class="string">    if (!advisors.isEmpty() &amp;&amp; lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span></span><br><span class="line"><span class="string">        Advisor instantiationAdvisor = new SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);</span></span><br><span class="line"><span class="string">        advisors.add(0, instantiationAdvisor);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Find introduction fields.</span></span><br><span class="line"><span class="string">    //获取DeclareParents注解的filed</span></span><br><span class="line"><span class="string">    for (Field field : aspectClass.getDeclaredFields()) &#123;</span></span><br><span class="line"><span class="string">        Advisor advisor = getDeclareParentsAdvisor(field);</span></span><br><span class="line"><span class="string">        if (advisor != null) &#123;</span></span><br><span class="line"><span class="string">            advisors.add(advisor);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return advisors;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>我们需要关注两点：</p><ol><li><strong>getAdvisorMethods</strong>：此方法获取类上所有的<code>AdvisorMethods</code>，那么是如何进行的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;Method&gt; getAdvisorMethods(Class&lt;?&gt; aspectClass) &#123;</span><br><span class="line">    final List&lt;Method&gt; methods = new LinkedList&lt;&gt;();</span><br><span class="line">    ReflectionUtils.doWithMethods(aspectClass, method -&gt; &#123;</span><br><span class="line">        // Exclude pointcuts</span><br><span class="line">        //获取方法上的注解，如果是Pointcut注解不处理</span><br><span class="line">        <span class="keyword">if</span> (AnnotationUtils.getAnnotation(method, Pointcut.class) == null) &#123;</span><br><span class="line">            methods.add(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Collections.sort(methods, METHOD_COMPARATOR);</span><br><span class="line">    <span class="built_in">return</span> methods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们可以知道，其将<strong>不是Pointcut的注解的方法加入到方法集合中作为AdvisorMethod</strong>。</li><li><strong>getAdvisor</strong>：从上面获得的方法中，提取出<code>Advisor</code>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Advisor getAdvisor(Method candidateAdviceMethod, MetadataAwareAspectInstanceFactory aspectInstanceFactory,</span><br><span class="line">                          int declarationOrderInAspect, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">    validate(aspectInstanceFactory.getAspectMetadata().getAspectClass());</span><br><span class="line"></span><br><span class="line">    //切点信息的获取</span><br><span class="line">    AspectJExpressionPointcut expressionPointcut = getPointcut(</span><br><span class="line">        candidateAdviceMethod, aspectInstanceFactory.getAspectMetadata().getAspectClass());</span><br><span class="line">    <span class="keyword">if</span> (expressionPointcut == null) &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据获得的切点信息封装增强器</span><br><span class="line">    <span class="built_in">return</span> new InstantiationModelAwarePointcutAdvisorImpl(expressionPointcut, candidateAdviceMethod,</span><br><span class="line">                                                          this, aspectInstanceFactory, declarationOrderInAspect, aspectName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们依然需要关注两个点：</li></ol><ul><li>getPointcut：<strong>切点信息的获取</strong></li><li>InstantiationModelAwarePointcutAdvisorImpl：<strong>根据切点信息封装成增强器</strong></li></ul><h5 id="获取切点信息"><a href="#获取切点信息" class="headerlink" title="获取切点信息"></a>获取切点信息</h5><p>依然是在创建Advisor的工厂中的方法<strong>getPointcut</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private AspectJExpressionPointcut getPointcut(Method candidateAdviceMethod, Class&lt;?&gt; candidateAspectClass) &#123;</span><br><span class="line">    //获取该方法的注解</span><br><span class="line">    AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">        AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line">    <span class="keyword">if</span> (aspectJAnnotation == null) &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //封装信息</span><br><span class="line">    AspectJExpressionPointcut ajexp =</span><br><span class="line">        new AspectJExpressionPointcut(candidateAspectClass, new String[0], new Class&lt;?&gt;[0]);</span><br><span class="line">    //设置切点表达式</span><br><span class="line">    //例如：@Before（<span class="string">"test()"</span>）上的<span class="built_in">test</span>()</span><br><span class="line">    ajexp.setExpression(aspectJAnnotation.getPointcutExpression());</span><br><span class="line">    <span class="keyword">if</span> (this.beanFactory != null) &#123;</span><br><span class="line">        ajexp.setBeanFactory(this.beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> ajexp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要关注的是获取方法的注解<strong>findAspectJAnnotationOnMethod</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">@Nullable</span><br><span class="line">protected static AspectJAnnotation&lt;?&gt; findAspectJAnnotationOnMethod(Method method) &#123;</span><br><span class="line">    //需要关注的类型</span><br><span class="line">    Class&lt;?&gt;[] classesToLookFor = new Class&lt;?&gt;[] &#123;</span><br><span class="line">        Before.class, Around.class, After.class, AfterReturning.class, AfterThrowing.class, Pointcut.class&#125;;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; c : classesToLookFor) &#123;</span><br><span class="line">        //将每个需要关注的类型都与方法进行匹配</span><br><span class="line">        AspectJAnnotation&lt;?&gt; foundAnnotation = findAnnotation(method, (Class&lt;Annotation&gt;) c);</span><br><span class="line">        //如果找到，返回</span><br><span class="line">        <span class="keyword">if</span> (foundAnnotation != null) &#123;</span><br><span class="line">            <span class="built_in">return</span> foundAnnotation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>findAnnotation ：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private static &lt;A extends Annotation&gt; AspectJAnnotation&lt;A&gt; findAnnotation(Method method, Class&lt;A&gt; toLookFor) &#123;</span><br><span class="line">    //根据指定的类型寻找方法上的注解</span><br><span class="line">    A result = AnnotationUtils.findAnnotation(method, toLookFor);</span><br><span class="line">    <span class="keyword">if</span> (result != null) &#123;</span><br><span class="line">        //如果找到了，将其封装为AspectJAnnotation对象返回</span><br><span class="line">        <span class="built_in">return</span> new AspectJAnnotation&lt;&gt;(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在寻找注解的时候<strong>仅仅是获取</strong>了例如@Before(“test()”)中的<strong>test()这样的切点方法名信息</strong>，这个过程在封装AspectJAnnotation对象时在<strong>构造函数</strong>完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public AspectJAnnotation(A annotation) &#123;</span><br><span class="line">    this.annotation = annotation;</span><br><span class="line">    this.annotationType = determineAnnotationType(annotation);</span><br><span class="line">    // We know these methods exist with the same name on each object,</span><br><span class="line">    // but need to invoke them reflectively as there isn<span class="string">'t a common interface.</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">        //处理注解上的pointcut信息</span></span><br><span class="line"><span class="string">        this.pointcutExpression = resolveExpression(annotation);</span></span><br><span class="line"><span class="string">        this.argumentNames = (String) annotation.getClass().getMethod("argNames").invoke(annotation);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    catch (Exception ex) &#123;</span></span><br><span class="line"><span class="string">        throw new IllegalArgumentException(annotation + " cannot be an AspectJ annotation", ex);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private String resolveExpression(A annotation) throws Exception &#123;</span><br><span class="line">    //遍历获取注解中的两个方法名：value和pointcut</span><br><span class="line">    <span class="keyword">for</span> (String methodName : EXPRESSION_PROPERTIES) &#123;</span><br><span class="line">        Method method;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取method对象</span><br><span class="line">            method = annotation.getClass().getDeclaredMethod(methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (NoSuchMethodException ex) &#123;</span><br><span class="line">            method = null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method != null) &#123;</span><br><span class="line">            //获取切点方法名，也就是注解上设置的，例如@Before(<span class="string">"test()"</span>)</span><br><span class="line">            //此时获取<span class="string">"test()"</span>这样的字符串</span><br><span class="line">            String candidate = (String) method.invoke(annotation);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(candidate)) &#123;</span><br><span class="line">                <span class="built_in">return</span> candidate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new IllegalStateException(<span class="string">"Failed to resolve expression: "</span> + annotation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据切点信息，封装成Advisor"><a href="#根据切点信息，封装成Advisor" class="headerlink" title="根据切点信息，封装成Advisor"></a>根据切点信息，封装成Advisor</h5><p>根据切点信息生成增强器，所有的增强都由<code>InstantiationModelAwarePointcutAdvisorImpl</code>这个类来封装，当然，这个类是一个<code>Advisor</code>。进入此类的构造函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public InstantiationModelAwarePointcutAdvisorImpl(AspectJExpressionPointcut declaredPointcut,</span><br><span class="line">                                                  Method aspectJAdviceMethod, AspectJAdvisorFactory aspectJAdvisorFactory,</span><br><span class="line">                                                  MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">    //将获得的信息都封装到这个对象的属性上</span><br><span class="line">    this.declaredPointcut = declaredPointcut;</span><br><span class="line">    this.declaringClass = aspectJAdviceMethod.getDeclaringClass();</span><br><span class="line">    this.methodName = aspectJAdviceMethod.getName();</span><br><span class="line">    this.parameterTypes = aspectJAdviceMethod.getParameterTypes();</span><br><span class="line">    this.aspectJAdviceMethod = aspectJAdviceMethod;</span><br><span class="line">    this.aspectJAdvisorFactory = aspectJAdvisorFactory;</span><br><span class="line">    this.aspectInstanceFactory = aspectInstanceFactory;</span><br><span class="line">    this.declarationOrder = declarationOrder;</span><br><span class="line">    this.aspectName = aspectName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (aspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">        // Static part of the pointcut is a lazy <span class="built_in">type</span>.</span><br><span class="line">        Pointcut preInstantiationPointcut = Pointcuts.union(</span><br><span class="line">            aspectInstanceFactory.getAspectMetadata().getPerClausePointcut(), this.declaredPointcut);</span><br><span class="line"></span><br><span class="line">        // Make it dynamic: must mutate from pre-instantiation to post-instantiation state.</span><br><span class="line">        // If it’s not a dynamic pointcut, it may be optimized out</span><br><span class="line">        // by the Spring AOP infrastructure after the first evaluation.</span><br><span class="line">        this.pointcut = new PerTargetInstantiationModelPointcut(</span><br><span class="line">            this.declaredPointcut, preInstantiationPointcut, aspectInstanceFactory);</span><br><span class="line">        this.lazy = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        // A singleton aspect.</span><br><span class="line">        this.pointcut = this.declaredPointcut;</span><br><span class="line">        this.lazy = <span class="literal">false</span>;</span><br><span class="line">        //解析当前切点适用的Advice，并保存到instantiatedAdvice属性上</span><br><span class="line">        this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在封装的过程中只是<strong>简单的将信息放入类的属性中</strong>，而值得关注的是最后一行的<strong>instantiateAdvice</strong>方法，此方法将<strong>根据注解类型选择不同的Advise</strong>，例如@Before、@After等等都是不同的Advice，它们需要前置或是后置通知，所体现的<strong>增强的逻辑是不同的</strong>，所以就需要不同的Advice来完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private Advice instantiateAdvice(AspectJExpressionPointcut pointcut) &#123;</span><br><span class="line">    //委派别的类去获取Advice</span><br><span class="line">    Advice advice = this.aspectJAdvisorFactory.getAdvice(this.aspectJAdviceMethod, pointcut,</span><br><span class="line">                                                         this.aspectInstanceFactory, this.declarationOrder, this.aspectName);</span><br><span class="line">    <span class="built_in">return</span> (advice != null ? advice : EMPTY_ADVICE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此类又委派了<code>aspectJAdvisorFactory</code>去获取Advice：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut expressionPointcut,</span><br><span class="line">                        MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">    //根据之前的信息获取切面类类型</span><br><span class="line">    Class&lt;?&gt; candidateAspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();</span><br><span class="line">    validate(candidateAspectClass);</span><br><span class="line"></span><br><span class="line">    //寻找方法上的注解</span><br><span class="line">    AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">        AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line">    <span class="keyword">if</span> (aspectJAnnotation == null) &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If we get here, we know we have an AspectJ method.</span><br><span class="line">    // Check that it’s an AspectJ-annotated class</span><br><span class="line">    <span class="keyword">if</span> (!isAspect(candidateAspectClass)) &#123;</span><br><span class="line">        throw new AopConfigException(<span class="string">"Advice must be declared inside an aspect type: "</span> +</span><br><span class="line">                                     <span class="string">"Offending method '"</span> + candidateAdviceMethod + <span class="string">"' in class ["</span> +</span><br><span class="line">                                     candidateAspectClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Found AspectJ method: "</span> + candidateAdviceMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AbstractAspectJAdvice springAdvice;</span><br><span class="line"></span><br><span class="line">    //根据刚刚从方法上获得的注解，解析成枚举的类型进行swich</span><br><span class="line">    switch (aspectJAnnotation.getAnnotationType()) &#123;</span><br><span class="line">            //@Before注解将会走这里</span><br><span class="line">        <span class="keyword">case</span> AtBefore:</span><br><span class="line">            springAdvice = new AspectJMethodBeforeAdvice(</span><br><span class="line">                candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">            //@After注解</span><br><span class="line">        <span class="keyword">case</span> AtAfter:</span><br><span class="line">            springAdvice = new AspectJAfterAdvice(</span><br><span class="line">                candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">            //@AfterReturning</span><br><span class="line">        <span class="keyword">case</span> AtAfterReturning:</span><br><span class="line">            springAdvice = new AspectJAfterReturningAdvice(</span><br><span class="line">                candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">            AfterReturning afterReturningAnnotation = (AfterReturning) aspectJAnnotation.getAnnotation();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(afterReturningAnnotation.returning())) &#123;</span><br><span class="line">                springAdvice.setReturningName(afterReturningAnnotation.returning());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">            //@AfterThrowing</span><br><span class="line">        <span class="keyword">case</span> AtAfterThrowing:</span><br><span class="line">            springAdvice = new AspectJAfterThrowingAdvice(</span><br><span class="line">                candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">            AfterThrowing afterThrowingAnnotation = (AfterThrowing) aspectJAnnotation.getAnnotation();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(afterThrowingAnnotation.throwing())) &#123;</span><br><span class="line">                springAdvice.setThrowingName(afterThrowingAnnotation.throwing());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">            //@Around</span><br><span class="line">        <span class="keyword">case</span> AtAround:</span><br><span class="line">            springAdvice = new AspectJAroundAdvice(</span><br><span class="line">                candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">            //@Pointcut</span><br><span class="line">        <span class="keyword">case</span> AtPointcut:</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Processing pointcut '"</span> + candidateAdviceMethod.getName() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">        default:</span><br><span class="line">            throw new UnsupportedOperationException(</span><br><span class="line">                <span class="string">"Unsupported advice type on method: "</span> + candidateAdviceMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Now to configure the advice...</span><br><span class="line">    //配置得到的Advice</span><br><span class="line">    springAdvice.setAspectName(aspectName);</span><br><span class="line">    springAdvice.setDeclarationOrder(declarationOrder);</span><br><span class="line">    String[] argNames = this.parameterNameDiscoverer.getParameterNames(candidateAdviceMethod);</span><br><span class="line">    <span class="keyword">if</span> (argNames != null) &#123;</span><br><span class="line">        springAdvice.setArgumentNamesFromStringArray(argNames);</span><br><span class="line">    &#125;</span><br><span class="line">    springAdvice.calculateArgumentBindings();</span><br><span class="line">    <span class="built_in">return</span> springAdvice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面我们可以知道，不同的通知对应不同的Advice，那么这些不同的advice的执行逻辑有哪些不同呢？这个疑问留着后面的执行过程会进行解答，这里只需要知道<strong>我们获取的Advisor封装了advice与其切点信息</strong>。</p><h4 id="寻找适用的增强器"><a href="#寻找适用的增强器" class="headerlink" title="寻找适用的增强器"></a>寻找适用的增强器</h4><p>我们的思路回到主线，此时我们已经<strong>寻找到所有的增强器</strong>了，现在开始从中<strong>筛选</strong>出适用的增强器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findEligibleAdvisors(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">    //寻找所有适用的Advisor</span><br><span class="line">    //这一步在4.2中进行</span><br><span class="line">    List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">    //从所有Advisor中选出适合被当前Bean使用的Advisor</span><br><span class="line">    List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">    extendAdvisors(eligibleAdvisors);</span><br><span class="line">    <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">        eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时执行<strong>findAdvisorsThatCanApply</strong>方法寻找适用的增强器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findAdvisorsThatCanApply(</span><br><span class="line">    List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line"></span><br><span class="line">    ProxyCreationContext.setCurrentProxiedBeanName(beanName);</span><br><span class="line">    try &#123;</span><br><span class="line">        //委派AopUtils去做</span><br><span class="line">        <span class="built_in">return</span> AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        ProxyCreationContext.setCurrentProxiedBeanName(null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里委派了<code>AopUtils</code>去做事情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Advisor&gt; findAdvisorsThatCanApply(List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    <span class="keyword">if</span> (candidateAdvisors.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">return</span> candidateAdvisors;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Advisor&gt; eligibleAdvisors = new LinkedList&lt;&gt;();</span><br><span class="line">    //遍历之前找到的所有的Advisor</span><br><span class="line">    <span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">        //在这里会优先处理引介增强，并且判断Advisor是否适合此Bean</span><br><span class="line">        <span class="keyword">if</span> (candidate instanceof IntroductionAdvisor &amp;&amp; canApply(candidate, clazz)) &#123;</span><br><span class="line">            //优先加入List中</span><br><span class="line">            eligibleAdvisors.add(candidate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean hasIntroductions = !eligibleAdvisors.isEmpty();</span><br><span class="line">    <span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">        <span class="keyword">if</span> (candidate instanceof IntroductionAdvisor) &#123;</span><br><span class="line">            // already processed</span><br><span class="line">            //已经处理过引介增强</span><br><span class="line">            <span class="built_in">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        //剩下的Advisor再进行判断</span><br><span class="line">        <span class="keyword">if</span> (canApply(candidate, clazz, hasIntroductions)) &#123;</span><br><span class="line">            //加入List中</span><br><span class="line">            eligibleAdvisors.add(candidate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回适合的Advisor List</span><br><span class="line">    <span class="built_in">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重点关注<strong>canApply</strong>方法，看看是如何判断是否适合的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static boolean canApply(Advisor advisor, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">    <span class="keyword">if</span> (advisor instanceof IntroductionAdvisor) &#123;</span><br><span class="line">        //调用引介增强器的ClassFilter去匹配当前Bean是否适合</span><br><span class="line">        <span class="built_in">return</span> ((IntroductionAdvisor) advisor).getClassFilter().matches(targetClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (advisor instanceof PointcutAdvisor) &#123;</span><br><span class="line">        //如果是普通的Advisor，转换成PointcutAdvisor</span><br><span class="line">        //PointcutAdvisor接口定义了获取切点的方法getPointcut</span><br><span class="line">        PointcutAdvisor pca = (PointcutAdvisor) advisor;</span><br><span class="line">        //根据切点信息，寻找是否适合</span><br><span class="line">        <span class="built_in">return</span> canApply(pca.getPointcut(), targetClass, hasIntroductions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        // It doesn<span class="string">'t have a pointcut so we assume it applies.</span></span><br><span class="line"><span class="string">        //如果没有切点，就假设它适合</span></span><br><span class="line"><span class="string">        return true;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>这里我们先忽略引介增强器，关注普通的Advisor。这里进入<strong>canApply</strong>方法，根据切点信息去判断是否合适：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public static boolean canApply(Pointcut pc, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">    Assert.notNull(pc, <span class="string">"Pointcut must not be null"</span>);</span><br><span class="line">    //获取切点类过滤器，如果不符合直接返回<span class="literal">false</span></span><br><span class="line">    //如果符合进入下一步判断</span><br><span class="line">    <span class="keyword">if</span> (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取切点的方法匹配器</span><br><span class="line">    MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line">    //如果此时methodMatcher是一个MethodMatcher.TRUE，说明匹配任何方法，直接返回<span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (methodMatcher == MethodMatcher.TRUE) &#123;</span><br><span class="line">        // No need to iterate the methods <span class="keyword">if</span> we’re matching any method anyway...</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null;</span><br><span class="line">    <span class="keyword">if</span> (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">        introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //拿到目标类的所有父类（包括接口）</span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; classes = new LinkedHashSet&lt;&gt;(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line">    //包括本类</span><br><span class="line">    classes.add(targetClass);</span><br><span class="line">    //遍历父类与本类</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">        //获取本class的方法对象</span><br><span class="line">        Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line">        //遍历方法</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            //两个验证器只要其中一个匹配，就返回<span class="literal">true</span></span><br><span class="line">            <span class="keyword">if</span> ((introductionAwareMethodMatcher != null &amp;&amp;</span><br><span class="line">                 introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||</span><br><span class="line">                methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，就<strong>完成了适用的增强器的查找</strong>，从上面我们可以知道，当一个Bean中的任何一个方法（方法<strong>包括在父类</strong>中的方法）<strong>匹配Advisor中的切点信息</strong>，就认为当前的Advisor是<strong>匹配当前Bean</strong>的，就将此时的<strong>Advisor加入此类的Advisors列表</strong>中，注意，一个Bean中是可以有多个Advisor的，如果不能理解为什么一个Bean对应多个Advisor，你应该还没有明白Advisor的概念，Advisor中包含advice与切点信息，也就是说，一个通知方法例如前置通知@Before是对应一个Advisor的，如果一个类中既有前置通知又有后置通知，那么这个类中的Advisor是会匹配两个的。</p><h4 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h4><h5 id="获取代理类型（JDK或CGLIB）"><a href="#获取代理类型（JDK或CGLIB）" class="headerlink" title="获取代理类型（JDK或CGLIB）"></a>获取代理类型（JDK或CGLIB）</h5><p>再次回到最开始的地方，还记得4.1的<strong>wrapIfNecessary</strong>方法吗？此时我们已经寻找完符合此Bean的增强器了（<strong>getAdvicesAndAdvisorsForBean</strong>方法），就像刚刚所说，如果有两个通知匹配的话，现在增强器列表应该会有两个Advisor，也就是说增强列表不为空，将进行下一步，创建代理的过程<strong>createProxy</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">protected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,</span><br><span class="line">                             @Nullable Object[] specificInterceptors, TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (this.beanFactory instanceof ConfigurableListableBeanFactory) &#123;</span><br><span class="line">        AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ProxyFactory proxyFactory = new ProxyFactory();</span><br><span class="line">    //复制当前Creator的一些属性例如proxyTargetClass或是exposeProxy等</span><br><span class="line">    proxyFactory.copyFrom(this);</span><br><span class="line"></span><br><span class="line">    //如果proxyTargetClass是<span class="literal">false</span>才会进入判断</span><br><span class="line">    //如果proxyTargetClass是<span class="literal">true</span>就直接用CGLib代理了，不需要判断</span><br><span class="line">    <span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">        //判断是否需要代理本类</span><br><span class="line">        <span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">            //也就是说，如果需要代理本类，将使用CGLib方式代理</span><br><span class="line">            proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果不需要，则获取所有该类的接口，设置到proxyFactory对象中</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //处理所有得到的适用的拦截器转换成Advisor</span><br><span class="line">    Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    //将Advisors加入proxyFactory对象中</span><br><span class="line">    proxyFactory.addAdvisors(advisors);</span><br><span class="line">    //将原本的Bean对象（原生未代理）加入proxyFactory对象中</span><br><span class="line">    proxyFactory.setTargetSource(targetSource);</span><br><span class="line">    //定制代理</span><br><span class="line">    customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">    proxyFactory.setFrozen(this.freezeProxy);</span><br><span class="line">    <span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">        proxyFactory.setPreFiltered(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置好属性之后，就调用proxyFactory对象生成代理对象</span><br><span class="line">    <span class="built_in">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上过程都在给<code>proxyFactory</code>这个对象设置属性，然后调用<code>proxyFactory</code>根据设置的一些属性生成代理对象，最后执行关键的创建代理方法<strong>getProxy</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object getProxy(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="built_in">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected final synchronized AopProxy <span class="function"><span class="title">createAopProxy</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!this.active) &#123;</span><br><span class="line">        activate();</span><br><span class="line">    &#125;</span><br><span class="line">    //使用aopProxyFactory根据本类信息创建</span><br><span class="line">    <span class="built_in">return</span> getAopProxyFactory().createAopProxy(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>aopProxyFactory</code>是在其父类的构造函数中赋值的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="function"><span class="title">ProxyCreatorSupport</span></span>() &#123;</span><br><span class="line">    this.aopProxyFactory = new DefaultAopProxyFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入其创建方法<strong>createAopProxy</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException &#123;</span><br><span class="line">    //判断ProxyTargetClass属性和是否有代理接口等等判断使用何种方式做代理</span><br><span class="line">    <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">        Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">        <span class="keyword">if</span> (targetClass == null) &#123;</span><br><span class="line">            throw new AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line">                                         <span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">            <span class="built_in">return</span> new JdkDynamicAopProxy(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> new ObjenesisCglibAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> new JdkDynamicAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意此时config对象是我们之前设置了各种信息的proxyFactory对象，在代理的构造函数中存放了这个属性，也就是说代理对象持有一个Advisor列表。</p></blockquote><p>这段代码清晰明了，主要就是在<strong>判断使用何种方式做代理</strong>：</p><ul><li>optimize：这个属性适用于CGLib，对JDK动态代理无效。主要是控制CGLib创建的代理是否使用激进的优化策略。</li><li>proxyTargetClass：文章开头也有提到，如果属性为true，将会使用CGLib进行代理。</li><li>hasNoUserSuppliedProxyInterfaces：是否存在代理接口。</li></ul><p>总结一下JDK于CGLIB如何选择：</p><ul><li>如果目标对象实现了接口，默认情况下会采用JDK代理</li><li>如果目标对象实现了接口，但可以使用proxyTargetClass属性来强制使用CGLIB代理</li><li>如果对象没用实现接口，必须使用CGLIB代理</li></ul><h5 id="获取代理"><a href="#获取代理" class="headerlink" title="获取代理"></a>获取代理</h5><p>思路回到开头获取代理的方法中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object getProxy(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="built_in">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们完成了<strong>createAopProxy</strong>，拿到了JDK代理对象（我们这里假设用JDK做代理）接着调用其<strong>getProxy</strong>方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getProxy(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Creating JDK dynamic proxy: target source is "</span> + this.advised.getTargetSource());</span><br><span class="line">    &#125;</span><br><span class="line">    //拿到被代理类的接口</span><br><span class="line">    Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised, <span class="literal">true</span>);</span><br><span class="line">    //检查上面得到的接口是否定义了equals、hashCode方法</span><br><span class="line">    findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">    //创建代理对象</span><br><span class="line">    <span class="built_in">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意此时的<code>advised</code>就是我们上面所说的<code>config</code>对象也就是封装半天信息的<code>proxyFactory</code>对象，里面存有一系列信息例如<strong>Advisor、切点之类</strong>。</p><p>这里不对动态代理进行解释，如果熟悉动态代理的看到这里应该已经懂了，其将当前对象作为实现代理的主要对象。毫无疑问，当前对象一定实现了<code>InvocationHandler</code>接口，我们需要关注的即为它的<strong>invoke</strong>方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    MethodInvocation invocation;</span><br><span class="line">    Object oldProxy = null;</span><br><span class="line">    boolean setProxyContext = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    //原生对象</span><br><span class="line">    TargetSource targetSource = this.advised.targetSource;</span><br><span class="line">    Object target = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //eqauls()方法，如果目标对象未实现此方法</span><br><span class="line">        <span class="keyword">if</span> (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">            // The target does not implement the equals(Object) method itself.</span><br><span class="line">            <span class="built_in">return</span> equals(args[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        //hashCode()方法，如果目标对象未实现此方法</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">            // The target does not implement the hashCode() method itself.</span><br><span class="line">            <span class="built_in">return</span> hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy.class) &#123;</span><br><span class="line">            // There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span><br><span class="line">            <span class="built_in">return</span> AopProxyUtils.ultimateTargetClass(this.advised);</span><br><span class="line">        &#125;</span><br><span class="line">        //Advised接口或者其父接口中定义的方法,直接反射调用,不应用通知</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!this.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">                 method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">            // Service invocations on ProxyConfig with the proxy config...</span><br><span class="line">            <span class="built_in">return</span> AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object retVal;</span><br><span class="line"></span><br><span class="line">        //这里就是先前提到的如果exposeProxy属性为<span class="literal">true</span>，将会暴露一个proxy代理对象</span><br><span class="line">        //给AOP上下文对象，存在线程变量中</span><br><span class="line">        <span class="keyword">if</span> (this.advised.exposeProxy) &#123;</span><br><span class="line">            // Make invocation available <span class="keyword">if</span> necessary.</span><br><span class="line">            oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">            setProxyContext = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Get as late as possible to minimize the time we <span class="string">"own"</span> the target,</span><br><span class="line">        // <span class="keyword">in</span> <span class="keyword">case</span> it comes from a pool.</span><br><span class="line">        //获得目标对象的类</span><br><span class="line">        target = targetSource.getTarget();</span><br><span class="line">        Class&lt;?&gt; targetClass = (target != null ? target.getClass() : null);</span><br><span class="line"></span><br><span class="line">        // Get the interception chain <span class="keyword">for</span> this method.</span><br><span class="line">        //获取可以应用到此方法上的Interceptor列表</span><br><span class="line">        List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line">        // Check whether we have any advice. If we don’t, we can fallback on direct</span><br><span class="line">        // reflective invocation of the target, and avoid creating a MethodInvocation.</span><br><span class="line">        //如果没有可以应用到此方法的通知(Interceptor)，此直接反射调用 method.invoke(target, args)</span><br><span class="line">        <span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">            // We can skip creating a MethodInvocation: just invoke the target directly</span><br><span class="line">            // Note that the final invoker must be an InvokerInterceptor so we know it does</span><br><span class="line">            // nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span><br><span class="line">            Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">            retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            // We need to create a method invocation...</span><br><span class="line">            //走到这里，说明该方法符合被通知的条件，创建MethodInvocation</span><br><span class="line">            //执行其proceed方法</span><br><span class="line">            invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            // Proceed to the joinpoint through the interceptor chain.</span><br><span class="line">            retVal = invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Massage <span class="built_in">return</span> value <span class="keyword">if</span> necessary.</span><br><span class="line">        Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">        <span class="keyword">if</span> (retVal != null &amp;&amp; retVal == target &amp;&amp;</span><br><span class="line">            returnType != Object.class &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</span><br><span class="line">            !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">            // Special <span class="keyword">case</span>: it returned <span class="string">"this"</span> and the <span class="built_in">return</span> <span class="built_in">type</span> of the method</span><br><span class="line">            // is <span class="built_in">type</span>-compatible. Note that we can<span class="string">'t help if the target sets</span></span><br><span class="line"><span class="string">            // a reference to itself in another returned object.</span></span><br><span class="line"><span class="string">            retVal = proxy;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        else if (retVal == null &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span></span><br><span class="line"><span class="string">            throw new AopInvocationException(</span></span><br><span class="line"><span class="string">                "Null return value from advice does not match primitive return type for: " + method);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return retVal;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    finally &#123;</span></span><br><span class="line"><span class="string">        if (target != null &amp;&amp; !targetSource.isStatic()) &#123;</span></span><br><span class="line"><span class="string">            // Must have come from TargetSource.</span></span><br><span class="line"><span class="string">            targetSource.releaseTarget(target);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (setProxyContext) &#123;</span></span><br><span class="line"><span class="string">            // Restore old proxy.</span></span><br><span class="line"><span class="string">            AopContext.setCurrentProxy(oldProxy);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>也就是说，每次调用代理对象的方法，将执行以下步骤：</p><ol><li><strong>判断是否是equals或hashCode或Advised的方法</strong>：如果是执行对应判断。</li><li><strong>判断是否需要暴露代理对象</strong>（将代理对象存入AopContext）：在文章开头就有提到这个属性，还是之前的例子，在A方法中调用B方法，此时B方法其实是原生对象的B方法，但如果B方法需要被AOP，需要执行的是代理对象的B方法，而不是原生对象的B方法，原生对象的B方法是没有被代理AOP的。所以这里需要暴露出代理对象，从AopContext上下文中取出代理对象，将其强转成对应类，执行B方法，此时的B方法即可是被AOP的方法了。值得一提的是AopContext暴露出来的代理对象是线程变量。</li><li><strong>获取当前方法对应的拦截器链</strong>：主要是使用<code>advised</code>去对当前方法进行判断<strong>是否符合切点</strong>如果符合取出对应需要执行的链。如果此时<strong>链为空</strong>，代表执行的该方法是<strong>不需要被AOP</strong>的，正常反射执行即可，如果<strong>链不为空</strong>，将链封装成<code>ReflectiveMethodInvocation</code>对象执行其<strong>proceed</strong>方法，该对象的该方法是执行AOP的核心，下面详细讲解。</li></ol><h4 id="执行AOP通知"><a href="#执行AOP通知" class="headerlink" title="执行AOP通知"></a>执行AOP通知</h4><p>到此我们创建好了代理对象，并<strong>返回出去作为一个Bean存放在IOC容器中</strong>，当我们取出此Bean并执行方法时，如果碰到了需要被AOP的方法时，会找到一个<strong>拦截器链</strong>，然后将其传入<code>ReflectiveMethodInvocation</code>对象封装，接着不会执行原方法而是执行其<strong>proceed</strong>方法，所以该方法是执行AOP通知的核心方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//此属性默认为-1</span><br><span class="line">private int currentInterceptorIndex = -1;</span><br><span class="line"></span><br><span class="line">//存放interceptors的列表</span><br><span class="line">protected final List&lt;?&gt; interceptorsAndDynamicMethodMatchers;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Object proceed() throws Throwable &#123;</span><br><span class="line">    //  We start with an index of -1 and increment early.</span><br><span class="line">    //如果Interceptor执行完了，则执行joinPoint</span><br><span class="line">    <span class="keyword">if</span> (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) &#123;</span><br><span class="line">        <span class="built_in">return</span> invokeJoinpoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据游标获取对应的Advice</span><br><span class="line">    Object interceptorOrInterceptionAdvice =</span><br><span class="line">        this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);</span><br><span class="line">    //如果要动态匹配joinPoint</span><br><span class="line">    <span class="keyword">if</span> (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line">        // Evaluate dynamic method matcher here: static part will already have</span><br><span class="line">        // been evaluated and found to match.</span><br><span class="line">        InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">            (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">        //动态匹配：运行时参数是否满足匹配条件</span><br><span class="line">        <span class="keyword">if</span> (dm.methodMatcher.matches(this.method, this.targetClass, this.arguments)) &#123;</span><br><span class="line">            <span class="built_in">return</span> dm.interceptor.invoke(this);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            // Dynamic matching failed.</span><br><span class="line">            // Skip this interceptor and invoke the next <span class="keyword">in</span> the chain.</span><br><span class="line">            //动态匹配失败时,略过当前Intercetpor,调用下一个Interceptor</span><br><span class="line">            <span class="built_in">return</span> proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        // It’s an interceptor, so we just invoke it: The pointcut will have</span><br><span class="line">        // been evaluated statically before this object was constructed.</span><br><span class="line">        //执行当前IntercetporAdvice</span><br><span class="line">        //注意此时传了this对象，是为了执行链的保持</span><br><span class="line">        <span class="built_in">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，需要解释几点：</p><ol><li><p><strong>如何判断执行结束？在开头我们说到currentInterceptorIndex</strong>属性是为-1的，<strong>interceptorsAndDynamicMethodMatchers</strong>的size是执行链的数量，刚进来的时候执行链一定大于等于1，所以其减1也不会等于-1，不会执行<strong>invokeJoinpoint</strong>方法，走到下面执行这样一行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object interceptorOrInterceptionAdvice =</span><br><span class="line">        this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);</span><br></pre></td></tr></table></figure><p>注意此时<strong>currentInterceptorIndex</strong>游标变成了0，也就是取执行链的第一个执行器取执行，同时游标变成0。下面会执行Advice的<strong>invoke</strong>方法，这里举例Before类型的Advice的<strong>invoke</strong>方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">    this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() );</span><br><span class="line">    <span class="built_in">return</span> mi.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意此时<code>mi对象</code>就是上面传进来的<code>this</code>，也就是<code>ReflectiveMethodInvocation</code>对象，他在通知方法执行完成之后，又执行了<code>ReflectiveMethodInvocation</code>的<strong>proceed</strong>方法，然后第二次进入<strong>proceed</strong>时，游标已经变成了0，我们假设此时拦截器数量为一个，那么此时<strong>currentInterceptorIndex=0,interceptorsAndDynamicMethodMatchers.size() - 1 = 0：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) &#123;</span><br><span class="line">    <span class="built_in">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将中止执行下面的内容，直接执行<strong>invokeJoinpoint</strong>方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected Object invokeJoinpoint() throws Throwable &#123;</span><br><span class="line">    <span class="built_in">return</span> AopUtils.invokeJoinpointUsingReflection(this.target, this.method, this.arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里底层就是<strong>通过反射执行原方法</strong>，到此结束，也就是说其<strong>利用游标索引与循环调用proceed方法来判断当前执行链的结束</strong>，真是个聪明的方法。</p></li><li><p><strong>为什么@Before的Advice的invoke可以实现前置通知效果，同样的@After如何实现后置通知效果？在这里我们将补上上面没有详细讲解的一些Advice类 。</strong><br>1) <code>MethodBeforeAdviceInterceptor</code>前置通知：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class MethodBeforeAdviceInterceptor implements MethodInterceptor, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private MethodBeforeAdvice advice;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">   * Create a new MethodBeforeAdviceInterceptor <span class="keyword">for</span> the given advice.</span><br><span class="line">   * @param advice the MethodBeforeAdvice to wrap</span><br><span class="line">   */</span><br><span class="line">    //构造器初始化保存了advice对象</span><br><span class="line">    public MethodBeforeAdviceInterceptor(MethodBeforeAdvice advice) &#123;</span><br><span class="line">        Assert.notNull(advice, <span class="string">"Advice must not be null"</span>);</span><br><span class="line">        this.advice = advice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">        this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() );</span><br><span class="line">        <span class="built_in">return</span> mi.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2)<code>AfterReturningAdviceInterceptor</code>后置通知：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class AfterReturningAdviceInterceptor implements MethodInterceptor, AfterAdvice, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private final AfterReturningAdvice advice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">   * Create a new AfterReturningAdviceInterceptor <span class="keyword">for</span> the given advice.</span><br><span class="line">   * @param advice the AfterReturningAdvice to wrap</span><br><span class="line">   */</span><br><span class="line">    public AfterReturningAdviceInterceptor(AfterReturningAdvice advice) &#123;</span><br><span class="line">        Assert.notNull(advice, <span class="string">"Advice must not be null"</span>);</span><br><span class="line">        this.advice = advice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">        Object retVal = mi.proceed();</span><br><span class="line">        this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());</span><br><span class="line">        <span class="built_in">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面两个不同的<code>Advice</code>可以看出，其<strong>invoke</strong>方法的逻辑只是<strong>顺序不同</strong>而已，但为什么可以达到前置后置通知的呢？其实前置通知很好理解，在invoke的逻辑中只要<strong>先执行我们指定的前置通知逻辑</strong>，然后<strong>继续往下执行proceed</strong>即可实现在执行原方法前加一段逻辑的功能，我们主要分析后置通知是如何实现的。还是进行一个假设，此时该方法<strong>只有一个执行链后置通知@After</strong>，那么刚开始进入proceed方法时，获取这个Advice执行invoke方法，然后<strong>又去执行proceed方法</strong>了，由上面的分析此时的游标显示执行链已经执行完毕，所以此时会<strong>直接反射执行原方法</strong>，然后<strong>proceed方法执行完毕</strong>，最后将会执行后置通知Advice的invoke方法的下一步，<strong>advice.afterReturning</strong>，也就是用户<strong>自定义的后置方法逻辑</strong>，实现了在方法最后插入一段代码逻辑的功能，如果是多个通知例如前置后置都有的话，留给读者思考，相信懂得以上逻辑之后推敲起来并不是很难。</p></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到这里为止，我们分析了AOP是从<strong>自定义标签开始</strong>，自定义标签注册了一个<code>Creator</code>类，而此<code>Creator</code>类是一个<code>BeanPostProcessor</code>，也就是说每个Bean都将调用Creator实现的方法。</p><p>来到了<strong>如何实现AOP代理的分析</strong>中，在此方法中判断Bean是否需要被代理，然后进一步判断此Bean是否可以获得增强器，在这个过程中会去拿所有的Advisor，然后在所有的Advisor列表中筛选出适用的增强器，如果适用的增强器Advisor为空证明此Bean不用被代理，如果不为空则会进入创建代理的流程。</p><p>所以我们开始分析<strong>创建代理是怎样的过程</strong> ，在什么情况下会进行JDK动态代理，在什么情况下会进行CGLIB动态代理，然后创建代理结束之后。</p><p>必不可少的也需要分析是<strong>如何执行AOP通知</strong>的，其核心类是<code>ReflectiveMethodInvocation</code>的<strong>proceed</strong>方法，轮询执行拦截器，并且不同的Advice根据其特有的逻辑执行调用顺序，来完成AOP通知的功能。</p>]]></content>
    
    
    <categories>
      
      <category>Java框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架 - Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架——深入剖析核心IoC源码</title>
    <link href="/2018/10/30/Spring-2/"/>
    <url>/2018/10/30/Spring-2/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/spring_logo.jpg" srcset="/img/loading.gif" alt="Spring"></p><p>原文转自：<a href="https://javadoop.com/post/spring-ioc" target="_blank" rel="noopener">https://javadoop.com/post/spring-ioc</a></p><p>因为有幸看到这篇让我读了约三个半小时的文章，简直价值千金，所以稍作修改，以此记录。<br>为了保持文章的严谨性，如有错误，望及时指出，十分希望听到读者的声音。</p><hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>先看下最基本的启动 Spring 容器的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(<span class="string">"classpath:Application.xml"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码就可以利用配置文件来启动一个 Spring 容器了，请使用 maven 的小伙伴直接在 dependencies 中加上以下依赖即可，个人比较反对那些不知道要添加什么依赖，然后把 Spring 的所有相关的东西都加进来的方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.3.11.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>spring-context 会自动将 spring-core、spring-beans、spring-aop、spring-expression 这几个基础 jar 包带进来。</p></blockquote><p>多说一句，很多开发者入门就直接接触的 SpringMVC，对 Spring 其实不是很了解，Spring 是渐进式的工具，并不具有很强的侵入性，它的模块也划分得很合理，即使你的应用不是 web 应用，或者之前完全没有使用到 Spring，而你就想用 Spring 的依赖注入这个功能，其实完全是可以的，它的引入不会对其他的组件产生冲突。<br>废话说完，我们继续。<code>ApplicationContext context = new ClassPathXmlApplicationContext(...)</code>其实很好理解，从名字上就可以猜出一二，就是在 ClassPath 中寻找 xml 配置文件，根据 xml 文件内容来构建 ApplicationContext 。当然，除了 ClassPathXmlApplicationContext 以外，我们也还有其他构建 ApplicationContext 的方案可供选择，我们先来看看大体的继承结构是怎么样的：<br><img src="/images/spring-ioc1.png" srcset="/img/loading.gif" alt="spring"></p><blockquote><p>读者可以大致看一下类名，源码分析的时候不至于找不着看哪个类，因为 Spring 为了适应各种使用场景，提供的各个接口都可能有很多的实现类。对于我们来说，就是揪着一个完整的分支看完。<br>当然，读本文的时候读者也不必太担心，每个代码块分析的时候，我都会告诉读者我们在说哪个类第几行。</p></blockquote><p>我们可以看到，ClassPathXmlApplicationContext 兜兜转转了好久才到 ApplicationContext 接口，同样的，我们也可以使用绿颜色的<br><strong>FileSystemXmlApplicationContext</strong>和<strong>AnnotationConfigApplicationContext</strong>这两个类。</p><ol><li><p><strong>FileSystemXmlApplicationContext</strong>的构造函数需要一个 xml 配置文件在系统中的路径，其他和 ClassPathXmlApplicationContext 基本上一样。</p></li><li><p><strong>AnnotationConfigApplicationContext</strong>是基于注解来使用的，它不需要配置文件，采用 java 配置类和各种注解来配置，是比较简单的方式，也是大势所趋吧。</p></li></ol><p>不过本文旨在帮助大家理解整个构建流程，所以决定使用 ClassPathXmlApplicationContext 进行分析。</p><p>我们先来一个简单的例子来看看怎么实例化 ApplicationContext。</p><p>首先，定义一个接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface MessageService &#123;</span><br><span class="line">    String getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义接口实现类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class MessageServiceImpl implements MessageService &#123;</span><br><span class="line">    public String <span class="function"><span class="title">getMessage</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们在 <strong>resources</strong> 目录新建一个配置文件，文件名随意，通常叫 Application.xml 或 Application-xxx.xml 就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span> default-autowire=<span class="string">"byName"</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"messageService"</span> class=<span class="string">"com.loonycoder.service.MessageServiceImpl"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>这样，我们就可以跑起来了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 用我们的配置文件来启动一个 ApplicationContext</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(<span class="string">"classpath:Application.xml"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"context 启动成功"</span>);</span><br><span class="line"></span><br><span class="line">        // 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span><br><span class="line">        MessageService messageService = context.getBean(MessageService.class);</span><br><span class="line">        // 这句将输出: hello world</span><br><span class="line">        System.out.println(messageService.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上例子很简单，不过也够引出本文的主题了，就是怎么样通过配置文件来启动 Spring 的 ApplicationContext ？也就是我们今天要分析的 IOC 的核心了。ApplicationContext 启动过程中，会负责创建实例 Bean，往各个 Bean 中注入依赖等。</p><hr><h3 id="BeanFactory-简介"><a href="#BeanFactory-简介" class="headerlink" title="BeanFactory 简介"></a>BeanFactory 简介</h3><p>BeanFactory，从名字上也很好理解，生产 bean 的工厂，它负责生产和管理各个 bean 实例。</p><p>初学者可别以为我之前说那么多和 BeanFactory 无关，前面说的 ApplicationContext 其实就是一个 BeanFactory。我们来看下和 BeanFactory 接口相关的主要的继承结构：<br><img src="/images/spring-ioc2.png" srcset="/img/loading.gif" alt="spring"><br>我想，大家看完这个图以后，可能就不是很开心了。ApplicationContext 往下的继承结构前面一张图说过了，这里就不重复了。这张图呢，背下来肯定是不需要的，有几个重点和大家说明下就好。</p><ul><li>ApplicationContext 继承了 ListableBeanFactory，这个 Listable 的意思就是，通过这个接口，我们可以获取多个 Bean，大家看源码会发现，最顶层 BeanFactory 接口的方法都是获取单个 Bean 的。</li><li>ApplicationContext 继承了 HierarchicalBeanFactory，Hierarchical 单词本身已经能说明问题了，也就是说我们可以在应用中起多个 BeanFactory，然后可以将各个 BeanFactory 设置为父子关系。</li><li>AutowireCapableBeanFactory 这个名字中的 Autowire 大家都非常熟悉，它就是用来自动装配 Bean 用的，但是仔细看上图，ApplicationContext 并没有继承它，不过不用担心，不使用继承，不代表不可以使用组合，如果你看到 ApplicationContext 接口定义中的最后一个方法 getAutowireCapableBeanFactory() 就知道了。</li><li>ConfigurableListableBeanFactory 也是一个特殊的接口，看图，特殊之处在于它继承了第二层所有的三个接口，而 ApplicationContext 没有。这点之后会用到。</li><li>请先不用花时间在其他的接口和类上，先理解我说的这几点就可以了。<br>然后，请读者打开编辑器，翻一下 BeanFactory、ListableBeanFactory、HierarchicalBeanFactory、AutowireCapableBeanFactory、ApplicationContext 这几个接口的代码，大概看一下各个接口中的方法，大家心里要有底，限于篇幅，我就不贴代码介绍了。</li></ul><hr><h3 id="启动过程分析"><a href="#启动过程分析" class="headerlink" title="启动过程分析"></a>启动过程分析</h3><p>下面将会是冗长的代码分析，记住，一定要自己打开源码来看，不然纯看是很累的。</p><p>第一步，我们肯定要从 ClassPathXmlApplicationContext 的构造方法说起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext &#123;</span><br><span class="line">  private Resource[] configResources;</span><br><span class="line"></span><br><span class="line">  // 如果已经有 ApplicationContext 并需要配置成父子关系，那么调用这个构造方法</span><br><span class="line">  public ClassPathXmlApplicationContext(ApplicationContext parent) &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  public ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)</span><br><span class="line">      throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    super(parent);</span><br><span class="line">    // 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">      refresh(); // 核心方法</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，就是 <code>refresh()</code>，这里简单说下为什么是 refresh()，而不是 init() 这种名字的方法。因为 ApplicationContext 建立起来以后，其实我们是可以通过调用 refresh() 这个方法重建的，refresh() 会将原来的 ApplicationContext 销毁，然后再重新执行一次初始化操作。</p><p>往下看，refresh() 方法里面调用了那么多方法，就知道肯定不简单了，请读者先看个大概，细节之后会详细说。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">   // 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span><br><span class="line">   synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line"></span><br><span class="line">      // 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      // 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span><br><span class="line">      // 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span><br><span class="line">      // 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      // 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span><br><span class="line">      // 这块待会会展开说</span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">         // 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span><br><span class="line">         // 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span><br><span class="line"></span><br><span class="line">         // 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span><br><span class="line">         // 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line">         // 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         // 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span><br><span class="line">         // 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span><br><span class="line">         // 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         // 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         // 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         // 从方法名就可以知道，典型的模板方法(钩子方法)，</span><br><span class="line">         // 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         // 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         // 重点，重点，重点</span><br><span class="line">         // 初始化所有的 singleton beans</span><br><span class="line">         //（lazy-init 的除外）</span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         // 最后，广播事件，ApplicationContext 初始化完成</span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      catch (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">         // 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         // Reset <span class="string">'active'</span> flag.</span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         // 把异常往外抛</span><br><span class="line">         throw ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      finally &#123;</span><br><span class="line">         // Reset common introspection caches <span class="keyword">in</span> Spring<span class="string">'s core, since we</span></span><br><span class="line"><span class="string">         // might not ever need metadata for singleton beans anymore...</span></span><br><span class="line"><span class="string">         resetCommonCaches();</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>下面，我们开始一步步来肢解这个 refresh() 方法。</p><hr><h4 id="创建-Bean-容器，加载并注册-Bean"><a href="#创建-Bean-容器，加载并注册-Bean" class="headerlink" title="创建 Bean 容器，加载并注册 Bean"></a>创建 Bean 容器，加载并注册 Bean</h4><p>我们回到 refresh() 方法中的下一行 obtainFreshBeanFactory()。</p><p>注意，<strong>这个方法是全文最重要的部分之一</strong>，这里将会初始化 BeanFactory、加载 Bean、注册 Bean 等等。</p><p>当然，这步结束后，Bean 并没有完成初始化。这里指的是 Bean 实例并未在这一步生成。</p><p>// AbstractApplicationContext.java</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory <span class="function"><span class="title">obtainFreshBeanFactory</span></span>() &#123;</span><br><span class="line">   // 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span><br><span class="line">   refreshBeanFactory();</span><br><span class="line"></span><br><span class="line">   // 返回刚刚创建的 BeanFactory</span><br><span class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// AbstractRefreshableApplicationContext.java 120</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">   // 如果 ApplicationContext 中已经加载过 BeanFactory 了，销毁所有 Bean，关闭 BeanFactory</span><br><span class="line">   // 注意，应用中 BeanFactory 本来就是可以多个的，这里可不是说应用全局是否有 BeanFactory，而是当前</span><br><span class="line">   // ApplicationContext 是否有 BeanFactory</span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   try &#123;</span><br><span class="line">      // 初始化一个 DefaultListableBeanFactory，为什么用这个，我们马上说。</span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      // 用于 BeanFactory 的序列化，我想不部分人应该都用不到</span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line"></span><br><span class="line">      // 下面这两个方法很重要，别跟丢了，具体细节之后说</span><br><span class="line">      // 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      // 加载 Bean 到 BeanFactory 中</span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">         this.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (IOException ex) &#123;</span><br><span class="line">      throw new ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看到这里的时候，我觉得读者就应该站在高处看 ApplicationContext 了，ApplicationContext 继承自 BeanFactory，但是它不应该被理解为 BeanFactory 的实现类，而是说其内部持有一个实例化的 BeanFactory（DefaultListableBeanFactory）。以后所有的 BeanFactory 相关的操作其实是委托给这个实例来处理的。</p></blockquote><p>我们说说为什么选择实例化 <strong>DefaultListableBeanFactory</strong> ？前面我们说了有个很重要的接口 ConfigurableListableBeanFactory，它实现了 BeanFactory 下面一层的所有三个接口，我把之前的继承图再拿过来大家再仔细看一下：<br><img src="/images/spring-ioc2.png" srcset="/img/loading.gif" alt="spring"></p><p>我们可以看到 ConfigurableListableBeanFactory 只有一个实现类 DefaultListableBeanFactory，而且实现类 DefaultListableBeanFactory 还通过实现右边的 AbstractAutowireCapableBeanFactory 通吃了右路。所以结论就是，最底下这个家伙 DefaultListableBeanFactory 基本上是最牛的 BeanFactory 了，这也是为什么这边会使用这个类来实例化的原因。</p><blockquote><p>如果你想要在程序运行的时候动态往 Spring IOC 容器注册新的 bean，就会使用到这个类。那我们怎么在运行时获得这个实例呢？<br>之前我们说过 ApplicationContext 接口能获取到 AutowireCapableBeanFactory，就是最右上角那个，然后它向下转型就能得到 DefaultListableBeanFactory 了。<br>那怎么拿到 ApplicationContext 实例呢？如果你不会，说明你没用过 Spring。</p></blockquote><p>在继续往下之前，我们需要先了解 BeanDefinition。<strong>我们说 BeanFactory 是 Bean 容器，那么 Bean 又是什么呢？</strong></p><p>这里的 BeanDefinition 就是我们所说的 Spring 的 Bean，我们自己定义的各个 Bean 其实会转换成一个个 BeanDefinition 存在于 Spring 的 BeanFactory 中。</p><p>所以，如果有人问你 Bean 是什么的时候，你要知道 Bean 在代码层面上可以简单认为是 BeanDefinition 的实例。</p><blockquote><p>BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。</p></blockquote><p><strong>BeanDefinition 接口定义</strong><br>我们来看下 BeanDefinition 的接口定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">public interface BeanDefinition extends AttributeAccessor, BeanMetadataElement &#123;</span><br><span class="line"></span><br><span class="line">   // 我们可以看到，默认只提供 sington 和 prototype 两种，</span><br><span class="line">   // 很多读者可能知道还有 request, session, globalSession, application, websocket 这几种，</span><br><span class="line">   // 不过，它们属于基于 web 的扩展。</span><br><span class="line">   String SCOPE_SINGLETON = ConfigurableBeanFactory.SCOPE_SINGLETON;</span><br><span class="line">   String SCOPE_PROTOTYPE = ConfigurableBeanFactory.SCOPE_PROTOTYPE;</span><br><span class="line"></span><br><span class="line">   // 比较不重要，直接跳过吧</span><br><span class="line">   int ROLE_APPLICATION = 0;</span><br><span class="line">   int ROLE_SUPPORT = 1;</span><br><span class="line">   int ROLE_INFRASTRUCTURE = 2;</span><br><span class="line"></span><br><span class="line">   // 设置父 Bean，这里涉及到 bean 继承，不是 java 继承。请参见附录的详细介绍</span><br><span class="line">   // 一句话就是：继承父 Bean 的配置信息而已</span><br><span class="line">   void setParentName(String parentName);</span><br><span class="line"></span><br><span class="line">   // 获取父 Bean</span><br><span class="line">   String getParentName();</span><br><span class="line"></span><br><span class="line">   // 设置 Bean 的类名称，将来是要通过反射来生成实例的</span><br><span class="line">   void setBeanClassName(String beanClassName);</span><br><span class="line"></span><br><span class="line">   // 获取 Bean 的类名称</span><br><span class="line">   String getBeanClassName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   // 设置 bean 的 scope</span><br><span class="line">   void setScope(String scope);</span><br><span class="line"></span><br><span class="line">   String getScope();</span><br><span class="line"></span><br><span class="line">   // 设置是否懒加载</span><br><span class="line">   void setLazyInit(boolean lazyInit);</span><br><span class="line"></span><br><span class="line">   boolean isLazyInit();</span><br><span class="line"></span><br><span class="line">   // 设置该 Bean 依赖的所有的 Bean，注意，这里的依赖不是指属性依赖(如 @Autowire 标记的)，</span><br><span class="line">   // 是 depends-on=<span class="string">""</span> 属性设置的值。</span><br><span class="line">   void setDependsOn(String... dependsOn);</span><br><span class="line"></span><br><span class="line">   // 返回该 Bean 的所有依赖</span><br><span class="line">   String[] getDependsOn();</span><br><span class="line"></span><br><span class="line">   // 设置该 Bean 是否可以注入到其他 Bean 中，只对根据类型注入有效，</span><br><span class="line">   // 如果根据名称注入，即使这边设置了 <span class="literal">false</span>，也是可以的</span><br><span class="line">   void setAutowireCandidate(boolean autowireCandidate);</span><br><span class="line"></span><br><span class="line">   // 该 Bean 是否可以注入到其他 Bean 中</span><br><span class="line">   boolean isAutowireCandidate();</span><br><span class="line"></span><br><span class="line">   // 主要的。同一接口的多个实现，如果不指定名字的话，Spring 会优先选择设置 primary 为 <span class="literal">true</span> 的 bean</span><br><span class="line">   void setPrimary(boolean primary);</span><br><span class="line"></span><br><span class="line">   // 是否是 primary 的</span><br><span class="line">   boolean isPrimary();</span><br><span class="line"></span><br><span class="line">   // 如果该 Bean 采用工厂方法生成，指定工厂名称。对工厂不熟悉的读者，请参加附录</span><br><span class="line">   // 一句话就是：有些实例不是用反射生成的，而是用工厂模式生成的</span><br><span class="line">   void setFactoryBeanName(String factoryBeanName);</span><br><span class="line">   // 获取工厂名称</span><br><span class="line">   String getFactoryBeanName();</span><br><span class="line">   // 指定工厂类中的 工厂方法名称</span><br><span class="line">   void setFactoryMethodName(String factoryMethodName);</span><br><span class="line">   // 获取工厂类中的 工厂方法名称</span><br><span class="line">   String getFactoryMethodName();</span><br><span class="line"></span><br><span class="line">   // 构造器参数</span><br><span class="line">   ConstructorArgumentValues getConstructorArgumentValues();</span><br><span class="line"></span><br><span class="line">   // Bean 中的属性值，后面给 bean 注入属性值的时候会说到</span><br><span class="line">   MutablePropertyValues getPropertyValues();</span><br><span class="line"></span><br><span class="line">   // 是否 singleton</span><br><span class="line">   boolean isSingleton();</span><br><span class="line"></span><br><span class="line">   // 是否 prototype</span><br><span class="line">   boolean isPrototype();</span><br><span class="line"></span><br><span class="line">   // 如果这个 Bean 是被设置为 abstract，那么不能实例化，</span><br><span class="line">   // 常用于作为 父bean 用于继承，其实也很少用......</span><br><span class="line">   boolean isAbstract();</span><br><span class="line"></span><br><span class="line">   int getRole();</span><br><span class="line">   String getDescription();</span><br><span class="line">   String getResourceDescription();</span><br><span class="line">   BeanDefinition getOriginatingBeanDefinition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个 BeanDefinition 其实已经包含很多的信息了，暂时不清楚所有的方法对应什么东西没关系，希望看完本文后读者可以彻底搞清楚里面的所有东西。<br>这里接口虽然那么多，但是没有类似 getInstance() 这种方法来获取我们定义的类的实例，真正的我们定义的类生成的实例到哪里去了呢？别着急，这个要很后面才能讲到。</p></blockquote><p>有了 BeanDefinition 的概念以后，我们再往下看 refreshBeanFactory() 方法中的剩余部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">customizeBeanFactory(beanFactory);</span><br><span class="line">loadBeanDefinitions(beanFactory);</span><br></pre></td></tr></table></figure><p>虽然只有两个方法，但路还很长啊。。。</p><p><strong>customizeBeanFactory</strong></p><p>customizeBeanFactory(beanFactory) 比较简单，就是配置是否允许 BeanDefinition 覆盖、是否允许循环引用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) &#123;</span><br><span class="line">   <span class="keyword">if</span> (this.allowBeanDefinitionOverriding != null) &#123;</span><br><span class="line">      // 是否允许 Bean 定义覆盖</span><br><span class="line">      beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (this.allowCircularReferences != null) &#123;</span><br><span class="line">      // 是否允许 Bean 间的循环依赖</span><br><span class="line">      beanFactory.setAllowCircularReferences(this.allowCircularReferences);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanDefinition 的覆盖问题可能会有开发者碰到这个坑，就是在配置文件中定义 bean 时使用了相同的 id 或 name，默认情况下，allowBeanDefinitionOverriding 属性为 null，如果在同一配置文件中重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p><p>循环引用也很好理解：A 依赖 B，而 B 依赖 A。或 A 依赖 B，B 依赖 C，而 C 依赖 A。</p><p>默认情况下，Spring 允许循环依赖，当然如果你在 A 的构造方法中依赖 B，在 B 的构造方法中依赖 A 是不行的。</p><p>至于这两个属性怎么配置？我在附录中进行了介绍，尤其对于覆盖问题，很多人都希望禁止出现 Bean 覆盖，可是 Spring 默认是不同文件的时候可以覆盖的。</p><p>之后的源码中还会出现这两个属性，读者有个印象就可以了，它们不是非常重要。</p><p><strong>加载Bean:loadBeanDefinitions</strong></p><p>接下来是最重要的 loadBeanDefinitions(beanFactory) 方法了，这个方法将根据配置，加载各个 Bean，然后放到 BeanFactory 中。</p><p>读取配置的操作在 XmlBeanDefinitionReader 中，其负责加载配置、解析。</p><p>// AbstractXmlApplicationContext.java 80</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/** 我们可以看到，此方法将通过一个 XmlBeanDefinitionReader 实例来加载各个 Bean。*/</span><br><span class="line">@Override</span><br><span class="line">protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123;</span><br><span class="line">   // 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader</span><br><span class="line">   XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">   // Configure the bean definition reader with this context<span class="string">'s</span></span><br><span class="line"><span class="string">   // resource loading environment.</span></span><br><span class="line"><span class="string">   beanDefinitionReader.setEnvironment(this.getEnvironment());</span></span><br><span class="line"><span class="string">   beanDefinitionReader.setResourceLoader(this);</span></span><br><span class="line"><span class="string">   beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   // 初始化 BeanDefinitionReader，其实这个是提供给子类覆写的，</span></span><br><span class="line"><span class="string">   // 我看了一下，没有类覆写这个方法，我们姑且当做不重要吧</span></span><br><span class="line"><span class="string">   initBeanDefinitionReader(beanDefinitionReader);</span></span><br><span class="line"><span class="string">   // 重点来了，继续往下</span></span><br><span class="line"><span class="string">   loadBeanDefinitions(beanDefinitionReader);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>现在还在这个类中，接下来用刚刚初始化的 Reader 开始来加载 xml 配置，这块代码读者可以选择性跳过，不是很重要。也就是说，下面这个代码块，读者可以很轻松地略过。</p><p>// AbstractXmlApplicationContext.java 120</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">protected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException &#123;</span><br><span class="line">   Resource[] configResources = getConfigResources();</span><br><span class="line">   <span class="keyword">if</span> (configResources != null) &#123;</span><br><span class="line">      // 往下看</span><br><span class="line">      reader.loadBeanDefinitions(configResources);</span><br><span class="line">   &#125;</span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="keyword">if</span> (configLocations != null) &#123;</span><br><span class="line">      // 2</span><br><span class="line">      reader.loadBeanDefinitions(configLocations);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 上面虽然有两个分支，不过第二个分支很快通过解析路径转换为 Resource 以后也会进到这里</span><br><span class="line">@Override</span><br><span class="line">public int loadBeanDefinitions(Resource... resources) throws BeanDefinitionStoreException &#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">"Resource array must not be null"</span>);</span><br><span class="line">   int counter = 0;</span><br><span class="line">   // 注意这里是个 <span class="keyword">for</span> 循环，也就是每个文件是一个 resource</span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      // 继续往下看</span><br><span class="line">      counter += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   // 最后返回 counter，表示总共加载了多少的 BeanDefinition</span><br><span class="line">   <span class="built_in">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// XmlBeanDefinitionReader 303</span><br><span class="line">@Override</span><br><span class="line">public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">   <span class="built_in">return</span> loadBeanDefinitions(new EncodedResource(resource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// XmlBeanDefinitionReader 314</span><br><span class="line">public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">   Assert.notNull(encodedResource, <span class="string">"EncodedResource must not be null"</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">"Loading XML bean definitions from "</span> + encodedResource.getResource());</span><br><span class="line">   &#125;</span><br><span class="line">   // 用一个 ThreadLocal 来存放配置文件资源</span><br><span class="line">   Set&lt;EncodedResource&gt; currentResources = this.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">   <span class="keyword">if</span> (currentResources == null) &#123;</span><br><span class="line">      currentResources = new HashSet&lt;EncodedResource&gt;(4);</span><br><span class="line">      this.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">      throw new BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"Detected cyclic loading of "</span> + encodedResource + <span class="string">" - check your import definitions!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   try &#123;</span><br><span class="line">      InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">      try &#123;</span><br><span class="line">         InputSource inputSource = new InputSource(inputStream);</span><br><span class="line">         <span class="keyword">if</span> (encodedResource.getEncoding() != null) &#123;</span><br><span class="line">            inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">         &#125;</span><br><span class="line">         // 核心部分是这里，往下面看</span><br><span class="line">         <span class="built_in">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">      &#125;</span><br><span class="line">      finally &#123;</span><br><span class="line">         inputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (IOException ex) &#123;</span><br><span class="line">      throw new BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"IOException parsing XML document from "</span> + encodedResource.getResource(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">   finally &#123;</span><br><span class="line">      currentResources.remove(encodedResource);</span><br><span class="line">      <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">         this.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 还在这个文件中，第 388 行</span><br><span class="line">protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)</span><br><span class="line">      throws BeanDefinitionStoreException &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">      // 这里就不看了，将 xml 文件转换为 Document 对象</span><br><span class="line">      Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">      // 继续</span><br><span class="line">      <span class="built_in">return</span> registerBeanDefinitions(doc, resource);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (...</span><br><span class="line">&#125;</span><br><span class="line">// 还在这个文件中，第 505 行</span><br><span class="line">// 返回值：返回从当前配置文件加载了多少数量的 Bean</span><br><span class="line">public int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">   BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">   int countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">   // 这里</span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="built_in">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line">// DefaultBeanDefinitionDocumentReader 90</span><br><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) &#123;</span><br><span class="line">   this.readerContext = readerContext;</span><br><span class="line">   logger.debug(<span class="string">"Loading bean definitions"</span>);</span><br><span class="line">   Element root = doc.getDocumentElement();</span><br><span class="line">   // 从 xml 根节点开始解析文件</span><br><span class="line">   doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过漫长的链路，一个配置文件终于转换为一颗 DOM 树了，注意，这里指的是其中一个配置文件，不是所有的，读者可以看到上面有个 for 循环的。下面开始从根节点开始解析：</p><p><strong>doRegisterBeanDefinitions：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// DefaultBeanDefinitionDocumentReader 116</span><br><span class="line">protected void doRegisterBeanDefinitions(Element root) &#123;</span><br><span class="line">   // 我们看名字就知道，BeanDefinitionParserDelegate 必定是一个重要的类，它负责解析 Bean 定义，</span><br><span class="line">   // 这里为什么要定义一个 parent? 看到后面就知道了，是递归问题，</span><br><span class="line">   // 因为 &lt;beans /&gt; 内部是可以定义 &lt;beans /&gt; 的，所以这个方法的 root 其实不一定就是 xml 的根节点，也可以是嵌套在里面的 &lt;beans /&gt; 节点，从源码分析的角度，我们当做根节点就好了</span><br><span class="line">   BeanDefinitionParserDelegate parent = this.delegate;</span><br><span class="line">   this.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (this.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      // 这块说的是根节点 &lt;beans ... profile=<span class="string">"dev"</span> /&gt; 中的 profile 是否是当前环境需要的，</span><br><span class="line">      // 如果当前环境配置的 profile 不包含此 profile，那就直接 <span class="built_in">return</span> 了，不对此 &lt;beans /&gt; 解析</span><br><span class="line">      // 不熟悉 profile 为何物，不熟悉怎么配置 profile 读者的请移步附录区</span><br><span class="line">      String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">         String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">               profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">         <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">               logger.info(<span class="string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line">                     <span class="string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   preProcessXml(root); // 钩子</span><br><span class="line">   // 往下看</span><br><span class="line">   parseBeanDefinitions(root, this.delegate);</span><br><span class="line">   postProcessXml(root); // 钩子</span><br><span class="line"></span><br><span class="line">   this.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preProcessXml(root) 和 postProcessXml(root) 是给子类用的钩子方法，鉴于没有被使用到，也不是我们的重点，我们直接跳过。</p><p>这里涉及到了 profile 的问题，对于不了解的读者，我在附录中对 profile 做了简单的解释，读者可以参考一下。</p><p>接下来，看核心解析方法 parseBeanDefinitions(root, this.delegate) :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// default namespace 涉及到的就四个标签 &lt;import /&gt;、&lt;<span class="built_in">alias</span> /&gt;、&lt;bean /&gt; 和 &lt;beans /&gt;，</span><br><span class="line">// 其他的属于 custom 的</span><br><span class="line">protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      NodeList nl = root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (node instanceof Element) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               // 解析 default namespace 下面的几个元素</span><br><span class="line">               parseDefaultElement(ele, delegate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               // 解析其他 namespace 的元素</span><br><span class="line">               delegate.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      delegate.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码，我们可以看到，对于每个配置来说，分别进入到 parseDefaultElement(ele, delegate); 和 delegate.parseCustomElement(ele); 这两个分支了。</p><p>parseDefaultElement(ele, delegate) 代表解析的节点是 <code>&lt;import /&gt;、&lt;alias /&gt;、&lt;bean /&gt;、&lt;beans /&gt;</code>这几个。</p><blockquote><p>这里的四个标签之所以是 default 的，是因为它们是处于这个 namespace 下定义的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.springframework.org/schema/beans </span><br></pre></td></tr></table></figure><p>又到初学者科普时间，不熟悉 namespace 的读者请看下面贴出来的 xml，这里的第二行 xmlns 就是咯。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">      xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">      xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">           http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">         http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span><br><span class="line">      default-autowire=<span class="string">"byName"</span>&gt; </span><br></pre></td></tr></table></figure><p>而对于其他的标签，将进入到 delegate.parseCustomElement(element) 这个分支。如我们经常会使用到的 <code> &lt;mvc /&gt;、&lt;task /&gt;、&lt;context /&gt;、&lt;aop /&gt;</code>等。<br>这些属于扩展，如果需要使用上面这些 ”非 default“ 标签，那么上面的 xml 头部的地方也要引入相应的 namespace 和 .xsd 文件的路径，如下所示。同时代码中需要提供相应的 parser 来解析，如 MvcNamespaceHandler、TaskNamespaceHandler、ContextNamespaceHandler、AopNamespaceHandler 等。<br>假如读者想分析 <code>&lt;context:property-placeholder location="classpath:xx.properties" /&gt;</code>的实现原理，就应该到 ContextNamespaceHandler 中找答案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">     xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">     xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">     xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">     xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/mvc   </span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/mvc/spring-mvc.xsd  </span></span><br><span class="line"><span class="string">      "</span></span><br><span class="line">     default-autowire=<span class="string">"byName"</span>&gt;</span><br><span class="line">   &lt;/bean&gt; </span><br></pre></td></tr></table></figure><p>同理，以后你要是碰到 <code>&lt;<dubbo /&gt;</code> 这种标签，那么就应该搜一搜是不是有 DubboNamespaceHandler 这个处理类。<br>回过神来，看看处理 default 标签的方法：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">      // 处理 &lt;import /&gt; 标签</span><br><span class="line">      importBeanDefinitionResource(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">      // 处理 &lt;<span class="built_in">alias</span> /&gt; 标签定义</span><br><span class="line">      // &lt;<span class="built_in">alias</span> name=<span class="string">"fromName"</span> <span class="built_in">alias</span>=<span class="string">"toName"</span>/&gt;</span><br><span class="line">      processAliasRegistration(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      // 处理 &lt;bean /&gt; 标签定义，这也算是我们的重点吧</span><br><span class="line">      processBeanDefinition(ele, delegate);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">      // 如果碰到的是嵌套的 &lt;beans /&gt; 标签，需要递归</span><br><span class="line">      doRegisterBeanDefinitions(ele);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果每个标签都说，那我不吐血，你们都要吐血了。我们挑我们的重点 <bean /> 标签出来说。</p><p><strong>processBeanDefinition 解析 bean 标签</strong><br>下面是 processBeanDefinition 解析 <code>&lt;bean /&gt;</code> 标签：</p><p>// DefaultBeanDefinitionDocumentReader 298</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">   // 将 &lt;bean /&gt; 节点中的信息提取出来，然后封装到一个 BeanDefinitionHolder 中，细节往下看</span><br><span class="line">   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line"></span><br><span class="line">   // 下面的几行先不要看，跳过先，跳过先，跳过先，后面会继续说的</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (bdHolder != null) &#123;</span><br><span class="line">      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      try &#123;</span><br><span class="line">         // Register the final decorated instance.</span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      // Send registration event.</span><br><span class="line">      getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下看怎么解析之前，我们先看下 <code>&lt;bean /&gt;</code> 标签中可以定义哪些属性：</p><table><thead><tr><th align="center">Property</th><th align="center"></th></tr></thead><tbody><tr><td align="center">class</td><td align="center">类的全限定名</td></tr><tr><td align="center">name</td><td align="center">可指定 id、name(用逗号、分号、空格分隔)</td></tr><tr><td align="center">scope</td><td align="center">作用域</td></tr><tr><td align="center">constructor arguments</td><td align="center">指定构造参数</td></tr><tr><td align="center">properties</td><td align="center">设置属性的值</td></tr><tr><td align="center">autowiring mode</td><td align="center">no(默认值)、byName、byType、 constructor</td></tr><tr><td align="center">lazy-initialization mode</td><td align="center">是否懒加载(如果被非懒加载的bean依赖了那么其实也就不能懒加载了)</td></tr><tr><td align="center">initialization method</td><td align="center">bean 属性设置完成后，会调用这个方法</td></tr><tr><td align="center">destruction method</td><td align="center">bean 销毁后的回调方法</td></tr></tbody></table><p>上面表格中的内容我想大家都非常熟悉吧，如果不熟悉，那就是你不够了解 Spring 的配置了。</p><p>简单地说就是像下面这样子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"exampleBean"</span> name=<span class="string">"name1, name2, name3"</span> class=<span class="string">"com.loonycoder.ExampleBean"</span></span><br><span class="line">      scope=<span class="string">"singleton"</span> lazy-init=<span class="string">"true"</span> init-method=<span class="string">"init"</span> destroy-method=<span class="string">"cleanup"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 可以用下面三种形式指定构造参数 --&gt;</span><br><span class="line">    &lt;constructor-arg <span class="built_in">type</span>=<span class="string">"int"</span> value=<span class="string">"7500000"</span>/&gt;</span><br><span class="line">    &lt;constructor-arg name=<span class="string">"years"</span> value=<span class="string">"7500000"</span>/&gt;</span><br><span class="line">    &lt;constructor-arg index=<span class="string">"0"</span> value=<span class="string">"7500000"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- property 的几种情况 --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"beanOne"</span>&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">"anotherExampleBean"</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"beanTwo"</span> ref=<span class="string">"yetAnotherBean"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"integerProperty"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>当然，除了上面举例出来的这些，还有 factory-bean、factory-method、<code>&lt;lockup-method /&gt;、&lt;replaced-method /&gt;、&lt;meta /&gt;、&lt;qualifier /&gt;</code> 这几个，大家是不是熟悉呢？自己检验一下自己对 Spring 中 bean 的了解程度。</p><p>有了以上这些知识以后，我们再继续往里看怎么解析 bean 元素，是怎么转换到 BeanDefinitionHolder 的。</p><p>// BeanDefinitionParserDelegate 428</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) &#123;</span><br><span class="line">    <span class="built_in">return</span> parseBeanDefinitionElement(ele, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) &#123;</span><br><span class="line">   String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">   List&lt;String&gt; aliases = new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">   // 将 name 属性的定义按照 “逗号、分号、空格” 切分，形成一个 别名列表数组，</span><br><span class="line">   // 当然，如果你不定义 name 属性的话，就是空的了</span><br><span class="line">   // 我在附录中简单介绍了一下 id 和 name 的配置，大家可以看一眼，有个20秒就可以了</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">      aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   String beanName = id;</span><br><span class="line">   // 如果没有指定id, 那么用别名列表的第一个名字作为beanName</span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">      beanName = aliases.remove(0);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"No XML 'id' specified - using '"</span> + beanName +</span><br><span class="line">               <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (containingBean == null) &#123;</span><br><span class="line">      checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 根据 &lt;bean ...&gt;...&lt;/bean&gt; 中的配置创建 BeanDefinition，然后把配置中的信息都设置到实例中,</span><br><span class="line">   // 细节后面细说，先知道下面这行结束后，一个 BeanDefinition 实例就出来了。</span><br><span class="line">   AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line"></span><br><span class="line">   // 到这里，整个 &lt;bean /&gt; 标签就算解析结束了，一个 BeanDefinition 就形成了。</span><br><span class="line">   <span class="keyword">if</span> (beanDefinition != null) &#123;</span><br><span class="line">      // 如果都没有设置 id 和 name，那么此时的 beanName 就会为 null，进入下面这块代码产生</span><br><span class="line">      // 如果读者不感兴趣的话，我觉得不需要关心这块代码，对本文源码分析来说，这些东西不重要</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">            <span class="keyword">if</span> (containingBean != null) &#123;// 按照我们的思路，这里 containingBean 是 null 的</span><br><span class="line">               beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                     beanDefinition, this.readerContext.getRegistry(), <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               // 如果我们不定义 id 和 name，那么我们引言里的那个例子：</span><br><span class="line">               //   1. beanName 为：com.loonycoder.service.MessageServiceImpl<span class="comment">#0</span></span><br><span class="line">               //   2. beanClassName 为：com.loonycoder.service.MessageServiceImpl</span><br><span class="line"></span><br><span class="line">               beanName = this.readerContext.generateBeanName(beanDefinition);</span><br><span class="line"></span><br><span class="line">               String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">               <span class="keyword">if</span> (beanClassName != null &amp;&amp;</span><br><span class="line">                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                     !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                  // 把 beanClassName 设置为 Bean 的别名</span><br><span class="line">                  aliases.add(beanClassName);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line">                     <span class="string">"using generated bean name ["</span> + beanName + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         catch (Exception ex) &#123;</span><br><span class="line">            error(ex.getMessage(), ele);</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">      // 返回 BeanDefinitionHolder</span><br><span class="line">      <span class="built_in">return</span> new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们再看看怎么根据配置创建 BeanDefinition 实例的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public AbstractBeanDefinition parseBeanDefinitionElement(</span><br><span class="line">      Element ele, String beanName, BeanDefinition containingBean) &#123;</span><br><span class="line"></span><br><span class="line">   this.parseState.push(new BeanEntry(beanName));</span><br><span class="line"></span><br><span class="line">   String className = null;</span><br><span class="line">   <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">      className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">      String parent = null;</span><br><span class="line">      <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">         parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">      &#125;</span><br><span class="line">      // 创建 BeanDefinition，然后设置类信息而已，很简单，就不贴代码了</span><br><span class="line">      AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line"></span><br><span class="line">      // 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span><br><span class="line">      parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">      bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 下面的一堆是解析 &lt;bean&gt;......&lt;/bean&gt; 内部的子元素，</span><br><span class="line">       * 解析出来以后的信息都放到 bd 的属性中</span><br><span class="line">       */</span><br><span class="line"></span><br><span class="line">      // 解析 &lt;meta /&gt;</span><br><span class="line">      parseMetaElements(ele, bd);</span><br><span class="line">      // 解析 &lt;lookup-method /&gt;</span><br><span class="line">      parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">      // 解析 &lt;replaced-method /&gt;</span><br><span class="line">      parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">    // 解析 &lt;constructor-arg /&gt;</span><br><span class="line">      parseConstructorArgElements(ele, bd);</span><br><span class="line">      // 解析 &lt;property /&gt;</span><br><span class="line">      parsePropertyElements(ele, bd);</span><br><span class="line">      // 解析 &lt;qualifier /&gt;</span><br><span class="line">      parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      bd.setResource(this.readerContext.getResource());</span><br><span class="line">      bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span> bd;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (ClassNotFoundException ex) &#123;</span><br><span class="line">      error(<span class="string">"Bean class ["</span> + className + <span class="string">"] not found"</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (NoClassDefFoundError err) &#123;</span><br><span class="line">      error(<span class="string">"Class that bean class ["</span> + className + <span class="string">"] depends on not found"</span>, ele, err);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Throwable ex) &#123;</span><br><span class="line">      error(<span class="string">"Unexpected failure during bean definition parsing"</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   finally &#123;</span><br><span class="line">      this.parseState.pop();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们已经完成了根据 <code>&lt;bean /&gt;</code> 配置创建了一个 BeanDefinitionHolder 实例。注意，是一个。</p><p>我们回到解析 <code>&lt;bean /&gt;</code> 的入口方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">   // 将 &lt;bean /&gt; 节点转换为 BeanDefinitionHolder，就是上面说的一堆</span><br><span class="line">   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">   <span class="keyword">if</span> (bdHolder != null) &#123;</span><br><span class="line">      // 如果有自定义属性的话，进行相应的解析，先忽略</span><br><span class="line">      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      try &#123;</span><br><span class="line">         // 我们把这步叫做 注册Bean 吧</span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      // 注册完成后，发送事件，本文不展开说这个</span><br><span class="line">      getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家再仔细看一下这块吧，我们后面就不回来说这个了。这里已经根据一个 <code>&lt;bean /&gt;</code> 标签产生了一个 BeanDefinitionHolder 的实例，这个实例里面也就是一个 BeanDefinition 的实例和它的 beanName、aliases 这三个信息，注意，我们的关注点始终在 BeanDefinition 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class BeanDefinitionHolder implements BeanMetadataElement &#123;</span><br><span class="line"></span><br><span class="line">  private final BeanDefinition beanDefinition;</span><br><span class="line"></span><br><span class="line">  private final String beanName;</span><br><span class="line"></span><br><span class="line">  private final String[] aliases;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后我们准备注册这个 BeanDefinition，最后，把这个注册事件发送出去。</p><p>下面，我们开始说说注册 Bean 吧。</p><p><strong>注册 Bean</strong><br>// BeanDefinitionReaderUtils 143</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void registerBeanDefinition(</span><br><span class="line">      BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span><br><span class="line">      throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">   String beanName = definitionHolder.getBeanName();</span><br><span class="line">   // 注册这个 Bean</span><br><span class="line">   registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">   // 如果还有别名的话，也要根据别名全部注册一遍，不然根据别名就会找不到 Bean 了</span><br><span class="line">   String[] aliases = definitionHolder.getAliases();</span><br><span class="line">   <span class="keyword">if</span> (aliases != null) &#123;</span><br><span class="line">      <span class="keyword">for</span> (String <span class="built_in">alias</span> : aliases) &#123;</span><br><span class="line">         // <span class="built_in">alias</span> -&gt; beanName 保存它们的别名信息，这个很简单，用一个 map 保存一下就可以了，</span><br><span class="line">         // 获取的时候，会先将 <span class="built_in">alias</span> 转换为 beanName，然后再查找</span><br><span class="line">         registry.registerAlias(beanName, <span class="built_in">alias</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别名注册的放一边，毕竟它很简单，我们看看怎么注册 Bean。</p><p>// DefaultListableBeanFactory 793</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</span><br><span class="line">      throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">   Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</span><br><span class="line">   Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (beanDefinition instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">         ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">      &#125;</span><br><span class="line">      catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">         throw new BeanDefinitionStoreException(...);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // old? 还记得 “允许 bean 覆盖” 这个配置吗？allowBeanDefinitionOverriding</span><br><span class="line">   BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">   // 之后会看到，所有的 Bean 注册后会放入这个 beanDefinitionMap 中</span><br><span class="line">   oldBeanDefinition = this.beanDefinitionMap.get(beanName);</span><br><span class="line"></span><br><span class="line">   // 处理重复名称的 Bean 定义的情况</span><br><span class="line">   <span class="keyword">if</span> (oldBeanDefinition != null) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">         // 如果不允许覆盖的话，抛异常</span><br><span class="line">         throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription()...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">         // <span class="built_in">log</span>...用框架定义的 Bean 覆盖用户自定义的 Bean </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(oldBeanDefinition)) &#123;</span><br><span class="line">         // <span class="built_in">log</span>...用新的 Bean 覆盖旧的 Bean</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         // <span class="built_in">log</span>...用同等的 Bean 覆盖旧的 Bean，这里指的是 equals 方法返回 <span class="literal">true</span> 的 Bean</span><br><span class="line">      &#125;</span><br><span class="line">      // 覆盖</span><br><span class="line">      this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      // 判断是否已经有其他的 Bean 开始初始化了.</span><br><span class="line">      // 注意，<span class="string">"注册Bean"</span> 这个动作结束，Bean 依然还没有初始化，我们后面会有大篇幅说初始化过程，</span><br><span class="line">      // 在 Spring 容器启动的最后，会 预初始化 所有的 singleton beans</span><br><span class="line">      <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">         // Cannot modify startup-time collection elements anymore (<span class="keyword">for</span> stable iteration)</span><br><span class="line">         synchronized (this.beanDefinitionMap) &#123;</span><br><span class="line">            this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            List&lt;String&gt; updatedDefinitions = new ArrayList&lt;String&gt;(this.beanDefinitionNames.size() + 1);</span><br><span class="line">            updatedDefinitions.addAll(this.beanDefinitionNames);</span><br><span class="line">            updatedDefinitions.add(beanName);</span><br><span class="line">            this.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">            <span class="keyword">if</span> (this.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">               Set&lt;String&gt; updatedSingletons = new LinkedHashSet&lt;String&gt;(this.manualSingletonNames);</span><br><span class="line">               updatedSingletons.remove(beanName);</span><br><span class="line">               this.manualSingletonNames = updatedSingletons;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         // 最正常的应该是进到这个分支。</span><br><span class="line"></span><br><span class="line">         // 将 BeanDefinition 放到这个 map 中，这个 map 保存了所有的 BeanDefinition</span><br><span class="line">         this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">         // 这是个 ArrayList，所以会按照 bean 配置的顺序保存每一个注册的 Bean 的名字</span><br><span class="line">         this.beanDefinitionNames.add(beanName);</span><br><span class="line">         // 这是个 LinkedHashSet，代表的是手动注册的 singleton bean，</span><br><span class="line">         // 注意这里是 remove 方法，到这里的 Bean 当然不是手动注册的</span><br><span class="line">         // 手动指的是通过调用以下方法注册的 bean ：</span><br><span class="line">         //     registerSingleton(String beanName, Object singletonObject)</span><br><span class="line">         // 这不是重点，解释只是为了不让大家疑惑。Spring 会在后面<span class="string">"手动"</span>注册一些 Bean，</span><br><span class="line">         // 如 <span class="string">"environment"</span>、<span class="string">"systemProperties"</span> 等 bean，我们自己也可以在运行时注册 Bean 到容器中的</span><br><span class="line">         this.manualSingletonNames.remove(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      // 这个不重要，在预初始化的时候会用到，不必管它。</span><br><span class="line">      this.frozenBeanDefinitionNames = null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (oldBeanDefinition != null || containsSingleton(beanName)) &#123;</span><br><span class="line">      resetBeanDefinition(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下，到这里已经初始化了 Bean 容器，<code>&lt;bean /&gt;</code> 配置也相应的转换为了一个个 BeanDefinition，然后注册了各个 BeanDefinition 到注册中心，并且发送了注册事件。</p><p>——— 分割线 ———</p><p>到这里是一个分水岭，前面的内容都还算比较简单，不过应该也比较繁琐，大家要清楚地知道前面都做了哪些事情。</p><h4 id="Bean-容器实例化完成后"><a href="#Bean-容器实例化完成后" class="headerlink" title="Bean 容器实例化完成后"></a>Bean 容器实例化完成后</h4><p>说到这里，我们回到 refresh() 方法，我重新贴了一遍代码，看看我们说到哪了。是的，我们才说完 obtainFreshBeanFactory() 方法。</p><p>考虑到篇幅，这里开始大幅缩减掉没必要详细介绍的部分，大家直接看下面的代码中的注释就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">   // 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span><br><span class="line">   synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line"></span><br><span class="line">      // 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      // 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span><br><span class="line">      // 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span><br><span class="line">      // 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      // 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span><br><span class="line">      // 这块待会会展开说</span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">         // 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span><br><span class="line">         // 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span><br><span class="line"></span><br><span class="line">         // 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span><br><span class="line">         // 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line">         // 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 回调方法</span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);          </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         // 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span><br><span class="line">         // 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span><br><span class="line">         // 两个方法分别在 Bean 初始化之前和初始化之后得到执行。这里仅仅是注册，之后会看到回调这两方法的时机</span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         // 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         // 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         // 从方法名就可以知道，典型的模板方法(钩子方法)，不展开说</span><br><span class="line">         // 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         // 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         // 重点，重点，重点</span><br><span class="line">         // 初始化所有的 singleton beans</span><br><span class="line">         //（lazy-init 的除外）</span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         // 最后，广播事件，ApplicationContext 初始化完成，不展开</span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      catch (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">         // 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         // Reset <span class="string">'active'</span> flag.</span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         // 把异常往外抛</span><br><span class="line">         throw ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      finally &#123;</span><br><span class="line">         // Reset common introspection caches <span class="keyword">in</span> Spring<span class="string">'s core, since we</span></span><br><span class="line"><span class="string">         // might not ever need metadata for singleton beans anymore...</span></span><br><span class="line"><span class="string">         resetCommonCaches();</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="准备-Bean-容器-prepareBeanFactory"><a href="#准备-Bean-容器-prepareBeanFactory" class="headerlink" title="准备 Bean 容器: prepareBeanFactory"></a>准备 Bean 容器: prepareBeanFactory</h4><p>之前我们说过，Spring 把我们在 xml 配置的 bean 都注册以后，会”手动”注册一些特殊的 bean。</p><p>这里简单介绍下 prepareBeanFactory(factory) 方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Configure the factory<span class="string">'s standard context characteristics,</span></span><br><span class="line"><span class="string"> * such as the context'</span>s ClassLoader and post-processors.</span><br><span class="line"> * @param beanFactory the BeanFactory to configure</span><br><span class="line"> */</span><br><span class="line">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">   // 设置 BeanFactory 的类加载器，我们知道 BeanFactory 需要加载类，也就需要类加载器，</span><br><span class="line">   // 这里设置为加载当前 ApplicationContext 类的类加载器</span><br><span class="line">   beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line"></span><br><span class="line">   // 设置 BeanExpressionResolver</span><br><span class="line">   beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">   // </span><br><span class="line">   beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class="line"></span><br><span class="line">   // 添加一个 BeanPostProcessor，这个 processor 比较简单：</span><br><span class="line">   // 实现了 Aware 接口的 beans 在初始化的时候，这个 processor 负责回调，</span><br><span class="line">   // 这个我们很常用，如我们会为了获取 ApplicationContext 而 implement ApplicationContextAware</span><br><span class="line">   // 注意：它不仅仅回调 ApplicationContextAware，</span><br><span class="line">   //   还会负责回调 EnvironmentAware、ResourceLoaderAware 等，看下源码就清楚了</span><br><span class="line">   beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span><br><span class="line"></span><br><span class="line">   // 下面几行的意思就是，如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span><br><span class="line">   // Spring 会通过其他方式来处理这些依赖。</span><br><span class="line">   beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，</span><br><span class="line">    * 之前我们说过，<span class="string">"当前 ApplicationContext 持有一个 BeanFactory"</span>，这里解释了第一行。</span><br><span class="line">    * ApplicationContext 还继承了 ResourceLoader、ApplicationEventPublisher、MessageSource</span><br><span class="line">    * 所以对于这几个依赖，可以赋值为 this，注意 this 是一个 ApplicationContext</span><br><span class="line">    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean</span><br><span class="line">    */</span><br><span class="line">   beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">   beanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class="line">   beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class="line">   beanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br><span class="line"></span><br><span class="line">   // 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span><br><span class="line">   // 那么将其添加到 listener 列表中，可以理解成：注册 事件监听器</span><br><span class="line">   beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));</span><br><span class="line"></span><br><span class="line">   // 这里涉及到特殊的 bean，名为：loadTimeWeaver，这不是我们的重点，忽略它</span><br><span class="line">   // tips: ltw 是 AspectJ 的概念，指的是在运行期进行织入，这个和 Spring AOP 不一样，</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">      // Set a temporary ClassLoader <span class="keyword">for</span> <span class="built_in">type</span> matching.</span><br><span class="line">      beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 从下面几行代码我们可以知道，Spring 往往很 <span class="string">"智能"</span> 就是因为它会帮我们默认注册一些有用的 bean，</span><br><span class="line">    * 我们也可以选择覆盖</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   // 如果没有定义 <span class="string">"environment"</span> 这个 bean，那么 Spring 会 <span class="string">"手动"</span> 注册一个</span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">   &#125;</span><br><span class="line">   // 如果没有定义 <span class="string">"systemProperties"</span> 这个 bean，那么 Spring 会 <span class="string">"手动"</span> 注册一个</span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">   &#125;</span><br><span class="line">   // 如果没有定义 <span class="string">"systemEnvironment"</span> 这个 bean，那么 Spring 会 <span class="string">"手动"</span> 注册一个</span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这块代码中，Spring 对一些特殊的 bean 进行了处理，读者如果暂时还不能消化它们也没有关系，慢慢往下看。</p><h4 id="初始化所有的-singleton-beans"><a href="#初始化所有的-singleton-beans" class="headerlink" title="初始化所有的 singleton beans"></a>初始化所有的 singleton beans</h4><p>我们的重点当然是 <code>finishBeanFactoryInitialization(beanFactory);</code> 这个巨头了，这里会负责初始化所有的 singleton beans。</p><p>注意，后面的描述中，我都会使用<strong>初始化</strong>或<strong>预初始化</strong>来代表这个阶段，Spring 会在这个阶段完成所有的 singleton beans 的实例化。</p><p>我们来总结一下，到目前为止，应该说 BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化并且其中的 postProcessBeanFactory(factory) 方法已经得到回调执行了。而且 Spring 已经“手动”注册了一些特殊的 Bean，如 <code>environment</code>、<code>systemProperties</code> 等。</p><p>剩下的就是初始化 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么 Spring 会在接下来初始化所有的 singleton beans。<br>// AbstractApplicationContext.java 834</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 初始化剩余的 singleton beans</span><br><span class="line">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line"></span><br><span class="line">   // 首先，初始化名字为 conversionService 的 Bean。本着送佛送到西的精神，我在附录中简单介绍了一下 ConversionService，因为这实在太实用了</span><br><span class="line">   // 什么，看代码这里没有初始化 Bean 啊！</span><br><span class="line">   // 注意了，初始化的动作包装在 beanFactory.getBean(...) 中，这里先不说细节，先往下看吧</span><br><span class="line">   <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">         beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">      beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // Register a default embedded value resolver <span class="keyword">if</span> no bean post-processor</span><br><span class="line">   // (such as a PropertyPlaceholderConfigurer bean) registered any before:</span><br><span class="line">   // at this point, primarily <span class="keyword">for</span> resolution <span class="keyword">in</span> annotation attribute values.</span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">      beanFactory.addEmbeddedValueResolver(new <span class="function"><span class="title">StringValueResolver</span></span>() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String resolveStringValue(String strVal) &#123;</span><br><span class="line">            <span class="built_in">return</span> getEnvironment().resolvePlaceholders(strVal);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 先初始化 LoadTimeWeaverAware 类型的 Bean</span><br><span class="line">   // 之前也说过，这是 AspectJ 相关的内容，放心跳过吧</span><br><span class="line">   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">   <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">      getBean(weaverAwareName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // Stop using the temporary ClassLoader <span class="keyword">for</span> <span class="built_in">type</span> matching.</span><br><span class="line">   beanFactory.setTempClassLoader(null);</span><br><span class="line"></span><br><span class="line">   // 没什么别的目的，因为到这一步的时候，Spring 已经开始预初始化 singleton beans 了，</span><br><span class="line">   // 肯定不希望这个时候还出现 bean 定义解析、加载、注册。</span><br><span class="line">   beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">   // 开始初始化</span><br><span class="line">   beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面最后一行往里看，我们就又回到 DefaultListableBeanFactory 这个类了，这个类大家应该都不陌生了吧。</p><p><strong>preInstantiateSingletons</strong><br>// DefaultListableBeanFactory 728</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void preInstantiateSingletons() throws BeansException &#123;</span><br><span class="line">   <span class="keyword">if</span> (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">      this.logger.debug(<span class="string">"Pre-instantiating singletons in "</span> + this);</span><br><span class="line">   &#125;</span><br><span class="line">   // this.beanDefinitionNames 保存了所有的 beanNames</span><br><span class="line">   List&lt;String&gt; beanNames = new ArrayList&lt;String&gt;(this.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">   // 下面这个循环，触发所有的非懒加载的 singleton beans 的初始化操作</span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line"></span><br><span class="line">      // 合并父 Bean 中的配置，注意 &lt;bean id=<span class="string">""</span> class=<span class="string">""</span> parent=<span class="string">""</span> /&gt; 中的 parent，用的不多吧，</span><br><span class="line">      // 考虑到这可能会影响大家的理解，我在附录中解释了一下 <span class="string">"Bean 继承"</span>，不了解的请到附录中看一下</span><br><span class="line">      RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line">      // 非抽象、非懒加载的 singletons。如果配置了 <span class="string">'abstract = true'</span>，那是不需要初始化的</span><br><span class="line">      <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">         // 处理 FactoryBean(读者如果不熟悉 FactoryBean，请移步附录区了解)</span><br><span class="line">         <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">            // FactoryBean 的话，在 beanName 前面加上 ‘&amp;’ 符号。再调用 getBean，getBean 方法别急</span><br><span class="line">            final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">            // 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现，此处忽略，直接跳过</span><br><span class="line">            boolean isEagerInit;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) &#123;</span><br><span class="line">               isEagerInit = AccessController.doPrivileged(new PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public Boolean <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">                     <span class="built_in">return</span> ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               isEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;</span><br><span class="line">                     ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line"></span><br><span class="line">               getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            // 对于普通的 Bean，只要调用 getBean(beanName) 这个方法就可以进行初始化了</span><br><span class="line">            getBean(beanName);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 到这里说明所有的非懒加载的 singleton beans 已经完成了初始化</span><br><span class="line">   // 如果我们定义的 bean 是实现了 SmartInitializingSingleton 接口的，那么在这里得到回调，忽略</span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">      Object singletonInstance = getSingleton(beanName);</span><br><span class="line">      <span class="keyword">if</span> (singletonInstance instanceof SmartInitializingSingleton) &#123;</span><br><span class="line">         final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != null) &#123;</span><br><span class="line">            AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public Object <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">                  smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                  <span class="built_in">return</span> null;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就进入到 getBean(beanName) 方法了，这个方法我们经常用来从 BeanFactory 中获取一个 Bean，而初始化的过程也封装到了这个方法里。</p><p><strong>getBean</strong><br>在继续前进之前，读者应该具备 FactoryBean 的知识，如果读者还不熟悉，请移步附录部分了解 FactoryBean。</p><p>// AbstractBeanFactory 196</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">   <span class="built_in">return</span> doGetBean(name, null, null, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 我们在剖析初始化 Bean 的过程，但是 getBean 方法我们经常是用来从容器中获取 Bean 用的，注意切换思路，</span><br><span class="line">// 已经初始化过了就从容器中直接返回，否则就先初始化再返回</span><br><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">protected &lt;T&gt; T doGetBean(</span><br><span class="line">      final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly)</span><br><span class="line">      throws BeansException &#123;</span><br><span class="line">   // 获取一个 “正统的” beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，</span><br><span class="line">   // 一个是别名问题，因为这个方法是 getBean，获取 Bean 用的，你要是传一个别名进来，是完全可以的</span><br><span class="line">   final String beanName = transformedBeanName(name);</span><br><span class="line"></span><br><span class="line">   // 注意跟着这个，这个是返回值</span><br><span class="line">   Object bean; </span><br><span class="line"></span><br><span class="line">   // 检查下是不是已经创建过了</span><br><span class="line">   Object sharedInstance = getSingleton(beanName);</span><br><span class="line"></span><br><span class="line">   // 这里说下 args 呗，虽然看上去一点不重要。前面我们一路进来的时候都是 getBean(beanName)，</span><br><span class="line">   // 所以 args 传参其实是 null 的，但是如果 args 不为空的时候，那么意味着调用方不是希望获取 Bean，而是创建 Bean</span><br><span class="line">   <span class="keyword">if</span> (sharedInstance != null &amp;&amp; args == null) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"..."</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 下面这个方法：如果是普通 Bean 的话，直接返回 sharedInstance，</span><br><span class="line">      // 如果是 FactoryBean 的话，返回它创建的那个实例对象</span><br><span class="line">      // (FactoryBean 知识，读者若不清楚请移步附录)</span><br><span class="line">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         // 创建过了此 beanName 的 prototype 类型的 bean，那么抛异常，</span><br><span class="line">         // 往往是因为陷入了循环引用</span><br><span class="line">         throw new BeanCurrentlyInCreationException(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 检查一下这个 BeanDefinition 在容器中是否存在</span><br><span class="line">      BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         // 如果当前容器不存在这个 BeanDefinition，试试父容器中有没有</span><br><span class="line">         String nameToLookup = originalBeanName(name);</span><br><span class="line">         <span class="keyword">if</span> (args != null) &#123;</span><br><span class="line">            // 返回父容器的查询结果</span><br><span class="line">            <span class="built_in">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            // No args -&gt; delegate to standard getBean method.</span><br><span class="line">            <span class="built_in">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">         // typeCheckOnly 为 <span class="literal">false</span>，将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span><br><span class="line">         markBeanAsCreated(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /*</span><br><span class="line">       * 稍稍总结一下：</span><br><span class="line">       * 到这里的话，要准备创建 Bean 了，对于 singleton 的 Bean 来说，容器中还没创建过此 Bean；</span><br><span class="line">       * 对于 prototype 的 Bean 来说，本来就是要创建一个新的 Bean。</span><br><span class="line">       */</span><br><span class="line">      try &#123;</span><br><span class="line">         final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">         // 先初始化依赖的所有 Bean，这个很好理解。</span><br><span class="line">         // 注意，这里的依赖指的是 depends-on 中定义的依赖</span><br><span class="line">         String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">         <span class="keyword">if</span> (dependsOn != null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">               // 检查是不是有循环依赖，这里的循环依赖和我们前面说的循环依赖又不一样，这里肯定是不允许出现的，不然要乱套了，读者想一下就知道了</span><br><span class="line">               <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                  throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"'Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               // 注册一下依赖关系</span><br><span class="line">               registerDependentBean(dep, beanName);</span><br><span class="line">               // 先初始化被依赖项</span><br><span class="line">               getBean(dep);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 如果是 singleton scope 的，创建 singleton 的实例</span><br><span class="line">         <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public Object getObject() throws BeansException &#123;</span><br><span class="line">                  try &#123;</span><br><span class="line">                     // 执行创建 Bean，详情后面再说</span><br><span class="line">                     <span class="built_in">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                  &#125;</span><br><span class="line">                  catch (BeansException ex) &#123;</span><br><span class="line">                     destroySingleton(beanName);</span><br><span class="line">                     throw ex;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 如果是 prototype scope 的，创建 prototype 的实例</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">            // It’s a prototype -&gt; create a new instance.</span><br><span class="line">            Object prototypeInstance = null;</span><br><span class="line">            try &#123;</span><br><span class="line">               beforePrototypeCreation(beanName);</span><br><span class="line">               // 执行创建 Bean</span><br><span class="line">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">               afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 如果不是 singleton 和 prototype 的话，需要委托给相应的实现类来处理</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            String scopeName = mbd.getScope();</span><br><span class="line">            final Scope scope = this.scopes.get(scopeName);</span><br><span class="line">            <span class="keyword">if</span> (scope == null) &#123;</span><br><span class="line">               throw new IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">               Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public Object getObject() throws BeansException &#123;</span><br><span class="line">                     beforePrototypeCreation(beanName);</span><br><span class="line">                     try &#123;</span><br><span class="line">                        // 执行创建 Bean</span><br><span class="line">                        <span class="built_in">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                     &#125;</span><br><span class="line">                     finally &#123;</span><br><span class="line">                        afterPrototypeCreation(beanName);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IllegalStateException ex) &#123;</span><br><span class="line">               throw new BeanCreationException(beanName,</span><br><span class="line">                     <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                     <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                     ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      catch (BeansException ex) &#123;</span><br><span class="line">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">         throw ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 最后，检查一下类型对不对，不对的话就抛异常，对的话就返回了</span><br><span class="line">   <span class="keyword">if</span> (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">         <span class="built_in">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">      &#125;</span><br><span class="line">      catch (TypeMismatchException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                  ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家应该也猜到了，接下来当然是分析 createBean 方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected abstract Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException;</span><br></pre></td></tr></table></figure><p>第三个参数 args 数组代表创建实例需要的参数，不就是给构造方法用的参数，或者是工厂 Bean 的参数嘛，不过要注意，在我们的初始化阶段，args 是 null。</p><p>这回我们要到一个新的类了 AbstractAutowireCapableBeanFactory，看类名，AutowireCapable？类名是不是也说明了点问题了。</p><p>主要是为了以下场景，采用 @Autowired 注解注入属性值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MessageServiceImpl implements MessageService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getMessage</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> userService.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"messageService"</span> class=<span class="string">"com.loonycoder.service.MessageServiceImpl"</span> /&gt;</span><br></pre></td></tr></table></figure><p>以上这种属于混用了 xml 和 注解 两种方式的配置方式，Spring 会处理这种情况。</p><p>好了，读者要知道这么回事就可以了，继续向前。</p><p>// AbstractAutowireCapableBeanFactory 447</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Central method of this class: creates a bean instance,</span><br><span class="line"> * populates the bean instance, applies post-processors, etc.</span><br><span class="line"> * @see <span class="comment">#doCreateBean</span></span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123;</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">   // 确保 BeanDefinition 中的 Class 被加载</span><br><span class="line">   Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">   <span class="keyword">if</span> (resolvedClass != null &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != null) &#123;</span><br><span class="line">      mbdToUse = new RootBeanDefinition(mbd);</span><br><span class="line">      mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 准备方法覆写，这里又涉及到一个概念：MethodOverrides，它来自于 bean 定义中的 &lt;lookup-method /&gt; </span><br><span class="line">   // 和 &lt;replaced-method /&gt;，如果读者感兴趣，回到 bean 解析的地方看看对这两个标签的解析。</span><br><span class="line">   // 我在附录中也对这两个标签的相关知识点进行了介绍，读者可以移步去看看</span><br><span class="line">   try &#123;</span><br><span class="line">      mbdToUse.prepareMethodOverrides();</span><br><span class="line">   &#125;</span><br><span class="line">   catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">            beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">      // 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理，</span><br><span class="line">      // 在 《Spring AOP 源码分析》那篇文章中有解释，这里先跳过</span><br><span class="line">      Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">      <span class="keyword">if</span> (bean != null) &#123;</span><br><span class="line">         <span class="built_in">return</span> bean; </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Throwable ex) &#123;</span><br><span class="line">      throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   // 重头戏，创建 bean</span><br><span class="line">   Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">return</span> beanInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建Bean</strong><br>我们继续往里看 doCreateBean 这个方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Actually create the specified bean. Pre-creation processing has already happened</span><br><span class="line"> * at this point, e.g. checking &#123;@code postProcessBeforeInstantiation&#125; callbacks.</span><br><span class="line"> * &lt;p&gt;Differentiates between default bean instantiation, use of a</span><br><span class="line"> * factory method, and autowiring a constructor.</span><br><span class="line"> * @param beanName the name of the bean</span><br><span class="line"> * @param mbd the merged bean definition <span class="keyword">for</span> the bean</span><br><span class="line"> * @param args explicit arguments to use <span class="keyword">for</span> constructor or factory method invocation</span><br><span class="line"> * @<span class="built_in">return</span> a new instance of the bean</span><br><span class="line"> * @throws BeanCreationException <span class="keyword">if</span> the bean could not be created</span><br><span class="line"> * @see <span class="comment">#instantiateBean</span></span><br><span class="line"> * @see <span class="comment">#instantiateUsingFactoryMethod</span></span><br><span class="line"> * @see <span class="comment">#autowireConstructor</span></span><br><span class="line"> */</span><br><span class="line">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)</span><br><span class="line">      throws BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">   // Instantiate the bean.</span><br><span class="line">   BeanWrapper instanceWrapper = null;</span><br><span class="line">   <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">      instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (instanceWrapper == null) &#123;</span><br><span class="line">      // 说明不是 FactoryBean，这里实例化 Bean，这里非常关键，细节之后再说</span><br><span class="line">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line">   // 这个就是 Bean 里面的 我们定义的类 的实例，很多地方我直接描述成 <span class="string">"bean 实例"</span></span><br><span class="line">   final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);</span><br><span class="line">   // 类型</span><br><span class="line">   Class&lt;?&gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);</span><br><span class="line">   mbd.resolvedTargetType = beanType;</span><br><span class="line"></span><br><span class="line">   // 建议跳过吧，涉及接口：MergedBeanDefinitionPostProcessor</span><br><span class="line">   synchronized (mbd.postProcessingLock) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">            // MergedBeanDefinitionPostProcessor，这个我真不展开说了，直接跳过吧，很少用的</span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         catch (Throwable ex) &#123;</span><br><span class="line">            throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                  <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // Eagerly cache singletons to be able to resolve circular references</span><br><span class="line">   // even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br><span class="line">   // 下面这块代码是为了解决循环依赖的问题，以后有时间，我再对循环依赖这个问题进行解析吧</span><br><span class="line">   boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class="line">         isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">               <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public Object getObject() throws BeansException &#123;</span><br><span class="line">            <span class="built_in">return</span> getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // Initialize the bean instance.</span><br><span class="line">   Object exposedObject = bean;</span><br><span class="line">   try &#123;</span><br><span class="line">      // 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值</span><br><span class="line">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">      <span class="keyword">if</span> (exposedObject != null) &#123;</span><br><span class="line">         // 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？</span><br><span class="line">         // 这里就是处理 bean 初始化完成后的各种回调</span><br><span class="line">         exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">         throw (BeanCreationException) ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         throw new BeanCreationException(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      // </span><br><span class="line">      Object earlySingletonReference = getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (earlySingletonReference != null) &#123;</span><br><span class="line">         <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">            exposedObject = earlySingletonReference;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">            String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">            Set&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;String&gt;(dependentBeans.length);</span><br><span class="line">            <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                  actualDependentBeans.add(dependentBean);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">               throw new BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                     <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                     <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                     <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                     <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                     <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // Register bean as disposable.</span><br><span class="line">   try &#123;</span><br><span class="line">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      throw new BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们已经分析完了 doCreateBean 方法，总的来说，我们已经说完了整个初始化流程。</p><p>接下来我们挑 doCreateBean 中的三个细节出来说说。一个是创建 Bean 实例的 createBeanInstance 方法，一个是依赖注入的 populateBean 方法，还有就是回调方法 initializeBean。 </p><p>注意了，接下来的这三个方法要认真说那也是极其复杂的，很多地方我就点到为止了，感兴趣的读者可以自己往里看，最好就是碰到不懂的，自己写代码去调试它。</p><p><strong>创建 Bean 实例</strong><br>我们先看看 createBeanInstance 方法。需要说明的是，这个方法如果每个分支都分析下去，必然也是极其复杂冗长的，我们挑重点说。此方法的目的就是实例化我们指定的类。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) &#123;</span><br><span class="line">   // 确保已经加载了此 class</span><br><span class="line">   Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">   // 校验一下这个类的访问权限</span><br><span class="line">   <span class="keyword">if</span> (beanClass != null &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">      throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mbd.getFactoryMethodName() != null)  &#123;</span><br><span class="line">      // 采用工厂方法实例化，不熟悉这个概念的读者请看附录，注意，不是 FactoryBean</span><br><span class="line">      <span class="built_in">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 如果不是第一次创建，比如第二次创建 prototype bean。</span><br><span class="line">   // 这种情况下，我们可以从第一次创建知道，采用无参构造函数，还是构造函数依赖注入 来完成实例化</span><br><span class="line">   boolean resolved = <span class="literal">false</span>;</span><br><span class="line">   boolean autowireNecessary = <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (args == null) &#123;</span><br><span class="line">      synchronized (mbd.constructorArgumentLock) &#123;</span><br><span class="line">         <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != null) &#123;</span><br><span class="line">            resolved = <span class="literal">true</span>;</span><br><span class="line">            autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">      <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">         // 构造函数依赖注入</span><br><span class="line">         <span class="built_in">return</span> autowireConstructor(beanName, mbd, null, null);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         // 无参构造函数</span><br><span class="line">         <span class="built_in">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 判断是否采用有参构造函数</span><br><span class="line">   Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">   <span class="keyword">if</span> (ctors != null ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">         mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">      // 构造函数依赖注入</span><br><span class="line">      <span class="built_in">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 调用无参构造函数</span><br><span class="line">   <span class="built_in">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挑个简单的<strong>无参构造函数</strong>构造实例来看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">      Object beanInstance;</span><br><span class="line">      final BeanFactory parent = this;</span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != null) &#123;</span><br><span class="line">         beanInstance = AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">               <span class="built_in">return</span> getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;, getAccessControlContext());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         // 实例化</span><br><span class="line">         beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">      &#125;</span><br><span class="line">      // 包装一下，返回</span><br><span class="line">      BeanWrapper bw = new BeanWrapperImpl(beanInstance);</span><br><span class="line">      initBeanWrapper(bw);</span><br><span class="line">      <span class="built_in">return</span> bw;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Throwable ex) &#123;</span><br><span class="line">      throw new BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Instantiation of bean failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，关键的地方在于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br></pre></td></tr></table></figure><p>这里会进行实际的实例化过程，我们进去看看:</p><p>// SimpleInstantiationStrategy 59</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) &#123;</span><br><span class="line"></span><br><span class="line">   // 如果不存在方法覆写，那就使用 java 反射进行实例化，否则使用 CGLIB,</span><br><span class="line">   // 方法覆写 请参见附录<span class="string">"方法注入"</span>中对 lookup-method 和 replaced-method 的介绍</span><br><span class="line">   <span class="keyword">if</span> (bd.getMethodOverrides().isEmpty()) &#123;</span><br><span class="line">      Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">      synchronized (bd.constructorArgumentLock) &#123;</span><br><span class="line">         constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">         <span class="keyword">if</span> (constructorToUse == null) &#123;</span><br><span class="line">            final Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">            <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">               throw new BeanInstantiationException(clazz, <span class="string">"Specified class is an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">               <span class="keyword">if</span> (System.getSecurityManager() != null) &#123;</span><br><span class="line">                  constructorToUse = AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() &#123;</span><br><span class="line">                     @Override</span><br><span class="line">                     public Constructor&lt;?&gt; run() throws Exception &#123;</span><br><span class="line">                        <span class="built_in">return</span> clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  constructorToUse = clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">               &#125;</span><br><span class="line">               bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Throwable ex) &#123;</span><br><span class="line">               throw new BeanInstantiationException(clazz, <span class="string">"No default constructor found"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 利用构造方法进行实例化</span><br><span class="line">      <span class="built_in">return</span> BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      // 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类，这里就不展开了。</span><br><span class="line">      // tips: 因为如果不使用 CGLIB 的话，存在 override 的情况 JDK 并没有提供相应的实例化支持</span><br><span class="line">      <span class="built_in">return</span> instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>bean 属性注入</strong><br>看完了 createBeanInstance(…) 方法，我们来看看 populateBean(…) 方法，该方法负责进行属性设值，处理依赖。</p><p>// AbstractAutowireCapableBeanFactory 1203</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123;</span><br><span class="line">   // bean 实例的所有属性都在这里了</span><br><span class="line">   PropertyValues pvs = mbd.getPropertyValues();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (bw == null) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line">         throw new BeanCreationException(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         // Skip property population phase <span class="keyword">for</span> null instance.</span><br><span class="line">         <span class="built_in">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 到这步的时候，bean 实例化完成（通过工厂方法或构造方法），但是还没开始属性设值，</span><br><span class="line">   // InstantiationAwareBeanPostProcessor 的实现类可以在这里对 bean 进行状态修改，</span><br><span class="line">   // 我也没找到有实际的使用，所以我们暂且忽略这块吧</span><br><span class="line">   boolean continueWithPropertyPopulation = <span class="literal">true</span>;</span><br><span class="line">   <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">            InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">            // 如果返回 <span class="literal">false</span>，代表不需要进行后续的属性设值，也不需要再经过其他的 BeanPostProcessor 的处理</span><br><span class="line">            <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">               continueWithPropertyPopulation = <span class="literal">false</span>;</span><br><span class="line">               <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">      MutablePropertyValues newPvs = new MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">      // 通过名字找到所有属性值，如果是 bean 依赖，先初始化依赖的 bean。记录依赖关系</span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">         autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 通过类型装配。复杂一些</span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">         autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pvs = newPvs;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">   boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">      PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">      <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">         <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">               InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">               // 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor</span><br><span class="line">               // 对采用 @Autowired、@Value 注解的依赖进行设值，这里的内容也是非常丰富的，不过本文不会展开说了，感兴趣的读者请自行研究</span><br><span class="line">               pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">               <span class="keyword">if</span> (pvs == null) &#123;</span><br><span class="line">                  <span class="built_in">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">         checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   // 设置 bean 实例的属性值</span><br><span class="line">   applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>initializeBean</strong><br>属性注入完成后，这一步其实就是处理各种回调了，这块代码比较简单。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">   <span class="keyword">if</span> (System.getSecurityManager() != null) &#123;</span><br><span class="line">      AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public Object <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, getAccessControlContext());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      // 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调</span><br><span class="line">      invokeAwareMethods(beanName, bean);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Object wrappedBean = bean;</span><br><span class="line">   <span class="keyword">if</span> (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">      // BeanPostProcessor 的 postProcessBeforeInitialization 回调</span><br><span class="line">      wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   try &#123;</span><br><span class="line">      // 处理 bean 中定义的 init-method，</span><br><span class="line">      // 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法</span><br><span class="line">      invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Throwable ex) &#123;</span><br><span class="line">      throw new BeanCreationException(</span><br><span class="line">            (mbd != null ? mbd.getResourceDescription() : null),</span><br><span class="line">            beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">      // BeanPostProcessor 的 postProcessAfterInitialization 回调</span><br><span class="line">      wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家发现没有，BeanPostProcessor 的两个回调都发生在这边，只不过中间处理了 init-method，是不是和读者原来的认知有点不一样了？</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="id和name"><a href="#id和name" class="headerlink" title="id和name"></a>id和name</h4><p>每个 Bean 在 Spring 容器中都有一个唯一的名字（beanName）和 0 个或多个别名（aliases）。</p><p>我们从 Spring 容器中获取 Bean 的时候，可以根据 beanName，也可以通过别名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beanFactory.getBean(<span class="string">"beanName or alias"</span>);</span><br></pre></td></tr></table></figure><p>在配置 <code>&lt;bean /&gt;</code> 的过程中，我们可以配置 id 和 name，看几个例子就知道是怎么回事了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"messageService"</span> name=<span class="string">"m1, m2, m3"</span> class=<span class="string">"com.loonycoder.service.MessageServiceImpl"</span>&gt;</span><br></pre></td></tr></table></figure><p>以上配置的结果就是：beanName 为 messageService，别名有 3 个，分别为 m1、m2、m3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=<span class="string">"m1, m2, m3"</span> class=<span class="string">"com.loonycoder.service.MessageServiceImpl"</span> /&gt;</span><br></pre></td></tr></table></figure><p>以上配置的结果就是：beanName 为 m1，别名有 2 个，分别为 m2、m3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=<span class="string">"com.loonycoder.service.MessageServiceImpl"</span>&gt;</span><br></pre></td></tr></table></figure><p>beanName 为：com.loonycoder.service.MessageServiceImpl#0，</p><p>别名 1 个，为： com.loonycoder.service.MessageServiceImpl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"messageService"</span> class=<span class="string">"com.loonycoder.service.MessageServiceImpl"</span>&gt;</span><br></pre></td></tr></table></figure><p>以上配置的结果就是：beanName 为 messageService，没有别名。</p><h4 id="配置是否允许-Bean-覆盖、是否允许循环依赖"><a href="#配置是否允许-Bean-覆盖、是否允许循环依赖" class="headerlink" title="配置是否允许 Bean 覆盖、是否允许循环依赖"></a>配置是否允许 Bean 覆盖、是否允许循环依赖</h4><p>我们说过，默认情况下，allowBeanDefinitionOverriding 属性为 null。如果在同一配置文件中 Bean id 或 name 重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p><p>可是有些时候我们希望在系统启动的过程中就严格杜绝发生 Bean 覆盖，因为万一出现这种情况，会增加我们排查问题的成本。</p><p>循环依赖说的是 A 依赖 B，而 B 又依赖 A。或者是 A 依赖 B，B 依赖 C，而 C 却依赖 A。默认 allowCircularReferences 也是 null。</p><p>它们两个属性是一起出现的，必然可以在同一个地方一起进行配置。</p><p>添加这两个属性的作者 Juergen Hoeller 在这个 jira 的讨论中说明了怎么配置这两个属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class NoBeanOverridingContextLoader extends ContextLoader &#123;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) &#123;</span><br><span class="line">    super.customizeContext(servletContext, applicationContext);</span><br><span class="line">    AbstractRefreshableApplicationContext arac = (AbstractRefreshableApplicationContext) applicationContext;</span><br><span class="line">    arac.setAllowBeanDefinitionOverriding(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyContextLoaderListener extends org.springframework.web.context.ContextLoaderListener &#123;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  protected ContextLoader <span class="function"><span class="title">createContextLoader</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new NoBeanOverridingContextLoader();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;com.loonycoder.MyContextLoaderListener&lt;/listener-class&gt;  </span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><p>我们可以把不同环境的配置分别配置到单独的文件中，举个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans profile=<span class="string">"development"</span></span><br><span class="line">    xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    xmlns:jdbc=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">"..."</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;jdbc:embedded-database id=<span class="string">"dataSource"</span>&gt;</span><br><span class="line">        &lt;jdbc:script location=<span class="string">"classpath:com/loonycoder/config/sql/schema.sql"</span>/&gt;</span><br><span class="line">        &lt;jdbc:script location=<span class="string">"classpath:com/oonycoder/config/sql/test-data.sql"</span>/&gt;</span><br><span class="line">    &lt;/jdbc:embedded-database&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans profile=<span class="string">"production"</span></span><br><span class="line">    xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    xmlns:jee=<span class="string">"http://www.springframework.org/schema/jee"</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">"..."</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;jee:jndi-lookup id=<span class="string">"dataSource"</span> jndi-name=<span class="string">"java:comp/env/jdbc/datasource"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>应该不必做过多解释了吧，看每个文件第一行的 profile=””。</p><p>当然，我们也可以在一个配置文件中使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    xmlns:jdbc=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span><br><span class="line">    xmlns:jee=<span class="string">"http://www.springframework.org/schema/jee"</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">"..."</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;beans profile=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;jdbc:embedded-database id=<span class="string">"dataSource"</span>&gt;</span><br><span class="line">            &lt;jdbc:script location=<span class="string">"classpath:com/loonycoder/config/sql/schema.sql"</span>/&gt;</span><br><span class="line">            &lt;jdbc:script location=<span class="string">"classpath:com/loonycoder/config/sql/test-data.sql"</span>/&gt;</span><br><span class="line">        &lt;/jdbc:embedded-database&gt;</span><br><span class="line">    &lt;/beans&gt;</span><br><span class="line"></span><br><span class="line">    &lt;beans profile=<span class="string">"production"</span>&gt;</span><br><span class="line">        &lt;jee:jndi-lookup id=<span class="string">"dataSource"</span> jndi-name=<span class="string">"java:comp/env/jdbc/datasource"</span>/&gt;</span><br><span class="line">    &lt;/beans&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>理解起来也很简单吧。</p><p>接下来的问题是，怎么使用特定的 profile 呢？Spring 在启动的过程中，会去寻找 “spring.profiles.active” 的属性值，根据这个属性值来的。那怎么配置这个值呢？</p><p>Spring 会在这几个地方寻找 spring.profiles.active 的属性值：操作系统环境变量、JVM 系统变量、web.xml 中定义的参数、JNDI。</p><p>最简单的方式莫过于在程序启动的时候指定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=<span class="string">"profile1,profile2"</span></span><br></pre></td></tr></table></figure><blockquote><p>profile 可以激活多个</p></blockquote><p>当然，我们也可以通过代码的形式从 Environment 中设置 profile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();</span><br><span class="line">ctx.getEnvironment().setActiveProfiles(<span class="string">"development"</span>);</span><br><span class="line">ctx.register(SomeConfig.class, StandaloneDataConfig.class, JndiDataConfig.class);</span><br><span class="line">ctx.refresh(); // 重启</span><br></pre></td></tr></table></figure><p>如果是 Spring Boot 的话更简单，我们一般会创建 application.properties、application-dev.properties、application-prod.properties 等文件，其中 application.properties 配置各个环境通用的配置，application-{profile}.properties 中配置特定环境的配置，然后在启动的时候指定 profile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dspring.profiles.active=prod -jar JavaDoop.jar</span><br></pre></td></tr></table></figure><h4 id="工厂模式生成-Bean"><a href="#工厂模式生成-Bean" class="headerlink" title="工厂模式生成 Bean"></a>工厂模式生成 Bean</h4><p>请读者注意 factory-bean 和 FactoryBean 的区别。这节说的是前者，是说静态工厂或实例工厂，而后者是 Spring 中的特殊接口，代表一类特殊的 Bean，附录的下面一节会介绍 FactoryBean。</p><p>设计模式里，工厂方法模式分静态工厂和实例工厂，我们分别看看 Spring 中怎么配置这两个，来个代码示例就什么都清楚了。</p><p>静态工厂：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"clientService"</span></span><br><span class="line">    class=<span class="string">"examples.ClientService"</span></span><br><span class="line">    factory-method=<span class="string">"createInstance"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ClientService &#123;</span><br><span class="line">    private static ClientService clientService = new ClientService();</span><br><span class="line">    private <span class="function"><span class="title">ClientService</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 静态方法</span><br><span class="line">    public static ClientService <span class="function"><span class="title">createInstance</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例工厂：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"serviceLocator"</span> class=<span class="string">"examples.DefaultServiceLocator"</span>&gt;</span><br><span class="line">    &lt;!-- inject any dependencies required by this locator bean --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"clientService"</span></span><br><span class="line">    factory-bean=<span class="string">"serviceLocator"</span></span><br><span class="line">    factory-method=<span class="string">"createClientServiceInstance"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"accountService"</span></span><br><span class="line">    factory-bean=<span class="string">"serviceLocator"</span></span><br><span class="line">    factory-method=<span class="string">"createAccountServiceInstance"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class DefaultServiceLocator &#123;</span><br><span class="line"></span><br><span class="line">    private static ClientService clientService = new ClientServiceImpl();</span><br><span class="line"></span><br><span class="line">    private static AccountService accountService = new AccountServiceImpl();</span><br><span class="line"></span><br><span class="line">    public ClientService <span class="function"><span class="title">createClientServiceInstance</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AccountService <span class="function"><span class="title">createAccountServiceInstance</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> accountService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><p>FactoryBean 适用于 Bean 的创建过程比较复杂的场景，比如数据库连接池的创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface FactoryBean&lt;T&gt; &#123;</span><br><span class="line">    T getObject() throws Exception;</span><br><span class="line">    Class&lt;T&gt; getObjectType();</span><br><span class="line">    boolean isSingleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123; </span><br><span class="line">    private Car car ;</span><br><span class="line">    private void setCar(Car car)&#123; this.car = car;  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们假设现在需要创建一个 Person 的 Bean，首先我们需要一个 Car 的实例，我们这里假设 Car 的实例创建很麻烦，那么我们可以把创建 Car 的复杂过程包装起来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class MyCarFactoryBean implements FactoryBean&lt;Car&gt;&#123;</span><br><span class="line">    private String make; </span><br><span class="line">    private int year ;</span><br><span class="line"></span><br><span class="line">    public void setMake(String m)&#123; this.make =m ; &#125;</span><br><span class="line"></span><br><span class="line">    public void setYear(int y)&#123; this.year = y; &#125;</span><br><span class="line"></span><br><span class="line">    public Car <span class="function"><span class="title">getObject</span></span>()&#123; </span><br><span class="line">      // 这里我们假设 Car 的实例化过程非常复杂，反正就不是几行代码可以写完的那种</span><br><span class="line">      CarBuilder cb = CarBuilder.car();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(year!=0) cb.setYear(this.year);</span><br><span class="line">      <span class="keyword">if</span>(StringUtils.hasText(this.make)) cb.setMake( this.make ); </span><br><span class="line">      <span class="built_in">return</span> cb.factory(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Class&lt;Car&gt; <span class="function"><span class="title">getObjectType</span></span>() &#123; <span class="built_in">return</span> Car.class ; &#125; </span><br><span class="line"></span><br><span class="line">    public boolean <span class="function"><span class="title">isSingleton</span></span>() &#123; <span class="built_in">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看看装配的时候是怎么配置的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class = <span class="string">"com.loonycoder.MyCarFactoryBean"</span> id = <span class="string">"car"</span>&gt;</span><br><span class="line">  &lt;property name = <span class="string">"make"</span> value =<span class="string">"Honda"</span>/&gt;</span><br><span class="line">  &lt;property name = <span class="string">"year"</span> value =<span class="string">"1994"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean class = <span class="string">"com.loonycoder.Person"</span> id = <span class="string">"josh"</span>&gt;</span><br><span class="line">  &lt;property name = <span class="string">"car"</span> ref = <span class="string">"car"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>看到不一样了吗？id 为 “car” 的 bean 其实指定的是一个 FactoryBean，不过配置的时候，我们直接让配置 Person 的 Bean 直接依赖于这个 FactoryBean 就可以了。中间的过程 Spring 已经封装好了。</p><p>说到这里，我们再来点干货。我们知道，现在还用 xml 配置 Bean 依赖的越来越少了，更多时候，我们可能会采用 java  config 的方式来配置，这里有什么不一样呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Configuration </span><br><span class="line">public class CarConfiguration &#123; </span><br><span class="line"></span><br><span class="line">    @Bean </span><br><span class="line">    public MyCarFactoryBean <span class="function"><span class="title">carFactoryBean</span></span>()&#123; </span><br><span class="line">      MyCarFactoryBean cfb = new MyCarFactoryBean();</span><br><span class="line">      cfb.setMake(<span class="string">"Honda"</span>);</span><br><span class="line">      cfb.setYear(1994);</span><br><span class="line">      <span class="built_in">return</span> cfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Person <span class="function"><span class="title">aPerson</span></span>()&#123; </span><br><span class="line">    Person person = new Person();</span><br><span class="line">      // 注意这里的不同</span><br><span class="line">    person.setCar(carFactoryBean().getObject());</span><br><span class="line">    <span class="built_in">return</span> person; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，其实我们的思路也很简单，把 MyCarFactoryBean 看成是一个简单的 Bean 就可以了，不必理会什么 FactoryBean，它是不是 FactoryBean 和我们没关系。</p><h4 id="初始化-Bean-的回调"><a href="#初始化-Bean-的回调" class="headerlink" title="初始化 Bean 的回调"></a>初始化 Bean 的回调</h4><p>有以下四种方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"exampleInitBean"</span> class=<span class="string">"examples.ExampleBean"</span> init-method=<span class="string">"init"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AnotherExampleBean implements InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">afterPropertiesSet</span></span>() &#123;</span><br><span class="line">        // <span class="keyword">do</span> some initialization work</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean(initMethod = <span class="string">"init"</span>)</span><br><span class="line">public Foo <span class="function"><span class="title">foo</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new Foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostConstruct</span><br><span class="line">public void <span class="function"><span class="title">init</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="销毁-Bean-的回调"><a href="#销毁-Bean-的回调" class="headerlink" title="销毁 Bean 的回调"></a>销毁 Bean 的回调</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"exampleInitBean"</span> class=<span class="string">"examples.ExampleBean"</span> destroy-method=<span class="string">"cleanup"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AnotherExampleBean implements DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">destroy</span></span>() &#123;</span><br><span class="line">        // <span class="keyword">do</span> some destruction work (like releasing pooled connections)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean(destroyMethod = <span class="string">"cleanup"</span>)</span><br><span class="line">public Bar <span class="function"><span class="title">bar</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new Bar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PreDestroy</span><br><span class="line">public void <span class="function"><span class="title">cleanup</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h4><p>既然文中说到了这个，顺便提一下好了。</p><p>最有用的场景就是，它用来将前端传过来的参数和后端的 controller 方法上的参数进行绑定的时候用。</p><p>像前端传过来的字符串、整数要转换为后端的 String、Integer 很容易，但是如果 controller 方法需要的是一个枚举值，或者是 Date 这些非基础类型（含基础类型包装类）值的时候，我们就可以考虑采用 ConversionService 来进行转换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"conversionService"</span></span><br><span class="line">  class=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">      &lt;bean class=<span class="string">"com.loonycoder.learning.utils.StringToEnumConverterFactory"</span>/&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>ConversionService 接口很简单，所以要自定义一个 convert 的话也很简单。</p><p>下面再说一个实现这种转换很简单的方式，那就是实现 Converter 接口。</p><p>来看一个很简单的例子，这样比什么都管用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class StringToDateConverter implements Converter&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Date convert(String <span class="built_in">source</span>) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="built_in">return</span> DateUtils.parseDate(<span class="built_in">source</span>, <span class="string">"yyyy-MM-dd"</span>, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, <span class="string">"yyyy-MM-dd HH:mm"</span>, <span class="string">"HH:mm:ss"</span>, <span class="string">"HH:mm"</span>);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要注册这个 Bean 就可以了。这样，前端往后端传的时间描述字符串就很容易绑定成 Date 类型了，不需要其他任何操作。</p><h4 id="Bean-继承"><a href="#Bean-继承" class="headerlink" title="Bean 继承"></a>Bean 继承</h4><p>在初始化 Bean 的地方，我们说过了这个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br></pre></td></tr></table></figure><p>这里涉及到的就是 <code>&lt;bean parent="" /&gt;</code> 中的 parent 属性，我们来看看 Spring 中是用这个来干什么的。</p><p>首先，我们要明白，这里的继承和 java 语法中的继承没有任何关系，不过思路是相通的。child bean 会继承 parent bean 的所有配置，也可以覆盖一些配置，当然也可以新增额外的配置。</p><p>Spring 中提供了继承自 AbstractBeanDefinition 的 <code>ChildBeanDefinition</code> 来表示 child bean。</p><p>看如下一个例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"inheritedTestBean"</span> abstract=<span class="string">"true"</span> class=<span class="string">"org.springframework.beans.TestBean"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"parent"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"age"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"inheritsWithDifferentClass"</span> class=<span class="string">"org.springframework.beans.DerivedTestBean"</span></span><br><span class="line">        parent=<span class="string">"inheritedTestBean"</span> init-method=<span class="string">"initialize"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"override"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>parent bean 设置了 <code>abstract="true"</code> 所以它不会被实例化，child bean 继承了 parent bean 的两个属性，但是对 name 属性进行了覆写。</p><p>child bean 会继承 scope、构造器参数值、属性值、init-method、destroy-method 等等。</p><p>当然，我不是说 parent bean 中的 abstract = true 在这里是必须的，只是说如果加上了以后 Spring 在实例化 singleton beans 的时候会忽略这个 bean。</p><p>比如下面这个极端 parent bean，它没有指定 class，所以毫无疑问，这个 bean 的作用就是用来充当模板用的 parent bean，此处就必须加上 abstract = true。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"inheritedTestBeanWithoutClass"</span> abstract=<span class="string">"true"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"parent"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"age"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h4><p>一般来说，我们的应用中大多数的 Bean 都是 singleton 的。singleton 依赖 singleton，或者 prototype 依赖 prototype 都很好解决，直接设置属性依赖就可以了。</p><p>但是，如果是 singleton 依赖 prototype 呢？这个时候不能用属性依赖，因为如果用属性依赖的话，我们每次其实拿到的还是第一次初始化时候的 bean。</p><p>一种解决方案就是不要用属性依赖，每次获取依赖的 bean 的时候从 BeanFactory 中取。这个也是大家最常用的方式了吧。怎么取，我就不介绍了，大部分 Spring 项目大家都会定义那么个工具类的。</p><p>另一种解决方案就是这里要介绍的通过使用 Lookup method。</p><p><strong>lookup-method</strong><br>我们来看一下 Spring Reference 中提供的一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package fiona.apple;</span><br><span class="line"></span><br><span class="line">// no more Spring imports!</span><br><span class="line"></span><br><span class="line">public abstract class CommandManager &#123;</span><br><span class="line"></span><br><span class="line">    public Object process(Object commandState) &#123;</span><br><span class="line">        // grab a new instance of the appropriate Command interface</span><br><span class="line">        Command <span class="built_in">command</span> = createCommand();</span><br><span class="line">        // <span class="built_in">set</span> the state on the (hopefully brand new) Command instance</span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="built_in">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // okay... but <span class="built_in">where</span> is the implementation of this method?</span><br><span class="line">    protected abstract Command createCommand();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 配置 <code>&lt;lookup-method /&gt;</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"myCommand"</span> class=<span class="string">"fiona.apple.AsyncCommand"</span> scope=<span class="string">"prototype"</span>&gt;</span><br><span class="line">    &lt;!-- inject dependencies here as required --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- commandProcessor uses statefulCommandHelper --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"commandManager"</span> class=<span class="string">"fiona.apple.CommandManager"</span>&gt;</span><br><span class="line">    &lt;lookup-method name=<span class="string">"createCommand"</span> bean=<span class="string">"myCommand"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>Spring 采用 <strong>CGLIB</strong> 生成字节码的方式来生成一个子类。我们定义的类不能定义为 final class，抽象方法上也不能加 final。</p><p>lookup-method 上的配置也可以采用注解来完成，这样就可以不用配置 <code>&lt;lookup-method /&gt;</code> 了，其他不变：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public abstract class CommandManager &#123;</span><br><span class="line"></span><br><span class="line">    public Object process(Object commandState) &#123;</span><br><span class="line">        MyCommand <span class="built_in">command</span> = createCommand();</span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="built_in">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Lookup(<span class="string">"myCommand"</span>)</span><br><span class="line">    protected abstract Command createCommand();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，既然用了注解，要配置注解扫描：<code>&lt;context:component-scan base-package="com.loonycoder" /&gt;</code></p></blockquote><p>甚至，我们可以像下面这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public abstract class CommandManager &#123;</span><br><span class="line"></span><br><span class="line">    public Object process(Object commandState) &#123;</span><br><span class="line">        MyCommand <span class="built_in">command</span> = createCommand();</span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="built_in">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Lookup</span><br><span class="line">    protected abstract MyCommand createCommand();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的返回值用了 MyCommand，当然，如果 Command 只有一个实现类，那返回值也可以写 Command。</p></blockquote><p><strong>replaced-method</strong><br>记住它的功能，就是替换掉 bean 中的一些方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyValueCalculator &#123;</span><br><span class="line"></span><br><span class="line">    public String computeValue(String input) &#123;</span><br><span class="line">        // some real code...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // some other methods...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法覆写，注意要实现 MethodReplacer 接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ReplacementComputeValue implements org.springframework.beans.factory.support.MethodReplacer &#123;</span><br><span class="line"></span><br><span class="line">    public Object reimplement(Object o, Method m, Object[] args) throws Throwable &#123;</span><br><span class="line">        // get the input value, work with it, and <span class="built_in">return</span> a computed result</span><br><span class="line">        String input = (String) args[0];</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">return</span> ...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置也很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"myValueCalculator"</span> class=<span class="string">"x.y.z.MyValueCalculator"</span>&gt;</span><br><span class="line">    &lt;!-- 定义 computeValue 这个方法要被替换掉 --&gt;</span><br><span class="line">    &lt;replaced-method name=<span class="string">"computeValue"</span> replacer=<span class="string">"replacementComputeValue"</span>&gt;</span><br><span class="line">        &lt;arg-type&gt;String&lt;/arg-type&gt;</span><br><span class="line">    &lt;/replaced-method&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"replacementComputeValue"</span> class=<span class="string">"a.b.c.ReplacementComputeValue"</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>arg-type 明显不是必须的，除非存在方法重载，这样必须通过参数类型列表来判断这里要覆盖哪个方法。</p></blockquote><h4 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h4><p>应该说 BeanPostProcessor 概念在 Spring 中也是比较重要的。我们看下接口定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">   Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException;</span><br><span class="line"></span><br><span class="line">   Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这个接口中的两个方法名字我们大体上可以猜测 bean 在初始化之前会执行 postProcessBeforeInitialization 这个方法，初始化完成之后会执行 postProcessAfterInitialization 这个方法。但是，这么理解是非常片面的。</p><p>首先，我们要明白，除了我们自己定义的 BeanPostProcessor 实现外，Spring 容器在启动时自动给我们也加了几个。如在获取 BeanFactory 的 obtainFactory() 方法结束后的 prepareBeanFactory(factory)，大家仔细看会发现，Spring 往容器中添加了这两个 BeanPostProcessor：ApplicationContextAwareProcessor、ApplicationListenerDetector。</p><p>我们回到这个接口本身，读者请看第一个方法，这个方法接受的第一个参数是 bean 实例，第二个参数是 bean 的名字，重点在返回值将会作为新的 bean 实例，所以，没事的话这里不能随便返回个 null。</p><p>那意味着什么呢？我们很容易想到的就是，我们这里可以对一些我们想要修饰的 bean 实例做一些事情。但是对于 Spring 框架来说，它会决定是不是要在这个方法中返回 bean 实例的代理，这样就有更大的想象空间了。</p><p>最后，我们说说如果我们自己定义一个 bean 实现 BeanPostProcessor 的话，它的执行时机是什么时候？</p><p>如果仔细看了代码分析的话，其实很容易知道了，在 bean 实例化完成、属性注入完成之后，会执行回调方法，具体请参见类 AbstractAutowireCapableBeanFactory#initBean 方法。</p><p>首先会回调几个实现了 Aware 接口的 bean，然后就开始回调 BeanPostProcessor 的 postProcessBeforeInitialization 方法，之后是回调 init-method，然后再回调 BeanPostProcessor 的 postProcessAfterInitialization 方法。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>按理说，总结应该写在附录前面，我就不讲究了。</p><p>在花了那么多时间后，这篇文章终于算是基本写完了，大家在惊叹 Spring 给我们做了那么多的事的时候，应该透过现象看本质，去理解 Spring 写得好的地方，去理解它的设计思想。</p><p>本文的缺陷在于对 Spring 预初始化 singleton beans 的过程分析不够，主要是代码量真的比较大，分支旁路众多。同时，虽然附录条目不少，但是庞大的 Spring 真的引出了很多的概念，希望日后有精力可以慢慢补充一些。</p><p>（全文完）</p>]]></content>
    
    
    <categories>
      
      <category>Java框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架 - Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架——Spring框架概述及工作原理</title>
    <link href="/2018/10/22/Spring-1/"/>
    <url>/2018/10/22/Spring-1/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/spring_logo.jpg" srcset="/img/loading.gif" alt="Spring"></p><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Spring 是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用。Spring 框架目标是简化Java企业级应用开发，并通过Pojo为基础的编程模型促进良好的编程习惯。</p><hr><h3 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h3><p><font style="color: red"><b>1、 IoC(Inversion of Control): 控制反转<b></font><br>概念：控制权由对象本身转向容器；由容器根据配置文件去创建实例并创建各个实例之间的依赖关系 </p><p>核心：bean工厂。在Spring中，bean工厂创建的各个实例称作bean。  </p><p>作用：IoC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><p>优点：IoC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IoC容器支持加载服务时的饿汉式初始化和懒加载。</p><p>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，根据xml里面的Spring的配置文件来动态的创建对象，和调用对象里的方法的。 </p><p>DI：(全称：Dependency Injection)依赖注入，IoC的另一种表现方式，组件以一种预先定义好的方式来接受容器注入的资源。</p><p><font style="color: red"><b>2、AOP(Aspect-Oriented Programming): 面向方面编程<b></font> </p><pre><code>可以为某一类对象进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 </code></pre><p>优点：AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码；利用AOP可以对业务逻辑的各个部分进行隔离，使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>经典应用：事务管理、性能监视、安全检查、缓存 、日志等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/aop </span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><span class="line">    &lt;!-- 1 创建目标类 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"userServiceId"</span> class=<span class="string">"com.loonycoder.service.UserServiceImpl"</span>&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;!-- 2 创建切面类（通知） --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"myAspectId"</span> class=<span class="string">"com.loonycoder.service.MyAspect"</span>&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;!-- 3 aop编程 </span><br><span class="line">        3.1 导入命名空间</span><br><span class="line">        3.2 使用 &lt;aop:config&gt;进行配置</span><br><span class="line">                proxy-target-class=<span class="string">"true"</span> 声明时使用cglib代理</span><br><span class="line">            &lt;aop:pointcut&gt; 切入点 ，从目标对象获得具体方法</span><br><span class="line">            &lt;aop:advisor&gt; 特殊的切面，只有一个通知 和 一个切入点</span><br><span class="line">                advice-ref 通知引用</span><br><span class="line">                pointcut-ref 切入点引用</span><br><span class="line">        3.3 切入点表达式</span><br><span class="line">            execution(* com.loonycoder.service.*.*(..))</span><br><span class="line">            选择方法         返回值任意   包             类名任意   方法名任意   参数任意</span><br><span class="line"> </span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;aop:config proxy-target-class=<span class="string">"true"</span>&gt;</span><br><span class="line">        &lt;aop:pointcut expression=<span class="string">"execution(* com.loonycoder.service.*.*(..))"</span> id=<span class="string">"myPointCut"</span>/&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=<span class="string">"myAspectId"</span> pointcut-ref=<span class="string">"myPointCut"</span>/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>代理的两种方式——静态代理和动态代理静态代理：  </p><ul><li>针对每个具体类分别编写代理类；  </li><li>针对一个接口编写一个代理类；<br>动态代理：<br>针对一个方面编写一个InvocationHandler，然后借用JDK反射包中的Proxy类为各种接口动态生成相应的代理类</li></ul><p>3、三种注入方式</p><ol><li><p>setter属性注入，通过构建实体类属性的setting方法注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 相当于User user = new User(); --&gt;</span><br><span class="line">        &lt;bean id=<span class="string">"user"</span> class=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"name"</span> value=<span class="string">"张三"</span>&gt;&lt;/property&gt;</span><br><span class="line">            &lt;property name=<span class="string">"age"</span> value=<span class="string">"18"</span>&gt;&lt;/property&gt;</span><br><span class="line">            &lt;property name=<span class="string">"sex"</span> value=<span class="string">"男"</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>constructor构造方法注入，通过构建实体类相应构造方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 相当于User user = new User();--&gt;</span><br><span class="line">&lt;!-- index属性指的是参数索引，从0开始 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"user"</span> class=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">    &lt;constructor-arg <span class="built_in">type</span>=<span class="string">"java.lang.String"</span> index=<span class="string">"0"</span> value=<span class="string">"张三"</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span> index=<span class="string">"1"</span> value=<span class="string">"18"</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="built_in">type</span>=<span class="string">"java.lang.String"</span> index=<span class="string">"2"</span> value=<span class="string">"男"</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>另外还有一种是Interface接口注入，因为此种方式使用的极少，所以在此就不进行介绍了。</p></li></ol><p>4、单例和多例<br>1)当scope=”singleton”时，容器一加载就创建实体类</p><p><strong>注意：只有在单例的时候，这个配置才有效</strong></p><ul><li>lazy-init=”true” 延迟加载，在使用对象时创建实体对象 </li><li>lazy-init=”false” 不延迟加载，容器启动立即创建</li></ul><p>2)当scope=”prototype”时，获取使用对象时创建对象</p><p>5、Spring目的<br><font style="color: red"><b>就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明管理的（Spring根据这些配置 内部通过反射去动态的组装对象）</b></font><br>Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。<br>Spring里用的最经典的一个设计模式就是：模板方法模式。Spring里的配置是很多的，很难都记住，但是Spring里的精华也无非就是以上的两点，把以上两点跟理解了也就基本上掌握了Spring。</p><h3 id="三、组成体系"><a href="#三、组成体系" class="headerlink" title="三、组成体系"></a>三、组成体系</h3><p><img src="/images/spring-framework.gif" srcset="/img/loading.gif" alt="spring"></p><p>图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。<br><strong>1. Data Access/Integration（数据访问／集成）</strong></p><p>数据访问/集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下。</p><ul><li>JDBC 模块：提供了一个 JDBC 的抽象层，大幅度减少了在开发过程中对数据库操作的编码。</li><li>ORM 模块：对流行的对象关系映射 API，包括 JPA、JDO、Hibernate 和 iBatis 提供了的集成层。</li><li>OXM 模块：提供了一个支持对象/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。</li><li>JMS 模块：指 Java 消息服务，包含的功能为生产和消费的信息。</li><li>Transactions 事务模块：支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO。</li></ul><p><strong>2. Web 模块</strong></p><p>Spring 的 Web 层包括 Web、Servlet、Struts 和 Portlet 组件，具体介绍如下。</p><ul><li>Web 模块：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IoC 容器初始化以及 Web 应用上下文。</li><li>Servlet模块：包括 Spring 模型—视图—控制器（MVC）实现 Web 应用程序。</li><li>Struts 模块：包含支持类内的 Spring 应用程序，集成了经典的 Struts Web 层。</li><li>Portlet 模块：提供了在 Portlet 环境中使用 MV C实现，类似 Web-Servlet 模块的功能。</li></ul><p><strong>3. Core Container（核心容器）</strong></p><p>Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 Expression Language 表达式语言模块组成，具体介绍如下。</p><ul><li>Beans 模块：提供了 BeanFactory，是工厂模式的经典实现，Spring 将管理对象称为 Bean。</li><li>Core 核心模块：提供了 Spring 框架的基本组成部分，包括 IoC 和 DI 功能。</li><li>Context 上下文模块：建立在核心和 Beans 模块的基础之上，它是访问定义和配置任何对象的媒介。ApplicationContext 接口是上下文模块的焦点。</li><li>Expression Language 模块：是运行时查询和操作对象图的强大的表达式语言。</li></ul><p><strong>4. 其他模块</strong></p><p>Spring的其他模块还有 AOP、Aspects、Instrumentation 以及 Test 模块，具体介绍如下。</p><ul><li>AOP 模块：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li><li>Aspects 模块：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li>Instrumentation 模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li>Test 模块：支持 Spring 组件，使用 JUnit 或 TestNG 框架的测试。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架 - Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis的多表查询</title>
    <link href="/2018/10/15/Mybatis-3/"/>
    <url>/2018/10/15/Mybatis-3/</url>
    
    <content type="html"><![CDATA[<h3 id="场景-一对多"><a href="#场景-一对多" class="headerlink" title="场景(一对多)"></a>场景(一对多)</h3><p>用户和账户<br>一个用户可以有多个账户<br>一个账户只能属于一个用户（多个账户也可以属于同一个用户）</p><p>需要实现：<br>查询账户时，可以查询到归属的用户信息。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h5><p>建立用户表和账户表：让用户表和账户表之间具备一对多的关系（需要在账户表中添加外键）<br>建表语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) NOT NULL auto_increment,</span><br><span class="line">  `username` varchar(32) NOT NULL COMMENT <span class="string">'用户名称'</span>,</span><br><span class="line">  `birthday` datetime default NULL COMMENT <span class="string">'生日'</span>,</span><br><span class="line">  `sex` char(1) default NULL COMMENT <span class="string">'性别'</span>,</span><br><span class="line">  `address` varchar(256) default NULL COMMENT <span class="string">'地址'</span>,</span><br><span class="line">  PRIMARY KEY  (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,<span class="string">'张三'</span>,<span class="string">'2018-02-27 17:47:08'</span>,<span class="string">'男'</span>,<span class="string">'北京'</span>),(2,<span class="string">'李四'</span>,<span class="string">'2018-03-02 15:09:37'</span>,<span class="string">'女'</span>,<span class="string">'深圳'</span>),(3,<span class="string">'王五'</span>,<span class="string">'2018-03-04 11:34:34'</span>,<span class="string">'女'</span>,<span class="string">'上海'</span>),(4,<span class="string">'赵六'</span>,<span class="string">'2018-03-04 12:04:06'</span>,<span class="string">'男'</span>,<span class="string">'成都'</span>),(4,<span class="string">'刘七'</span>,<span class="string">'2018-03-07 17:37:26'</span>,<span class="string">'男'</span>,<span class="string">'西安'</span>),(48,<span class="string">'孙八'</span>,<span class="string">'2018-03-08 11:44:00'</span>,<span class="string">'女'</span>,<span class="string">'杭州'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `account`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `account` (</span><br><span class="line">  `ID` int(11) NOT NULL COMMENT <span class="string">'编号'</span>,</span><br><span class="line">  `UID` int(11) default NULL COMMENT <span class="string">'用户编号'</span>,</span><br><span class="line">  `MONEY` double default NULL COMMENT <span class="string">'金额'</span>,</span><br><span class="line">  PRIMARY KEY  (`ID`),</span><br><span class="line">  KEY `FK_Reference_8` (`UID`),</span><br><span class="line">  CONSTRAINT `FK_Reference_8` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert  into `account`(`ID`,`UID`,`MONEY`) values (1,1,1000),(2,3,1000),(3,5,2000);</span><br></pre></td></tr></table></figure><h5 id="建实体类"><a href="#建实体类" class="headerlink" title="建实体类"></a>建实体类</h5><p>用户实体类和账户实体类：让用户和账户的实体类能体现出一对多的关系<br>由于我们之前新建过用户的实体类，所以我们在这里只新建一个账户实体类即可，和用户实体类一样放在com.loonycoder.domain包下<br>此处在从表实体类中引用主表的对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Account implements Serializable &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private Integer uid;</span><br><span class="line">    private Double money;</span><br><span class="line"></span><br><span class="line">    //从表实体应该包含一个主表实体的对象引用</span><br><span class="line">    private User user;</span><br><span class="line"></span><br><span class="line">    public User <span class="function"><span class="title">getUser</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUser(User user) &#123;</span><br><span class="line">        this.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer <span class="function"><span class="title">getId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer <span class="function"><span class="title">getUid</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUid(Integer uid) &#123;</span><br><span class="line">        this.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Double <span class="function"><span class="title">getMoney</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMoney(Double money) &#123;</span><br><span class="line">        this.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们新建一个Account的Mapper接口类，并提供查询所有账户的方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.dao;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.domain.Account;</span><br><span class="line">import com.loonycoder.domain.AccountUser;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IAccountMapper &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询所有账户</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    List&lt;Account&gt; selectAll();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询所有账户，并且包含账户对应的用户下的姓名和地址信息</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    List&lt;AccountUser&gt; selectAccountUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>用户的配置文件和账户的配置文件<br>用户的配置文件用之前的就可以了，我们在此只新建账户的配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.loonycoder.dao.IAccountMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--定义封装account和user的resultMap--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"accountUserMap"</span> <span class="built_in">type</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">"id"</span> column=<span class="string">"aid"</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property=<span class="string">"uid"</span> column=<span class="string">"uid"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"money"</span> column=<span class="string">"money"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;!--一对一的关系映射，配置封装user的内容--&gt;</span><br><span class="line">        &lt;association property=<span class="string">"user"</span> column=<span class="string">"uid"</span> javaType=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property=<span class="string">"userName"</span> column=<span class="string">"username"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"accountUserMap"</span>&gt;</span><br><span class="line">        select u.*,a.id as aid,a.uid,a.money from account a,user u <span class="built_in">where</span> u.id = a.uid;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>当然我们还需要修改一下SqlMapConfig.xml中的别名和mapper映射配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;!--mybatis的主配置文件--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--引用外部配置文件配置数据源信息，下面的取值部分需要用<span class="variable">$&#123;&#125;</span>方式取值--&gt;</span><br><span class="line">    &lt;properties resource=<span class="string">"jdbcConfig.properties"</span>&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;!--配置别名 <span class="built_in">type</span>属性指定实体类，<span class="built_in">alias</span>指定别名--&gt;</span><br><span class="line">    &lt;typeAliases &gt;</span><br><span class="line">        &lt;!--package标签可以指定具体到某个包下所有类都使用别名，默认别名是类的名字，不区分大小写--&gt;</span><br><span class="line">        &lt;package name=<span class="string">"com.loonycoder.domain"</span>&gt;&lt;/package&gt;</span><br><span class="line">        &lt;!--&lt;typeAlias <span class="built_in">type</span>=<span class="string">"com.loonycoder.domain.User"</span> <span class="built_in">alias</span>=<span class="string">"user"</span>&gt;&lt;/typeAlias&gt;--&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;!--配置环境--&gt;</span><br><span class="line">    &lt;environments default=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--配置事务--&gt;</span><br><span class="line">            &lt;transactionManager <span class="built_in">type</span>=<span class="string">"JDBC"</span>&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!--配置数据源（连接池）--&gt;</span><br><span class="line">            &lt;dataSource <span class="built_in">type</span>=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driver&#125;</span>"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.url&#125;</span>"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.username&#125;</span>"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/loonycoder/dao/IUserMapper.xml"</span> /&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/loonycoder/dao/IAccountMapper.xml"</span> /&gt;</span><br><span class="line">        &lt;!--&lt;mapper class=<span class="string">"com.loonycoder.dao.IUserMapper"</span> /&gt;--&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h5 id="新建测试类执行"><a href="#新建测试类执行" class="headerlink" title="新建测试类执行"></a>新建测试类执行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">selectAllAccount</span></span>()&#123;</span><br><span class="line">    List&lt;Account&gt; accts = accountMapper.selectAll();</span><br><span class="line">    <span class="keyword">for</span> (Account acct : accts) &#123;</span><br><span class="line">        System.out.println(<span class="string">"每个账户下的用户信息"</span>);</span><br><span class="line">        System.out.println(acct);</span><br><span class="line">        System.out.println(acct.getUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h5><p><img src="/images/mybatis1.png" srcset="/img/loading.gif" alt="result"></p><hr><h3 id="场景-多对一"><a href="#场景-多对一" class="headerlink" title="场景(多对一)"></a>场景(多对一)</h3><p>需要实现：</p><ul><li>查询用户时，可以同时查询出用户下的所有账户信息</li></ul><h5 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h5><p>我们修改User实体类，让主表包含从表的集合引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String userName;</span><br><span class="line">    private Date birthday;</span><br><span class="line">    private String sex;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    private List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    public List&lt;Account&gt; <span class="function"><span class="title">getAccounts</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAccounts(List&lt;Account&gt; accounts) &#123;</span><br><span class="line">        this.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer <span class="function"><span class="title">getId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getUserName</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date <span class="function"><span class="title">getBirthday</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBirthday(Date birthday) &#123;</span><br><span class="line">        this.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getSex</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getAddress</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\'</span><span class="string">' +</span></span><br><span class="line"><span class="string">                ", birthday=" + birthday +</span></span><br><span class="line"><span class="string">                ", sex='</span><span class="string">" + sex + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, address=<span class="string">'" + address + '</span>\<span class="string">''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>User接口类我们不做修改，直接用原来的查询所有用户的方法即可，我们只需要改动映射配置文件。<br>修改IUserMapper.xml内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.loonycoder.dao.IUserMapper"</span>&gt;</span><br><span class="line">    &lt;!--配置列名和实体类属性对应关系 <span class="built_in">type</span>属性不区分大小写--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userMap"</span> <span class="built_in">type</span>=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        &lt;!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名--&gt;</span><br><span class="line">        &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property=<span class="string">"userName"</span> column=<span class="string">"username"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;!--定义User的resultMap--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userAccountMap"</span> <span class="built_in">type</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property=<span class="string">"userName"</span> column=<span class="string">"username"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;!--配置user对象中accounts集合的映射--&gt;</span><br><span class="line">        &lt;!--ofType指的是集合的泛型--&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"accounts"</span> ofType=<span class="string">"account"</span>&gt;</span><br><span class="line">            &lt;id property=<span class="string">"id"</span> column=<span class="string">"aid"</span>&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property=<span class="string">"uid"</span> column=<span class="string">"uid"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"money"</span> column=<span class="string">"money"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class="line">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class="line">    &lt;!--此处使用左外连接查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"userAccountMap"</span>&gt;</span><br><span class="line">        select * from user u left outer join account a on u.id = a.uid;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"saveUser"</span> parameterType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        insert into user (username,sex,birthday,address) values (<span class="comment">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        delete from user <span class="built_in">where</span> id = <span class="comment">#&#123;uid&#125;;</span></span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        update user <span class="built_in">set</span> username = <span class="comment">#&#123;userName&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=<span class="string">"selectUserByCondition"</span> resultMap=<span class="string">"userMap"</span> parameterType=<span class="string">"user"</span>&gt;</span><br><span class="line">          select * from user</span><br><span class="line">          &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"sex != null and sex != '' "</span>&gt;</span><br><span class="line">                and sex = <span class="comment">#&#123;sex&#125;</span></span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">          &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h5 id="新建测试类执行-1"><a href="#新建测试类执行-1" class="headerlink" title="新建测试类执行"></a>新建测试类执行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void selectTest() throws Exception&#123;</span><br><span class="line"></span><br><span class="line">    //5.使用代理对象执行方法</span><br><span class="line">    List&lt;User&gt; users= userDao.selectAll();</span><br><span class="line">    <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">        System.out.println(<span class="string">"每个用户下账户的信息："</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user.getAccounts());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h5><p><img src="/images/mybatis2.png" srcset="/img/loading.gif" alt="result"></p><hr><h3 id="场景-多对多"><a href="#场景-多对多" class="headerlink" title="场景(多对多)"></a>场景(多对多)</h3><p>用户和角色<br>一个用户有多个角色<br>一个角色有多个用户<br>需要实现：</p><ul><li>当我们查询用户时，可以同时得到用户的角色信息</li><li>当我们查询角色时，可以同时得到角色所属的用户信息</li></ul><h5 id="新建角色表和中间表"><a href="#新建角色表和中间表" class="headerlink" title="新建角色表和中间表"></a>新建角色表和中间表</h5><p>建表语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `role`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `role` (</span><br><span class="line">  `ID` int(11) NOT NULL COMMENT <span class="string">'编号'</span>,</span><br><span class="line">  `ROLE_NAME` varchar(30) default NULL COMMENT <span class="string">'角色名称'</span>,</span><br><span class="line">  `ROLE_DESC` varchar(60) default NULL COMMENT <span class="string">'角色描述'</span>,</span><br><span class="line">  PRIMARY KEY  (`ID`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert  into `role`(`ID`,`ROLE_NAME`,`ROLE_DESC`) values (1,<span class="string">'董事长'</span>,<span class="string">'管理整个公司'</span>),(2,<span class="string">'总裁'</span>,<span class="string">'管理整个公司'</span>),(3,<span class="string">'部门经理'</span>,<span class="string">'管理某个部门'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `user_role`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user_role` (</span><br><span class="line">  `UID` int(11) NOT NULL COMMENT <span class="string">'用户编号'</span>,</span><br><span class="line">  `RID` int(11) NOT NULL COMMENT <span class="string">'角色编号'</span>,</span><br><span class="line">  PRIMARY KEY  (`UID`,`RID`),</span><br><span class="line">  KEY `FK_Reference_10` (`RID`),</span><br><span class="line">  CONSTRAINT `FK_Reference_10` FOREIGN KEY (`RID`) REFERENCES `role` (`ID`),</span><br><span class="line">  CONSTRAINT `FK_Reference_9` FOREIGN KEY (`UID`) REFERENCES `user` (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">insert  into `user_role`(`UID`,`RID`) values (1,1),(3,1),(3,2);</span><br></pre></td></tr></table></figure><h5 id="新建角色实体类"><a href="#新建角色实体类" class="headerlink" title="新建角色实体类"></a>新建角色实体类</h5><p>此处注意也要让用户和角色体现出多对多关系：需要各自包含对方的一个集合引用。</p><p>新建角色实体类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Role implements Serializable &#123;</span><br><span class="line">    private Integer roleId;</span><br><span class="line">    private String roleName;</span><br><span class="line">    private String roleDesc;</span><br><span class="line"></span><br><span class="line">    public Integer <span class="function"><span class="title">getRoleId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRoleId(Integer roleId) &#123;</span><br><span class="line">        this.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getRoleName</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRoleName(String roleName) &#123;</span><br><span class="line">        this.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getRoleDesc</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRoleDesc(String roleDesc) &#123;</span><br><span class="line">        this.roleDesc = roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"Role&#123;"</span> +</span><br><span class="line">                <span class="string">"roleId="</span> + roleId +</span><br><span class="line">                <span class="string">", roleName='"</span> + roleName + <span class="string">'\'</span><span class="string">' +</span></span><br><span class="line"><span class="string">                ", roleDesc='</span><span class="string">" + roleDesc + '\'' +</span></span><br><span class="line"><span class="string">                '&#125;';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="新建实体类接口"><a href="#新建实体类接口" class="headerlink" title="新建实体类接口"></a>新建实体类接口</h5><p>新建RoleMapper接口类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.dao;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.domain.Role;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IRoleMapper &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询所有角色信息</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    public List&lt;Role&gt; selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新建角色实体配置文件"><a href="#新建角色实体配置文件" class="headerlink" title="新建角色实体配置文件"></a>新建角色实体配置文件</h5><p>一、新建IRoleMapper.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.loonycoder.dao.IRoleMapper"</span>&gt;</span><br><span class="line">    &lt;!--定义role表的resultMap--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"roleMap"</span> <span class="built_in">type</span>=<span class="string">"role"</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">"roleId"</span> column=<span class="string">"rid"</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property=<span class="string">"roleName"</span> column=<span class="string">"role_name"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"roleDesc"</span> column=<span class="string">"role_desc"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"users"</span> ofType=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property=<span class="string">"userName"</span> column=<span class="string">"username"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询所有角色信息--&gt;</span><br><span class="line">    &lt;!--使用两次左外连接查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"roleMap"</span>&gt;</span><br><span class="line">        select u.*,r.id as rid,r.role_name,r.role_desc from role r</span><br><span class="line">        left outer join user_role ur on r.id = ur.rid</span><br><span class="line">        left outer join user u on u.id = ur.uid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>二、在SqlMapConfig.xml中添加映射配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/loonycoder/dao/IUserMapper.xml"</span> /&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/loonycoder/dao/IAccountMapper.xml"</span> /&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/loonycoder/dao/IRoleMapper.xml"</span> /&gt;</span><br><span class="line">        &lt;!--&lt;mapper class=<span class="string">"com.loonycoder.dao.IUserMapper"</span> /&gt;--&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h5 id="新建测试类执行-2"><a href="#新建测试类执行-2" class="headerlink" title="新建测试类执行"></a>新建测试类执行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">selectRoleAll</span></span>()&#123;</span><br><span class="line">    List&lt;Role&gt; roles = roleMapper.selectAll();</span><br><span class="line">    <span class="keyword">for</span> (Role role:roles) &#123;</span><br><span class="line">        System.out.println(<span class="string">"每个角色的用户信息："</span>);</span><br><span class="line">        System.out.println(role);</span><br><span class="line">        System.out.println(role.getUsers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h5><p><img src="/images/mybatis3.png" srcset="/img/loading.gif" alt="result"></p><hr><h5 id="根据用户查询角色"><a href="#根据用户查询角色" class="headerlink" title="根据用户查询角色"></a>根据用户查询角色</h5><p>同理，我们修改用户实体类，添加多对多的关系映射：一个用户具备多个角色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String userName;</span><br><span class="line">    private Date birthday;</span><br><span class="line">    private String sex;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    多对多关系映射：一个用户具备多个角色</span><br><span class="line">    private List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    public List&lt;Role&gt; <span class="function"><span class="title">getRoles</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRoles(List&lt;Role&gt; roles) &#123;</span><br><span class="line">        this.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    public List&lt;Account&gt; <span class="function"><span class="title">getAccounts</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAccounts(List&lt;Account&gt; accounts) &#123;</span><br><span class="line">        this.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer <span class="function"><span class="title">getId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getUserName</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date <span class="function"><span class="title">getBirthday</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBirthday(Date birthday) &#123;</span><br><span class="line">        this.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getSex</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getAddress</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\'</span><span class="string">' +</span></span><br><span class="line"><span class="string">                ", birthday=" + birthday +</span></span><br><span class="line"><span class="string">                ", sex='</span><span class="string">" + sex + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, address=<span class="string">'" + address + '</span>\<span class="string">''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，修改用户实体映射配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.loonycoder.dao.IUserMapper"</span>&gt;</span><br><span class="line">    &lt;!--配置列名和实体类属性对应关系 <span class="built_in">type</span>属性不区分大小写--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userMap"</span> <span class="built_in">type</span>=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        &lt;!--id标签配置主键，property标签配置实体类属性，column标签配置表的列名--&gt;</span><br><span class="line">        &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property=<span class="string">"userName"</span> column=<span class="string">"username"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;!--定义User的resultMap--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userAccountMap"</span> <span class="built_in">type</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property=<span class="string">"userName"</span> column=<span class="string">"username"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;!--配置user对象中accounts集合的映射--&gt;</span><br><span class="line">        &lt;!--ofType指的是集合的泛型--&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"accounts"</span> ofType=<span class="string">"account"</span>&gt;</span><br><span class="line">            &lt;id property=<span class="string">"id"</span> column=<span class="string">"aid"</span>&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property=<span class="string">"uid"</span> column=<span class="string">"uid"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"money"</span> column=<span class="string">"money"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--配置user的userRoleMap--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userRoleMap"</span> <span class="built_in">type</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property=<span class="string">"userName"</span> column=<span class="string">"username"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"roles"</span> ofType=<span class="string">"role"</span>&gt;</span><br><span class="line">            &lt;id property=<span class="string">"roleId"</span> column=<span class="string">"rid"</span>&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property=<span class="string">"roleName"</span> column=<span class="string">"role_name"</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=<span class="string">"roleDesc"</span> column=<span class="string">"role_desc"</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class="line">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class="line">    &lt;!--此处使用左外连接查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"userAccountMap"</span>&gt;</span><br><span class="line">        select * from user u left outer join account a on u.id = a.uid;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"selectUserRoleAll"</span> resultMap=<span class="string">"userRoleMap"</span>&gt;</span><br><span class="line">        select u.*,r.id as rid,r.role_name,r.role_desc from user u</span><br><span class="line">        left outer join user_role ur on u.id = ur.uid</span><br><span class="line">        left outer join role r on r.id = ur.rid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"saveUser"</span> parameterType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        insert into user (username,sex,birthday,address) values (<span class="comment">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        delete from user <span class="built_in">where</span> id = <span class="comment">#&#123;uid&#125;;</span></span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        update user <span class="built_in">set</span> username = <span class="comment">#&#123;userName&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=<span class="string">"selectUserByCondition"</span> resultMap=<span class="string">"userMap"</span> parameterType=<span class="string">"user"</span>&gt;</span><br><span class="line">          select * from user</span><br><span class="line">          &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"sex != null and sex != '' "</span>&gt;</span><br><span class="line">                and sex = <span class="comment">#&#123;sex&#125;</span></span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">          &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>在UserMapper接口中添加查询方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 查询用户及用户下所有的角色信息</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    public List&lt;User&gt; selectUserRoleAll();</span><br></pre></td></tr></table></figure><p>新建测试方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">selectUserRoleAll</span></span>()&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.selectUserRoleAll();</span><br><span class="line">    <span class="keyword">for</span> (User user:users) &#123;</span><br><span class="line">        System.out.println(<span class="string">"每个用户的角色信息："</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user.getRoles());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="/images/mybatis4.png" srcset="/img/loading.gif" alt="result"></p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java框架 - 数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis的增删改查操作</title>
    <link href="/2018/10/06/Mybatis-2/"/>
    <url>/2018/10/06/Mybatis-2/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>基于我们之前创建的Mybatis项目即可，我在此采用的依旧是基于xml的开发方式。</p><hr><h3 id="Mybatis的查询操作"><a href="#Mybatis的查询操作" class="headerlink" title="Mybatis的查询操作"></a>Mybatis的查询操作</h3><h4 id="在mapper接口中新增查询方法"><a href="#在mapper接口中新增查询方法" class="headerlink" title="在mapper接口中新增查询方法"></a>在mapper接口中新增查询方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.dao;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.domain.User;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IUserMapper &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询用户</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    public List&lt;User&gt; selectAll();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在IUserMapper-xml中添加查询sql语句"><a href="#在IUserMapper-xml中添加查询sql语句" class="headerlink" title="在IUserMapper.xml中添加查询sql语句"></a>在IUserMapper.xml中添加查询sql语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace里面要配置mapper接口的全限定类名--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.loonycoder.dao.IUserMapper"</span>&gt;</span><br><span class="line">    &lt;!--id要保持和方法名一致--&gt;</span><br><span class="line">    &lt;!--resultType指定返回值类型，如果是List类型 配置List的泛型即可--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        select * from user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="新建测试类执行"><a href="#新建测试类执行" class="headerlink" title="新建测试类执行"></a>新建测试类执行</h4><p>由于读取配置文件、创建SqlSessionFactory工厂等步骤复用性较高，我们在这里进行了抽取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.loonycoder.dao.IUserMapper;</span><br><span class="line">import com.loonycoder.domain.User;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class MybatisTest &#123;</span><br><span class="line"></span><br><span class="line">    private InputStream inputStream;</span><br><span class="line">    private SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    private SqlSession session;</span><br><span class="line">    private IUserMapper userDao;</span><br><span class="line"></span><br><span class="line">    //before注解代表在测试方法执行前执行</span><br><span class="line">    @Before</span><br><span class="line">    public void init() throws Exception&#123;</span><br><span class="line">        //1.读取配置文件</span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        //2.创建SqlSessionFactory工厂</span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class="line">        sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        //3.使用工厂创建SqlSession对象</span><br><span class="line">        session = sqlSessionFactory.openSession();</span><br><span class="line">        //4.使用SqlSession创建dao接口的代理对象</span><br><span class="line">        userDao = session.getMapper(IUserMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //after注解代表在测试方法执行后执行</span><br><span class="line">    @After</span><br><span class="line">    public void destroy() throws Exception&#123;</span><br><span class="line">        //6.释放资源</span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectTest() throws Exception&#123;</span><br><span class="line"></span><br><span class="line">        //5.使用代理对象执行方法</span><br><span class="line">        List&lt;User&gt; users= userDao.selectAll();</span><br><span class="line">        <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><p><img src="/images/execResult1.png" srcset="/img/loading.gif" alt="执行结果"></p><hr><h3 id="Mybatis的保存操作"><a href="#Mybatis的保存操作" class="headerlink" title="Mybatis的保存操作"></a>Mybatis的保存操作</h3><h4 id="在mapper接口中新增保存方法"><a href="#在mapper接口中新增保存方法" class="headerlink" title="在mapper接口中新增保存方法"></a>在mapper接口中新增保存方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 保存用户</span><br><span class="line"> * @param user</span><br><span class="line"> */</span><br><span class="line">public void saveUser(User user);</span><br></pre></td></tr></table></figure><h4 id="在IUserMapper-xml中添加保存sql语句"><a href="#在IUserMapper-xml中添加保存sql语句" class="headerlink" title="在IUserMapper.xml中添加保存sql语句"></a>在IUserMapper.xml中添加保存sql语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"saveUser"</span> parameterType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        insert into user (username,sex,birthday,address) values (<span class="comment">#&#123;userName&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;);</span></span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：<br>#{}为mybatis的固定用法，用于取值。如果User实体类中的属性是自动生成的get/set，则直接写属性名称即可。<br>其次，参数一定要一一对应上</strong></p><h4 id="新建测试类执行-1"><a href="#新建测试类执行-1" class="headerlink" title="新建测试类执行"></a>新建测试类执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">insertTest</span></span>()&#123;</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setUserName(<span class="string">"Lisa"</span>);</span><br><span class="line">    user.setBirthday(new Date());</span><br><span class="line">    user.setAddress(<span class="string">"广东"</span>);</span><br><span class="line">    user.setSex(<span class="string">"女"</span>);</span><br><span class="line">    userDao.saveUser(user);</span><br><span class="line">    session.commit();//记得手动提交事务</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：一定要手动提交事务，否则虽然不会报错，但是不会入表！！！</strong></p><h4 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h4><p><img src="/images/execResult2.png" srcset="/img/loading.gif" alt="执行结果"></p><hr><h3 id="Mybatis的删除操作"><a href="#Mybatis的删除操作" class="headerlink" title="Mybatis的删除操作"></a>Mybatis的删除操作</h3><h4 id="在mapper接口中新增删除方法"><a href="#在mapper接口中新增删除方法" class="headerlink" title="在mapper接口中新增删除方法"></a>在mapper接口中新增删除方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 删除用户</span><br><span class="line">    * @param userId</span><br><span class="line">    */</span><br><span class="line">   public void deleteUser(Integer userId);</span><br></pre></td></tr></table></figure><h4 id="在IUserMapper-xml中添加删除sql语句"><a href="#在IUserMapper-xml中添加删除sql语句" class="headerlink" title="在IUserMapper.xml中添加删除sql语句"></a>在IUserMapper.xml中添加删除sql语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        delete from user <span class="built_in">where</span> id = <span class="comment">#&#123;uid&#125;;</span></span><br><span class="line">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：因为该方法只有一个参数，所以我们在sql中标注的uid部分其实是可以随便写的，因为mybatis只会找到这一个参数</strong></p><h4 id="新建测试类执行-2"><a href="#新建测试类执行-2" class="headerlink" title="新建测试类执行"></a>新建测试类执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void <span class="function"><span class="title">deleteTest</span></span>()&#123;</span><br><span class="line">       userDao.deleteUser(53);</span><br><span class="line">       session.commit();//记得手动提交事务</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h4><p>删除前：<br><img src="/images/execBefore.png" srcset="/img/loading.gif" alt="执行结果"><br>删除后：<br><img src="/images/execAfter.png" srcset="/img/loading.gif" alt="执行结果"></p><hr><h3 id="Mybatis的修改操作"><a href="#Mybatis的修改操作" class="headerlink" title="Mybatis的修改操作"></a>Mybatis的修改操作</h3><h4 id="在mapper接口中新增修改方法"><a href="#在mapper接口中新增修改方法" class="headerlink" title="在mapper接口中新增修改方法"></a>在mapper接口中新增修改方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 修改用户</span><br><span class="line"> * @param user</span><br><span class="line"> */</span><br><span class="line">public void updateUser(User user);</span><br></pre></td></tr></table></figure><h4 id="在IUserMapper-xml中添加修改sql语句"><a href="#在IUserMapper-xml中添加修改sql语句" class="headerlink" title="在IUserMapper.xml中添加修改sql语句"></a>在IUserMapper.xml中添加修改sql语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">    update user <span class="built_in">set</span> username = <span class="comment">#&#123;username&#125;,sex = #&#123;sex&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;;</span></span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h4 id="新建测试类执行-3"><a href="#新建测试类执行-3" class="headerlink" title="新建测试类执行"></a>新建测试类执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">updateTest</span></span>()&#123;</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setId(41);</span><br><span class="line">    user.setUserName(<span class="string">"张三丰"</span>);</span><br><span class="line">    session.commit();//记得手动提交事务</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果-3"><a href="#执行结果-3" class="headerlink" title="执行结果"></a>执行结果</h4><p>修改前：<br><img src="/images/execAfter.png" srcset="/img/loading.gif" alt="执行结果"><br>修改后：<br><img src="/images/execAfter1.png" srcset="/img/loading.gif" alt="执行结果"></p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java框架 - 数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis入门及搭建</title>
    <link href="/2018/09/30/Mybatis-1/"/>
    <url>/2018/09/30/Mybatis-1/</url>
    
    <content type="html"><![CDATA[<p>上大学的时候自学过一段时间mybatis框架，感觉很好用。<br>但是在工作中并没有用到，于是翻出之前的视频重新复习了一下。</p><hr><h3 id="Mybatis的配置方式开发"><a href="#Mybatis的配置方式开发" class="headerlink" title="Mybatis的配置方式开发"></a>Mybatis的配置方式开发</h3><h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><p>因为Mybatis是持久层框架，所以在此之前我们要做一些准备工作，首先我们要在Mysql中建好表并插入数据。<br>建表及导入sql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) NOT NULL auto_increment,</span><br><span class="line">  `username` varchar(32) NOT NULL COMMENT <span class="string">'用户名称'</span>,</span><br><span class="line">  `birthday` datetime default NULL COMMENT <span class="string">'生日'</span>,</span><br><span class="line">  `sex` char(1) default NULL COMMENT <span class="string">'性别'</span>,</span><br><span class="line">  `address` varchar(256) default NULL COMMENT <span class="string">'地址'</span>,</span><br><span class="line">  PRIMARY KEY  (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert  into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,<span class="string">'张三'</span>,<span class="string">'2018-02-27 17:47:08'</span>,<span class="string">'男'</span>,<span class="string">'北京'</span>),(2,<span class="string">'李四'</span>,<span class="string">'2018-03-02 15:09:37'</span>,<span class="string">'女'</span>,<span class="string">'深圳'</span>),(3,<span class="string">'王五'</span>,<span class="string">'2018-03-04 11:34:34'</span>,<span class="string">'女'</span>,<span class="string">'成都'</span>),(4,<span class="string">'赵六'</span>,<span class="string">'2018-03-04 12:04:06'</span>,<span class="string">'男'</span>,<span class="string">'上海'</span>),(5,<span class="string">'loonycoder'</span>,<span class="string">'2018-03-07 17:37:26'</span>,<span class="string">'男'</span>,<span class="string">'西安'</span>),(6,<span class="string">'望月'</span>,<span class="string">'2018-03-08 11:44:00'</span>,<span class="string">'女'</span>,<span class="string">'杭州'</span>);</span><br></pre></td></tr></table></figure><p>如图：<br><img src="/images/table.png" srcset="/img/loading.gif" alt="建表"></p><h4 id="二、新建项目"><a href="#二、新建项目" class="headerlink" title="二、新建项目"></a>二、新建项目</h4><p>我们这里要新建一个maven项目。<br><img src="/images/1.png" srcset="/img/loading.gif" alt="创建Maven项目"></p><p><img src="/images/2.png" srcset="/img/loading.gif" alt="创建Maven项目"></p><p><img src="/images/3.png" srcset="/img/loading.gif" alt="创建Maven项目"></p><p>创建完成之后，我们打开pom.xml文件引入依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.loonycoder&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;MybatisDemo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="三、创建表对象的映射实体类"><a href="#三、创建表对象的映射实体类" class="headerlink" title="三、创建表对象的映射实体类"></a>三、创建表对象的映射实体类</h4><p>因为mybatis是一个ORM（Object Relational Mapping）框架，所以我们要准备一个和表字段一一对应的实体类。</p><p><strong>注意</strong>：<br><strong>表中的字段名和实体类中的字段名字一定要一致！</strong><br><strong>实体类一定要实现Serializable接口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private Date birthday;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    public Integer <span class="function"><span class="title">getId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getUsername</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date <span class="function"><span class="title">getBirthday</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBirthday(Date birthday) &#123;</span><br><span class="line">        this.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getAddress</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\'</span><span class="string">' +</span></span><br><span class="line"><span class="string">                ", birthday=" + birthday +</span></span><br><span class="line"><span class="string">                ", address='</span><span class="string">" + address + '\'' +</span></span><br><span class="line"><span class="string">                '&#125;';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><hr><h4 id="四、新建dao接口"><a href="#四、新建dao接口" class="headerlink" title="四、新建dao接口"></a>四、新建dao接口</h4><p>这里直接上代码，我在此新建了一个查询所有的方法，此处记住方法名和返回值类型，后续会用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.dao;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.domain.User;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IUserDao &#123;</span><br><span class="line">    List&lt;User&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="五、创建mybatis的主配置文件"><a href="#五、创建mybatis的主配置文件" class="headerlink" title="五、创建mybatis的主配置文件"></a>五、创建mybatis的主配置文件</h4><p>该配置文件需要放在/resources目录下，配置文件的名称在具有规范性的前提下是随意起的，我这里采用了默认的规范(我发现很多人都这么起)</p><p>SqlMapConfig.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;!--mybatis的主配置文件--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境--&gt;</span><br><span class="line">    &lt;environments default=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!--配置mysql的环境--&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--配置事务类型--&gt;</span><br><span class="line">            &lt;transactionManager <span class="built_in">type</span>=<span class="string">"JDBC"</span>&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!--配置数据源(连接池)--&gt;</span><br><span class="line">            &lt;dataSource <span class="built_in">type</span>=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/MybatisDemo/"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"20141016"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--指定映射配置文件位置，映射配置文件指的是每个dao独立的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/loonycoder/dao/IUserDao.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>配置数据源的时候，把url、username、password 修改成你自己的数据库链接、用户名和密码即可。</p><p>注意：<br><strong>下方的mapper部分的配置我接下来会讲，后续按照你自己配置的路径配置即可。</strong></p><hr><h4 id="六、配置mapper文件"><a href="#六、配置mapper文件" class="headerlink" title="六、配置mapper文件"></a>六、配置mapper文件</h4><p>前面虽然配置了mybatis主配置文件，但是我们在实际操作中如果存在多个对象的dao接口，主配置文件需要怎么准确找到该接口呢？<br>我们就需要为每个dao配置一个独立的配置文件<br>我习惯上把文件命名成 <strong>xxxMapper.xml</strong>，这里命名成xxxDao.xml是为了方便理解。<br>文件存放目录为/resources目录下，与实体对象dao接口的包同级。<br><img src="/images/mapperxml.png" srcset="/img/loading.gif" alt="xml文件配置"></p><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace需要配置dao的全限定类名--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.loonycoder.dao.IUserDao"</span>&gt;</span><br><span class="line">    &lt;!--配置查询所有--&gt;</span><br><span class="line">    &lt;!--id一定要是方法的名称--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"com.loonycoder.domain.User"</span>&gt;</span><br><span class="line">        select * from user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="七、引入log4j"><a href="#七、引入log4j" class="headerlink" title="七、引入log4j"></a>七、引入log4j</h4><p>这个是可选操作，为了后期记录日志，我们可以采用log4j去实现。此处只是了解。<br>将log4j.properties文件放在/resources目录下即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO,CONSOLE             debug  info  warn  error  fatal</span></span><br><span class="line">log4j.rootCategory=debug, CONSOLE, LOGFILE</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br><span class="line"></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line">log.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class="line">log.appender.LOGFILE.FILE=/usr/gmx/LearnWorkspace</span><br><span class="line">log.appender.LOGFILE.Append=<span class="literal">true</span></span><br><span class="line">log.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br></pre></td></tr></table></figure><hr><h4 id="八、测试案例"><a href="#八、测试案例" class="headerlink" title="八、测试案例"></a>八、测试案例</h4><p>如此，我们的mybatis就搭建完成了，我们接下来测试一下。<br>在/test/java目录下新建一个test类<br>如图：<br><img src="/images/test.png" srcset="/img/loading.gif" alt="test类"></p><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.loonycoder.dao.IUserDao;</span><br><span class="line">import com.loonycoder.domain.User;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class MybatisTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        //1.读取配置文件</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        //2.创建SqlSessionFactory工厂</span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        //3.使用工厂创建SqlSession对象</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        //4.使用SqlSession创建dao接口的代理对象</span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class="line">        //5.使用代理对象执行方法</span><br><span class="line">        List&lt;User&gt; users= userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        //6.释放资源</span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/testResult.png" srcset="/img/loading.gif" alt="运行结果"></p><hr><h3 id="Mybaits的注解方式开发"><a href="#Mybaits的注解方式开发" class="headerlink" title="Mybaits的注解方式开发"></a>Mybaits的注解方式开发</h3><p>Mybatis也为我们提供了基于注解的开发方式<br>基于注解开发意味着脱离xml配置，所以我们在上述项目中可以直接移除com/loonycoder/dao/IUserDao.xml文件<br>同时需要修改SqlMapConfig.xml中的映射配置文件部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;!--mybatis的主配置文件--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境--&gt;</span><br><span class="line">    &lt;environments default=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--配置事务--&gt;</span><br><span class="line">            &lt;transactionManager <span class="built_in">type</span>=<span class="string">"JDBC"</span>&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!--配置数据源（连接池）--&gt;</span><br><span class="line">            &lt;dataSource <span class="built_in">type</span>=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置映射文件（mapper类的映射文件）--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!--此处做了修改，之前的属性是resource，现在改为class，并且指定到dao接口的全限定类名--&gt;</span><br><span class="line">        &lt;mapper class=<span class="string">"com.loonycoder.dao.IUserDao"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>同时需要在dao接口的方法上添加注解@Select</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.loonycoder.dao;</span><br><span class="line"></span><br><span class="line">import com.loonycoder.domain.User;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface IUserDao &#123;</span><br><span class="line">    @Select(<span class="string">"select * from user"</span>)</span><br><span class="line">    List&lt;User&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/testResult.png" srcset="/img/loading.gif" alt="运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java框架 - 数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro会话管理</title>
    <link href="/2018/09/23/Shiro/"/>
    <url>/2018/09/23/Shiro/</url>
    
    <content type="html"><![CDATA[<h3 id="Shiro在线会话管理"><a href="#Shiro在线会话管理" class="headerlink" title="Shiro在线会话管理"></a>Shiro在线会话管理</h3><p>参考文章：</p><ul><li><a href="https://www.iteye.com/blog/jinnianshilongnian-2047643" target="_blank" rel="noopener">跟我学Shrio-在线会话</a></li><li><a href="https://mrbird.cc/Spring-Boot-Shiro%20session.html" target="_blank" rel="noopener">Spring Boot Shiro在线会话管理</a></li></ul><p>实现效果预览：<br><img src="/images/shiro1.png" srcset="/img/loading.gif" alt="实现效果预览"></p><p>Shiro提供一个对象org.apache.shiro.session.mgt.eis.SessionDAO，通过此对象可以获取到Shiro的Session中有效的Session对象，通过此对象，我们可以获取到用户登录的数据，比如：用户名、密码、ID、SessionID、登录时间、最后访问时间、IP地址等等。</p><p><img src="/images/shiro2.png" srcset="/img/loading.gif" alt="目录"></p><p>下面我们实现两个功能：</p><ul><li>获取在线会话列表</li><li>实现强制下线功能</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><h5 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h5><p>这里我使用的是Redis来储存Shiro的Session信息，修改SessionDAO配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public RedisSessionDAO <span class="function"><span class="title">redisSessionDAO</span></span>() &#123;</span><br><span class="line">    RedisSessionDAO redisSessionDAO = new RedisSessionDAO();</span><br><span class="line">    redisSessionDAO.setRedisManager(redisManager());</span><br><span class="line">    <span class="built_in">return</span> redisSessionDAO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(prefix = <span class="string">"redis.shiro"</span>)</span><br><span class="line">public RedisManager <span class="function"><span class="title">redisManager</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new RedisManager();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要将SessionDAO注入到SessionManager中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public SessionManager <span class="function"><span class="title">sessionManager</span></span>() &#123;</span><br><span class="line">    DefaultWebSessionManager defaultWebSessionManager = new DefaultWebSessionManager();</span><br><span class="line">    defaultWebSessionManager.setCacheManager(cacheManager());</span><br><span class="line">    defaultWebSessionManager.setSessionDAO(sessionDAO());</span><br><span class="line">    <span class="built_in">return</span> sessionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将SessionManager注入到SecurityManager中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public SecurityManager <span class="function"><span class="title">securityManager</span></span>() &#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(realm());</span><br><span class="line"></span><br><span class="line">    //自定义sessionManager</span><br><span class="line">    securityManager.setSessionManager(sessionManager());</span><br><span class="line">    //自定义缓存实现</span><br><span class="line">    securityManager.setCacheManager(cacheManager());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取在线会话列表"><a href="#获取在线会话列表" class="headerlink" title="获取在线会话列表"></a>获取在线会话列表</h4><h5 id="OnlineUser-java"><a href="#OnlineUser-java" class="headerlink" title="OnlineUser.java"></a>OnlineUser.java</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class OnlineUser implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private String id; //sessionId</span><br><span class="line"></span><br><span class="line">    private String uid; //用户ID</span><br><span class="line"></span><br><span class="line">    private String username; //用户名</span><br><span class="line"></span><br><span class="line">    private String host; //主机地址</span><br><span class="line"></span><br><span class="line">    private String address; //地理位置</span><br><span class="line"></span><br><span class="line">    @DateTimeFormat(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    @JsonFormat(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    private Date startTime; //用户开始访问时间</span><br><span class="line"></span><br><span class="line">    @DateTimeFormat(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    @JsonFormat(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    private Date endTime; //用户最后访问时间</span><br><span class="line"></span><br><span class="line">    private Long timeout; //超时时间</span><br><span class="line"></span><br><span class="line">    private String status; //状态</span><br><span class="line"></span><br><span class="line">    public void setHost(String host) &#123;</span><br><span class="line">        this.host = host.equals(<span class="string">"0:0:0:0:0:0:0:1"</span>) ? <span class="string">"127.0.0.1"</span> : host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>编写获取在线会话列表的service层实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;OnlineUser&gt; <span class="function"><span class="title">list</span></span>() &#123;</span><br><span class="line">    List&lt;OnlineUser&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    Collection&lt;Session&gt; sessions = sessionDAO.getActiveSessions(); //获取在线会话的集合</span><br><span class="line">    <span class="keyword">for</span> (Session session : sessions) &#123;</span><br><span class="line">        <span class="keyword">if</span> (session != null) &#123;</span><br><span class="line">            OnlineUser onlineUser = new OnlineUser();</span><br><span class="line">            SimplePrincipalCollection principalCollection;</span><br><span class="line">            User user;</span><br><span class="line">            //判断此session是否还在登录状态</span><br><span class="line">            <span class="keyword">if</span> (session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY) == null) &#123;</span><br><span class="line">                <span class="built_in">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //如果此session正在登录，将此session的数据放入principalCollection集合中，从而可获取登录用户对象数据</span><br><span class="line">                principalCollection = (SimplePrincipalCollection) session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);</span><br><span class="line">                user = (User) principalCollection.getPrimaryPrincipal();</span><br><span class="line">                onlineUser.setUid(user.getId().toString());</span><br><span class="line">                onlineUser.setUsername(user.getUsername());</span><br><span class="line">            &#125;</span><br><span class="line">            onlineUser.setId(session.getId().toString());</span><br><span class="line">            onlineUser.setHost(session.getHost());</span><br><span class="line">            onlineUser.setAddress(AddressUtil.getAddress(session.getHost()));</span><br><span class="line">            onlineUser.setStartTime(session.getStartTimestamp());</span><br><span class="line">            onlineUser.setEndTime(session.getLastAccessTime());</span><br><span class="line">            long timeout = session.getTimeout();</span><br><span class="line">            onlineUser.setTimeout(timeout);</span><br><span class="line">            onlineUser.setStatus(timeout == 0L ? <span class="string">"0"</span> : <span class="string">"1"</span>); //0在线 1下线</span><br><span class="line">            list.add(onlineUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getActiveSessions()将获取到所有有效的Session集合，通过DefaultSubjectContext.PRINCIPALS_SESSION_KEY可以判断当前系统Subject中的session key和sessions列表中的session是否匹配，不匹配则session无效。<br>session.getHost()顾名思义就是获取Host主机地址即IP地址。<br>AddressUtil.getAddress(session.getHost())是通过IP地址查询其详细的地理位置，使用了ip2region开源库。</p><h5 id="根据IP查询地址位置"><a href="#根据IP查询地址位置" class="headerlink" title="根据IP查询地址位置"></a>根据IP查询地址位置</h5><p>开源地址：<a href="https://github.com/lionsoul2014/ip2region" target="_blank" rel="noopener">https://github.com/lionsoul2014/ip2region</a><br>引入ip2region的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.lionsoul&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ip2region&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>拷贝ip2region.db文件（开源仓库中找）到项目的resources/config/下<br>参考官方实例代码写工具类AddressUtil.java<br>官方实例：<a href="https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java" target="_blank" rel="noopener">https://github.com/lionsoul2014/ip2region/blob/master/binding/java/src/main/java/org/lionsoul/ip2region/test/TestSearcher.java</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class AddressUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static String getAddress(String ip) &#123;</span><br><span class="line">        //db</span><br><span class="line">        String dbPath = AddressUtil.class.getResource(<span class="string">"/config/ip2region.db"</span>).getPath();</span><br><span class="line"></span><br><span class="line">        File file = new File(dbPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            throw new GlobalException(<span class="string">"缺少 ip2region.db库"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int algorithm = DbSearcher.BTREE_ALGORITHM; //B-tree</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            DbConfig config = new DbConfig();</span><br><span class="line">            DbSearcher searcher = new DbSearcher(config, file.getPath());</span><br><span class="line">            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">            //define the method</span><br><span class="line">            Method method = null;</span><br><span class="line">            switch (algorithm) &#123;</span><br><span class="line">                <span class="keyword">case</span> DbSearcher.BTREE_ALGORITHM:</span><br><span class="line">                    method = searcher.getClass().getMethod(<span class="string">"btreeSearch"</span>, String.class);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DbSearcher.BINARY_ALGORITHM:</span><br><span class="line">                    method = searcher.getClass().getMethod(<span class="string">"binarySearch"</span>, String.class);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DbSearcher.MEMORY_ALGORITYM:</span><br><span class="line">                    method = searcher.getClass().getMethod(<span class="string">"memorySearch"</span>, String.class);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            DataBlock dataBlock = null;</span><br><span class="line">            <span class="keyword">if</span> (!Util.isIpAddress(ip)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Error: Invalid ip address"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            dataBlock = (DataBlock) method.invoke(searcher, ip);</span><br><span class="line">            reader.close();</span><br><span class="line">            searcher.close();</span><br><span class="line">            <span class="built_in">return</span> dataBlock.getRegion();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结"><a href="#结" class="headerlink" title="结"></a>结</h5><p>当前端请求/online/list接口时，将List<OnlineUser>结合数据返回给前端渲染即可。</p><h4 id="实现强制下线功能"><a href="#实现强制下线功能" class="headerlink" title="实现强制下线功能"></a>实现强制下线功能</h4><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(<span class="string">"/forceLogout"</span>)</span><br><span class="line">public ResponseCode forceLogout(String id) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        sessionService.forceLogout(id);</span><br><span class="line">        <span class="built_in">return</span> ResponseCode.SUCCESS();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="built_in">return</span> ResponseCode.ERROR();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个id是sessionID</p><h5 id="service实现"><a href="#service实现" class="headerlink" title="service实现"></a>service实现</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void forceLogout(String id) &#123;</span><br><span class="line">    Session session = sessionDAO.readSession(id);</span><br><span class="line">    session.setTimeout(0L);</span><br><span class="line">    session.stop();</span><br><span class="line">    sessionDAO.delete(session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
      <tag>权限框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue路由</title>
    <link href="/2018/09/15/Vue4/"/>
    <url>/2018/09/15/Vue4/</url>
    
    <content type="html"><![CDATA[<h3 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h3><h4 id="什么是Vue路由？"><a href="#什么是Vue路由？" class="headerlink" title="什么是Vue路由？"></a>什么是Vue路由？</h4><ul><li><strong>后端路由：</strong>即请求的URL地址都对应后端的接口，请求URL响应对应的服务器的资源。</li><li><strong>前端路由：</strong>对于单页面程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以单页面程序中的页面跳转主要通过hash实现。</li></ul><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><h5 id="导入类库"><a href="#导入类库" class="headerlink" title="导入类库"></a>导入类库</h5><p>首先需要导入vue-router组件类库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue-router.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当导入类库后，window全局对象中就存在了一个路由的构造函数： VueRouter；就像导入Vue类库后存在一个Vue的构造函数一样，我们能够通过new VueRouter的方式实例化路由对象。<br>如果你使用了new VueRouter({});构造函数来实例化了一个路由对象，你会发现浏览器路径中会出现#/路径，这个路径就是前面讲到的URL中的hash，他并不会向后端发送任何请求，而仅仅是作页面跳转，如果你#/后拼接了一个不存在的路径，自然也不会进行跳转，页面也不会发送任何请求。<br><strong>实例：</strong><br><img src="/images/vue15.png" srcset="/img/loading.gif" alt="vue"></p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>上面我们讲到了使用new VueRouter({})的方式实例化一个路由对象，其中包含几个参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 给路由对象创建一个容器，包裹在父组件`app`内</span><br><span class="line">        相当于一个占位符，路由规则匹配到的组件内容就会展示到`&lt;router-view&gt;&lt;/router-view&gt;`中</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- ===============分割线===================== --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- JavaScript --&gt;</span><br><span class="line">//创建login组件</span><br><span class="line">var login = &#123;</span><br><span class="line">    template: <span class="string">'login组件'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建register组件</span><br><span class="line">var register = &#123;</span><br><span class="line">    template: <span class="string">'register组件'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Router实例</span><br><span class="line">var 路由对象名称 = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; path: <span class="string">'/监听URL路径'</span>, component: login(组件名称) &#125;,</span><br><span class="line">        &#123; path: <span class="string">'/监听URL路径'</span>, component: register(组件名称) &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Vue实例</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">'app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    router: 路由对象名称   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li>1、routes 表示这个路由对象中的 路由匹配规则，可以存在多个规则（注意：这里是routes而不是routers）</li><li>2、属性一：path 表示监听哪个路由连接地址，即你想跳转都哪个路径上，应在这里注册实现跳转到对应的组件上</li><li>3、属性二：component 表示如果路由匹配了前面的path，则展示component属性对应的那个组件</li><li>4、component的属性值必须是一个组件的模板对象，不能是组件的引用名称</li><li>5、经过1-4的步骤基本完成了路由对象的创建，下面要将这个路由对象注入到Vue实例中，使用router: 组件对象名称实现</li><li>6、创建对应需要监听的组件，如上我们创建了login和register组件，与之前讲的不同是这里是一个var 组件名称其值是一个组件对象，和之前的Vue.component方式相似，但是这里仅仅是一个组件对象，并没有注册到Vue实例中，因为没有组件名称，所以不能在HTML中使用&lt;login&gt;&lt;/login&gt; ，注意这里的login是组件对象的名称。</li></ul><p><strong>步骤：</strong></p><ul><li>1、创建router实例new VueRouter，完成相关属性的定义；</li><li>2、将这个路由对象注册到Vue实例中，使用router: 路由对象名称的方式；</li><li>3、创建第一步中定义的组件名称对应的组件，直接在&lt;script&gt;中定义var组件对象名称即可，在template中定义具体的HTML视图，或是通过template: ‘#id’引用外部视图也行。</li><li>4、在Vue实例控制域app中，创建&lt;router-view&gt;&lt;/router-view&gt;，相当于router容器，你想在页面上展示几个组件就应该在页面中创建几个容器。</li></ul><p>如上，我们可以写具体的跳转链接了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app&gt;</span></span><br><span class="line"><span class="string">    &lt;a href="</span><span class="comment">#/login"&gt;登录&lt;/a&gt;</span></span><br><span class="line">    &lt;a href=<span class="string">"#/register"</span>&gt;注册&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如上，当我们点击登录或注册，Vue-router就会监听都对应的URL地址，然后在path规则中刚好匹配到规则login，那么就会跳转到对应的组件component: login的login组件中。<br>可能你会疑惑了，为什么这里的href需要写为#/login而不是/login或login，你尝试一下就知道了，因为vue-router监听URL地址是基于hash的，不加#/就会找不到路径。<br>如果你觉得每次都加#/麻烦的话，Vue-router页提供了一个Tag:&lt;router-link to=”URL地址”&gt;&lt;/router-link&gt;，其在浏览器中会被解析为&lt;a&gt;标签。</p><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a href=<span class="string">"#/login"</span>&gt;登录&lt;/a&gt;</span><br><span class="line">        &lt;router-link to=<span class="string">"register"</span>&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue-router.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">        var login = &#123;</span><br><span class="line">            template: <span class="string">'&lt;h2&gt;登录组件&lt;/h2&gt;'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var register = &#123;</span><br><span class="line">            template: <span class="string">'&lt;h2&gt;注册组件&lt;/h2&gt;'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var routerObj = new VueRouter(&#123;</span><br><span class="line">            routes: [</span><br><span class="line">                &#123; path: <span class="string">'/login'</span>, component: login &#125;,</span><br><span class="line">                &#123; path: <span class="string">'/register'</span>, component: register &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">'#app'</span>,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;&#125;,</span><br><span class="line">            router: routerObj</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>但是上面的实例中，我们发现默认进入的根路径中仅有一个父组件名称，一般我们的登录页面应该直接显示登录框，所以vue-router提供了重定向的动能{path: ‘’, redirect: ‘’}，即在router: []中监听根路径，如果监听都访问的是根路径就重定向到登录URL就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var routerObj = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; path: <span class="string">'/'</span>, redirect: <span class="string">'/login'</span> &#125;,</span><br><span class="line">        &#123; path: <span class="string">'/login'</span>, component: login &#125;,</span><br><span class="line">        &#123; path: <span class="string">'/register'</span>, component: register &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="路由参数传递"><a href="#路由参数传递" class="headerlink" title="路由参数传递"></a>路由参数传递</h4><p>在进行页面跳转，即路由的时候，我们可能需要在发送URL时传递一些参数，常见的就如<a href="http://www.loonycoder.com/api?id=1&amp;name=&#39;loonycoder&#39;" target="_blank" rel="noopener">http://www.loonycoder.com/api?id=1&amp;name=&#39;loonycoder&#39;</a>这种格式。<br>那么在URL中传递的参数，vue-router提供了一种获取方式：this.$route。<br>那么什么时候能获取到传递的参数呢？ 回顾前面讲到的Vue声明周期函数，那么在自定义组件中自然也存在生命周期函数，所以最早操作组件data和methods中数据的阶段就是created这个声明周期函数的阶段。<br>实例：<br><img src="/images/vue16.png" srcset="/img/loading.gif" alt="vue"><br><img src="/images/vue17.png" srcset="/img/loading.gif" alt="vue"></p><p>上面打印的值中，我们能看到，我们再VueRouter中创建的path匹配规则，实际在HTML中会被渲染为相关的正则表达式，来实现路径的匹配。<br>其次，我们还能发现，在URL中拼接的参数id在this.$route对象的query属性中，我们通过this.$route.query.id即可获得传递的id值：2。</p><h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><p>路由嵌套，顾名思义即在父级路由内部存在子路由。例如：</p><blockquote><p>根路径：<a href="http://www.loonycoder.com" target="_blank" rel="noopener">http://www.loonycoder.com</a><br>父级路由地址：<a href="http://www.loonycoder.com/api" target="_blank" rel="noopener">http://www.loonycoder.com/api</a><br>子级路由地址：<a href="http://www.loonycoder.com/api/login" target="_blank" rel="noopener">http://www.loonycoder.com/api/login</a></p></blockquote><p><strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;router-link to=<span class="string">"/account"</span>&gt;Account&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template id=<span class="string">"tmp"</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;这是Account组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;router-link to=<span class="string">"/account/login"</span>&gt;登录&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link to=<span class="string">"/account/register"</span>&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue-router.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">        var account = &#123;</span><br><span class="line">            template: <span class="string">'#tmp'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var login = &#123;</span><br><span class="line">            template: <span class="string">'&lt;h2&gt;登录组件&lt;/h2&gt;'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var register = &#123;</span><br><span class="line">            template: <span class="string">'&lt;h2&gt;注册组件&lt;/h2&gt;'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var routerObj = new VueRouter(&#123;</span><br><span class="line">            routes: [</span><br><span class="line">                &#123; </span><br><span class="line">                    path: <span class="string">'/account'</span>, </span><br><span class="line">                    component: account,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123; path: <span class="string">'login'</span>, component: login &#125;,</span><br><span class="line">                        &#123; path: <span class="string">'register'</span>, component: register &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">'#app'</span>,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;&#125;,</span><br><span class="line">            router: routerObj</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如上，我们使用了routes: []中的另外一个属性：children，顾名思义就是表示这个父规则/account下存在一些子规则，且在URL中应该体现出来：<br><img src="/images/vue18.png" srcset="/img/loading.gif" alt="vue"></p><p><strong>注意：</strong><br>在children中定义的子组件的path规则不能加/，即如上的，直接写path: login即可，这样请求account/login地址时，vue-router会找/account规则下的login规则，且不加/vue-router才会自动将login视为account下的子路径，并自动拼接account/，否则不会自动拼接，那么也无法完成路由的嵌套。</p><h4 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h4><p>我们常见的后台开发页面，经常遇到上、左、中的布局方式；那么以前我们可能使用iframe实现页面间的跳转，但是现在我们学习的路由要比其更加的方便好用。<br><strong>命名视图</strong>的思想就是为每一个页面展示的视图都起一个名字，目的是为了为每个&lt;router-view&gt;&lt;/router-view&gt;容器刚好匹配一个指定的视图。使用方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view name=<span class="string">"left"</span>&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view name=<span class="string">"main"</span>&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">routes: [</span><br><span class="line">    &#123; </span><br><span class="line">        path: <span class="string">'/'</span>, components: &#123;</span><br><span class="line">            <span class="string">'default'</span>: header</span><br><span class="line">            <span class="string">'left'</span>: left</span><br><span class="line">            <span class="string">'main'</span>: main</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>解释：</strong><br>其中的path是根路径/，而使用components代替之前的component，目的就是可匹配其下的多个规则；default表示默认的视图组件是header这个组件，即会匹配到第一个&lt;router-view&gt;视图容器中；下面的两个组件会根据name名称需要对应的组件。<br>实现上、左、中的布局：<br><strong>思路：</strong><br>1、我们需要创建三个组件，名称分别为：header、left、main；并且在app中创建三个&lt;router-view&gt;&lt;/router-view&gt;路由容器。<br>2、采用<strong>命名视图</strong>的方式为每个视图都起一个名字：&lt;router-view name=”left”&gt;&lt;/router-view&gt; …<br>3、注册路由实例。<br>实例：<br><img src="/images/vue19.png" srcset="/img/loading.gif" alt="vue"><br><img src="/images/vue20.png" srcset="/img/loading.gif" alt="vue"></p>]]></content>
    
    
    <categories>
      
      <category>Web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件</title>
    <link href="/2018/09/07/Vue3/"/>
    <url>/2018/09/07/Vue3/</url>
    
    <content type="html"><![CDATA[<h4 id="Vue创建组件"><a href="#Vue创建组件" class="headerlink" title="Vue创建组件"></a>Vue创建组件</h4><h5 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h5><p>什么是组件？组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样地方功能，就可以去调用对应的组件即可。<br>组件化和模块化的区别：</p><ul><li>模块化：是从代码逻辑的角度进行划分的，方便代码分层开发，保证每个功能模块的只能单一；</li><li>组件化：是从UI界面的角度进行划分的；前端的组件化，方便了UI组件的重用；</li></ul><h5 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h5><p><strong>方式一</strong><br>1、使用Vue.extend来创建全局的Vue组件<br>2、通过template属性来指定组件要展示的HTML结构<br>3、通过Vue.component()定义全局组件<br>4、在HTML指定位置通过Tag标签的形式应用你的组件，组件的名称即是tag标签的名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!-- 组件的名称即为对应tag标签的名称 --&gt;</span><br><span class="line">&lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 创建组件</span><br><span class="line">var com1 = Vue.extend(&#123;</span><br><span class="line">template: <span class="string">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 使用Vue.component(<span class="string">'组件的名称'</span>, 创建出来的组件模板对象)，定义全局组件</span><br><span class="line">Vue.component(<span class="string">'mycom1'</span>, com1);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>用Vue.component()定义组件名称的时候有两种命名方式：1、驼峰命名：Xxx；2、xxx。注意，使用驼峰命名时，tag标签不能使用驼峰名称，应将相应的大写字母替换为-加小写字母，例如：Vue.component(‘myCom’, com1)，那么tag标签应为： &lt;my-com&gt; &lt;/my-com&gt;</li></ul><p><strong>方式二</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件的名称即为对应tag标签的名称 --&gt;</span><br><span class="line">&lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">// 使用Vue.component(<span class="string">'组件的名称'</span>, 创建出来的组件模板对象)，定义全局组件</span><br><span class="line">Vue.component(<span class="string">'mycom1'</span>, Vue.extend(&#123;</span><br><span class="line">template: <span class="string">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class="line">&#125;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>方式二就像是方式一的简化版，但是注意：<br>在template中定义的内容只能存在一个根节点元素，即上面例子中template中不能出现和 &lt;h3&gt;平级的标签。<br>比如下面这种写法就是<strong>错误的</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycom1'</span>, Vue.extend(&#123;</span><br><span class="line">template: <span class="string">'&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;&lt;span&gt;&lt;/span&gt;'</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>解决办法就是，外层嵌套一个根标签就行了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycom1'</span>, Vue.extend(&#123;</span><br><span class="line">template: <span class="string">'&lt;div&gt;&lt;h3&gt;这是使用Vue.extend 创建的组件&lt;/h3&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;'</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p><strong>方式三</strong><br>1、JavaScript中仍使用Vue.component来定义全局组件，和方式二相似，但是里面不再是template: ‘HTML结构’了，而是引用一个外部标签的id值，即template:’id’。<br>2、在被Vue实例控制的app外面，定义&lt;template id=”id”&gt;你的HTML结构&lt;/template&gt;<br>这种方式的好处就是是就组件代码都是定义在HTML结构中的，有智能代码提示；而JavaScript中定义组件仅是写一个引用。<br>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!-- 页面引用 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template id=<span class="string">"tmp"</span>&gt;</span><br><span class="line">&lt;!-- 比如仅存在一个根节点元素 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;&lt;/h1&gt;&gt;</span><br><span class="line">&lt;h2&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//JavaScript部分</span><br><span class="line">Vue.component(<span class="string">'mycom'</span>, &#123;</span><br><span class="line">template: <span class="string">'#tmp'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>定义私</strong>有组件<br>除了上面讲到的定义全局组件，我们也可以定义私有组件，使用components: {}函数。<br>如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;tem&gt;&lt;/tem&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=<span class="string">"tmp"</span>&gt;</span><br><span class="line">    &lt;h3&gt;这是私有组件&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        tem: &#123;</span><br><span class="line">            template: <span class="string">'#tmp'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="组件元素"><a href="#组件元素" class="headerlink" title="组件元素"></a>组件元素</h5><p><strong>组件的</strong>data<br>在组件中，同样可以有自己的data数据，但是用法和Vue实例中的data用法有所不同：<br>1、组件中的data必须是一个方法，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="title">function</span></span>()&#123; &#125;</span><br></pre></td></tr></table></figure><p>2、组件中的data方法必须返回一个Object对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">Vue.component(<span class="string">'mycom1'</span>, Vue.extend(&#123;</span><br><span class="line">data: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">msg: <span class="string">'这是组件的data'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: <span class="string">'&lt;h3&gt;这是使用Vue.extend 创建的组件-- &#123;&#123;msg&#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>组件的</strong>切换<br>在遇到登录注册表单时，通常我们需要对两个按钮进行切换实现显示不同的表单，那么Vue中的组件切换正符合了这个功能要求。</p><p><strong>方式一</strong></p><p>可以使用Vue提供的v-if和v-else来实现两个组件间的切换，但是，仅支持切换两个组件</p><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> @click.prevent=<span class="string">"flag=true"</span>&gt;登录&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> @click.prevent=<span class="string">"flag=false"</span>&gt;注册&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;login v-if=<span class="string">"flag"</span>&gt;&lt;/login&gt;</span><br><span class="line">    &lt;register v-else=<span class="string">"flag"</span>&gt;&lt;/register&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=<span class="string">"login"</span>&gt;</span><br><span class="line">    &lt;h3&gt;这是登录表单&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template id=<span class="string">"register"</span>&gt;</span><br><span class="line">&lt;h3&gt;这是注册表单&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">// 创建登录组件</span><br><span class="line">Vue.component(<span class="string">'login'</span>, &#123;</span><br><span class="line">template: <span class="string">'#login'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 创建注册组件</span><br><span class="line">Vue.component(<span class="string">'register'</span>, &#123;</span><br><span class="line">template: <span class="string">'#register'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    flag: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>定义flag参数，当flag=true就显示组件，当flar=false就隐藏组件</p><p><strong>方式二</strong></p><p>Vue提供了component来展示对应名称的组件。其中component是一个占位符，:is属性，可以用来指定要展示的组件名称</p><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> @click.prevent=<span class="string">"comName='login'"</span>&gt;登录&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> @click.prevent=<span class="string">"comName='register'"</span>&gt;注册&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;component :is=<span class="string">"comName"</span>&gt;&lt;/component&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=<span class="string">"login"</span>&gt;</span><br><span class="line">    &lt;h3&gt;这是登录表单&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template id=<span class="string">"register"</span>&gt;</span><br><span class="line">&lt;h3&gt;这是注册表单&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">// 创建登录组件</span><br><span class="line">Vue.component(<span class="string">'login'</span>, &#123;</span><br><span class="line">template: <span class="string">'#login'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 创建注册组件</span><br><span class="line">Vue.component(<span class="string">'register'</span>, &#123;</span><br><span class="line">template: <span class="string">'#register'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    comName: <span class="string">'login'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>即使用Vue提供的component，它能够实现自动对组件进行展示和隐藏，通过:is=’组件名称’。</p><h5 id="父子组件间传值"><a href="#父子组件间传值" class="headerlink" title="父子组件间传值"></a>父子组件间传值</h5><p><strong>父组件</strong>给子组件传值</p><p>父组件给子组件传值，即实现在子组件中调用父组件中的methods或是获取父组件中的data.</p><p><strong>传参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 父组件实例 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 子组件实例 --&gt;</span><br><span class="line">        &lt;com1&gt;&lt;/com1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        msg: <span class="string">'这是父组件data值'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">show</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"这是父组件的show方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 子组件</span><br><span class="line">        components: &#123;</span><br><span class="line">        com1: &#123;</span><br><span class="line">        template: <span class="string">'&lt;h2&gt;这是子组件&lt;/h2&gt;'</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>如上，当我们直接在子组件中引用父组件data中定义的msg数据，将上面的修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com1: &#123;</span><br><span class="line">template: <span class="string">'&lt;h2&gt;这是子组件--&#123;&#123;msg&#125;&#125;&lt;/h2&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就会报错。所以就证实了默认在子组件中不能访问父组件中的data或methods。<br>为了解决子组件获取父组件数据，Vue提供了以下方式获取：</p><ul><li>1、父组件在引用子组件的时候，通过属性绑定的方式v-bind:，把需要传递给子组件的数据以属性绑定的形式传递到子组件内部，供子组件使用。</li><li>2、在子组件中，通过props: []获取到父组件传递过来的数据；这样就完成了父组件向子组件传值</li></ul><p><strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 父组件实例 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 子组件实例 --&gt;</span><br><span class="line">        &lt;com1 :fatoson=<span class="string">"msg"</span>&gt;&lt;/com1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        msg: <span class="string">'这是父组件data值'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">        // 子组件</span><br><span class="line">        components: &#123;</span><br><span class="line">        com1: &#123;</span><br><span class="line">        template: <span class="string">'&lt;h2&gt;这是子组件--&#123;&#123;fatoson&#125;&#125;&lt;/h2&gt;'</span>,</span><br><span class="line">        props: [<span class="string">'fatoson'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>如上，我们在子组件实例中使用了v-bind绑定了一个参数fatoson，其值是：msg即在父组件data中定义的值；那么就相当于父组件的一个data数据被Vue绑定到了子组件实例中，且父组件data值的别名是fatoson，那么在子组件中通过props: []属性就能获取到这个别名，然后就实现了父组件向子组件传值。需要注意以下：</p><ul><li>1、我们可以将为子组件绑定的参数名称是父组件值的别名。即此时msg相当于fatoson。</li><li>2、注意命名中若是驼峰命名，在HTML中必须用-替换。</li><li>3、注意props是Vue为父组将向子组件传值提供的一个参数，且他是唯一的数组类型的。</li><li>4、注意子组件通过props获取到的父组件的值是只读的，即不能修改。</li></ul><p><strong>传方法</strong><br>上面讲了父组件给子组件传递普通的参数，下面我们将了解到父组件怎样给子组件传递方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 父组件实例 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 子组件实例 --&gt;</span><br><span class="line">        &lt;com1 @open=<span class="string">"show"</span>&gt;&lt;/com1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;template id=<span class="string">"tmp"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> @click=<span class="string">"myclick"</span> value=<span class="string">"子组件按钮，点击触发父组件方法"</span>/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        msg: <span class="string">'这是父组件data值'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">show</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"这是父组件的show方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 子组件</span><br><span class="line">        components: &#123;</span><br><span class="line">        com1: &#123;</span><br><span class="line">        template: <span class="string">'#tmp'</span>,</span><br><span class="line">        props: [<span class="string">'fatoson'</span>],</span><br><span class="line">        methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">myclick</span></span>()&#123;</span><br><span class="line">        this.<span class="variable">$emit</span>(<span class="string">'open'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li>1、这里子组件的template数据引用外部的&lt;template&gt;&lt;/template&gt;中的HTML代码。</li><li>2、与传值思路相同，传递方法也需要在子组件实例中使用v-on即@来绑定方法，方法别名@open，方法的值是show是在父组件中定义的方法名。</li><li>3、与传值思路相同，传值使用了props来接受传递的参数，那么传方法提供了$emit()元素</li></ul><p><strong>综合</strong><br>上面讲的父组件向子组件传递方法，那么既然是方法就肯定能传递方法参数。我们只需要在父组件方法中指定值名称即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@子组件接收的方法别名=<span class="string">"父组件中的方法(父组件中的参数值或data)"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 父组件实例 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 子组件实例 --&gt;</span><br><span class="line">        &lt;com1 @open=<span class="string">"show(fatosonval)"</span>&gt;&lt;/com1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;template id=<span class="string">"tmp"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> @click=<span class="string">"myclick"</span> value=<span class="string">"子组件按钮，点击触发父组件方法"</span>/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        fatosonval: &#123;</span><br><span class="line">        id: <span class="string">'1'</span>,</span><br><span class="line">        name: <span class="string">'Loonycoder'</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        show(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 子组件</span><br><span class="line">        components: &#123;</span><br><span class="line">        com1: &#123;</span><br><span class="line">        template: <span class="string">'#tmp'</span>,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">myclick</span></span>()&#123;</span><br><span class="line">        this.<span class="variable">$emit</span>(<span class="string">'open'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>子组件</strong>给父组件传值<br>即实现在父组件中调用子组件中的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 父组件实例 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 子组件实例 --&gt;</span><br><span class="line">        &lt;com1 @open=<span class="string">"show"</span>&gt;&lt;/com1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;template id=<span class="string">"tmp"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> @click=<span class="string">"myclick"</span> value=<span class="string">"子组件按钮，点击触发父组件方法"</span>/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        fatosonval: null</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        show(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 子组件</span><br><span class="line">        components: &#123;</span><br><span class="line">        com1: &#123;</span><br><span class="line">        template: <span class="string">'#tmp'</span>,</span><br><span class="line">        <span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">        sonval: &#123; name: <span class="string">'Loonycoder'</span>, age: 24 &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">myclick</span></span>()&#123;</span><br><span class="line">        this.<span class="variable">$emit</span>(<span class="string">'open'</span>, this.sonval);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>之前我们实现父组件向子组件传值的时候，需要在@open()中指定父组件中的data，而子组件给父组件传值的时候就不需要再指定了，而是直接在调用子组件中的open（这是父组件方法的别名），将子组件的值写进$emit(‘方法别名’, data参数)中即可。</p><h5 id="Vue获取DOM元素和组件"><a href="#Vue获取DOM元素和组件" class="headerlink" title="Vue获取DOM元素和组件"></a>Vue获取DOM元素和组件</h5><p>首先我们需要明白的就是Vue并不提倡我们操作DOM元素，Vue的宗旨就是让我们只关心业务逻辑。<br>那么通常我们需要获取一个如&lt;h2&gt;&lt;/h2&gt;中的值，采用原生JS通常需要先为tag标签定义一个id属性，然后通过JS代码document.getElementById(‘id’).innterText来获取到&lt;h2&gt;中的文本数据，而Vue也实现了操作原生DOM的功能：</p><ul><li>在需要获取的HTML标签中指定<code>ref</code>属性，其值可自定义。</li><li>在Vue实例中，使用<code>this.$refs.指定的值</code>来获取DOM对象，进行操作。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 ref=<span class="string">"h2"</span>&gt;这是h2的文本数据&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">console.log(this.<span class="variable">$refs</span>.h2.innerText);</span><br></pre></td></tr></table></figure></li></ul><p><strong>通过$refs还能轻易获取子组件中的data和methods数据</strong><br>首先需要为子组件引用实例定义ref=”com1”属性，然后在Vue实例中通过this.$refs.com1即可获取子组件中的所有对象，即还能获取到子组件中的data和methods<br>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 父组件实例 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;!-- 子组件实例 --&gt;</span><br><span class="line">        &lt;com1 ref=<span class="string">"com1"</span>&gt;&lt;/com1&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> @click=<span class="string">"show"</span> value=<span class="string">"获取元素"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h2 ref=<span class="string">"h2"</span>&gt;这是父组件&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;template id=<span class="string">"tmp"</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;这是子组件&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">show</span></span>()&#123;</span><br><span class="line">                // console.log(this.<span class="variable">$refs</span>.h2.innerText);</span><br><span class="line">                // console.log(this.<span class="variable">$refs</span>.com1); //获取子组件中的所有实例对象</span><br><span class="line">                // console.log(this.<span class="variable">$refs</span>.com1.sonval); //获取子组件中定义的data值</span><br><span class="line">                console.log(this.<span class="variable">$refs</span>.com1.sonshow()); //调用子组件中定义的方法</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 子组件</span><br><span class="line">        components: &#123;</span><br><span class="line">            com1: &#123;</span><br><span class="line">                template: <span class="string">'#tmp'</span>,</span><br><span class="line">                <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">                    <span class="built_in">return</span> &#123;</span><br><span class="line">                        sonval: &#123; name: <span class="string">'Loonycoder'</span>, age: 24 &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    <span class="function"><span class="title">sonshow</span></span>() &#123;</span><br><span class="line">                        console.log(<span class="string">'子组件的方法'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue过滤器和Vue-resource</title>
    <link href="/2018/08/30/Vue2/"/>
    <url>/2018/08/30/Vue2/</url>
    
    <content type="html"><![CDATA[<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>之前我们学习了Vue的 <strong>vue基本指令</strong> 进阶学习，我们需要了解Vue的过滤器：Vue.js允许你自定义过滤器，可被用作一些常见元素的格式化。过滤器可以用在两个地方：mustache插值和v-bind表达式。<br>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 过滤器名称 | <span class="keyword">function</span> &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义：</strong><br>Vue提供了两种方式创建过滤器：</p><ul><li>1、全局过滤器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'过滤器名称'</span>, <span class="function"><span class="title">function</span></span>()&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li>2、私有过滤器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue()(&#123;</span><br><span class="line">    el: <span class="string">''</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">        过滤器名称: <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123; msg | myFilters(<span class="string">'时光'</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">Vue.filter(<span class="string">'myFilters'</span>, <span class="keyword">function</span>(data, pattern)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pattern == <span class="string">'时光'</span>)&#123;</span><br><span class="line">        var old = data.substring(0,4);</span><br><span class="line">        <span class="built_in">return</span> old + <span class="string">',时光路口。'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>解释：</strong><br>如上：Vue提供的全局过滤器，直接使用Vue调用，而不是定义在Vue实例中</p><ul><li>Vue.filter()中第一个参数是过滤器名称，第二个参数是function(){}</li><li>function(){}中还有两个参数，第一个参数是原始的值，第二个参数是你想给过滤器方法传递的值。</li></ul><h4 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123; msg | myFilters(<span class="string">'望月'</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">var vm2 = new Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app2'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">'loonycoder！'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line"></span><br><span class="line">        myFilters: <span class="keyword">function</span>(data, pattern) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pattern == <span class="string">'望月'</span>)&#123;</span><br><span class="line">                var old = data.substring(0,4);</span><br><span class="line">                <span class="built_in">return</span> old + <span class="string">',loonycoder'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>私有过滤器和全局过滤器用法基本相同，仅仅是作用于不同而已。</p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p>在我们搜索商品时，在一些网站中我们直接回车后立即进行搜索，而不是点击搜索按钮才会搜索，那么这个功能怎么实现呢？<br>那么我们就需要了解Vue中提供的<strong>按键修饰符</strong><br>用法： @keyup.按键别名 = “要调用的方法名”</p><p><strong>按键别名</strong></p><blockquote><p>.enter<br>.tab<br>.esc<br>.delete<br>…</p></blockquote><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> @keyup.enter=<span class="string">"open"</span>&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">open</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"弹出"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义按键修饰符</strong><br>如果Vue提供的按键修饰符不能满足你的需求，你也可以使用Vue提供的自定义按键修饰符来实现，因为每个键盘的按键都对应了一个键盘码值，比如F2对应的键盘码值是：113：<br>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> @keyup.f2=<span class="string">"open"</span>&gt;</span><br><span class="line"></span><br><span class="line">Vue.config.keyCodes.f2 = 113;   </span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">open</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"弹出"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取文本焦点"><a href="#获取文本焦点" class="headerlink" title="获取文本焦点"></a>获取文本焦点</h4><p>获取文本焦点使用了focus属性，那么我们需要定义一个v-focus指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">    <span class="built_in">bind</span>: <span class="keyword">function</span>(el) &#123;&#125;,</span><br><span class="line">    inserted: <span class="keyword">function</span>(el) &#123;&#125;,</span><br><span class="line">    updated: <span class="keyword">function</span>(el) &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如上，使用Vue.directive()实现定义全局指令，需要注意以下几点：</p><ul><li>1、在directive()方法中包含两个参数：<blockquote><p>参数1：指令的名称，注意，在定义的时候指令名称不需要加v-前缀，但是在使用的时候需要加v-前缀。<br>参数2：是一个对象，这个对象包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作。</p></blockquote></li></ul><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 使用的时候使用： v-focus</span><br></pre></td></tr></table></figure><ul><li>2、在directive()函数的第二个参数中（对象）中又包含了三个实例方法：<blockquote><p>bind: 当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次；但是需要知道元素绑定了这个指令，若涉及对DOM操作的，并不会立即执行，因为元素不会立即插入到DOM中。所以涉及对元素进行DOM相关操作的，不要定义到这个方法中。<br>inserted: 当元素插入到DOM的时候，会立即执行，并只触发一次。<br>updated: 当VNode更新的时候，会指定updated，可能触发多次。</p></blockquote></li></ul><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">    <span class="built_in">bind</span>: <span class="keyword">function</span>(el) &#123;</span><br><span class="line">        el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-focus /&gt;</span><br></pre></td></tr></table></figure><p>如上，其中bind函数的第一个参数永远是el，它表示绑定的那个元素，是一个原生的JS对象；这里我们调用了JS的focus方法</p><h5 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h5><p>指令定义函数提供了几个钩子函数（可选）：</p><blockquote><p>bind<br>inserted<br>update<br>componentUpdated: 所在组件的VNode及其孩子的VNode全部更新的时候调用<br>unbind: 只调用一次，指令与元素解除绑定时调用</p></blockquote><p><strong>钩子函数参数</strong><br>在上面使用directive()函数的时候我们已经介绍了一些常用的钩子函数，那么既然是函数，就可能需要进行传参，那么为了实现钩子函数传参，Vue提供了几个参数属性来实现对钩子函数参数的一些操作：</p><ul><li>el: 指令所绑定的元素，可以用来直接操作DOM。</li><li>binding: 一个对象，包含以下属性：<ul><li>name: 指令名，不包含v-前缀</li><li>value: 指令的绑定值，如v-focus=”1 + 1”，那么value=2。</li><li>expression: 绑定值的字符串形式，如v-focus=”1+1”，那么experssion的值是1+1。</li><li>…</li></ul></li><li>…</li></ul><p><strong>示例：</strong><br>实现在文本框中输入的数据颜色要为蓝色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-color=<span class="string">"'blue'"</span>&gt;</span><br><span class="line"></span><br><span class="line">// 自定义设置颜色的指令</span><br><span class="line">Vue.directive(<span class="string">'color'</span>, &#123;</span><br><span class="line">    <span class="built_in">bind</span>: <span class="keyword">function</span>(el, binding)&#123;</span><br><span class="line">        el.style.color = binding.value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中因为设计要获取值的操作，所以使用binding这个对象钩子函数参数来使用接收，那么：<br>1、这个el就表示当前这个input文本框对象<br>2、这个binding就表示v-color=”‘blue’”指令传递的参数blue（因为使用’’单引号即不是字符串）<br>3、binding-value就是获取到v-color指令绑定的参数值是：blue，通过el.style.color表示设置这个文本框样式中的颜色属性</p><h5 id="定义私有指令"><a href="#定义私有指令" class="headerlink" title="定义私有指令"></a>定义私有指令</h5><p>使用<strong>私有指令</strong>和<strong>全局指令</strong>的用法基本相同，我们参考上面讲过的<strong>私有过滤器</strong>和<strong>全局过滤器</strong>就能猜想到<strong>私有指令</strong>的用法：<br><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-fontsize=<span class="string">"'50px'"</span>&gt;私有指令&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">''</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    filters: &#123;&#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">        <span class="string">'fontsize'</span>: &#123;</span><br><span class="line">            <span class="built_in">bind</span>: <span class="keyword">function</span>(el, binding)&#123;</span><br><span class="line">                el.style.fontSize = binding.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>自定义指令的简写形式</strong><br>对于仅仅使用bind和update钩子函数的操作，可以进行下列的简写形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-fontsize=<span class="string">"'50px'"</span>&gt;私有指令&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">''</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    filters: &#123;&#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">        <span class="string">'fontsize'</span>: <span class="keyword">function</span>(el, binding)&#123;</span><br><span class="line">            el.style.fontSize = binding.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h4><p>实现将列表数据渲染到表格中，并实现添加功能案例（包含上面讲到的所有技术的<strong>实例</strong>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    table &#123;</span><br><span class="line">        min-height: 25px;</span><br><span class="line">        line-height: 25px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    table,</span><br><span class="line">    table tr th,</span><br><span class="line">    table tr td &#123;</span><br><span class="line">        border: 1px solid <span class="comment">#0094ff;</span></span><br><span class="line">        padding: 11px;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        id:</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"id"</span> v-focus v-color=<span class="string">"'blue'"</span>&gt; username:</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"username"</span> @keyup.enter=<span class="string">"add"</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"添加"</span> @click=<span class="string">"add"</span>&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;date&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;fun&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                &lt;tr v-for=<span class="string">"user in list"</span> :key=<span class="string">"user.id"</span>&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;user.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123;user.time | dataFormat(<span class="string">''</span>) &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;a href=<span class="string">"#"</span> @click=<span class="string">"del(user.id)"</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;p&gt;未使用过滤器：&#123;&#123; new Date() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;使用全局过滤器：&#123;&#123; new Date() | dataFormat(<span class="string">''</span>) &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">        使用私有过滤器：&#123;&#123; dt | dataFormat(<span class="string">''</span>)&#125;&#125;</span><br><span class="line">        &lt;p v-fontsize=<span class="string">"'50px'"</span>&gt;私有指令&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    // 自定义文本框获取焦点指令</span><br><span class="line">    // Vue.directive()定义全局指令，包含两个参数：</span><br><span class="line">    // 参数1：指令的名称，注意，在定义的时候指令的名称不需要加v-前缀，但是在使用的时候需要加v-focus</span><br><span class="line">    // 参数2：是一个对象，这个对象中包含一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作</span><br><span class="line">    Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">        // 注意，在下面的函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生JS对象</span><br><span class="line">        <span class="built_in">bind</span>: <span class="keyword">function</span>(el) &#123; //每当指令绑定到元素上的时候，会立即执行这个<span class="built_in">bind</span>函数，只执行一次</span><br><span class="line">            // 注意：在元素绑定了指令时，还没有插入到DOM中去，这时候调用focus方法是没有作用的，因为一个元素，只有插入到DOM之后，才能获取焦点</span><br><span class="line">            // el.focus()</span><br><span class="line">        &#125;,</span><br><span class="line">        inserted: <span class="keyword">function</span>(el) &#123; // inserted表示元素插入到DOM中的时候，会执行,触发一次</span><br><span class="line">            el.focus()</span><br><span class="line">        &#125;,</span><br><span class="line">        updated: <span class="keyword">function</span>(el) &#123; // 当VNode更新的是否，会执行updated，可触发多次</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 自定义设置颜色的指令</span><br><span class="line">    Vue.directive(<span class="string">'color'</span>, &#123;</span><br><span class="line">        <span class="built_in">bind</span>: <span class="keyword">function</span>(el, binding) &#123;</span><br><span class="line">            el.style.color = binding.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 自定义按键</span><br><span class="line">    Vue.config.keyCodes.f2 = 113;</span><br><span class="line"></span><br><span class="line">    // 演示私有过滤器</span><br><span class="line">    var vm2 = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app2'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            dt: new Date(),</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">open</span></span>() &#123;</span><br><span class="line">                alert(<span class="string">"弹出"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        filters: &#123;</span><br><span class="line">            dataFormat: <span class="keyword">function</span>(data, pattern) &#123;</span><br><span class="line">                // 获取当前日期</span><br><span class="line">                var dt = new Date(data);</span><br><span class="line"></span><br><span class="line">                // 获取年月日</span><br><span class="line">                var y = dt.getFullYear();</span><br><span class="line">                var m = dt.getMonth() + 1;</span><br><span class="line">                var d = dt.getDate();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pattern.toLowerCase() == <span class="string">'yyyy-mm-dd'</span>) &#123;</span><br><span class="line">                    <span class="built_in">return</span> `<span class="variable">$&#123;y&#125;</span>-<span class="variable">$&#123;m&#125;</span>-<span class="variable">$&#123;d&#125;</span>`;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    var hh = dt.getHours();</span><br><span class="line">                    var mm = dt.getMinutes();</span><br><span class="line">                    var ss = dt.getSeconds();</span><br><span class="line"></span><br><span class="line">                    // es6中提供的 yyyy-mm-dd hh:mm:ss 的简写形式</span><br><span class="line">                    <span class="built_in">return</span> `<span class="variable">$&#123;y&#125;</span>-<span class="variable">$&#123;m&#125;</span>-<span class="variable">$&#123;d&#125;</span> <span class="variable">$&#123;hh&#125;</span>:<span class="variable">$&#123;mm&#125;</span>:<span class="variable">$&#123;ss&#125;</span>` + <span class="string">'--&gt;私有'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 自定义私有指令（简写形式）</span><br><span class="line">        directives: &#123;</span><br><span class="line">            <span class="string">'fontsize'</span>: <span class="keyword">function</span>(el, binding) &#123;</span><br><span class="line">                el.style.fontSize = binding.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 全局过滤器</span><br><span class="line">    Vue.filter(<span class="string">'dataFormat'</span>, <span class="keyword">function</span>(data, pattern) &#123;</span><br><span class="line">        // 获取当前日期</span><br><span class="line">        var dt = new Date(data);</span><br><span class="line"></span><br><span class="line">        // 获取年月日</span><br><span class="line">        var y = dt.getFullYear();</span><br><span class="line">        var m = dt.getMonth() + 1;</span><br><span class="line">        var d = dt.getDate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pattern.toLowerCase() == <span class="string">'yyyy-mm-dd'</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> `<span class="variable">$&#123;y&#125;</span>-<span class="variable">$&#123;m&#125;</span>-<span class="variable">$&#123;d&#125;</span>`;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            var hh = dt.getHours();</span><br><span class="line">            var mm = dt.getMinutes();</span><br><span class="line">            var ss = dt.getSeconds();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> `<span class="variable">$&#123;y&#125;</span>-<span class="variable">$&#123;m&#125;</span>-<span class="variable">$&#123;d&#125;</span> <span class="variable">$&#123;hh&#125;</span>:<span class="variable">$&#123;mm&#125;</span>:<span class="variable">$&#123;ss&#125;</span>`;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建Vue实例</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            id: <span class="string">''</span>,</span><br><span class="line">            username: <span class="string">''</span>,</span><br><span class="line">            list: [</span><br><span class="line">                &#123; id: 1, username: <span class="string">'望月'</span>, time: new Date() &#125;,</span><br><span class="line">                &#123; id: 2, username: <span class="string">'loonycoder'</span>, time: new Date() &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">add</span></span>() &#123;</span><br><span class="line">                var user = &#123; id: this.id, username: this.username, time: new Date() &#125;;</span><br><span class="line">                this.list.push(user);</span><br><span class="line">            &#125;,</span><br><span class="line">            del(id) &#123;</span><br><span class="line">                // some()是操作数组的方法，作用是循环数组，并当<span class="built_in">return</span> <span class="literal">true</span>是就终止循环</span><br><span class="line">                // 其中的user理解为循环list元素的别名，i表示索引</span><br><span class="line">                this.list.some((user, i) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (user.id == id) &#123;</span><br><span class="line">                        this.list.splice(i, 1);</span><br><span class="line">                        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h4><ul><li>什么是声明周期：从Vue实例创建、运行、到销毁期间，伴随着发生的事件的过程成为生命周期。</li><li>生命周期钩子：就是声明周期事件的别名。</li><li>主要的声明周期函数分类</li></ul><blockquote><p>创建期间的声明周期函数：</p><ul><li>beforeCreate: 实例刚在内存中被创建，此时，还没有初始化好data和methods属性。</li><li>created: 实例已经在内存中创建好，此时data和methods已经创建好，但还没有编译模板。</li><li>beforeMount: 此时已经完成了模板的编译，但是还没有挂载到页面上。</li><li>mounted: 此时，已经将编译好的模板，挂载到了页面指定的容器中。<br>运行期间的声明周期函数:</li><li>beforeUpdate: 状态更新之前执行此函数，此时的data数据是最新的，但是此时还没有开始渲染DOM节点</li><li>updated: 实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据都是最新的，界面已经被重新渲染好了。<br>销毁期间的生命周期函数</li><li>beforeDestory: 实例销毁之前调用，在这一步，实例仍然可以使用。</li><li>destroyed: Vue实例销毁后调用，调用后，Vue实例指示的所有东西都会解除绑定，所有的事件监听器都会被移除，所所有的子实例也会被销毁。</li></ul></blockquote><h5 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h5><p>此函数执行的时候，data和methods中的数据还没有初始化。<br><img src="/images/vue7.png" srcset="/img/loading.gif" alt="beforeCreate"><br><img src="/images/vue8.png" srcset="/img/loading.gif" alt="beforeCreate"></p><h5 id="created"><a href="#created" class="headerlink" title="created"></a>created</h5><p>此函数中，data和methods都已经初始化好了，如果需要调用methods中的方法或操作data中的值最早就在created函数中操作。<br><img src="/images/vue9.png" srcset="/img/loading.gif" alt="created"><br><img src="/images/vue10.png" srcset="/img/loading.gif" alt="created"></p><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h5><p>此函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去。<br><img src="/images/vue11.png" srcset="/img/loading.gif" alt="beforeMount"><br><img src="/images/vue12.png" srcset="/img/loading.gif" alt="beforeMount"></p><h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><p>只要执行完了mounted，表示整个Vue实例已经初始化完毕了，此时组件已经进入了运行阶段。<br><img src="/images/vue13.png" srcset="/img/loading.gif" alt="mounted"></p><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><p><img src="/images/vue14.png" srcset="/img/loading.gif" alt="图示"></p><hr><h3 id="vue-resource实现请求提交"><a href="#vue-resource实现请求提交" class="headerlink" title="vue-resource实现请求提交"></a>vue-resource实现请求提交</h3><p>作为一个后端开发者，我们需要的数据都应该是从数据库中取出来的，目前JSP页面越来越不常用，而更常用HTML页面，那么就体现出来类似Vue这种框架的好处了。<br>下面我们就了解一下怎样使用Vue实现发送AJAX的请求：</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>首先使用Vue实现发送AJAX请求，我们需要导入一个包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue-resource.js</span><br></pre></td></tr></table></figure><p><strong>Methods</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$http</span>.get(<span class="string">'url'</span>, [options]).<span class="keyword">then</span>(successCallback, errorCallback);</span><br><span class="line"></span><br><span class="line">this.<span class="variable">$http</span>.post(<span class="string">'url'</span>, [body], [options]).<span class="keyword">then</span>(successCallback, errorCallback);</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>this表示的是当前Vue实例对象，而vue-resource.js提供了$http属性用来调用其内置的请求方法，并且vue-resource.js是基于vue.js的。<br>options是指可选的请求参数，就是你发送请求想要传递的参数。</li><li>then可以实现发送完请求后，通过其获取请求成功响应的数据</li><li>then中包含两个参数successCallback和errorCallback，这两个都是对象，我们可以通过其进行对相应数据的操作。</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">"getInfo"</span>&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">getInfo</span></span>()&#123;</span><br><span class="line">            this.<span class="variable">$http</span>.get(<span class="string">'url'</span>).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">                console.log(result.body);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>解释：</strong><br>当我们请求成功后，可以通过then来获取请求成功响应的数据，而可以通过.data或.body来获取响应data，而我们通常使用result.body来获取具体响应的参数。注意其中的result =&gt; {}是ES6中的写法。</p><h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><p><strong>注意：</strong> post请求常用于类似提交表单的功能，而对于提交表单，存在一个表单提交格式，默认是：application/x-wwww-form-urlencoded ；而通过Vue发起的post请求，默认没有表单格式，所以，有的服务器就处理不了。<br>那么我们可以通过post方法的第三个参数：{ emulateJSON: true }来设置提交内容类型为普通表单数据格式。</p><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$http</span>.post(<span class="string">'url'</span>, &#123;&#125;, &#123; emulateJSON: <span class="literal">true</span> &#125;).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">    console.log(result.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其他请求方法与上面的雷同，具体方法请参考官方文档。</p><h4 id="请求接口根域名配置"><a href="#请求接口根域名配置" class="headerlink" title="请求接口根域名配置"></a>请求接口根域名配置</h4><p>由于我们个人的项目可能是部署到本地的Tomcat服务器上的，可能不会涉及请求接口的域名配置，那么我们先看一个案例：<br>发送post请求到服务器接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">        this.<span class="variable">$http</span>.post(<span class="string">'http://tycoding.cn/api/add'</span>, &#123;&#125;, &#123;emulateJSON: <span class="literal">true</span>&#125;).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，当我们发送请求的时候，URL路径需要写上域名地址<a href="http://www.loonycoder.com" target="_blank" rel="noopener">http://www.loonycoder.com</a>，然后才是请求路径/api/add，那么我们每次发送ajax请求都会需要写这个域名地址，就会显得比较麻烦，所以Vue-resource给我们提供了一种设置默认请求<strong>根域名</strong>的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.options.root = <span class="string">'http://www.loonycoder.com'</span>;</span><br></pre></td></tr></table></figure><p>如上，就是一个全局的请求根域名配置。</p><p><strong>注意</strong><br>仅了解了上面的配置可能请求还会404，那么我们需要知道：</p><blockquote><p>如果我们通过了全局配置请求接口的根域名，那么每次发送HTTP请求时，请求的URL路径应该以相对域名开头，即前面不能带/： * 如果this.$http.post(‘/xxx’)请求URL带了/，那么Vue就不会启用上面的全局请求根域名配置，就会404.</p></blockquote><ul><li>如果前面不带/即：this.$http.post(‘xxx’)，那么就会启用上面的全局请求根域名配置进行URL的拼接。</li></ul><h5 id="全局配置表单提交格式选项"><a href="#全局配置表单提交格式选项" class="headerlink" title="全局配置表单提交格式选项"></a>全局配置表单提交格式选项</h5><p>上面讲到了如果使用post请求提交表单，那么你应该指定{emulateJSON: true}参数，那么每次进行post请求都指定又会显得很麻烦，那么vue-resource也给我们提供了一个全局配置的方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.options.emulateJSON = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>这样我们就不需要再post请求中再配置第三个参数了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">        this.<span class="variable">$http</span>.post(<span class="string">'http://tycoding.cn/api/add'</span>, &#123;&#125;).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>请求后台并即时渲染表格数据的案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html段 --&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"username"</span>&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"添加"</span> @click=<span class="string">"add"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=<span class="string">"user in list"</span> :key=<span class="string">"user.id"</span>&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;user.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;a href=<span class="string">"#"</span> @click.pervent=<span class="string">"del(user.id)"</span>&gt;删除&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- javascript段 --&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">// 设置全局根域名</span><br><span class="line">Vue.http.options.root = <span class="string">'http://tycoding.cn/'</span>;</span><br><span class="line"></span><br><span class="line">//设置全局表单提交格式</span><br><span class="line">Vue.http.options.emulateJSON = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">// 实例化Vue</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: <span class="string">''</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        username: <span class="string">''</span>,</span><br><span class="line">        list: []</span><br><span class="line">    &#125;,</span><br><span class="line">    created: &#123;</span><br><span class="line">        // 因为进入列表页面就需要在列表中显示出数据，那么就需要实现加载页面时自动加载findAll方法</span><br><span class="line">        // 而之前我们已经知道了，Vue的声明周期中，最早可以操作methods和data中的数据的阶段是：created生命周期函数阶段。</span><br><span class="line">        // 那么在这里调用findAll方法即可</span><br><span class="line">        this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 查询所有列表数据</span><br><span class="line">        <span class="function"><span class="title">findAll</span></span>()&#123;</span><br><span class="line">            this.<span class="variable">$http</span>.get(<span class="string">'api/findAll'</span>).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">                this.list = result.body;</span><br><span class="line">            &#125;),</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 添加功能</span><br><span class="line">        <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">            this.<span class="variable">$http</span>.post(<span class="string">'api/add'</span>, &#123;username: this.username&#125;).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(result.body.status == 0)&#123;</span><br><span class="line">                    // 如果状态码为0就表示请求成功，这个状态码的值根据实际定</span><br><span class="line">                    // 请求成功，即添加了一条新的数据，那么需要重新刷新列表（不然新数据不能及时的更新到页面上）</span><br><span class="line">                    this.findAll()</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    alert(<span class="string">'添加失败'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //删除功能</span><br><span class="line">        del(id)&#123;</span><br><span class="line">            this.<span class="variable">$http</span>.get(<span class="string">'api/del'</span> + id).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(result.body.status == 0)&#123;</span><br><span class="line">                    //请求成功</span><br><span class="line">                    //刷新列表</span><br><span class="line">                    this.findAll();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    alert(<span class="string">'删除失败'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如上我们已经完成了常见的几个功能，后面我们将会介绍基于SpringMVC框架，实现与Vue整合并重写增删改查功能。</p><p><strong>注意：</strong></p><ul><li>1、首先我们需要配置根域名，且具体的AJAX请求URL不能添加’/‘；如果是基于本地的Tomcat服务器的项目，可能不需要配置根域名，具体视情况而定</li><li>2、实现查询所有列表数据功能，思路是：1、发送AJAX请求数据；2、将响应的数据赋值给data中的list集合this.list = result.body。注意响应数据是存放到body中的，具体请F12查看浏览器请求头信息和响应头信息。</li><li>3、上面获取了数据库中的列表数据，我们需要渲染到页面上，那么点击进入列表页面，列表页面中应该立即显示数据库中的所有数据，即findAll方法应该在初始化页面的同时自动去调用，并将数据赋值给list列表。而我们之前讲过操作methods和data中参数的最早时机是created声明周期函数阶段，那么我们直接在created函数中调用findAll方法即可实现自动加载。</li><li>4、添加功能的思路：<ul><li>1、在data中先声明需要添加的参数；</li><li>2、在表单中用v-model绑定需要添加的参数；</li><li>3、点击添加功能按钮，绑定@click事件，在methods中写对应的方法；</li><li>4、发送AJAX请求，并在URL中拼接需要添加的数据（通过this.username）获取绑定的参数；</li><li>5、如果是post请求，还需要设置表单提交格式{emulateJSON: true}，而我们使用了全局配置就不需要再在post参数中指定了；</li><li>6、如果添加成功，就调用findAll方法重新刷新列表</li></ul></li><li>5、删除功能需要在绑定@click事件的时候将id传入。并且我们需要使用@click&middot;pervent来阻止&lt;a&gt;标签的默认跳转。</li><li>6、上面仅是提供演示，具体操作由实际情况而定。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Vue</title>
    <link href="/2018/08/24/Vue1/"/>
    <url>/2018/08/24/Vue1/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3><ul><li>Vue.js是目前很火的前端框架；与Angualr.js和React.js并称为前端三大主流框架。</li><li>Vue.js是一套构建用户界面的框架，只关注视图层（MVC中的V层）；它易于上手，便于和第三方库或既有项目整合，</li><li>在Vue中，一个核心的概念就是减少对DOM元素的操作，让程序员更多的去关注业务逻辑。</li></ul><hr><h3 id="后端的MVC和前端的MVVM之间的区别"><a href="#后端的MVC和前端的MVVM之间的区别" class="headerlink" title="后端的MVC和前端的MVVM之间的区别"></a>后端的MVC和前端的MVVM之间的区别</h3><ul><li><p>MVC是后端的分层开发概念</p></li><li><p>MVVM是前端视图层的概念，主要关注于：视图层分离；也就是说：MVV将前端分为三个部分Model、View、VM（ViewModel）</p></li><li><p>Model： 页面需要展示的数据</p></li><li><p>View: 视图、HTML</p></li><li><p>VM: 数据（Model）和视图（View）之间的调度者</p></li></ul><p><strong>图解</strong><br><img src="/images/vue1.png" srcset="/img/loading.gif" alt="vue图解"></p><hr><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 插值表达式 --&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123;     // data中存放的是el中需要的数据</span><br><span class="line">            msg: <span class="string">'Hello Vue!'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><p>1、首先需要引入Vue.js<br>2、声明Vue实例的控制区域，我们可以放在指定div中，或者body体；控制区域下使用的Vue语法就会被Vue识别到<br>3、创建Vue实例，这个实例其实就是MVVM中的vm调度者<br>4、el: 表示当时Vue实例的控制区域；data: 存放当前Vue实例中所需的Model（数据）。其中的msg就是一个Vue的元素。<br>5、在指定Vue实例区域下，展示我们已经声明的元素msg，使用：即可展示出来（其中msg是在Vue中声明的元素，如果未声明会报错）</p><hr><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>在入门案例中我们初步了解到，在View层我们可以通过插值表达式的方式展示Vue绑定的数据；但是存在一个问题，当网络很慢的情况下，即在vue.js还没有加载完毕时，视图层不会将识别为Vue中的插值表达式，而是作为字符串显示到页面上。<br>为了解决这个问题，Vue.js提供了v-cloak指令，可以解决插值表达式闪烁的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-cloak&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>扩展</strong></p><p>解决插值表达式闪烁问题，除了v-cloak指令，Vue还提供了v-text指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-text=<span class="string">"msg"</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>v-cloak与v-text的区别</strong><br>v-text默认会覆盖掉元素中原有的内容<br>v-cloak不会覆盖掉原有的内容<br><img src="/images/vue2.png" srcset="/img/loading.gif" alt="vue2"></p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p><strong>在上面，我们了解了v-text输出Vue元素，但是如果我们需要显示的数据是一段HTML代码，v-text和都将无能为力，<br>为此，Vue提供了专门渲染HTML数据的指令：v-html</strong></p><p><img src="/images/vue3.png" srcset="/img/loading.gif" alt="vue3"></p><p>上面我们学习的指令都是Vue内置的指令，那么在Vue内置的指令中显示Vue绑定的变量，这当然没毛病；但是如果直接在HTML属性中使用Vue绑定的指令（不是用）这样可以吗？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"msg"</span>/&gt;</span><br></pre></td></tr></table></figure><p>回答当然是不行的，因为在HTML属性中直接使用Vue绑定的变量，HTML并不能将其识别为其引用的是Vue中的元素，而是作为一个字符串输出。<br>为了解决上述问题，Vue提供了v-bind:指令来绑定一些HTML属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> v-bind:value=<span class="string">"msg"</span>&gt;</span><br></pre></td></tr></table></figure><p>如上，被v-bind:绑定的属性，其元素不再是字符串，而是被识别为Vue的绑定的变量（同样这个变量必须声明了）。另外v-bind:还有一个简易写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"msg"</span> /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> v-bind:value=<span class="string">"msg"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> :value=<span class="string">"msg"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            msg: <span class="string">'戳我'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图：<br><img src="/images/vue4.png" srcset="/img/loading.gif" alt="vue4"></p><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>Vue提供了事件绑定机制的指令：v-on:；用其我们可以用来绑定一些常见的触发事件：click、mouseover …</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> :value=<span class="string">"msg"</span> v-on:click=<span class="string">"show"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> :value=<span class="string">"msg"</span> v-on:mouseover=<span class="string">"show"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            msg: <span class="string">'戳我'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                alert(<span class="string">"hello"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其中methods是Vue内置的对象，用于存放一些自定义的方法函数</p><p><strong>拓展</strong></p><p>使用js内置的函数setInterval(定时器)，实现跑马灯效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"开始"</span> @click=<span class="string">"action"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"停止"</span> @click=<span class="string">"stop"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            msg: <span class="string">'嘻嘻，哈哈'</span>,</span><br><span class="line">            intervalId: null</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">action</span></span>()&#123;</span><br><span class="line">                <span class="keyword">if</span>(this.intervalId != null) <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">                // 定时器</span><br><span class="line">                this.intervalId = setInterval(() =&gt; &#123;</span><br><span class="line">                    // 截取首字符</span><br><span class="line">                    var start = this.msg.substring(0, 1);</span><br><span class="line">                    // 截取第一个字符后的所有字符</span><br><span class="line">                    var end = this.msg.substring(1);</span><br><span class="line">                    // 将后面的字符拼接到前面，实现循环的效果</span><br><span class="line">                    this.msg = end + start;</span><br><span class="line">                &#125;,400)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">                // 停止定时器</span><br><span class="line">                clearInterval(this.intervalId)</span><br><span class="line">                // 每次清除定时器后需要将intervalId重新设置为null</span><br><span class="line">                this.intervalId = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><p>1、v-on:也有简写形式：@，用法如上。<br>2、在视图层取VM中的数据我们可以使用或一些内置指令；而在VM实例内部获取定义的其他变量或方法等，使用：this.数据属性名（其中的this表示当前VM实例对象）。<br>3、methodName:function(){}在ES6中有一个简便的写法：methodName(){}。 4、setInterval()和clearInterval()是js中内置的函数，用法如上。<br>5、正常我们调用函数会写：name(function(){})，而ES6也提供了一个方式：methodName(() =&gt; {})，这种用法的好处就解决了this指向问题，因为如果元素定义在了函数内部，那么其中的this就表示当前函数的对象，如果我们需要使用外部的对象，除了在外部全局定义一个对象，一个简单的方式就是使用ES6提供的=&gt;。</p><p>效果如图：<br><img src="/images/vue5.png" srcset="/img/loading.gif" alt="vue5"></p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><blockquote><p>.stop 阻止冒泡<br>.prevent 阻止默认事件<br>.capture 添加时间侦听器时使用时间捕获模式<br>.self 只当事件在该元素本身（比如不是子元素）触发时触发回调<br>.once 事件只触发一次</p></blockquote><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div @click=<span class="string">"divClick"</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"戳我"</span> @click.stop=<span class="string">"btnClick"</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"戳我"</span> @click.prevent=<span class="string">"btnClick"</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            msg: <span class="string">'嘻嘻，哈哈'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">divClick</span></span>() &#123;</span><br><span class="line">                console.log(<span class="string">"这是div的点击事件"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">btnClick</span></span>() &#123;</span><br><span class="line">                console.log(<span class="string">"这是btn的点击事件"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li>唯一的双向绑定指令：v-model</li><li>单向绑定指令：v-bing</li></ul><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"msg"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            msg: <span class="string">'hello!'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="Vue中的样式"><a href="#Vue中的样式" class="headerlink" title="Vue中的样式"></a>Vue中的样式</h3><h4 id="外联样式"><a href="#外联样式" class="headerlink" title="外联样式"></a>外联样式</h4><ul><li><p>数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 :class=<span class="string">"['italic','color']"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>其中的italic、color是自定义的类名，需在外部定义CSS样式</p></li><li><p>数组中嵌套对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 :class=<span class="string">"['italic',&#123;'color': flag&#125;]"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>其中的flag是Vue绑定的变量，在data进行声明</p></li><li><p>直接使用对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 :class=<span class="string">"&#123;italic:true, color:flag&#125;"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li></ul><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .italic &#123;</span><br><span class="line">        font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .color &#123;</span><br><span class="line">        color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h2 :class=<span class="string">"['italic','color']"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :class=<span class="string">"['italic', &#123;'color':flag&#125;]"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :class=<span class="string">"&#123;italic:false, color:flag&#125;"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            flag: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><ul><li><p>将样式对象定义到data中，并在:style中引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 :style=<span class="string">"styleObj"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    styleObj: &#123; <span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'font-weight'</span>: <span class="string">'200px'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在:style中通过数组，引用多个data上的样式对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 :style=<span class="string">"[styleObj, styleObj2]"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    styleObj: &#123; <span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'font-weight'</span>: <span class="string">'200px'</span>&#125;,</span><br><span class="line">    styleObj2: &#123; <span class="string">'font-style'</span>: <span class="string">'italic'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">"styleObj"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">"[styleObj, styleObj2]"</span>&gt;LoonyCoder&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            styleObj: &#123; <span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'font-weight'</span>: <span class="string">'200px'</span> &#125;,</span><br><span class="line">            styleObj2: &#123; <span class="string">'font-style'</span>: <span class="string">'italic'</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>Vue提供了遍历集合、数组的指令：v-for；用法: v-for=”别名 in 集合名”</p><h4 id="迭代数组"><a href="#迭代数组" class="headerlink" title="迭代数组"></a>迭代数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=<span class="string">"item, i in list"</span>&gt;索引：&#123;&#123;i&#125;&#125; --- 值：&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    list: [1,2,3,4]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其中的i是迭代得到的别名，可写可不写，但是必须是在迭代元素别名的后面定义</strong></p><h4 id="迭代对象数组"><a href="#迭代对象数组" class="headerlink" title="迭代对象数组"></a>迭代对象数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=<span class="string">"item in list2"</span>&gt;id: &#123;&#123;item.id&#125;&#125; --- name: &#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    list2: [</span><br><span class="line">            &#123; id:1, name: <span class="string">'嘻嘻'</span> &#125;,</span><br><span class="line">            &#123; id:2, name: <span class="string">'哈哈'</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>迭代对象数组，通过 的方式，这个属性名就是对象数组中定义的元素属性名</strong></p><h4 id="迭代对象"><a href="#迭代对象" class="headerlink" title="迭代对象"></a>迭代对象</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=<span class="string">"(val, key) in user"</span>&gt;键: &#123;&#123;key&#125;&#125; --- 值: &#123;&#123;val&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">            id: 1,</span><br><span class="line">            name: <span class="string">'LoonyCoder'</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>迭代对象，迭代得到的是对象的value值和key值，注意得到的第一个是value值，第二个是key值，与我们定义的对象属性顺序是刚好相反的。</strong></p><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p v-for=<span class="string">"item, i in list"</span>&gt;索引：&#123;&#123;i&#125;&#125; --- 值：&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p v-for=<span class="string">"item in list2"</span>&gt;id: &#123;&#123;item.id&#125;&#125; --- name: &#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p v-for=<span class="string">"(val, key) in user"</span>&gt;键: &#123;&#123;key&#125;&#125; --- 值: &#123;&#123;val&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            list: [1,2,3,4], </span><br><span class="line">            list2: [</span><br><span class="line">                &#123; id:1, name: <span class="string">'嘻嘻'</span> &#125;,</span><br><span class="line">                &#123; id:2, name: <span class="string">'哈哈'</span> &#125;</span><br><span class="line">            ],</span><br><span class="line">            user: &#123;</span><br><span class="line">                id: 1,</span><br><span class="line">                name: <span class="string">'LoonyCoder'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在vue2.0+版本里，当使用v-for渲染数据，必须制定对应的key值（这里的key是一个属性，不是前面迭代的key值）。</p><p><strong>用法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=<span class="string">"item in user"</span> :key=<span class="string">"item.id"</span>&gt;</span><br></pre></td></tr></table></figure><p>其中:key就说明了key属性必须是通过v-bind绑定的元素，而:key=””中指定的值必须是string/number类型的值，比如此处使用的是item.id中ID是number值，并且是唯一的。<br><strong>目的：</strong><br>避免迭代元素时，为循环元素绑定的是列表中的第几个元素（指定位置），而不是指定的某个元素（指定身份）。</p><h4 id="v-show和v-if"><a href="#v-show和v-if" class="headerlink" title="v-show和v-if"></a>v-show和v-if</h4><p>Vue提供了两个指令来实现元素显示状态的切换：v-if v-show<br><strong>区别</strong></p><ul><li>v-if的特点：每次都会重新删除和创建元素，具有较高的切换性能消耗（因为每次执行都要进行删除和创建元素）。</li><li>v-show的特点：每次不会重建进行DOM的删除和创建操作，只是切换了元素的display:none样式，具有较高的初识渲染消耗（即每次都只是将元素隐藏了，并没有真正的删除掉）。</li></ul><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue实例的控制区域 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> @click=<span class="string">"flag=!flag"</span> value=<span class="string">"toggle"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3 v-if=<span class="string">"flag"</span>&gt;这是v-if控制的元素&lt;/h3&gt;</span><br><span class="line">    &lt;h3 v-show=<span class="string">"flag"</span>&gt;这是v-show控制的元素&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"../lib/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建Vue实例，这个new出来的对象就是MVVM中的vm调度者</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>, // element的简写，表示我们当前new的这个Vue实例的区域</span><br><span class="line">        data: &#123; // data中存放的是el中需要的数据</span><br><span class="line">            flag: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/images/vue6.png" srcset="/img/loading.gif" alt="vue6"></p>]]></content>
    
    
    <categories>
      
      <category>Web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习之各种排序算法</title>
    <link href="/2018/08/16/Algorithm/"/>
    <url>/2018/08/16/Algorithm/</url>
    
    <content type="html"><![CDATA[<h3 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>算法有时间和空间的<strong>复杂度</strong>，这是可以衡量的。<strong>时间复杂度</strong>–运行它花了多少时间；<strong>空间复杂度</strong>–运行它需要多少内存。<br><strong>常数时间</strong>操作：一个操作如果和数据量没有关系，每次都是固定时间内完成的操作，叫做<strong>常数操作</strong>。常数时间的操作记为<strong>O(1)</strong></p><h5 id="大O表示"><a href="#大O表示" class="headerlink" title="大O表示"></a>大O表示</h5><p>比如我们称算法 B 有与n²成比例的时间需求，我们说B是 <strong>O(n²)</strong>的(读作big O(n²))<br>具体而言，在<strong>常数操作</strong>数量的表达式中，<strong>只要高阶项，不要低阶项，也不要高阶项的系数，剩下的部分若记为f(N)</strong>，那么在<strong>最差情况下，算法流程的指标（时间复杂度</strong>）为 O(f(N))。**<br>比如符合 aN² + bN + C 操作的事件复杂度就是 <strong>O(n²)</strong></p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p><strong>遍历算法：</strong><br>比如有 1,2,3,4,5 这几个数，我们需要遍历得到这些数，那么每次遍历的时间复杂度称为<strong>O(N)</strong>的话，那么一共有M个数，就称遍历算法的事件复杂度是: O(M * N)。（区分 O(1) 表示常数操作，这里的 O(N) 表示时间复杂度）。<br><strong>二分查找算法</strong><br>比如有 1,2,3,4,5 二分查找算法，就是实现将已有数列分为Right Left 两列（不一定相等），然后依次从Right、Left中查找，如果找到了就不用找另一侧（比如在Right中查找，再将Right分为right left两列进行查找）。这种算法比遍历算法要简单。<br>那么因为每次查找都是先将数列分为两列，再进行查找，那么一个数列一共可以分 logN 次，所以二分查找算法的事件复杂度就是 log(M * logN)</p><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><p>当解决一个问题的时候，将它划分为更小的问题且用相同的方法进行解决。这种特殊的处理称为<strong>递归</strong>。递归的关键是：最终你能到达一个较小的问题，且这个小问题是很容易解决的。<br>故：<strong>调用自己的方法称为递归方法</strong>。调用是递归调用。<br>设计一个递归方案，应该考虑哪些问题？<br>方案的那个部分的工作能让你直接完成？<br>哪些较小问题已经有了解决方案。<br>该递归过程何时结束？<br>若递归方法没有设计<strong>终止情形</strong>，将<strong>永远执行</strong>，这种情形称为<strong>无穷递归</strong>。<br>总结来说：<strong>递归函数</strong>就是自己调用自己的函数。系统帮你压栈，将当前函数的所有信息储存到栈内存中，当调用<strong>子过程</strong>时，只储存每次子过程调用具体的变量值。若递归结束，调用栈顶的函数信息并还原函数的原始状态。</p><h5 id="跟踪递归方法"><a href="#跟踪递归方法" class="headerlink" title="跟踪递归方法"></a>跟踪递归方法</h5><p>通常而言，跟中一个递归算法过程是比较复杂的，如果你按照一定的准则设计递归方法，一般是无需跟踪它们。这里我一个<strong>倒计时</strong>递归举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Code_Recursive &#123;</span><br><span class="line"></span><br><span class="line">    public static void countDown(int <span class="built_in">integer</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">integer</span> &gt;= 1) &#123;</span><br><span class="line">            System.out.println(<span class="built_in">integer</span>);</span><br><span class="line">            countDown(<span class="built_in">integer</span> - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        countDown(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将打印出来3、2、1 倒计时数字，使用的正是递归的方法。它符合了以下设计准则：</p><ul><li>这个倒计时打印（显示）的工作是可以直接完成的。</li><li>该递归方法最终是化小为打印一个数字，这是可以直接 sys 解决的。</li><li>该递归方法执行到integer参数为1时就结束递归。</li></ul><p><strong>实现过程</strong><br><img src="/images/math1.png" srcset="/img/loading.gif" alt="math"><br>可以看到，图中是countDown(3)的递归调用过程，其中出现了多个countDown方法的副本，但其实我们就写了一个递归方法。<br>也就是说对方法的每次调用（递归或非递归）Java都记录方法执行的当前状态，包含它的参数和局部变量的值，以及当前指令的位置。每个记录称为一个活动记录，它提供运行期间方法状态的快照。记录放入程序栈中。栈按照时间先后组织这些记录，所以当前正在执行的方法的记录位于栈顶。Java可以暂停递归方法的运行，并用新的变量值再次调用它。</p><h5 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p><strong>master公式</strong><br><img src="/images/math2.png" srcset="/img/loading.gif" alt="math"></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>时间复杂度：O(N² )<br>在一个一维数组中，冒泡排序就是实现数组中相邻两个索引位置值的大小比较，若条件符合就不动，如果条件不符合就将两个索引位置的值进行交换。且外层循环决定了外层一共需要循环多少次，且决定了外层循环一次内层需要循环多少次，外层一次循环才能排序好一个值（最大最小），下次循环就忽略掉这个极值从剩余的数据中得出极值，然后依次这样。<br><img src="/images/math3.png" srcset="/img/loading.gif" alt="math"><br>实现代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Code_00_BubbleSort &#123;</span><br><span class="line"></span><br><span class="line">    public static void bubbleSort(int[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt; 2 || arr == null) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (int i = arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = 0; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                    swap(arr, j, j + 1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;3, 2, 0, 7, 4&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中我们对数组arr[3,2,0,7,4]进行从大到小的排序，在bubbleSort方法中，外层循环arr.length-1次，内层每次循环arr.length-1次。</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>时间复杂度：O(N²)<br>选择排序，首先我们需要一个minIndex，记录最小值，然后将当前索引位置的值与后面索引位置的值依次比较,如果符合条件，就将此索引赋值给minIndex，再进行交换值（因为此时极限值minIndex改变了）。<br>可以看到这种方式比上面的冒泡排序简单很多。<br><img src="/images/math4.png" srcset="/img/loading.gif" alt="math"><br>实现代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Code_01_SelectionSort &#123;</span><br><span class="line"></span><br><span class="line">    public static void selectionSort(int[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt; 2 || arr == null) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">            int minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (int j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">                minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;3, 2, 0, 7, 4&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        selectionSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归选择排序"><a href="#递归选择排序" class="headerlink" title="递归选择排序"></a>递归选择排序</h4><p>时间复杂度：O(N²)<br>根据前面讲到的递归算法的设计，我们首先要明白：</p><ul><li>递归方案的哪些工作是可以直接完成的？<ul><li>1.动态替换minIndex的值；</li><li>2.交换minIndex和当前索引；</li></ul></li><li>递归化到最小问题是什么？<ul><li>得到一个索引比minIndex索引对应的值要小，替换minIndex，并进行swap操作。</li></ul></li><li>递归何时结束？<ul><li>当循环到索引值和arr.length相等就停止递归。</li></ul></li></ul><p>带着上面的思考问题，我们可以进行如下设计<br><img src="/images/math5.png" srcset="/img/loading.gif" alt="math"><br>想要通过递归实现选择排序，要知道<strong>递归</strong>是重复调用自己的过程。那么：</p><ul><li>首先你把sort函数理解为一个外层圈子，而其中的for()循环是内层的圈子，内层的圈子循环完毕一次（n~arr.length），就得到一个最小值。</li><li>需要规定<strong>minIndex</strong>记录最小值的索引位置，这个值和外层的圈子有关，如果排序好的最小值不用管，直接从外层圈子范围开始循环内层圈子，所以定义for(int i=n)。</li><li>如果满足内层圈子循环中arr[minIndex] &gt; arr[i]说明此索引值比当前的minIndex还要小，那么就替换minIndex。</li><li>内层圈子每<strong>完全循环完毕</strong>（n~arr.length），就swap替换对应索引位置的值。</li><li>最后，因sort(arr, n + 1)，当n+1等于arr.length，就停止递归。</li></ul><p>实现代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Code_01_Recursive_SelectionSort &#123;</span><br><span class="line"></span><br><span class="line">    public static void sort(int[] arr, int n) &#123;</span><br><span class="line">        int minIndex = n;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt; 2 || arr == null || n &gt;= arr.length) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = n; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[minIndex] &gt; arr[i]) &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, n, minIndex);</span><br><span class="line">        sort(arr, n + 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;3, 2, 0, 7, 4&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        sort(arr, 0);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>时间复杂度：O(N²)<br>从无需集合的1位置开始，比较其01位置的值，如比较01、20、30、40……相当于整体是根据一个有序集合（索引），将无序集合（要排序的集合）往有序集合的区间中插入。<br><img src="/images/math6.png" srcset="/img/loading.gif" alt="math"></p><p>实现代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Code_02_InsertionSort &#123;</span><br><span class="line"></span><br><span class="line">    public static void insertionSort(int[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt; 2 || arr == null) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; arr[j + 1]; j--) &#123;</span><br><span class="line">                System.out.println(<span class="string">"arr["</span> + j + <span class="string">"], arr["</span> + (j + 1) + <span class="string">"]"</span>);</span><br><span class="line">                swap(arr, j, j + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;3, 2, 0, 7, 4&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        insertionSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归插入排序"><a href="#递归插入排序" class="headerlink" title="递归插入排序"></a>递归插入排序</h4><p>实现代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Code_02_Recursive_InsertionSort &#123;</span><br><span class="line"></span><br><span class="line">    public static void sort(int[] arr, int n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt; 2 || arr == null || n &gt;= arr.length) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = n; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; arr[j + 1]; j--) &#123;</span><br><span class="line">                swap(arr, j, j + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr, n + 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;3, 2, 0, 7, 4&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        sort(arr, 1);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构 - 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础（二）</title>
    <link href="/2018/08/08/JavaBasic2/"/>
    <url>/2018/08/08/JavaBasic2/</url>
    
    <content type="html"><![CDATA[<p>###对象与类</p><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>比如Student s = new Student()实例化一个对象，其实经历了如下几个过程：<br>将Student.class加载到内存中<br>在栈内存中给s开辟内存空间。<br>在堆内存给Student类申请一个内存空间。<br>给成员变量进行默认初始化，0 null false…<br>自定义给成员变量初始化赋值<br>初始化完毕，把堆内存地址赋值给栈内存的s变量</p><h4 id="Main方法剖析"><a href="#Main方法剖析" class="headerlink" title="Main方法剖析"></a>Main方法剖析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>public: 公共的，访问权限最大，因为main方法是被JVM调用的。</li><li>static：静态的，不需要创建对象，通过类名就能调用，方便JVM调用。</li><li>void: 无返回值，因为main方法是被JVM调用的，所以给JVM返回数据没有意义。</li><li>main: 常见的方法入口，很多语言的入口方法都是main方法。</li><li>String[] args: 字符串数组，是作为命令行参数调用的。</li></ul><h5 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h5><p><strong>static关键字特点：（可以修饰成员变量，也可修饰成员方法）</strong></p><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>被类中的所有对象共享</li><li>可直接通过类名调用</li></ul><p><strong>拓展</strong></p><p>静态方法中没有this关键字，因为this代表当前方法对象，但static优于对象存在，所以在对象还未创建完毕static修饰的方法就被调用，此时this代表的对象还未创建。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>String底层定义为public final class String，说明String是常量，一旦被创建就不能修改。可以查看如Integer LongString这些类的源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final class Integer &#123;&#125;</span><br><span class="line">public final class Long &#123;&#125;</span><br><span class="line">public final class String &#123;&#125;</span><br></pre></td></tr></table></figure><p>这些<strong>基本类型</strong>，在初始化值、赋值时都是先从<strong>常量池</strong>中取数据，如果常量池中没有该数据，就new对象初始化为新数据。<br>比如常见的一个面试题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"ab"</span>;</span><br><span class="line">s = <span class="string">"abc"</span>;</span><br><span class="line">String ss = <span class="string">"ab"</span>;</span><br><span class="line">ss = new String(<span class="string">"ab"</span>);</span><br></pre></td></tr></table></figure><p>这个s和ss各自创建了几个对象？答案：s创建两个对象；ss创建一个对象。因为s的常量池中有值ab，而重新赋值s = “abc”这个abc在s的常量池中不存在，所以new String()创建了一个新对象。ss同理分析。可以通过如下方式验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String ss = <span class="string">"ab"</span>;</span><br><span class="line">System.out.println(ss.hashCode());</span><br><span class="line">ss = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(ss.hashCode());</span><br></pre></td></tr></table></figure><p><a href="/images/String1.png">stack</a></p><h5 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h5><p>String是不可变的字符串，StringBuffer是线程安全的可变字符串，用StringBuffer做字符串的拼接可以避免资源的浪费，因为String每次拼接新的字符串都是创建一个新的String对象。</p><p><strong>String转换为StringBuffer</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//方式一</span><br><span class="line">String s = <span class="string">"hello"</span>;</span><br><span class="line">StringBuffer sb = new StringBuffer(s);</span><br><span class="line">//方式二</span><br><span class="line">StringBuffer sb = new StringBuffer();</span><br><span class="line">sb.append(s);</span><br></pre></td></tr></table></figure><p><strong>StringBuffer转换成String</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方式一</span><br><span class="line">StringBuffer sb = new StringBuffer(<span class="string">"hello"</span>);</span><br><span class="line">String s = new String(sb);</span><br><span class="line">//方式二</span><br><span class="line">String s = sb.toString();</span><br></pre></td></tr></table></figure><h5 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h5><blockquote><p>String, StringBuffer, StringBuilder 的区别？</p></blockquote><ul><li>String的内容不可变，StringBuffer和StringBuilder的内容都可变。</li><li>StringBuffer是线程同步的，数据安全，效率低；String和StringBuilder是线程不同步的，数据不安全，效率高。</li></ul><blockquote><p>StringBuffer和数组的区别？</p></blockquote><ul><li>二者都是一个容器，装其他数据</li><li>但StringBuffer最终是一个字符串数据；而数组可以存放多种数据，但必须是用一种数据类型。</li></ul><blockquote><p>String和StringBuffer作为参数传递</p></blockquote><ul><li>String可理解为特殊的引用类型，和基本类型一样，参数传递不会改变原数据内容。</li><li>StringBuffer作为引用类型，基本的赋值不会改变原数据内容，但是调用StringBuffer的方法去改变形式参数就会影响原数据内容。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class StringBufferDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="string">"world"</span>;</span><br><span class="line">        System.out.println(s1 + <span class="string">"---"</span> + s2);// hello---world</span><br><span class="line">        change(s1, s2);</span><br><span class="line">        System.out.println(s1 + <span class="string">"---"</span> + s2);// hello---world</span><br><span class="line"></span><br><span class="line">        StringBuffer sb1 = new StringBuffer(<span class="string">"hello"</span>);</span><br><span class="line">        StringBuffer sb2 = new StringBuffer(<span class="string">"world"</span>);</span><br><span class="line">        System.out.println(sb1 + <span class="string">"---"</span> + sb2);// hello---world</span><br><span class="line">        change(sb1, sb2);</span><br><span class="line">        System.out.println(sb1 + <span class="string">"---"</span> + sb2);// hello---worldworld</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void change(StringBuffer sb1, StringBuffer sb2) &#123;</span><br><span class="line">        sb1 = sb2;</span><br><span class="line">        sb2.append(sb1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void change(String s1, String s2) &#123;</span><br><span class="line">        s1 = s2;</span><br><span class="line">        s2 = s1 + s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>Java中的参数传递：</p><ul><li>基本类型：形式参数的改变对实际参数没有影响。</li><li>引用类型：形式参数的改变直接影响实际参数。</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Demo01_Object &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a = 10;</span><br><span class="line">        int b = 20;</span><br><span class="line">        change(a, b);</span><br><span class="line">        System.out.println(<span class="string">"main: a:"</span> + a + <span class="string">", b:"</span> + b); //10, 20</span><br><span class="line">        int[] arr = &#123;1, 2, 3&#125;;</span><br><span class="line">        change(arr);</span><br><span class="line">        System.out.println(<span class="string">"main: "</span> + arr[0]); //2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void change(int a, int b) &#123;</span><br><span class="line">        a = b;</span><br><span class="line">        b = a + b;</span><br><span class="line">        System.out.println(<span class="string">"change: a:"</span> + a + <span class="string">", b:"</span> + b); //20, 40</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void change(int[] arr) &#123;</span><br><span class="line">        arr[0] = arr[1];</span><br><span class="line">        System.out.println(<span class="string">"change"</span> + arr[0]); //2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>引入概念</strong>：<br>在Java中<strong>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。所有的Java对象都储存在堆内存中</strong>。例如：Date t = new Date()其中的t就是一个对象变量，new Date()是在堆内存中开辟了一个空间，而t指向new Date()的堆内存地址。<br>因此，在上述代码中a b都是基本类型，而int[]是一个引用类型，那<strong>基本类型形式参数改变对实际参数没有影响；对象类型形式参数改变直接影响实际参数。</strong></p><p><a href="/images/stack.png">stack</a></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><strong>Java程序语言总是采用按值调用</strong>，也就是说，方法得到的是所有参数值的一个拷贝，特别的，方法不能修改传递给他的任何变量的内容。</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。</li><li>一个方法可以改变一个对象的引用状态</li><li>一个方法不能让对象参数引用一个新对象</li></ul><p>比如：下列是无意义的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void swap(Employee x, Employee y) &#123;</span><br><span class="line">    Employee temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用swap(e1, e2)时并不会改变e1和e2的对象引用，swap方法的参数x,y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。</p><ul><li><strong>基本类型</strong>（包括Integer String Long）传递的参数是参数<strong>值</strong>的拷贝</li></ul><p>特别是对于Integer Long String这些类型数据，在初始化、赋值的时候都是从常量池中取数据，比如IntgerCache LongCache，如果常量池中没有就重新new对象，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String s = <span class="string">"123"</span>;</span><br><span class="line">    System.out.println(<span class="string">"main: "</span> + s.hashCode()); //48690</span><br><span class="line">    change(s);</span><br><span class="line">    change2(s);</span><br><span class="line">&#125;</span><br><span class="line">private static void change(String s) &#123;</span><br><span class="line">    s = <span class="string">"123"</span>;</span><br><span class="line">    System.out.println(<span class="string">"change: "</span> + s.hashCode()); //48690</span><br><span class="line">&#125;</span><br><span class="line">private static change2(String s) &#123;</span><br><span class="line">    s = <span class="string">"456"</span>;</span><br><span class="line">    System.out.println(<span class="string">"change2: "</span> + s.hashCode()); //51669</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>引用类型</strong>传递的参数是原对象在<strong>堆内存的地址</strong>的拷贝</li></ul><p>对象类型参数的传递，实际上传递这个对象堆内存地址的拷贝，所以形式参数和原参数操作的都是同一个堆内存地址，即形式参数的改变会直接影响原参数。</p><h4 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h4><p>成员变量和局部变量的区别：</p><ul><li>在类中的位置不同：<ul><li>成员变量：在类中方法外</li><li>局部变量：在方法定义中或方法声明上</li></ul></li><li>在内存中的位置不同：<ul><li>成员变量：在堆内存</li><li>局部变量：在栈内存</li></ul></li><li>声明周期不同：<ul><li>成员变量：随着对象的创建而存在，随着对象的消失而消失。</li><li>局部变量：随着方法的调用而存在，随着方法调用完毕而消失</li></ul></li><li>初始化值不同：<ul><li>成员变量：有默认初始化值</li><li>局部变量：没有默认初始化值，必须定义、赋值后才能使用</li></ul></li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>在Java中，当需要调用构造方法时，<strong>若该类没有定义构造方法，系统会自动提供一个无参构造方法；如果该类定义了构造方法（带参构造），系统将不再提供无参构造，必须手动定义</strong>。举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Demo2_Construct &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Demo2Student student = new Demo2Student();</span><br><span class="line">        student.show();</span><br><span class="line">        // Demo2School school = new Demo2School(); //error</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Demo2Student &#123;</span><br><span class="line">    public void <span class="function"><span class="title">show</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"this student show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Demo2School &#123;</span><br><span class="line">    private int size = 1000;</span><br><span class="line">    public Demo2School(int size) &#123;</span><br><span class="line">        this.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="final"><a href="#final" class="headerlink" title="final"></a>final</h5><p>final可以修改类、方法、变量。</p><p><strong>特点</strong>：</p><ul><li>final可以修饰类，该类不能被继承。</li><li>final可以修饰方法，该方法不能被重写。</li><li>final可以修饰变量，该变量不能被重新赋值。</li></ul><p><strong>面试题</strong>：final修饰局部变量的问题</p><ul><li>基本类型：被final修饰的基本类型的值不能被改变</li><li>引用类型：引用类型的地址值不能被改变，但是该对象的堆内存地址是可以改变的。</li></ul><p><strong>初始化时机</strong><br>被final修饰的变量必须在构造方法完毕前被初始化，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">    final int WIDTH = 12;</span><br><span class="line">    //final int HEIGHT; //error</span><br><span class="line">    final int AREA;</span><br><span class="line">    &#123;</span><br><span class="line">        AREA = 120;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>1、Java支持单继承不支持多继承，但Java支持多层继承<br>2、子类只能继承父类非私有成员（成员变量、成员方法）<br>3、子类不能继承父类的构造方法，但可以通过super关键字访问父类的构造方法。</p><h5 id="子类和父类的关系"><a href="#子类和父类的关系" class="headerlink" title="子类和父类的关系"></a>子类和父类的关系</h5><p><strong>子类中的所有构造方法都默认访问父类的无参构造方法</strong>。因为子类继承父类，并可能使用父类中的数据，所以子类初始化前一定要完成父类的初始化。所以子类每一个构造方法第一行默认都是super()。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Demo04_Extends &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Demo04Son son = new Demo04Son();</span><br><span class="line">        son.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Demo04Son extends Demo04Parent&#123;</span><br><span class="line">    private int num = 10;</span><br><span class="line">    public <span class="function"><span class="title">Demo04Son</span></span>() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">show</span></span>() &#123;</span><br><span class="line">        int num = 100;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(this.num);</span><br><span class="line">        System.out.println(super.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Demo04Parent &#123;</span><br><span class="line">    public int num = 1;</span><br><span class="line"></span><br><span class="line">    public <span class="function"><span class="title">Demo04Parent</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"这是父类的无参构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="this-super"><a href="#this-super" class="headerlink" title="this-super"></a>this-super</h5><p>this和super关键字的区别和使用场景？<br>区别：</p><ul><li>this: 代表当前类的对象引用</li><li>super: 代表父类的空间标识（可以理解为父类的引用，通过他访问父类的成员）<br>场景：</li><li>this.成员变量/方法</li><li>super.成员变量/方法</li><li>this(…) super(…)</li></ul><h5 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Demo04_Extends2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Demo04Zi zi = new Demo04Zi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Demo04Fu &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu 构造代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="function"><span class="title">Demo04Fu</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu 构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Demo04Zi extends Demo04Fu&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(<span class="string">"Zi 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Zi 构造代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="function"><span class="title">Demo04Zi</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Zi 构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fu 静态代码块</span><br><span class="line">Zi 静态代码块</span><br><span class="line">Fu 构造代码块</span><br><span class="line">Fu 构造方法</span><br><span class="line">Zi 构造代码块</span><br><span class="line">Zi 构造方法</span><br></pre></td></tr></table></figure><h5 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h5><p><strong>调用对象方法的执行过程：</strong><br><a href="/images/DomaticBind.png">DomaticBind</a><br>1.编译器首先查看对象的声明类型和方法名。如调用change(a)方法，由于存在多个change()方法，JVM会先列举该类以及其超类中访问属性为public且名为change的方法。<br>2.接下来，JVM将查看调用方法时提供的参数类型，并且JVM会预先为每个类创建一个方法表<strong>（method table）</strong>，JVM会直接从这个方法表中寻找名为change的方法中存在一个与提供的参数类型匹配的方法，这个过程称为<strong>重载解析</strong>。<br>3.如果是private、static、final方法或者构造器，那么JVM就能准确的知道调用哪个方法，我们将这种调用方式称为<strong>静态绑定</strong>。与此对应，调用的方法依赖于隐式参数的实际类型，并且在运行时实现<strong>动态绑定</strong>。<br>4.当程序运行，并且采用动态绑定调用方法时，JVM就一定调用于此最适合的一个方法，否则从超类中继续寻找。</p><h5 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h5><p>将一个类型强制转换为另外一个类型的过程称为类型转换。数值类型直接(int) double这样转换；对象引用的转换也类似，实现将某个类的对象引用转换为另一个类的对象引用。</p><ul><li><strong>向上转型</strong>：将一个子类的引用赋值给一个超类变量。</li><li><strong>向下转型</strong>：将一个超类的引用赋值给一个子类变量，且必须进行类型转换。</li></ul><p><strong>注意</strong></p><ul><li>只能在继承层次内进行类型转换。</li><li>在将超类转换成子类之前，应该使用instanceof进行检查。</li></ul><h5 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h5><p>一个类存在于另一个类中方法外，这个类就称为内部类；一个类存在于另一个类方法内，这个类称为局部内部类。</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类可以访问内部类的成员，必须创建对象</li><li>直接访问内部类的成员：Outer.Inner in = new Outer().new Inner()</li></ul><p><strong>局部内部类</strong><br>局部内部类可以直接访问外部类的成员，在局部位置可以创建内部类对象，通过对象调用内部类成员。</p><blockquote><p>局部内部类访问局部变量注意事项?<br>​局部内部类访问局部变量必须用final修饰。因为<strong>局部内部类的声明周期比局部变量长</strong>，局部变量随着方法的调用而存在，随着调用完毕而消失；但局部内部类不一定消失，他调用一个消失的变量就会报错。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class InnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Outer outer = new Outer();</span><br><span class="line">        outer.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Outer &#123;</span><br><span class="line">    public void <span class="function"><span class="title">show</span></span>() &#123;</span><br><span class="line">        int num2 = 10;</span><br><span class="line">        class Inner &#123;</span><br><span class="line">            private void <span class="function"><span class="title">show</span></span>() &#123;</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner inner = new Inner();</span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时调用不会报错，但并没有加final修饰。这个类编译后会生成InnerClass.class和Outer.class两个文件，我们来看下Outer.class:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Outer &#123;</span><br><span class="line">    <span class="function"><span class="title">Outer</span></span>() &#123;&#125;</span><br><span class="line">    public void <span class="function"><span class="title">show</span></span>() &#123;</span><br><span class="line">        final int num2 = 10;</span><br><span class="line">        class Inner &#123;</span><br><span class="line">            <span class="function"><span class="title">Inner</span></span>() &#123;&#125;</span><br><span class="line">            private void <span class="function"><span class="title">show</span></span>() &#123;</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner inner = new Inner();</span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的num2被自动加上了final修饰（这是因为JDK1.8的原因），所以如果你再添上num2 = 1000就会报错。</p><blockquote><p>解决办法<br>上面说过了应该将num2用final修饰。其原因就是Inner类的生命周期要比num2的声明周期长，当show()方法调用完毕后num2就已经消失了，但此时Inner类在堆内存中仍然存在，他调用一个不存在的变量就会报错。而用final修饰，这个变量成为常量，在初始化内部类的时候，final num2就在内部类中生成了一份拷贝，这个拷贝和这个内部类的声明周期相同，所以不会报错。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础（一）</title>
    <link href="/2018/08/01/JavaBasic1/"/>
    <url>/2018/08/01/JavaBasic1/</url>
    
    <content type="html"><![CDATA[<p>记录一些Java基础的知识点，为了自己查阅资料的时候方便一些。</p><hr><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="JDK和JRE的区别？"><a href="#JDK和JRE的区别？" class="headerlink" title="JDK和JRE的区别？"></a>JDK和JRE的区别？</h4><p>1、jre即Java Runtime Environment，Java运行环境。包括Java虚拟机和Java类库<br>2、jdk是Java开发工具包，例如：tools.jar</p><hr><h4 id="和-equals的区别"><a href="#和-equals的区别" class="headerlink" title="== 和 equals的区别"></a>== 和 equals的区别</h4><p>1、==是一个比较运算符，对于基本类型，比较的是具体的数值(int、double..)；对于引用类型，比较的是对象的内存地址<br>2、equals是超类Object就具有的方法，因此所有的引用类型都具有这个方法，只用用来比较引用数据类型。equals方法默认比较的对象内存地址，如果重写该方法，一般比较的是对象的属性值。<br>Object类equals方法源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">    <span class="built_in">return</span> (this == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new对象是在堆内存中开辟一份空间，所以其引用变量就是指向了堆内存的地址，举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class EqualsTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User a = new User();</span><br><span class="line">        User b = new User();</span><br><span class="line">        System.out.println(a == b); //<span class="literal">false</span></span><br><span class="line">        System.out.println(a.equals(b)); //<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this == o) <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o instanceof User)) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="built_in">return</span> age == user.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int <span class="function"><span class="title">hashCode</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> Objects.hash(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="两个对象的hashCode-相同，则equals-一定为true？"><a href="#两个对象的hashCode-相同，则equals-一定为true？" class="headerlink" title="两个对象的hashCode()相同，则equals()一定为true？"></a>两个对象的hashCode()相同，则equals()一定为true？</h4><p><strong>如果两个对象相等(equals()为true)，那么他们的hashCode()一定相同</strong><br><strong>如果两个对象的hashCode()相同，他们的equals()方法不一定相同</strong></p><p>JVM虚拟机通过hashCode()方法为Object对象分配一个int类型数值，以此来提高Java中集合对象(Map、HashMap…)中对象存储的效率。当集合中需要添加新元素，首先通过hashCode()获取该对象对应的地址位置，如果该位置上没有值就直接储存到该位置，如果有值就再调用equals()与新元素的值比较，相同就不再储存否则就散列到其他位置，大大减少了调用equals()方法比较的次数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class EqualsTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User a = new User();</span><br><span class="line">        User b = new User();</span><br><span class="line">        System.out.println(a == b); //<span class="literal">false</span></span><br><span class="line">        System.out.println(a.equals(b)); //<span class="literal">false</span></span><br><span class="line">        System.out.println(a.hashCode() == b.hashCode()); //<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="final的作用"><a href="#final的作用" class="headerlink" title="final的作用"></a>final的作用</h4><p>可修饰类、类属性、类方法。<br>1、被final修饰的类不能被继承<br>2、final修饰的类属性可以是基本类型也可以是引用类型，如果是基本类型就不能再被赋值；如果是引用类型，就不能再指向其他引用地址，但对象本身是可以改变的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class FinalTest &#123;</span><br><span class="line"></span><br><span class="line">    private static final User USER = new User();</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User u2 = new User();</span><br><span class="line">//        user = u2; // ERROR</span><br><span class="line">        USER.age = 23;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">    int age = 12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、类中所有private方法都是隐式的定义为final，为private方法添加final就毫无意义。</p><hr><h4 id="String属于基本数据类型吗？"><a href="#String属于基本数据类型吗？" class="headerlink" title="String属于基本数据类型吗？"></a>String属于基本数据类型吗？</h4><p><strong>不，String属于特殊的引用类型</strong></p><p>Java中基本数据类型有：int、short、long、char、boolean、float、double、byte</p><p>1、String是特殊的引用类型并且是final的，JVM使用字符串常量池储存字符串数据。创建新的字符串，JVM首先会去字符串常量池中寻找有没有该字符串，如果没有就添加到该常量池，如果有就返回该字符串在常量池中的引用。<br>2、String s = “a”; s += “b”;，这段代码执行前后，字符串常量池中将出现a和ab两个字符串常量，而原本s变量的引用指向了常量池中ab。<br>3、String s = new String(“ab”)，这段代码一共创建了几个对象？一个或两个。如果字符串常量池中有了ab这个字符串(比如在此之前已经使用了String str = “ab”)，那么新的s对象引用其实仅仅是指向了字符串常量中的ab，并没有创建新的字符串对象。但是，每次调用new都会在堆内存开辟空间，创建一个String对象，这是肯定的。</p><p>栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class StringTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a = <span class="string">"abc"</span>;</span><br><span class="line">        String b = <span class="string">"abc"</span>;</span><br><span class="line">        String c = new String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(a == b); //<span class="literal">true</span></span><br><span class="line">        System.out.println(a.equals(b)); //<span class="literal">true</span></span><br><span class="line">        System.out.println(a.equals(c)); //<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>String和StringBuffer和StringBuilder的区别</strong><br>1、String是不可变字符串，StringBuffer和StringBuilder是可变字符串。如果经常改变字符串的原始数据，最好使用StringBuffer代替。<br>2、String默认重写了equals方法和hashCode()方法；而StringBuffer没有重写equals方法，使用new StringBuffer(“”)会直接在堆内存中开辟空间储存对象。因此将StringBuffer对象储存仅Java集合中可能会出现问题。<br>3、StringBuffer是线程安全的，效率低；StringBuilder是线程不安全的，效率高。</p><hr><h4 id="static关键字？是否可覆盖？"><a href="#static关键字？是否可覆盖？" class="headerlink" title="static关键字？是否可覆盖？"></a>static关键字？是否可覆盖？</h4><p>static关键字表明一个成员变量或者是成员方法可以在没有所属的类实例变量的情况下被访问。被static标记的方法不能被覆盖，因为方法的覆盖是基于运行时动态绑定的，而static方法在编译时就已经和该类绑定了，也就是static标记的变量、方法都是随着类的加载而加载的，所以可以通过不创建对象实例就能访问该变量、方法；而不创建对象实例就访问非static变量、方法是不行的，因为此变量、方法还没有被创建。</p><p>static标记的方法只能访问static变量或方法<br>非static标记的方法可以访问static或非static标记的变量或方法</p><hr><h4 id="自动拆、装箱"><a href="#自动拆、装箱" class="headerlink" title="自动拆、装箱"></a>自动拆、装箱</h4><p>因为Java自身面向对象OOP的特性，而一切基本数据类型都不具有面向对象的特性，所以Java为基本的数据类型提供了对应的引用类型。<br>具体表现在程序在编译期间自动将基本数据类型转换为引用类型(装箱)、将引用数据类型转换为基本数据类型(拆箱)</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">引用数据类型</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center">Char</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><p>栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Integer i1 = 100;</span><br><span class="line">    Integer i2 = 100;</span><br><span class="line">    Integer i3 = 200;</span><br><span class="line">    Integer i4 = 200;</span><br><span class="line">    System.out.println(i1 == i2);</span><br><span class="line">    System.out.println(i3 == i4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Java中实现基本数据类型和引用类型之间的拆装箱一般都是用过valueOf()方法实现的。例如我们看下Integer类的valueOf()方法源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="built_in">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="built_in">return</span> new Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到：当声明一个新的整数型变量，编译时通过Integer类的valueOf()进行拆装箱计算，这个方法会首先比较这个整数值是否在IntegerCache的范围内，如果在就返回IntegerCache类中的数值；如果不在就直接new Integer。那么我们看下IntegerCache类源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private static class IntegerCache &#123;</span><br><span class="line">    static final int low = -128;</span><br><span class="line">    static final int high;</span><br><span class="line">    static final Integer cache[];</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        // high value may be configured by property</span><br><span class="line">        int h = 127;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                int i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, 127);</span><br><span class="line">                // Maximum array size is Integer.MAX_VALUE</span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</span><br><span class="line">            &#125; catch( NumberFormatException nfe) &#123;</span><br><span class="line">                // If the property cannot be parsed into an int, ignore it.</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = new Integer[(high - low) + 1];</span><br><span class="line">        int j = low;</span><br><span class="line">        <span class="keyword">for</span>(int k = 0; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = new Integer(j++);</span><br><span class="line"></span><br><span class="line">        // range [-128, 127] must be interned (JLS7 5.1.7)</span><br><span class="line">        assert IntegerCache.high &gt;= 127;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="title">IntegerCache</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，当声明一个新的整型变量时（int、Integer），如果这个变量值的大小在[-128, 127]之间，就直接返回IntegerCache中储存的常量值，否则就直接new一个新的Integer来保存这个常量值。所以上面才会出现false的结果。<br>同理：其他的数据类型例如：long、short等都具有对应的LongCache、ShortCache等类。</p><hr><h4 id="Overriding和Overloaded"><a href="#Overriding和Overloaded" class="headerlink" title="Overriding和Overloaded"></a>Overriding和Overloaded</h4><p>方法的重写Overriding和方法的重载Overloaded都是Java多态性的一种表现。<br>Overriding: 子类中定义了和父类中名称、参数列表相同的方法<br>Overloaded: 方法名相同，参数列表不同</p><hr><h4 id="Java支持多继承吗？"><a href="#Java支持多继承吗？" class="headerlink" title="Java支持多继承吗？"></a>Java支持多继承吗？</h4><p>不支持。Java中每个类都只能继承一个类，可以实现多个接口。但是可以通过多层继承实现。<br>类定义属性和方法，描述某一类事物的抽象。而接口定义了行为，并不限于任何具体意向。<br>从逻辑上说，单继承更加明确指出一个子类就应该是其父类代表的事物中某个更具体的类别。而接口则不同，接口定义了一些公共行为。因此类对接口的implements称为实现而不能称为继承。</p><hr><h4 id="接口和抽象类的区别？"><a href="#接口和抽象类的区别？" class="headerlink" title="接口和抽象类的区别？"></a>接口和抽象类的区别？</h4><ul><li>接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</li><li>接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法 ( 包含具体实现 )</li><li>类实现接口就必须实现接口中定义的所有方法；但继承一个抽象类，可以不实现抽象类中的抽象方法 ( 但前提是这个类也是抽象的 )</li><li>抽象类可以是不提供接口方法实现的情况下实现接口</li><li>接口中声明的变量默认都是final的；但抽象类可以包含非final的变量</li><li>接口中的成员方法默认都是public的；但抽象类中的成员函数可以是private、protected、public</li><li>接口是绝对抽象的，不可以被实例化；</li></ul><hr><h4 id="引用传递和值传递"><a href="#引用传递和值传递" class="headerlink" title="引用传递和值传递"></a>引用传递和值传递</h4><p><strong>Java中采用值传递的方式</strong><br>栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class TransferTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a = 1;</span><br><span class="line">        Integer b = 2;</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        int[] arr = &#123;1, 2&#125;;</span><br><span class="line">        swap(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void swap(int[] arr) &#123;</span><br><span class="line">        arr[0] = 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void swap(int a, Integer b) &#123;</span><br><span class="line">        a = 10;</span><br><span class="line">        b = 20;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法传递时传递的参数其实仅值原参数的一个拷贝，对于基本类型传递的就是具体的值的拷贝，对于引用类型传递的是对象地址。<br>所以上面的例子中，基本数据类型a,b经过swap方法并没有改变原始值，而引用类型arr数组经过swap方法就改变了原始值（因为直接对对象堆内存地址数据操作）。</p><hr><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><p><img src="/images/io.png" srcset="/img/loading.gif" alt="IO流"></p><p><strong>1、Java中有几种类型的流？</strong><br>字符流和字节流。字节流继承InputStream和OutputStream；字符流继承自InputStreamReader和OutputStreamWriter。</p><p><strong>2、谈谈Java IO中的方法阻塞</strong><br>Java中的阻塞式方法是指在程序调用该方法时，必须等待输入数据可用或检测到输入结果时结束或抛出异常，否则程序会一直停留在该语句上，不会执行下面的语句。比如read()和readLine()方法。</p><p><strong>3、字符流和字节流的区别？</strong><br>数据的输入和输出在计算机中最终都是通过字节的形式传递的，对应通过InputStream和OutputStream实现，他们都是针对字节操作的。<br>而有时候通常需要读取一些完全是字符的文本数据，通常使用基于字节流的包装类字符流完成操作，他们通过InputStreamReader和OutputStreamWriter实现。<br>字符流是字节流的包装，即使有时候读取的是字符流，但也可能需要转换为字节写入。</p><p><strong>4、NIO</strong><br>传统的IO是阻塞式的，会一直监听一个ServerSocket，在调用read()等方法时，会一直等到数据到来或缓冲区已满时才返回；调用accept()时也会一直阻塞到有客户端连接时才继续执行；每个客户端连接成功后，服务端都会踢动一个县城去处理该客户端的请求；在多线程处理多个连接时，每个线程都拥有自己的栈空间并且占用了一些CPU时间，每个线程遇到外部未准备好时，都会发生阻塞。阻塞的结果就是会打来大量的进程上下文切换。<br>而对于NIO，它是非阻塞式，核心类：</p><ul><li>Buffer： 为所有的原始类型提供Buffer缓冲支持</li><li>Charset： 字符集编码解码解决方案</li><li>Channel： 一个新的原始IO抽象，用于读取Buffer类型，通道可以认为是一种链接，可以是到特定设备、程序或是网络链接。</li></ul><hr><h4 id="说说List、Set、Map三者的区别"><a href="#说说List、Set、Map三者的区别" class="headerlink" title="说说List、Set、Map三者的区别"></a>说说List、Set、Map三者的区别</h4><ul><li>List: List接口储存一组不唯一 (可以有多个元素引用引用相同的对象)，有序的对象，可插入多条null元素</li><li>Set: 不允许重复的集合，不允许有多个元素引用相同的对象，只允许有一个null元素</li><li>Map: 使用键值对储存，Map会维护与Key有关联的值，两个Key可以引用相同的对象，但Key不能重复。</li></ul><hr><h4 id="Array和ArrayList有什么区别？"><a href="#Array和ArrayList有什么区别？" class="headerlink" title="Array和ArrayList有什么区别？"></a>Array和ArrayList有什么区别？</h4><ul><li>Array可以包含基本类型和对象类型；ArrayList只能包含对象类型</li><li>Array大小是固定的；ArrayList大小是动态变化的</li><li>ArrayList提供了诸如addAll()、removeAll()、iterator()方法等</li><li>对于基本数据类型，集合使用自动装箱来减少代码量；但当处理固定大小的基本类型数据时，这种方式相对较慢。</li></ul><hr><h4 id="ArrayList和LinkedList的区别？"><a href="#ArrayList和LinkedList的区别？" class="headerlink" title="ArrayList和LinkedList的区别？"></a>ArrayList和LinkedList的区别？</h4><p>1、<strong>是否保证线程安全</strong>： ArrayList和LinkedList都是不同步的，也就是不保证线程安全<br>2、<strong>底层数据结构</strong>： ArrayList底层使用的是Object数组；LinkedList底层使用的是 双向链表 结构<br>3、<strong>插入和删除是否受元素位置影响？</strong> ArrayList采用数组储存，所以插入和删除元素都受元素位置的影响；LinkedList 采用链表储存，所以插入、删除元素都不受元素位置影响。<br>4、<strong>是否支持快速随机访问？</strong> LinkedList因为使用链表储存，无法通过元素索引快速访问；而ArrayList因为底层采用Object数组储存，可以通过索引快速随机访问。<br>5、<strong>内存空间占用</strong>： ArrayList的空间浪费主要体现在在List列表的结尾都会预留一定的空间容量，而LinkedList的空间花费体现在他的每一个元素都需要消耗比ArrayList更多的空间（因为要储存直接后继和直接前驱以及数据）。</p><hr><p><strong>什么是迭代器</strong><br><em>Iterator</em>接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法<em>iterator()</em>。迭代器在迭代的过程中可以删除底层集合的元素。</p><p><strong>Iterator和ListIterator的区别？</strong></p><ul><li>Iterator可以用来遍历Set和List集合，但是ListIterator只能遍历List</li><li>Iterator对集合只能向前遍历（next()）；而*ListIterator可以向前遍历（next()），也可以向后遍历（previous()）</li><li>ListIterator实现了Iterator接口</li></ul><p><strong>RandomAccess接口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//ArrayList</span><br><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">//RandomAccess</span><br><span class="line">public interface RandomAccess &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//LinkedList</span><br><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">    extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>源码中ArrayList类实现了RandomAccess接口，LinkedList类中却没有实现这个接口，但是RandomAccess接口中却什么也没有定义。可以看RandomAccess接口上的注释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Marker interface used by &lt;tt&gt;List&lt;/tt&gt; implementations to indicate that</span><br><span class="line"> * they support fast (generally constant time) random access.  The primary</span><br><span class="line"> * purpose of this interface is to allow generic algorithms to alter their</span><br><span class="line"> * behavior to provide good performance when applied to either random or</span><br><span class="line"> * sequential access lists.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>大概就是说这个接口仅是一个标识Marker，实现了这个接口的List将支持快速随机访问（random access）。接下来，我们查看Collections类中的binarySearch方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt;</span><br><span class="line">int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list instanceof RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)</span><br><span class="line">        <span class="built_in">return</span> Collections.indexedBinarySearch(list, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">return</span> Collections.iteratorBinarySearch(list, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static &lt;T&gt;</span><br><span class="line">int indexedBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) &#123;</span><br><span class="line">    int low = 0;</span><br><span class="line">    int high = list.size()-1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        int mid = (low + high) &gt;&gt;&gt; 1;</span><br><span class="line">        Comparable&lt;? super T&gt; midVal = list.get(mid);</span><br><span class="line">        int cmp = midVal.compareTo(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; 0)</span><br><span class="line">            low = mid + 1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; 0)</span><br><span class="line">            high = mid - 1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">return</span> mid; // key found</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> -(low + 1);  // key not found</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static &lt;T&gt;</span><br><span class="line">int iteratorBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</span><br><span class="line">&#123;</span><br><span class="line">    int low = 0;</span><br><span class="line">    int high = list.size()-1;</span><br><span class="line">    ListIterator&lt;? extends Comparable&lt;? super T&gt;&gt; i = list.listIterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        int mid = (low + high) &gt;&gt;&gt; 1;</span><br><span class="line">        Comparable&lt;? super T&gt; midVal = get(i, mid);</span><br><span class="line">        int cmp = midVal.compareTo(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; 0)</span><br><span class="line">            low = mid + 1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; 0)</span><br><span class="line">            high = mid - 1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">return</span> mid; // key found</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> -(low + 1);  // key not found</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>binarySearch()方法是从List中查找指定元素，其中首先判断传入的List时候实现了RandomAccess接口，如果实现了就调用indexedBinarySearch()方法，否则就调用iteratorBinarySearch()方法。再看这两个方法的源码：<br>如果传入的List实现了RandomAccess接口，采用普通for循环遍历<br>若传入的List未实现RandomAccess接口，采用iterator遍历</p><p><strong>链表</strong></p><p><strong>链表（Linked List）</strong>由一串节点组成，每个节点包含任意的实例数据和一或两个用来指向上一个/下一个节点位置的指针</p><blockquote><p>单向链表<br>单向链表包含每个节点Node包含两个部分：第一部分data储存当前节点数据、第二部分next存储下一节点的地址。</p></blockquote><ul><li><p>单向链表只可向一个方向遍历，查找一个节点需要从第一个节点开始向下依次寻找<br><img src="/images/linktable1.png" srcset="/img/loading.gif" alt="单向链表"></p></li><li><p>单向链表插入节点从链表头部插入，将新插入节点的next指向原头部节点位置即可<br><img src="/images/linktable2.png" srcset="/img/loading.gif" alt="单向链表"></p></li><li><p>删除节点，只需要将该节点上一个节点的next指向该节点下一个节点即可<br><img src="/images/linktable3.png" srcset="/img/loading.gif" alt="单向链表"></p></li></ul><blockquote><p>双向链表<br><strong>双向链表</strong> 包含两个指针，prev指向前一个节点，next指向后一个节点。<br><img src="/images/linktable4.png" srcset="/img/loading.gif" alt="双向链表"></p></blockquote><blockquote><p>双向循环链表<br><strong>双向循环链表</strong> 最后一个节点的<em>next</em>指向<em>head</em>，而<em>head</em>的<em>prev</em>指向最后一个节点，形成一个环。<br><img src="/images/linktable5.png" srcset="/img/loading.gif" alt="双向循环链表"></p></blockquote><hr><h4 id="ArrayList和Vector和LinkedList的区别？"><a href="#ArrayList和Vector和LinkedList的区别？" class="headerlink" title="ArrayList和Vector和LinkedList的区别？"></a>ArrayList和Vector和LinkedList的区别？</h4><ul><li><strong>ArrayList</strong>: 底层数据结构是数组，查询快，增删慢。线程不安全，效率高</li><li><strong>Vector</strong>: 底层数据结构是数组，查询快，增删慢。线程安全，效率低</li><li><strong>LinkedList</strong>: 底层数据结构是链表，查询慢，增删快。线程不安全，效率高</li></ul><hr><h4 id="谈谈ArrayList的扩容机制"><a href="#谈谈ArrayList的扩容机制" class="headerlink" title="谈谈ArrayList的扩容机制"></a>谈谈ArrayList的扩容机制</h4><p>Java中基本数组都是定长的，一旦被实例化后就不能改变其长度，意味着创建数组时必须确定数组的容量大小。而很多情况下，数组的长度不是确定的，需要动态增减，ArrayList的出现就解决了这一问题。<br>ArrayList的扩容机制表现在add()方法上，先看add()方法的源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取最小容量</span><br><span class="line">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="built_in">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//判断是否需要扩容</span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当向ArrayList对象中添加新元素时，首先会调用ensureCapacityInternal(size)方法，size为最小扩容量；ensureCapacityInternal()方法会首先调用calculateCapacity来确定需要的最小容量；最后调用ensureExplicitCapacity()方法判断时候需要扩容。最后判断所需最小容量如果大于当前数组的空间大小，则需要扩容，调用grow()方法扩容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // 获取ArrayList中elementDaata数组的长度</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    // 扩容至原来的1.5倍</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    // 判断新的数组容量够不够</span><br><span class="line">    // 够了就直接使用这个长度创建新数组</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        // 不够就将数组的长度设置为需要的长度</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    // 检查此时的最大值是否溢出</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    // 调用Arrays.copyOf()将elementData数组数据拷贝到新数组</span><br><span class="line">    // 并将elementData指向新数组newCapacity的内存地址</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>： ArrayList扩容的本质就是计算所需扩容size得到新的数组，将原数组中的数据复制到新数组中，最后将原数组指向新数组在堆内存的引用地址即可。</p><hr><h4 id="HashMap和HashTable的区别？"><a href="#HashMap和HashTable的区别？" class="headerlink" title="HashMap和HashTable的区别？"></a>HashMap和HashTable的区别？</h4><p>1、HashMap和HashTable都实现了Map接口，主要区别在线程安全性、同步、速度<br>2、线程是否安全： HashMap非同步线程不安全，HashTable同步线程安全。HashTable内部的方法都经过synchronized修饰。<br>3、效率: HashMap线程不安全效率高，HashTable线程安全效率低。<br>3、对null key和null value的支持： HashMap中，null可以作为key，这样的key只有一个，但可以有多个key对应的值为null；在HashTable中的key不能为null<br>5、底层数据结构： JDK1.8后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阀值时（默认是8），将链表转换为红黑树，以减少搜索时间。HashTable没有这样的机制。</p><hr><h4 id="HashMap和HashSet区别"><a href="#HashMap和HashSet区别" class="headerlink" title="HashMap和HashSet区别?"></a>HashMap和HashSet区别?</h4><p><strong>HashSet底层采用HashMap实现</strong><br>HashMap|HashSet<br>:–|:–<br>实现了Map接口|实现了Set接口<br>储存键值堆|仅储存对象<br>调用put()向Map中添加元素|调用add()向Set中添加元素<br>HashMap使用Key计算HashCode|HashSet使用成员对象来计算hashCode值，对于两个对象来说，hashCode可能相同，所以用equals判断对象的相等性</p><hr><h4 id="HashSet如何检查重复？"><a href="#HashSet如何检查重复？" class="headerlink" title="HashSet如何检查重复？"></a>HashSet如何检查重复？</h4><p>在前面讲hashCode和equals时就提到了，HashSet集合同样适用。向HashSet中存入一个元素，HashSet首先会根据对象的hashCode值判断当期集合中此hashCode对应的位置有没有值，如果没有就直接添加，如果有就再调用equals方法比较两个对象是否相同，相同就不再储存（保证了Set集合不重复的特性），否则就散列到其他位置储存。</p><hr><h4 id="HashMap底层实现？"><a href="#HashMap底层实现？" class="headerlink" title="HashMap底层实现？"></a>HashMap底层实现？</h4><p>Map在Java中的实现由很多，HashMap便是其中之一，随着JDK版本的更新，HashMap的实现也在不断更新：</p><ul><li>&lt;=JDK1.7: Table数组 + Entry链表</li><li><blockquote><p>=JDK1.8: Table数组 + Entry链表/红黑树</p></blockquote></li></ul><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p><strong>Hash（哈希、散列）</strong>，就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。<br>Hash函数的一种实现：<br>直接取余法： f(x) = x mod max<br>位运算法： f(x) = x &amp; max<br>HashMap采用 位运算法，相比直接取余，位运算直接对内存中的二进制数据操作，不需要再转阿欢为十进制，因此处理速度很快：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">7 &amp; 33 = 1</span><br><span class="line">    </span><br><span class="line">    000111</span><br><span class="line">  &amp; 100001</span><br><span class="line">  --------</span><br><span class="line">    000001 = 1</span><br></pre></td></tr></table></figure><hr><h4 id="Hash冲突"><a href="#Hash冲突" class="headerlink" title="Hash冲突"></a>Hash冲突</h4><p>假设将100个数据通过Hash散列后存储到10个不同的容器中，必定会出现多个元素分布到同一个容器中。具体到HashMap集合中，若将多个K-V数据存入put，HashMap根据元素key计算到对应的hashCode值，如果计算得到多个不同的key对应的hashCode值相同（即要储存到同一位置），此时这种现象就称为 Hash冲突。<br>HashMap默认采用了 链地址法 解决Hash冲突问题，即通过类似单链表的方式将 冲突的元素 串起来，搜索时遍历这个链表即可。注意： 如果冲突的Hash越来越多，这个链就会越来越长。</p><hr><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p><img src="/images/hash1.png" srcset="/img/loading.gif" alt="hash冲突与实现原理"><br>这里我们需要了解两个名词：<br>Table: 哈希桶数组（哈希表），存放Node元素，底层是一个Node[] table<br>Node: 节点元素，Node是HashMap的一个内部类，实现了Map.Entry接口，本质是一个映射（K-V）<br>HashMap内部的一些关键属性需要了解：<br>DEFAULT_INITIAL_CAPACITY: Tabale数组的初始化长度，默认是1 &lt;&lt; 4，2^4 = 16<br>MAXIMUM_CAPACITY: Table数组最高长度，默认为1 &lt;&lt; 30，2^30 = 1073741824<br>DEFAULT_LOAD_FACTOR: 负载因子，当总元素数 &gt; 数组长度 * 负载因子时，Table数组将扩容，默认是0.75<br>TREEIFY_THRESHOLD: 树化阀值，当单个Table内Node数量超过该值，则将链表转换为红黑树，默认是8<br>UNTREEIFY_THRESHOLD: 链化阀值，当扩容期间单个Table的Entry数量小于该值，则将红黑数转换为链表，默认为6<br>MIN_TREEIFY_CAPACITY: 最小树化阀值，当Table中所有元素超过该值，才会进行树化<br>size: 当前HashMap实际存在的键值对数量<br>threshold: HashMap所能容纳的最大数据量的Node（键值对）个数。Node[] table初始化长度length是16，loadFactor负载因子默认是0.75，threshold = length * loadFactor<br>loadFactor: 负载因子，默认是0.17<br>modCount: 记录HashMap内部结构发生变化的次数<br>HashMap内部存在一个NodeTable数组，这个数组的初始化长度是DEFAULT_INITIAL_CAPACITY，他是一个单向链表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    final int <span class="built_in">hash</span>; //key的Hash值</span><br><span class="line">    final K key; //key</span><br><span class="line">    V value; //value</span><br><span class="line">    Node&lt;K,V&gt; next; //下一个节点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考单链表的结构，Table中每个Node节点包含两个部分，Node元素作为节点的header，next指向下一个节点。<strong>这种链式结构的存在正是为了解决Hash冲突</strong></p><p>栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"loonycoder"</span>, <span class="string">"18"</span>);</span><br></pre></td></tr></table></figure><p>HashMap将根据”loonycoder”这个Key得到其hashCode值，然后经过Hash算法定位到其在HashMap储存的位置，如果两个不同的key定位到了同一个位置，此时就发生了Hash冲突。<br>在JDK1.7之前，解决Hash冲突的方式是将冲突的Node节点放在一个链表中。在JDK1.8中，当Table中链长超过TREEIFY_THRESHOLD阀值后，会将链表转换为红黑树的实现TreeNode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class="line">    boolean red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当发生<strong>Hash冲突</strong>时，根据HashMap默认采用的 <strong>链地址法</strong>，即将冲突的Hash串成一个链式结构储存到HashMap对应的位置。但是 随着Hash冲突越来越多，这个<strong>链将越来越长</strong>，这就将导致遍历碰撞key时的消耗不断增加，也就直接导致了性能的不足。在JDK1.8后，HashMap对单个Table中的Node超出某个阀值后，将开始树化操作（链表转换为红黑树），这对搜索的性能将会有很大的提升。<br><img src="http://cdn.tycoding.cn/JDK1.8%E4%B9%8B%E5%90%8E%E7%9A%84HashMap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg" srcset="/img/loading.gif" alt="地址链法"></p><p><strong>总结</strong><br>到此，我们总结一下HashMap的实现原理：</p><ul><li>HashMap根据key的hashCode值存储元素。put新元素会遍历链表，根据新元素的key计算hashCode得到散列位置，如果该位置有值再调用equals判断value是否相同，相同就散列到其他位置储存。</li><li>HashMap在put新元素时如果遇到key对应的hashCode相同，可能会产生Hash冲突问题。HashMap的做法是采用链式结构（链表）储存存在Hash冲突的元素，查询时再遍历这个链接结构元素集合即可。</li><li>如果发生Hash冲突的元素很多，这个 <strong>链</strong> 将很长，影响到遍历key消耗性能的增加，于是判断当Table中Node节点大于默认值8时，将链表转换为红黑树（TreeNode）存储元素。</li></ul><hr><h4 id="Collection和Collections的区别？"><a href="#Collection和Collections的区别？" class="headerlink" title="Collection和Collections的区别？"></a>Collection和Collections的区别？</h4><ul><li>Collection是集合类的上级接口，继承他的接口主要有Set和List</li><li>Collections仅是针对集合类封装的一个工具类，在java.util包下</li></ul><hr><h4 id="Comparable和Comparator的区别？"><a href="#Comparable和Comparator的区别？" class="headerlink" title="Comparable和Comparator的区别？"></a>Comparable和Comparator的区别？</h4><ul><li>Comparable接口来自java.lang包，提供compareTo(Object obj) 方法排序</li><li>Comparator接口来自java.util包，提供compare(Object obj1, Object obj2)方法排序<br>当需要对一个集合采用一种方式排序，使用Comparable接口；如果需要对一个集合采用两种排序方式就使用Comparator接口。</li></ul><h4 id="Java集合框架总结"><a href="#Java集合框架总结" class="headerlink" title="Java集合框架总结"></a>Java集合框架总结</h4><h5 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h5><p><img src="/images/collection1.png" srcset="/img/loading.gif" alt="Collection"></p><p><strong>List</strong></p><p>ArrayList: Object数组，线程不安全，查询快，增删慢，效率高<br>Vector: Object数组，线程安全，查询快，增删慢，效率低<br>LinkedList: 双向链表，线程不安全，查询慢，增删快，效率高</p><p><strong>Set</strong></p><p>HashSet: 无序、唯一，基于HashMap实现，底层采用HashMap存储元素<br>LinkedHashSet: LinkedHashSet继承自HashSet，并且其内部通过LinkedHashMap实现<br>TreeSet 有序、唯一，红黑树</p><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p><img src="/images/map1.png" srcset="/img/loading.gif" alt="Map"></p><ul><li>HashMap: JDK1.8之前HashMap由数组和链表组成，数组时HashMap的主体，链表是为了解决Hash冲突问题。JDK1.8之后当Table中Node数量大于8时，就将链表转换为红黑树，以减少搜索时间提高效率。</li><li>LinkedHashMap: LinkedHashMap继承自HashMap，所有他的底层仍然由数组和链表/红黑树实现。另外，LinkedHashMap在上面的结构基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。</li><li>HashTable: 数组+链表组成。数组时HashTable的主体，链表是为了解决Hash冲突问题<br>TreeMap: 红黑树</li></ul><hr><h3 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h3><h4 id="线程和进程的区别？"><a href="#线程和进程的区别？" class="headerlink" title="线程和进程的区别？"></a>线程和进程的区别？</h4><ul><li>进程是程序的一次执行过程，是系统运行程序的基本单位</li><li>线程与进程类似，但线程是一个比进程更小的执行单位。一个进程执行过程中可以产生多个线程，<br>在Java中，启用一个main方法就是启动了一个JVM进程，而main函数所在的线程就是这个进程中的一个线程，也称为主线程。</li></ul><hr><h4 id="从JVM角度分析进程和线程的关系？"><a href="#从JVM角度分析进程和线程的关系？" class="headerlink" title="从JVM角度分析进程和线程的关系？"></a>从JVM角度分析进程和线程的关系？</h4><p>根据JVM的内存划分，对于线程而言：多个线程共享进程的堆、方法区资源，但每个线程又有自己的程序计数器、虚拟机栈、本地方法栈。</p><p>也就是说，在一个JVM进程中，可以存在多个线程，每个线程都共享了这个JVM进程的方法区、堆；并且每个线程又都具有自己的虚拟机栈、本地方法栈、程序计数器等。</p><h5 id="为什么方法区和堆是线程共享区？"><a href="#为什么方法区和堆是线程共享区？" class="headerlink" title="为什么方法区和堆是线程共享区？"></a>为什么方法区和堆是线程共享区？</h5><ul><li><strong>方法区（Method Area）</strong> 存储已被虚拟机加载的类信息、常量、静态变量等数据。方法区中又包含 运行时常量池 ，这部分区域储存Class文件信息和编译期生成的各种字面量和符号引用。</li><li><strong>堆（Heap）</strong> 堆内存储存了对象实例（比如new关键字创建的实例对象），它是JVM中内存区最大的一块区域。<br>所以，一个进程的启动可能包含了多个线程，而这个进程中的静态变量等都是随着类加载而加载的，他应该不属于某个线程独有，所以将其存储于方法区中。对象实例都储存在Java堆内存中，作为Java最大的一块内存区域，肯定不能是某个线程独占的。</li></ul><h5 id="为什么虚拟机栈和本地方法栈是线程独占区？"><a href="#为什么虚拟机栈和本地方法栈是线程独占区？" class="headerlink" title="为什么虚拟机栈和本地方法栈是线程独占区？"></a>为什么虚拟机栈和本地方法栈是线程独占区？</h5><ul><li><strong>虚拟机栈</strong>： 每个Java方法执行的同时都会创建一个栈帧储存局部变量表、操作数栈、方法出口等。从方法的执行到结束，对应将栈帧压入Java虚拟机栈和从虚拟机栈中弹出的过程。</li><li><strong>本地方法栈</strong>： 本地方法栈类似Java虚拟机栈，只不过Java虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的native方法服务。</li></ul><h5 id="程序计数器是什么？"><a href="#程序计数器是什么？" class="headerlink" title="程序计数器是什么？"></a>程序计数器是什么？</h5><p><strong>程序计数器（Program Counter Register）</strong>：当前线程执行的字节码的行号指示器。每个线程都有独立的程序计数器。此内存区域是Java虚拟机中唯一一个没有任何OutOfMemoryError情况的区域。</p><hr><h4 id="说说并行和并发的区别？"><a href="#说说并行和并发的区别？" class="headerlink" title="说说并行和并发的区别？"></a>说说并行和并发的区别？</h4><ul><li><strong>并行</strong>： 同一时间段，多个任务都在执行（单位时间内不一定同时执行）</li><li><strong>并发</strong>： 单位时间内，多个任务同时执行。</li></ul><hr><h4 id="使用多线程可能带来什么问题？"><a href="#使用多线程可能带来什么问题？" class="headerlink" title="使用多线程可能带来什么问题？"></a>使用多线程可能带来什么问题？</h4><p>并发编程的目的就是提高程序的执行效率，但并发编程可能造成：内存泄漏、上下文切换、死锁等问题</p><hr><h4 id="说说线程的生命周期和状态？"><a href="#说说线程的生命周期和状态？" class="headerlink" title="说说线程的生命周期和状态？"></a>说说线程的生命周期和状态？</h4><table><thead><tr><th align="left">状态名称</th><th align="left">状态说明</th></tr></thead><tbody><tr><td align="left">new</td><td align="left">初始状态，线程被创建，但还没有调用start()方法</td></tr><tr><td align="left">runnable</td><td align="left">运行状态，Java线程将操作系统中就绪和运行两种状态统称为“运行中”</td></tr><tr><td align="left">blocked</td><td align="left">阻塞状态，表示线程阻塞于锁</td></tr><tr><td align="left">waiting</td><td align="left">等待状态，线程需要等待当前线程或其他线程执行完成</td></tr><tr><td align="left">time_waiting</td><td align="left">超时等待状态，他可以实现在指定时间后自动返回</td></tr><tr><td align="left">terminated</td><td align="left">终止状态，表示当前线程已经执行完毕</td></tr></tbody></table><p>对应，程序会因为不同代码的执行产生不同的状态，如下图：<br><img src="/images/thread2.png" srcset="/img/loading.gif" alt="线程图"><br>如上，线程创建后将进入NEW（初始）状态，调用start()开始运行，当线程执行wait()方法后，线程将进入WAITING（等待）状态，可以通过wait(long)或join(long)等方法终止等待状态；当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到BLOCKED（阻塞）状态。</p><hr><h4 id="什么是上下文切换？"><a href="#什么是上下文切换？" class="headerlink" title="什么是上下文切换？"></a>什么是上下文切换？</h4><p>简单来说，并发编程中实际线程的数量都可能大于CPU核心的个数，而COU一个核心在任意时刻只能被一个线程使用，CPU为了保证并发的线程都有被执行，采用<strong>随机分配时间片并轮转</strong>的方式；而一个线程的时间片用户将保存并进入就绪状态直到下次分配时间片再执行，这个 <strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p><hr><h4 id="什么是死锁？如何避免"><a href="#什么是死锁？如何避免" class="headerlink" title="什么是死锁？如何避免?"></a>什么是死锁？如何避免?</h4><p>举例：线程A持有资源2，线程B持有资源1，在线程A、B都没有释放自己所持有资源的情况下（锁未释放），他们都想同时获取对方的资源，因为资源1、2都被锁定，两个线程都会进入相互等待的情况，这种情况称为死锁。<br><img src="/images/deadlock.png" srcset="/img/loading.gif" alt="死锁"><br>栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class DeadLockDemo &#123;</span><br><span class="line">    private static Object resource1 = new Object();//资源 1</span><br><span class="line">    private static Object resource2 = new Object();//资源 2</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            synchronized (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">"get resource1"</span>);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">"waiting get resource2"</span>);</span><br><span class="line">                synchronized (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">"get resource2"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"线程 1"</span>).start();</span><br><span class="line"></span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            synchronized (resource2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">"get resource2"</span>);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">"waiting get resource1"</span>);</span><br><span class="line">                synchronized (resource1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">"get resource1"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"线程 2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread[线程 1,5,main]get resource1</span><br><span class="line">Thread[线程 2,5,main]get resource2</span><br><span class="line">Thread[线程 1,5,main]waiting get resource2</span><br><span class="line">Thread[线程 2,5,main]waiting get resource1</span><br></pre></td></tr></table></figure><p>线程1以resource1作为同步监视器，即可以轻松获取resource1同时也锁定了resource1，此时调用sleep让线程1等待1秒钟；此时线程2开始执行，他以resource2作为同步监视器同时也锁定了resource2，此时调用sleep让线程2等待1秒钟；而此时线程1等待1秒已经结束了，当他想要获取resource2时发现resource2已经被线程2锁定了，同理线程2结束等待后想要获取resource1时发现resource1已经被线程1锁定了。那么两者都无法同时获取对方的线程，便进入死锁状态。<br>因此产生死锁需要具备以下四个条件：</p><p>1、互斥条件：该资源任意一个时刻只能由一个线程占用<br>2、请求和保持条件：一个线程因请求资源而阻塞时，对已获取的资源保持不放<br>3、不剥夺条件：线程已获取的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才使用资源<br>4、循环等待条件：若干进程之前形成一种头尾相接的循环等待资源关系。</p><p>避免死锁就要破坏这四个条件中任意一个：<br>1、破坏互斥条件：这个条件我们无法破坏，因为我们用锁的目的就是想让他们互斥<br>2、破坏请求与保持条件：一次性申请所有资源<br>3、破坏循环等待条件：按照一定顺序申请资源，避免资源的循环使用</p><p>解决方案: 修改线程2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">new Thread(() -&gt; &#123;</span><br><span class="line">    synchronized (resource1) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">"get resource1"</span>);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">"waiting get resource2"</span>);</span><br><span class="line">        synchronized (resource2) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">"get resource2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"线程 2"</span>).start();</span><br></pre></td></tr></table></figure><p>Output：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread[线程 1,5,main]get resource1</span><br><span class="line">Thread[线程 1,5,main]waiting get resource2</span><br><span class="line">Thread[线程 1,5,main]get resource2</span><br><span class="line">Thread[线程 2,5,main]get resource1</span><br><span class="line">Thread[线程 2,5,main]waiting get resource2</span><br><span class="line">Thread[线程 2,5,main]get resource2</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><hr><h4 id="说说sleep-方法和wait-方法的区别？"><a href="#说说sleep-方法和wait-方法的区别？" class="headerlink" title="说说sleep()方法和wait()方法的区别？"></a>说说sleep()方法和wait()方法的区别？</h4><p>两者最主要的区别在于：<strong>sleep 方法没有释放锁，而 wait 方法释放了锁</strong></p><ul><li>两者都可以暂停线程的执行</li><li>wait()通常用于线程间交互/通信，sleep()通常用户暂停执行</li><li>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。</li></ul><hr><h4 id="调用start-方法会执行run-方法，为什么不能直接调用run-方法？"><a href="#调用start-方法会执行run-方法，为什么不能直接调用run-方法？" class="headerlink" title="调用start()方法会执行run()方法，为什么不能直接调用run()方法？"></a>调用start()方法会执行run()方法，为什么不能直接调用run()方法？</h4><p>new一个Thread，线程进入了新建状态；调用start()方法，会启用一个线程并使线程进入就绪状态，当分配到时间片后就可以开始执行。start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这才是真正的多线程工作。而直接执行run()方法，会吧run()方法当做一个main线程下的一个普通方法去执行，并不会在某个线程中执行他。<br><strong>总结：调用start方法可以启动线程并使线程进入就绪状态，而run()方法只是Thread的一个普通方法调用，还是在main主线程里执行，并不会在一个新线程中执行</strong></p><hr><h4 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h4><p>synchronized关键字解决多个线程之间访问资源的同步性，synchronized关键字可以保证它修饰的方法或代码块在任意时刻只能有一个线程执行。<br>synchronized关键字最主要的三种使用方式：</p><ul><li><p><strong>修饰实例方法</strong>： 给当前对象加锁，进入同步代码块前要获取当前对象实例的锁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 此处的`synchronized`就相当于`synchronized(this)`，锁定的是当前对象</span><br><span class="line">public synchronized void <span class="function"><span class="title">add</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修饰静态方法</strong>： 给当前类加锁（因为静态方法没有this），会作用于当前类的所有对象实例，因为静态成员不属于任何一个实例对象，是一个类成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 此处的`synchronized`就相当于`synzhronized(T.class)`，(T的当前类)</span><br><span class="line">public synchronized static void <span class="function"><span class="title">add</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修饰代码块</strong>：指定加锁对象，对给定对象加锁，进入同步代码块之前要获取给定对象的锁</p></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
